{
	"AppCloseApp()": {
	  "prefix": "AppCloseApp",
	  "body": [
		"AppCloseApp()"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppClearBlock()": {
	  "prefix": "AppClearBlock",
	  "body": [
		"AppClearBlock()"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppDataValid()": {
	  "prefix": "AppDataValid",
	  "body": [
		"AppDataValid()"
	  ],
	  "description": "Namespace: APP\nReturns: int\n"
	},
	"AppCloseBlock()": {
	  "prefix": "AppCloseBlock",
	  "body": [
		"AppCloseBlock()"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppGetDeletedFileStatus()": {
	  "prefix": "AppGetDeletedFileStatus",
	  "body": [
		"AppGetDeletedFileStatus()"
	  ],
	  "description": "Namespace: APP\nReturns: Any\n"
	},
	"AppDeleteAppData()": {
	  "prefix": "AppDeleteAppData",
	  "body": [
		"AppDeleteAppData(${1:char* appName})"
	  ],
	  "description": "Namespace: APP\nReturns: BOOL\n"
	},
	"AppGetInt()": {
	  "prefix": "AppGetInt",
	  "body": [
		"AppGetInt(${1:ScrHandle property})"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppGetFloat()": {
	  "prefix": "AppGetFloat",
	  "body": [
		"AppGetFloat(${1:char* property})"
	  ],
	  "description": "Namespace: APP\nReturns: float\n"
	},
	"AppHasLinkedSocialClubAccount()": {
	  "prefix": "AppHasLinkedSocialClubAccount",
	  "body": [
		"AppHasLinkedSocialClubAccount()"
	  ],
	  "description": "Namespace: APP\nReturns: BOOL\n"
	},
	"AppSaveData()": {
	  "prefix": "AppSaveData",
	  "body": [
		"AppSaveData()"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppGetString()": {
	  "prefix": "AppGetString",
	  "body": [
		"AppGetString(${1:char* property})"
	  ],
	  "description": "Namespace: APP\nReturns: char*\n"
	},
	"AppHasSyncedData()": {
	  "prefix": "AppHasSyncedData",
	  "body": [
		"AppHasSyncedData(${1:char* appName})"
	  ],
	  "description": "Namespace: APP\nReturns: BOOL\n"
	},
	"AppSetBlock()": {
	  "prefix": "AppSetBlock",
	  "body": [
		"AppSetBlock(${1:char* blockName})"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppSetApp()": {
	  "prefix": "AppSetApp",
	  "body": [
		"AppSetApp(${1:char* appName})"
	  ],
	  "description": "Namespace: APP\nReturns: void\n\nCalled in the gamescripts like:  \nAPP::APP_SET_APP(\"car\");  \nAPP::APP_SET_APP(\"dog\");  \n"
	},
	"AppSetInt()": {
	  "prefix": "AppSetInt",
	  "body": [
		"AppSetInt(${1:char* property}, ${2:int value})"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppSetFloat()": {
	  "prefix": "AppSetFloat",
	  "body": [
		"AppSetFloat(${1:char* property}, ${2:float value})"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AppSetString()": {
	  "prefix": "AppSetString",
	  "body": [
		"AppSetString(${1:char* property}, ${2:char* value})"
	  ],
	  "description": "Namespace: APP\nReturns: void\n"
	},
	"AddLineToConversation()": {
	  "prefix": "AddLineToConversation",
	  "body": [
		"AddLineToConversation(${1:int p0}, ${2:char* p1}, ${3:char* p2}, ${4:int p3}, ${5:int p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:int p9}, ${11:BOOL p10}, ${12:BOOL p11}, ${13:BOOL p12})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nNOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,  \n_GET_TEXT_SUBSTRING and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.  \np0 is -1, 0   \np1 is a char or string (whatever you wanna call it)  \np2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop  \np3 is again -1, 0 - 35   \np4 is again -1, 0 - 35   \np5 is either 0 or 1 (bool ?)  \np6 is either 0 or 1 (The func to determine this is bool)  \np7 is either 0 or 1 (The func to determine this is bool)  \np8 is either 0 or 1 (The func to determine this is bool)  \np9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)  \np10 is either 0 or 1 (The func to determine this is bool)  \np11 is either 0 or 1 (The func to determine this is bool)  \np12 is unknown as in TU27 X360 scripts it only goes to p11.  \n"
	},
	"AudioIsScriptedMusicPlaying()": {
	  "prefix": "AudioIsScriptedMusicPlaying",
	  "body": [
		"AudioIsScriptedMusicPlaying()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"AddPedToConversation()": {
	  "prefix": "AddPedToConversation",
	  "body": [
		"AddPedToConversation(${1:Any p0}, ${2:Any ped}, ${3:char* p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\n4 calls in the b617d scripts. The only one with p0 and p2 in clear text:  \nAUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, \"DINAPOLI\");  \n=================================================  \nOne of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.  \nBased on it asking if does_entity_exist for the global I have determined that p1 is, in fact, the ped, but could be wrong.  \n"
	},
	"BlipSiren()": {
	  "prefix": "BlipSiren",
	  "body": [
		"BlipSiren(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nPlays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.  \nOnly works on vehicles with a police siren.  \n"
	},
	"N_0x49b99bf3fda89a7a()": {
	  "prefix": "N_0x49b99bf3fda89a7a",
	  "body": "N_0x49b99bf3fda89a7a",
	  "description": "OLD NAME, PLEASE USE CanPedSpeak INSTEAD!"
	},
	"CanPedSpeak()": {
	  "prefix": "CanPedSpeak",
	  "body": [
		"CanPedSpeak(${1:Ped ped}, ${2:char* speechName}, ${3:BOOL unk})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nChecks if the ped can play the speech or has the speech file, last parameter is usually 0  \n\nOld name: N_0x49b99bf3fda89a7a"
	},
	"CancelMusicEvent()": {
	  "prefix": "CancelMusicEvent",
	  "body": [
		"CancelMusicEvent(${1:char* eventName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n"
	},
	"ClearAllBrokenGlass()": {
	  "prefix": "ClearAllBrokenGlass",
	  "body": [
		"ClearAllBrokenGlass()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nRemoves broken glass particles.  \n"
	},
	"ClearAmbientZoneListState()": {
	  "prefix": "ClearAmbientZoneListState",
	  "body": [
		"ClearAmbientZoneListState(${1:Any* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"CreateNewScriptedConversation()": {
	  "prefix": "CreateNewScriptedConversation",
	  "body": [
		"CreateNewScriptedConversation()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"ClearAmbientZoneState()": {
	  "prefix": "ClearAmbientZoneState",
	  "body": [
		"ClearAmbientZoneState(${1:char* zoneName}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nThis function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(char* zoneName, bool p1, Any p2);  \nStill needs more research.   \nHere are the names I've found: pastebin.com/AfA0Qjyv  \nNew Ambient Zone List (Combind with old): pastebin.com/h8BsKgUD -DasChaos  \n"
	},
	"N_0xb4f90faf7670b16f()": {
	  "prefix": "N_0xb4f90faf7670b16f",
	  "body": "N_0xb4f90faf7670b16f",
	  "description": "OLD NAME, PLEASE USE DisablePoliceReports INSTEAD!"
	},
	"DisablePoliceReports()": {
	  "prefix": "DisablePoliceReports",
	  "body": [
		"DisablePoliceReports()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nOld name: N_0xb4f90faf7670b16f"
	},
	"DisablePedPainAudio()": {
	  "prefix": "DisablePedPainAudio",
	  "body": [
		"DisablePedPainAudio(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x153973ab99fe8980()": {
	  "prefix": "N_0x153973ab99fe8980",
	  "body": "N_0x153973ab99fe8980",
	  "description": "OLD NAME, PLEASE USE DynamicMixerRelatedFn INSTEAD!"
	},
	"DynamicMixerRelatedFn()": {
	  "prefix": "DynamicMixerRelatedFn",
	  "body": [
		"DynamicMixerRelatedFn(${1:Entity p0}, ${2:char* p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nADD_E* (most likely ADD_ENTITY_*)  \nAll found occurrences in b678d:  \npastebin.com/ceu67jz8  \nStill not sure on the functionality of this native but it has something to do with dynamic mixer groups defined in dynamix.dat15  \n\nOld name: N_0x153973ab99fe8980"
	},
	"N_0x4f0c413926060b38()": {
	  "prefix": "N_0x4f0c413926060b38",
	  "body": "N_0x4f0c413926060b38",
	  "description": "OLD NAME, PLEASE USE ForceVehicleEngineAudio INSTEAD!"
	},
	"SetVehicleAudio()": {
	  "prefix": "SetVehicleAudio",
	  "body": "SetVehicleAudio",
	  "description": "OLD NAME, PLEASE USE ForceVehicleEngineAudio INSTEAD!"
	},
	"ForceVehicleEngineAudio()": {
	  "prefix": "ForceVehicleEngineAudio",
	  "body": [
		"ForceVehicleEngineAudio(${1:Vehicle vehicle}, ${2:char* audioName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nThis native sets the audio of the specified vehicle to audioName (p1).  \nUse the audioNameHash found in vehicles.meta  \nExample:  \n_FORCE_VEHICLE_ENGINE_SOUND(veh, \"ADDER\");  \nThe selected vehicle will now have the audio of the Adder.  \nFORCE_VEHICLE_???  \n\nOld name: N_0x4f0c413926060b38\nOld name: SetVehicleAudio"
	},
	"FindRadioStationIndex()": {
	  "prefix": "FindRadioStationIndex",
	  "body": [
		"FindRadioStationIndex(${1:int station})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n"
	},
	"N_0x552369f549563ad5()": {
	  "prefix": "N_0x552369f549563ad5",
	  "body": "N_0x552369f549563ad5",
	  "description": "OLD NAME, PLEASE USE ForceAmbientSiren INSTEAD!"
	},
	"ForceAmbientSiren()": {
	  "prefix": "ForceAmbientSiren",
	  "body": [
		"ForceAmbientSiren(${1:BOOL value})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nif value is set to true, and ambient siren sound will be played.  \n-------------------------------------------------------------------------  \nAppears to enable/disable an audio flag.  \n\nOld name: N_0x552369f549563ad5"
	},
	"GetAudibleMusicTrackTextId()": {
	  "prefix": "GetAudibleMusicTrackTextId",
	  "body": [
		"GetAudibleMusicTrackTextId()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n"
	},
	"GetNetworkIdFromSoundId()": {
	  "prefix": "GetNetworkIdFromSoundId",
	  "body": [
		"GetNetworkIdFromSoundId(${1:int soundId})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n\nCould this be used alongside either,   \nSET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.  \n"
	},
	"FreezeRadioStation()": {
	  "prefix": "FreezeRadioStation",
	  "body": [
		"FreezeRadioStation(${1:char* radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"GetCurrentScriptedConversationLine()": {
	  "prefix": "GetCurrentScriptedConversationLine",
	  "body": [
		"GetCurrentScriptedConversationLine()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"GetMusicPlaytime()": {
	  "prefix": "GetMusicPlaytime",
	  "body": [
		"GetMusicPlaytime()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"GetNumberOfPassengerVoiceVariations()": {
	  "prefix": "GetNumberOfPassengerVoiceVariations",
	  "body": [
		"GetNumberOfPassengerVoiceVariations(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n"
	},
	"GetPlayerHeadsetSoundAlternate()": {
	  "prefix": "GetPlayerHeadsetSoundAlternate",
	  "body": [
		"GetPlayerHeadsetSoundAlternate(${1:char* p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nCalled 5 times in the scripts. All occurrences found in b617d, sorted alphabetically and identical lines removed:   \nAUDIO::GET_PLAYER_HEADSET_SOUND_ALTERNATE(\"INOUT\", 0.0);  \nAUDIO::GET_PLAYER_HEADSET_SOUND_ALTERNATE(\"INOUT\", 1.0);  \n"
	},
	"GetPlayerRadioStationGenre()": {
	  "prefix": "GetPlayerRadioStationGenre",
	  "body": [
		"GetPlayerRadioStationGenre()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"GetPlayerRadioStationIndex()": {
	  "prefix": "GetPlayerRadioStationIndex",
	  "body": [
		"GetPlayerRadioStationIndex()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n\nReturns 255 (radio off index) if the function fails.  \n"
	},
	"GetRadioStationName()": {
	  "prefix": "GetRadioStationName",
	  "body": [
		"GetRadioStationName(${1:int radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: char*\n\nReturns String with radio station name.  \n"
	},
	"GetPlayerRadioStationName()": {
	  "prefix": "GetPlayerRadioStationName",
	  "body": [
		"GetPlayerRadioStationName()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: char*\n\nReturns active radio station name  \n"
	},
	"GetStreamPlayTime()": {
	  "prefix": "GetStreamPlayTime",
	  "body": [
		"GetStreamPlayTime()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n"
	},
	"GetSoundId()": {
	  "prefix": "GetSoundId",
	  "body": [
		"GetSoundId()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n"
	},
	"N_0xacb5dcca1ec76840()": {
	  "prefix": "N_0xacb5dcca1ec76840",
	  "body": "N_0xacb5dcca1ec76840",
	  "description": "OLD NAME, PLEASE USE GetVehicleHornHash INSTEAD!"
	},
	"GetVehicleHornHash()": {
	  "prefix": "GetVehicleHornHash",
	  "body": [
		"GetVehicleHornHash(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Hash\n\nSeems to get the hash of the vehicle's currently installed horn?  \n\nOld name: N_0xacb5dcca1ec76840"
	},
	"N_0x75262fd12d0a1c84()": {
	  "prefix": "N_0x75262fd12d0a1c84",
	  "body": "N_0x75262fd12d0a1c84",
	  "description": "OLD NAME, PLEASE USE GetSoundIdFromNetworkId INSTEAD!"
	},
	"GetSoundIdFromNetworkId()": {
	  "prefix": "GetSoundIdFromNetworkId",
	  "body": [
		"GetSoundIdFromNetworkId(${1:int netId})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n\nOld name: N_0x75262fd12d0a1c84"
	},
	"HintScriptAudioBank()": {
	  "prefix": "HintScriptAudioBank",
	  "body": [
		"HintScriptAudioBank(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"GetVehicleDefaultHorn()": {
	  "prefix": "GetVehicleDefaultHorn",
	  "body": [
		"GetVehicleDefaultHorn(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Hash\n\nReturns hash of default vehicle horn  \nHash is stored in audVehicleAudioEntity  \n"
	},
	"InterruptConversation()": {
	  "prefix": "InterruptConversation",
	  "body": [
		"InterruptConversation(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"IsAmbientSpeechPlaying()": {
	  "prefix": "IsAmbientSpeechPlaying",
	  "body": [
		"IsAmbientSpeechPlaying(${1:Ped p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"HasSoundFinished()": {
	  "prefix": "HasSoundFinished",
	  "body": [
		"HasSoundFinished(${1:int soundId})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsAmbientZoneEnabled()": {
	  "prefix": "IsAmbientZoneEnabled",
	  "body": [
		"IsAmbientZoneEnabled(${1:char* ambientZone})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"HintAmbientAudioBank()": {
	  "prefix": "HintAmbientAudioBank",
	  "body": [
		"HintAmbientAudioBank(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"IsAnySpeechPlaying()": {
	  "prefix": "IsAnySpeechPlaying",
	  "body": [
		"IsAnySpeechPlaying(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsAlarmPlaying()": {
	  "prefix": "IsAlarmPlaying",
	  "body": [
		"IsAlarmPlaying(${1:char* alarmName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nExample:  \nbool playing = AUDIO::IS_ALARM_PLAYING(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\");  \n"
	},
	"IsGameInControlOfMusic()": {
	  "prefix": "IsGameInControlOfMusic",
	  "body": [
		"IsGameInControlOfMusic()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nHardcoded to return 1  \n"
	},
	"IsAmbientSpeechDisabled()": {
	  "prefix": "IsAmbientSpeechDisabled",
	  "body": [
		"IsAmbientSpeechDisabled(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nCommon in the scripts:  \nAUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());  \n"
	},
	"IsMissionCompletePlaying()": {
	  "prefix": "IsMissionCompletePlaying",
	  "body": [
		"IsMissionCompletePlaying()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsMobilePhoneCallOngoing()": {
	  "prefix": "IsMobilePhoneCallOngoing",
	  "body": [
		"IsMobilePhoneCallOngoing()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsAudioSceneActive()": {
	  "prefix": "IsAudioSceneActive",
	  "body": [
		"IsAudioSceneActive(${1:char* scene})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsPedInCurrentConversation()": {
	  "prefix": "IsPedInCurrentConversation",
	  "body": [
		"IsPedInCurrentConversation(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsHornActive()": {
	  "prefix": "IsHornActive",
	  "body": [
		"IsHornActive(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nChecks whether the horn of a vehicle is currently played.  \n"
	},
	"N_0x5f43d83fd6738741()": {
	  "prefix": "N_0x5f43d83fd6738741",
	  "body": "N_0x5f43d83fd6738741",
	  "description": "OLD NAME, PLEASE USE IsPlayerVehicleRadioEnabled INSTEAD!"
	},
	"IsPlayerVehicleRadioEnabled()": {
	  "prefix": "IsPlayerVehicleRadioEnabled",
	  "body": [
		"IsPlayerVehicleRadioEnabled()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nOld name: N_0x5f43d83fd6738741"
	},
	"IsMobilePhoneRadioActive()": {
	  "prefix": "IsMobilePhoneRadioActive",
	  "body": [
		"IsMobilePhoneRadioActive()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsScriptedConversationLoaded()": {
	  "prefix": "IsScriptedConversationLoaded",
	  "body": [
		"IsScriptedConversationLoaded()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsPedRingtonePlaying()": {
	  "prefix": "IsPedRingtonePlaying",
	  "body": [
		"IsPedRingtonePlaying(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsScriptedSpeechPlaying()": {
	  "prefix": "IsScriptedSpeechPlaying",
	  "body": [
		"IsScriptedSpeechPlaying(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsStreamPlaying()": {
	  "prefix": "IsStreamPlaying",
	  "body": [
		"IsStreamPlaying()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"IsRadioRetuning()": {
	  "prefix": "IsRadioRetuning",
	  "body": [
		"IsRadioRetuning()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"LoadStream()": {
	  "prefix": "LoadStream",
	  "body": [
		"LoadStream(${1:char* streamName}, ${2:char* soundSet})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nExample:  \nAUDIO::LOAD_STREAM(\"CAR_STEAL_1_PASSBY\", \"CAR_STEAL_1_SOUNDSET\");  \nAll found occurrences in the b678d decompiled scripts: pastebin.com/3rma6w5w  \nStream names often ends with \"_MASTER\", \"_SMALL\" or \"_STREAM\". Also \"_IN\", \"_OUT\" and numbers.     \nsoundSet is often set to 0 in the scripts. These are common to end the soundSets: \"_SOUNDS\", \"_SOUNDSET\" and numbers.  \n"
	},
	"IsScriptedConversationOngoing()": {
	  "prefix": "IsScriptedConversationOngoing",
	  "body": [
		"IsScriptedConversationOngoing()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"MaxRadioStationIndex()": {
	  "prefix": "MaxRadioStationIndex",
	  "body": [
		"MaxRadioStationIndex()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: int\n"
	},
	"IsVehicleRadioLoud()": {
	  "prefix": "IsVehicleRadioLoud",
	  "body": [
		"IsVehicleRadioLoud(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"N_0x01bb4d577d38bd9e()": {
	  "prefix": "N_0x01bb4d577d38bd9e",
	  "body": [
		"N_0x01bb4d577d38bd9e(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"LoadStreamWithStartOffset()": {
	  "prefix": "LoadStreamWithStartOffset",
	  "body": [
		"LoadStreamWithStartOffset(${1:char* streamName}, ${2:int startOffset}, ${3:char* soundSet})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nExample:  \nAUDIO::LOAD_STREAM_WITH_START_OFFSET(\"STASH_TOXIN_STREAM\", 2400, \"FBI_05_SOUNDS\");  \nOnly called a few times in the scripts.  \n"
	},
	"N_0x031acb6aba18c729()": {
	  "prefix": "N_0x031acb6aba18c729",
	  "body": [
		"N_0x031acb6aba18c729(${1:char* radioStation}, ${2:char* p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\n2 calls in the b617d scripts. This line is called 2 times:  \nAUDIO::_031ACB6ABA18C729(\"RADIO_16_SILVERLAKE\", \"MIRRORPARK_LOCKED\");  \nNote: Another name for RADIO_16_SILVERLAKE is RADIO MIRROR PARK  \n"
	},
	"N_0x0150b6ff25a9e2e5()": {
	  "prefix": "N_0x0150b6ff25a9e2e5",
	  "body": [
		"N_0x0150b6ff25a9e2e5()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x044dbad7a7fa2be5()": {
	  "prefix": "N_0x044dbad7a7fa2be5",
	  "body": [
		"N_0x044dbad7a7fa2be5(${1:char* p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nFound in the b617d scripts, duplicates removed:    \nAUDIO::_044DBAD7A7FA2BE5(\"V_CARSHOWROOM_PS_WINDOW_UNBROKEN\", \"V_CARSHOWROOM_PS_WINDOW_BROKEN\");  \n AUDIO::_044DBAD7A7FA2BE5(\"V_CIA_PS_WINDOW_UNBROKEN\", \"V_CIA_PS_WINDOW_BROKEN\");  \n AUDIO::_044DBAD7A7FA2BE5(\"V_DLC_HEIST_APARTMENT_DOOR_CLOSED\", \"V_DLC_HEIST_APARTMENT_DOOR_OPEN\");  \n AUDIO::_044DBAD7A7FA2BE5(\"V_FINALEBANK_PS_VAULT_INTACT\", \"V_FINALEBANK_PS_VAULT_BLOWN\");  \n AUDIO::_044DBAD7A7FA2BE5(\"V_MICHAEL_PS_BATHROOM_WITH_WINDOW\", \"V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW\");  \n"
	},
	"N_0x02e93c796abd3a97()": {
	  "prefix": "N_0x02e93c796abd3a97",
	  "body": [
		"N_0x02e93c796abd3a97(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x062d5ead4da2fa6a()": {
	  "prefix": "N_0x062d5ead4da2fa6a",
	  "body": [
		"N_0x062d5ead4da2fa6a()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x0b568201dd99f0eb()": {
	  "prefix": "N_0x0b568201dd99f0eb",
	  "body": [
		"N_0x0b568201dd99f0eb(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x0626a247d2405330()": {
	  "prefix": "N_0x0626a247d2405330",
	  "body": [
		"N_0x0626a247d2405330()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x109697e2ffbac8a1()": {
	  "prefix": "N_0x109697e2ffbac8a1",
	  "body": [
		"N_0x109697e2ffbac8a1()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nNot sure what this function does, but it's related to the audio of the local player's vehicle (Considering the surrounding natives, it's probably radio related).  \n"
	},
	"N_0x06c0023bed16dd6b()": {
	  "prefix": "N_0x06c0023bed16dd6b",
	  "body": [
		"N_0x06c0023bed16dd6b(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x12561fcbb62d5b9c()": {
	  "prefix": "N_0x12561fcbb62d5b9c",
	  "body": [
		"N_0x12561fcbb62d5b9c(${1:int p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\np0 is usually 0. sometimes 2. Not sure what this does.  \n"
	},
	"N_0x0be4be946463f917()": {
	  "prefix": "N_0x0be4be946463f917",
	  "body": [
		"N_0x0be4be946463f917(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x149aee66f0cb3a99()": {
	  "prefix": "N_0x149aee66f0cb3a99",
	  "body": [
		"N_0x149aee66f0cb3a99(${1:float p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x11579d940949c49e()": {
	  "prefix": "N_0x11579d940949c49e",
	  "body": [
		"N_0x11579d940949c49e(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x1654f24a88a8e3fe()": {
	  "prefix": "N_0x1654f24a88a8e3fe",
	  "body": [
		"N_0x1654f24a88a8e3fe(${1:char* radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\n3 calls in the b617d scripts, removed duplicate.  \nAUDIO::_1654F24A88A8E3FE(\"RADIO_16_SILVERLAKE\");  \nAUDIO::_1654F24A88A8E3FE(\"RADIO_01_CLASS_ROCK\");  \n"
	},
	"N_0x159b7318403a1cd8()": {
	  "prefix": "N_0x159b7318403a1cd8",
	  "body": [
		"N_0x159b7318403a1cd8(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x19af7ed9b9d23058()": {
	  "prefix": "N_0x19af7ed9b9d23058",
	  "body": [
		"N_0x19af7ed9b9d23058()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nRELEASE_???  \nI say RELEASE_???, as in IDA this native calls the same function as   \n-'RELEASE_MISSION_AUDIO_BANK()'.  \n-'RELEASE_AMBIENT_AUDIO_BANK()'.  \n-'RELEASE_SCRIPT_AUDIO_BANK()'.  \nHowever 'RELEASE_NAMED_SCRIPT_AUDIO_BANK' does not use the same function. So may be, 'RELEASE_???_AUDIO_BANK()'? Doubt it.  \n"
	},
	"N_0x18eb48cfc41f2ea0()": {
	  "prefix": "N_0x18eb48cfc41f2ea0",
	  "body": [
		"N_0x18eb48cfc41f2ea0(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x1c073274e065c6d2()": {
	  "prefix": "N_0x1c073274e065c6d2",
	  "body": [
		"N_0x1c073274e065c6d2(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x1b7abe26cbcbf8c7()": {
	  "prefix": "N_0x1b7abe26cbcbf8c7",
	  "body": [
		"N_0x1b7abe26cbcbf8c7(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x2c96cdb04fca358e()": {
	  "prefix": "N_0x2c96cdb04fca358e",
	  "body": [
		"N_0x2c96cdb04fca358e(${1:float p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x2be4bc731d039d5a()": {
	  "prefix": "N_0x2be4bc731d039d5a",
	  "body": [
		"N_0x2be4bc731d039d5a(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x3a48ab4445d499be()": {
	  "prefix": "N_0x3a48ab4445d499be",
	  "body": [
		"N_0x3a48ab4445d499be()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x33e3c6c6f2f0b506()": {
	  "prefix": "N_0x33e3c6c6f2f0b506",
	  "body": [
		"N_0x33e3c6c6f2f0b506(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x40763ea7b9b783e7()": {
	  "prefix": "N_0x40763ea7b9b783e7",
	  "body": [
		"N_0x40763ea7b9b783e7(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x3d120012440e6683()": {
	  "prefix": "N_0x3d120012440e6683",
	  "body": [
		"N_0x3d120012440e6683()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x43fa0dfc5df87815()": {
	  "prefix": "N_0x43fa0dfc5df87815",
	  "body": [
		"N_0x43fa0dfc5df87815(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x4e404a9361f75bb2()": {
	  "prefix": "N_0x4e404a9361f75bb2",
	  "body": [
		"N_0x4e404a9361f75bb2(${1:char* radioStation}, ${2:char* p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nExamples:  \nAUDIO::_4E404A9361F75BB2(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_KILL_MICHAEL\", 1);  \nAUDIO::_4E404A9361F75BB2(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_KILL_MICHAEL\", 1);  \nAUDIO::_4E404A9361F75BB2(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_KILL_TREVOR\", 1);  \nAUDIO::_4E404A9361F75BB2(\"RADIO_01_CLASS_ROCK\", \"END_CREDITS_SAVE_MICHAEL_TREVOR\", 1);  \nAUDIO::_4E404A9361F75BB2(\"RADIO_01_CLASS_ROCK\", \"OFF_ROAD_RADIO_ROCK_LIST\", 1);  \nAUDIO::_4E404A9361F75BB2(\"RADIO_06_COUNTRY\", \"MAGDEMO2_RADIO_DINGHY\", 1);  \nAUDIO::_4E404A9361F75BB2(\"RADIO_16_SILVERLAKE\", \"SEA_RACE_RADIO_PLAYLIST\", 1);  \nAUDIO::_4E404A9361F75BB2(\"RADIO_01_CLASS_ROCK\", \"OFF_ROAD_RADIO_ROCK_LIST\", 1);  \n"
	},
	"N_0x544810ed9db6bbe6()": {
	  "prefix": "N_0x544810ed9db6bbe6",
	  "body": [
		"N_0x544810ed9db6bbe6()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x59e7b488451f4d3a()": {
	  "prefix": "N_0x59e7b488451f4d3a",
	  "body": [
		"N_0x59e7b488451f4d3a(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x58bb377bec7cd5f4()": {
	  "prefix": "N_0x58bb377bec7cd5f4",
	  "body": [
		"N_0x58bb377bec7cd5f4(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x5b9853296731e88d()": {
	  "prefix": "N_0x5b9853296731e88d",
	  "body": [
		"N_0x5b9853296731e88d(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x5b50abb1fe3746f4()": {
	  "prefix": "N_0x5b50abb1fe3746f4",
	  "body": [
		"N_0x5b50abb1fe3746f4()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x5db8010ee71fdef2()": {
	  "prefix": "N_0x5db8010ee71fdef2",
	  "body": [
		"N_0x5db8010ee71fdef2(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"N_0x5d2bfaab8d956e0e()": {
	  "prefix": "N_0x5d2bfaab8d956e0e",
	  "body": [
		"N_0x5d2bfaab8d956e0e()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x61631f5df50d1c34()": {
	  "prefix": "N_0x61631f5df50d1c34",
	  "body": [
		"N_0x61631f5df50d1c34(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x5e203da2ba15d436()": {
	  "prefix": "N_0x5e203da2ba15d436",
	  "body": [
		"N_0x5e203da2ba15d436(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x6f259f82d873b8b8()": {
	  "prefix": "N_0x6f259f82d873b8b8",
	  "body": [
		"N_0x6f259f82d873b8b8()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x651d3228960d08af()": {
	  "prefix": "N_0x651d3228960d08af",
	  "body": [
		"N_0x651d3228960d08af(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x70b8ec8fc108a634()": {
	  "prefix": "N_0x70b8ec8fc108a634",
	  "body": [
		"N_0x70b8ec8fc108a634(${1:BOOL p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x75773e11ba459e90()": {
	  "prefix": "N_0x75773e11ba459e90",
	  "body": [
		"N_0x75773e11ba459e90(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x6fddad856e36988a()": {
	  "prefix": "N_0x6fddad856e36988a",
	  "body": [
		"N_0x6fddad856e36988a(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x7cdc8c3b89f661b3()": {
	  "prefix": "N_0x7cdc8c3b89f661b3",
	  "body": [
		"N_0x7cdc8c3b89f661b3(${1:Ped playerPed}, ${2:Hash p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nFrom the scripts:  \nAUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"PAIGE_PVG\"));  \n                AUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"TALINA_PVG\"));  \n            AUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"FEMALE_LOST_BLACK_PVG\"));  \n            AUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"FEMALE_LOST_WHITE_PVG\"));  \n"
	},
	"N_0x733adf241531e5c2()": {
	  "prefix": "N_0x733adf241531e5c2",
	  "body": [
		"N_0x733adf241531e5c2(${1:char* name}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAUDIO::_733ADF241531E5C2(\"inTunnel\", 1.0);  \nAUDIO::_733ADF241531E5C2(\"inTunnel\", 0.0);  \nI do not know as of yet what this does, but this was found in the scripts.  \n"
	},
	"N_0x806058bbdc136e06()": {
	  "prefix": "N_0x806058bbdc136e06",
	  "body": [
		"N_0x806058bbdc136e06()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x774bd811f656a122()": {
	  "prefix": "N_0x774bd811f656a122",
	  "body": [
		"N_0x774bd811f656a122(${1:char* radioStation}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\n6 calls in the b617d scripts, removed identical lines:  \nAUDIO::_774BD811F656A122(\"RADIO_01_CLASS_ROCK\", 1);  \nAUDIO::_774BD811F656A122(AUDIO::GET_RADIO_STATION_NAME(10), 0);  \nAUDIO::_774BD811F656A122(AUDIO::GET_RADIO_STATION_NAME(10), 1);  \n"
	},
	"N_0x8a694d7a68f8dc38()": {
	  "prefix": "N_0x8a694d7a68f8dc38",
	  "body": [
		"N_0x8a694d7a68f8dc38(${1:Ped p0}, ${2:char* p1}, ${3:char* p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nOne call found in the b617d scripts:  \nAUDIO::_8A694D7A68F8DC38(NETWORK::NET_TO_PED(l_3989._f26F[0/*1*/]), \"CONV_INTERRUPT_QUIT_IT\", \"LESTER\");  \n"
	},
	"N_0x8bf907833be275de()": {
	  "prefix": "N_0x8bf907833be275de",
	  "body": [
		"N_0x8bf907833be275de(${1:float p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x7ec3c679d0e7e46b()": {
	  "prefix": "N_0x7ec3c679d0e7e46b",
	  "body": [
		"N_0x7ec3c679d0e7e46b(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x9ac92eed5e4793ab()": {
	  "prefix": "N_0x9ac92eed5e4793ab",
	  "body": [
		"N_0x9ac92eed5e4793ab()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nRELEASE_???  \nI say RELEASE_???, as in IDA this native calls the same function as   \n-'RELEASE_MISSION_AUDIO_BANK()'.  \n-'RELEASE_AMBIENT_AUDIO_BANK()'.  \n-'RELEASE_SCRIPT_AUDIO_BANK()'.  \nHowever 'RELEASE_NAMED_SCRIPT_AUDIO_BANK' does not use the same function. So may be, 'RELEASE_???_AUDIO_BANK()'? Doubt it.  \nConsole Hash: 0xE67446E9  \n"
	},
	"N_0x892b6ab8f33606f5()": {
	  "prefix": "N_0x892b6ab8f33606f5",
	  "body": [
		"N_0x892b6ab8f33606f5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xa097ab275061fb21()": {
	  "prefix": "N_0xa097ab275061fb21",
	  "body": [
		"N_0xa097ab275061fb21()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0xa5f377b175a699c5()": {
	  "prefix": "N_0xa5f377b175a699c5",
	  "body": [
		"N_0xa5f377b175a699c5(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x9a53ded9921de990()": {
	  "prefix": "N_0x9a53ded9921de990",
	  "body": [
		"N_0x9a53ded9921de990(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xb4bbfd9cd8b3922b()": {
	  "prefix": "N_0xb4bbfd9cd8b3922b",
	  "body": [
		"N_0xb4bbfd9cd8b3922b(${1:char* p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nFound in the b617d scripts, duplicates removed:   \nAUDIO::_B4BBFD9CD8B3922B(\"V_CARSHOWROOM_PS_WINDOW_UNBROKEN\");  \nAUDIO::_B4BBFD9CD8B3922B(\"V_CIA_PS_WINDOW_UNBROKEN\");  \nAUDIO::_B4BBFD9CD8B3922B(\"V_DLC_HEIST_APARTMENT_DOOR_CLOSED\");  \nAUDIO::_B4BBFD9CD8B3922B(\"V_FINALEBANK_PS_VAULT_INTACT\");  \nAUDIO::_B4BBFD9CD8B3922B(\"V_MICHAEL_PS_BATHROOM_WITH_WINDOW\");  \n"
	},
	"N_0x9d3af56e94c9ae98()": {
	  "prefix": "N_0x9d3af56e94c9ae98",
	  "body": [
		"N_0x9d3af56e94c9ae98(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xb81cf134aeb56ffb()": {
	  "prefix": "N_0xb81cf134aeb56ffb",
	  "body": [
		"N_0xb81cf134aeb56ffb()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xa5342d390cda41d6()": {
	  "prefix": "N_0xa5342d390cda41d6",
	  "body": [
		"N_0xa5342d390cda41d6(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xbef34b1d9624d5dd()": {
	  "prefix": "N_0xbef34b1d9624d5dd",
	  "body": [
		"N_0xbef34b1d9624d5dd(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xc15907d667f7cfb2()": {
	  "prefix": "N_0xc15907d667f7cfb2",
	  "body": [
		"N_0xc15907d667f7cfb2(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xaa19f5572c38b564()": {
	  "prefix": "N_0xaa19f5572c38b564",
	  "body": [
		"N_0xaa19f5572c38b564(${1:Any* p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0xc265df9fb44a9fbd()": {
	  "prefix": "N_0xc265df9fb44a9fbd",
	  "body": [
		"N_0xc265df9fb44a9fbd(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"N_0xb542de8c3d1cb210()": {
	  "prefix": "N_0xb542de8c3d1cb210",
	  "body": [
		"N_0xb542de8c3d1cb210(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xcada5a0d0702381e()": {
	  "prefix": "N_0xcada5a0d0702381e",
	  "body": [
		"N_0xcada5a0d0702381e(${1:char* p0}, ${2:char* soundset})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nOnly call found in the b617d scripts:  \nAUDIO::_CADA5A0D0702381E(\"BACK\", \"HUD_FREEMODE_SOUNDSET\");  \n"
	},
	"N_0xbf4dc1784be94dfa()": {
	  "prefix": "N_0xbf4dc1784be94dfa",
	  "body": [
		"N_0xbf4dc1784be94dfa(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xd01005d2ba2eb778()": {
	  "prefix": "N_0xd01005d2ba2eb778",
	  "body": [
		"N_0xd01005d2ba2eb778(${1:char* p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nSimilar to 0xDDC635D5B3262C56. Enable?  \n"
	},
	"N_0xc1805d05e6d4fe10()": {
	  "prefix": "N_0xc1805d05e6d4fe10",
	  "body": [
		"N_0xc1805d05e6d4fe10(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xd2dccd8e16e20997()": {
	  "prefix": "N_0xd2dccd8e16e20997",
	  "body": [
		"N_0xd2dccd8e16e20997(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xc8ede9bdbccba6d4()": {
	  "prefix": "N_0xc8ede9bdbccba6d4",
	  "body": [
		"N_0xc8ede9bdbccba6d4(${1:Any* p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xda07819e452ffe8f()": {
	  "prefix": "N_0xda07819e452ffe8f",
	  "body": [
		"N_0xda07819e452ffe8f(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xd2cc78cd3d0b50f9()": {
	  "prefix": "N_0xd2cc78cd3d0b50f9",
	  "body": [
		"N_0xd2cc78cd3d0b50f9(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xdd6bcf9e94425df9()": {
	  "prefix": "N_0xdd6bcf9e94425df9",
	  "body": [
		"N_0xdd6bcf9e94425df9()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nTune Backwards... ?  \n"
	},
	"N_0xd57aaae0e2214d11()": {
	  "prefix": "N_0xd57aaae0e2214d11",
	  "body": [
		"N_0xd57aaae0e2214d11()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xe4e6dd5566d28c82()": {
	  "prefix": "N_0xe4e6dd5566d28c82",
	  "body": [
		"N_0xe4e6dd5566d28c82()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xddc635d5b3262c56()": {
	  "prefix": "N_0xddc635d5b3262c56",
	  "body": [
		"N_0xddc635d5b3262c56(${1:char* p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nSimilar to 0xD01005D2BA2EB778. Disable?  \n"
	},
	"N_0xee066c7006c49c0a()": {
	  "prefix": "N_0xee066c7006c49c0a",
	  "body": [
		"N_0xee066c7006c49c0a(${1:Any p0}, ${2:Any p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xe73364db90778ffa()": {
	  "prefix": "N_0xe73364db90778ffa",
	  "body": [
		"N_0xe73364db90778ffa()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0xf1f8157b8c3f171c()": {
	  "prefix": "N_0xf1f8157b8c3f171c",
	  "body": [
		"N_0xf1f8157b8c3f171c(${1:Any p0}, ${2:char* p1}, ${3:char* p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\n2 calls found in the b617d scripts:  \nAUDIO::_F1F8157B8C3F171C(l_A42, \"Franklin_Bike_Rev\", \"BIG_SCORE_3A_SOUNDS\");  \nAUDIO::_F1F8157B8C3F171C(l_166, \"Trevor_Revs_Off\", \"PALETO_SCORE_SETUP_SOUNDS\");  \n"
	},
	"N_0xf154b8d1775b2dec()": {
	  "prefix": "N_0xf154b8d1775b2dec",
	  "body": [
		"N_0xf154b8d1775b2dec(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xf3365489e0dd50f9()": {
	  "prefix": "N_0xf3365489e0dd50f9",
	  "body": [
		"N_0xf3365489e0dd50f9(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xfbe20329593dec9d()": {
	  "prefix": "N_0xfbe20329593dec9d",
	  "body": [
		"N_0xfbe20329593dec9d(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xff266d1d0eb1195d()": {
	  "prefix": "N_0xff266d1d0eb1195d",
	  "body": [
		"N_0xff266d1d0eb1195d()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nTune Forward... ?  \n"
	},
	"OverrideTrevorRage()": {
	  "prefix": "OverrideTrevorRage",
	  "body": [
		"OverrideTrevorRage(${1:Any* p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"OverrideUnderwaterStream()": {
	  "prefix": "OverrideUnderwaterStream",
	  "body": [
		"OverrideUnderwaterStream(${1:Any* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"PauseScriptedConversation()": {
	  "prefix": "PauseScriptedConversation",
	  "body": [
		"PauseScriptedConversation(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"OverrideVehHorn()": {
	  "prefix": "OverrideVehHorn",
	  "body": [
		"OverrideVehHorn(${1:Vehicle vehicle}, ${2:BOOL override}, ${3:int hornHash})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\nOverrides the vehicle's horn hash.\n\nWhen changing this hash on a vehicle, [`_GET_VEHICLE_HORN_HASH`](#_0xACB5DCCA1EC76840) will **not** return the 'overwritten' hash. It will still always return the default horn hash (same as [`GET_VEHICLE_DEFAULT_HORN`](#_0x02165D55000219AC)).\n\nList of possible hashes (found in decompiled scripts):\n\n|        signed |     unsigned |      hex     |\n| ------------: | -----------: | :----------: |\n|  `1604822495` | `1604822495` | `0x5FA7A5DF` |\n| `-1262465009` | `3032502287` | `0xB4C0500F` |\n|  `-889553789` | `3405413507` | `0xCAFA7C83` |\n| `-1557943086` | `2737024210` | `0xA323ACD2` |\n| `-1318696617` | `2976270679` | `0xB1664957` |\n|    `-7740003` | `4287227293` | `0xFF89E59D` |\n| `-1815146967` | `2479820329` | `0x93CF0E29` |\n|  `-339919356` | `3955047940` | `0xEBBD3E04` |\n\nOld description:\n\n\nvehicle - the vehicle whose horn should be overwritten  \nmute - p1 seems to be an option for muting the horn  \np2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?  \n"
	},
	"PlayAmbientSpeech_1()": {
	  "prefix": "PlayAmbientSpeech_1",
	  "body": [
		"PlayAmbientSpeech_1(${1:Ped ped}, ${2:char* speechName}, ${3:char* speechParam})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nPlays ambient speech. See also _0x444180DB.  \nped: The ped to play the ambient speech.  \nspeechName: Name of the speech to play, eg. \"GENERIC_HI\".  \nspeechParam: Can be one of the following:  \nSPEECH_PARAMS_STANDARD  \nSPEECH_PARAMS_ALLOW_REPEAT  \nSPEECH_PARAMS_BEAT  \nSPEECH_PARAMS_FORCE  \nSPEECH_PARAMS_FORCE_FRONTEND  \nSPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND  \nSPEECH_PARAMS_FORCE_NORMAL  \nSPEECH_PARAMS_FORCE_NORMAL_CLEAR  \nSPEECH_PARAMS_FORCE_NORMAL_CRITICAL  \nSPEECH_PARAMS_FORCE_SHOUTED  \nSPEECH_PARAMS_FORCE_SHOUTED_CLEAR  \nSPEECH_PARAMS_FORCE_SHOUTED_CRITICAL  \nSPEECH_PARAMS_FORCE_PRELOAD_ONLY  \nSPEECH_PARAMS_MEGAPHONE  \nSPEECH_PARAMS_HELI  \nSPEECH_PARAMS_FORCE_MEGAPHONE  \nSPEECH_PARAMS_FORCE_HELI  \nSPEECH_PARAMS_INTERRUPT  \nSPEECH_PARAMS_INTERRUPT_SHOUTED  \nSPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR  \nSPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL  \nSPEECH_PARAMS_INTERRUPT_NO_FORCE  \nSPEECH_PARAMS_INTERRUPT_FRONTEND  \nSPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND  \nSPEECH_PARAMS_ADD_BLIP  \nSPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT  \nSPEECH_PARAMS_ADD_BLIP_FORCE  \nSPEECH_PARAMS_ADD_BLIP_SHOUTED  \nSPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE  \nSPEECH_PARAMS_ADD_BLIP_INTERRUPT  \nSPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE  \nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED  \nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR  \nSPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL  \nSPEECH_PARAMS_SHOUTED  \nSPEECH_PARAMS_SHOUTED_CLEAR  \nSPEECH_PARAMS_SHOUTED_CRITICAL  \nNote: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL  \nFull list of speeches and voices names by some spanish shitbag: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992  \n"
	},
	"PlayAmbientSpeech_2()": {
	  "prefix": "PlayAmbientSpeech_2",
	  "body": [
		"PlayAmbientSpeech_2(${1:Ped ped}, ${2:char* speechName}, ${3:char* speechParam})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nPlays ambient speech. See also _0x5C57B85D.  \nSee _PLAY_AMBIENT_SPEECH1 for parameter specifications.  \nFull list of speeches and voices names: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992  \n"
	},
	"PlayAmbientSpeechWithVoice()": {
	  "prefix": "PlayAmbientSpeechWithVoice",
	  "body": [
		"PlayAmbientSpeechWithVoice(${1:Ped p0}, ${2:char* speechName}, ${3:char* voiceName}, ${4:char* speechParam}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nThis is the same as _PLAY_AMBIENT_SPEECH1 and _PLAY_AMBIENT_SPEECH2 but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.  \nEX (C#):  \nGTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, \"GENERIC_INSULT_HIGH\", \"s_m_y_sheriff_01_white_full_01\", \"SPEECH_PARAMS_FORCE_SHOUTED\", 0);  \nThe first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.  \nFull list of speeches and voices names: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992  \n"
	},
	"N_0xed640017ed337e45()": {
	  "prefix": "N_0xed640017ed337e45",
	  "body": "N_0xed640017ed337e45",
	  "description": "OLD NAME, PLEASE USE PlayAmbientSpeechAtCoords INSTEAD!"
	},
	"PlayAmbientSpeechAtCoords()": {
	  "prefix": "PlayAmbientSpeechAtCoords",
	  "body": [
		"PlayAmbientSpeechAtCoords(${1:char* p0}, ${2:char* p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:char* p5})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nOld name: N_0xed640017ed337e45"
	},
	"PlayEndCreditsMusic()": {
	  "prefix": "PlayEndCreditsMusic",
	  "body": [
		"PlayEndCreditsMusic(${1:BOOL play})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"PlayMissionCompleteAudio()": {
	  "prefix": "PlayMissionCompleteAudio",
	  "body": [
		"PlayMissionCompleteAudio(${1:char* audioName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nCalled 38 times in the scripts. There are 5 different audioNames used.   \nOne unknown removed below.   \nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"DEAD\");  \nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"FRANKLIN_BIG_01\");  \nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"GENERIC_FAILED\");  \nAUDIO::PLAY_MISSION_COMPLETE_AUDIO(\"TREVOR_SMALL_01\");  \n"
	},
	"PlayPain()": {
	  "prefix": "PlayPain",
	  "body": [
		"PlayPain(${1:Ped ped}, ${2:int painID}, ${3:int p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nNeeds another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);  \nLast 2 parameters always seem to be 0.  \nEX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);  \nKnown Pain IDs  \n________________________  \n1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)  \n6 - Scream (Short)  \n7 - Scared Scream (Kinda Long)  \n8 - On Fire  \n"
	},
	"PlayPedRingtone()": {
	  "prefix": "PlayPedRingtone",
	  "body": [
		"PlayPedRingtone(${1:char* ringtoneName}, ${2:Ped ped}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny  \nAUDIO::PLAY_PED_RINGTONE(\"Remote_Ring\", PLAYER::PLAYER_PED_ID(), 1);  \nAUDIO::PLAY_PED_RINGTONE(\"Dial_and_Remote_Ring\", PLAYER::PLAYER_PED_ID(), 1);  \n"
	},
	"PlaySound()": {
	  "prefix": "PlaySound",
	  "body": [
		"PlaySound(${1:Player soundId}, ${2:char* audioName}, ${3:char* audioRef}, ${4:BOOL p3}, ${5:Any p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ  \n"
	},
	"PlayPoliceReport()": {
	  "prefix": "PlayPoliceReport",
	  "body": [
		"PlayPoliceReport(${1:char* name}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n\nPlease change to void. (Does not return anything!)  \nPlays the given police radio message.  \nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr  \n"
	},
	"PlaySoundFromCoord()": {
	  "prefix": "PlaySoundFromCoord",
	  "body": [
		"PlaySoundFromCoord(${1:int soundId}, ${2:char* audioName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:char* audioRef}, ${7:BOOL p6}, ${8:int range}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW  \ngtaforums.com/topic/795622-audio-for-mods  \n"
	},
	"PlaySoundFromEntity()": {
	  "prefix": "PlaySoundFromEntity",
	  "body": [
		"PlaySoundFromEntity(${1:int soundId}, ${2:char* audioName}, ${3:Entity entity}, ${4:char* audioRef}, ${5:BOOL p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0   \nNo changes made in b678d.  \ngtaforums.com/topic/795622-audio-for-mods  \n"
	},
	"PlayStreamFromObject()": {
	  "prefix": "PlayStreamFromObject",
	  "body": [
		"PlayStreamFromObject(${1:Object object})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nUsed with AUDIO::LOAD_STREAM  \nExample from finale_heist2b.c4:  \nAI::TASK_SYNCHRONIZED_SCENE(l_4C8[2/*14*/], l_4C8[2/*14*/]._f7, l_30A, \"push_out_vault_l\", 4.0, -1.5, 5, 713, 4.0, 0);  \n                    PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/*14*/]._f7, 0.0);  \n                    PED::_2208438012482A1A(l_4C8[2/*14*/], 0, 0);  \n                    PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/*14*/], 38, 1);  \n                    PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/*14*/], 1);  \n                    if (AUDIO::LOAD_STREAM(\"Gold_Cart_Push_Anim_01\", \"BIG_SCORE_3B_SOUNDS\")) {  \n                        AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/*1*/]);  \n                    }  \n"
	},
	"PlaySoundFrontend()": {
	  "prefix": "PlaySoundFrontend",
	  "body": [
		"PlaySoundFrontend(${1:int soundId}, ${2:char* audioName}, ${3:char* audioRef}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nlist: pastebin.com/DCeRiaLJ  \nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/0neZdsZ5  \n"
	},
	"N_0x89049dd63c08b5d1()": {
	  "prefix": "N_0x89049dd63c08b5d1",
	  "body": "N_0x89049dd63c08b5d1",
	  "description": "OLD NAME, PLEASE USE PlayStreamFromPed INSTEAD!"
	},
	"PlayStreamFromPed()": {
	  "prefix": "PlayStreamFromPed",
	  "body": [
		"PlayStreamFromPed(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nOld name: N_0x89049dd63c08b5d1"
	},
	"PlayStreamFromVehicle()": {
	  "prefix": "PlayStreamFromVehicle",
	  "body": [
		"PlayStreamFromVehicle(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"PlayStreamFrontend()": {
	  "prefix": "PlayStreamFrontend",
	  "body": [
		"PlayStreamFrontend()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"PlaySynchronizedAudioEvent()": {
	  "prefix": "PlaySynchronizedAudioEvent",
	  "body": [
		"PlaySynchronizedAudioEvent(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"PlayVehicleDoorCloseSound()": {
	  "prefix": "PlayVehicleDoorCloseSound",
	  "body": [
		"PlayVehicleDoorCloseSound(${1:Vehicle vehicle}, ${2:int p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nThis native only comes up once. And in that one instance, p1 is \"1\".  \n"
	},
	"PlayVehicleDoorOpenSound()": {
	  "prefix": "PlayVehicleDoorOpenSound",
	  "body": [
		"PlayVehicleDoorOpenSound(${1:Vehicle vehicle}, ${2:int p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\np1 appears to only be \"0\" or \"3\". I personally use \"0\" as p1.  \n"
	},
	"PreloadScriptConversation()": {
	  "prefix": "PreloadScriptConversation",
	  "body": [
		"PreloadScriptConversation(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"PreloadScriptPhoneConversation()": {
	  "prefix": "PreloadScriptPhoneConversation",
	  "body": [
		"PreloadScriptPhoneConversation(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"PrepareAlarm()": {
	  "prefix": "PrepareAlarm",
	  "body": [
		"PrepareAlarm(${1:char* alarmName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nExample:  \nbool prepareAlarm = AUDIO::PREPARE_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\");  \n"
	},
	"PrepareMusicEvent()": {
	  "prefix": "PrepareMusicEvent",
	  "body": [
		"PrepareMusicEvent(${1:char* eventName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n"
	},
	"PrepareSynchronizedAudioEvent()": {
	  "prefix": "PrepareSynchronizedAudioEvent",
	  "body": [
		"PrepareSynchronizedAudioEvent(${1:char* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"PrepareSynchronizedAudioEventForScene()": {
	  "prefix": "PrepareSynchronizedAudioEventForScene",
	  "body": [
		"PrepareSynchronizedAudioEventForScene(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"RegisterScriptWithAudio()": {
	  "prefix": "RegisterScriptWithAudio",
	  "body": [
		"RegisterScriptWithAudio(${1:int p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"ReleaseAmbientAudioBank()": {
	  "prefix": "ReleaseAmbientAudioBank",
	  "body": [
		"ReleaseAmbientAudioBank()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"ReleaseMissionAudioBank()": {
	  "prefix": "ReleaseMissionAudioBank",
	  "body": [
		"ReleaseMissionAudioBank()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"ReleaseNamedScriptAudioBank()": {
	  "prefix": "ReleaseNamedScriptAudioBank",
	  "body": [
		"ReleaseNamedScriptAudioBank(${1:char* audioBank})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"ReleaseSoundId()": {
	  "prefix": "ReleaseSoundId",
	  "body": [
		"ReleaseSoundId(${1:int soundId})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"ReleaseScriptAudioBank()": {
	  "prefix": "ReleaseScriptAudioBank",
	  "body": [
		"ReleaseScriptAudioBank()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"RequestMissionAudioBank()": {
	  "prefix": "RequestMissionAudioBank",
	  "body": [
		"RequestMissionAudioBank(${1:char* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nAll occurrences and usages found in b617d: pastebin.com/NzZZ2Tmm  \n"
	},
	"RequestAmbientAudioBank()": {
	  "prefix": "RequestAmbientAudioBank",
	  "body": [
		"RequestAmbientAudioBank(${1:char* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nAll occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/XZ1tmGEz  \n"
	},
	"ResetPedAudioFlags()": {
	  "prefix": "ResetPedAudioFlags",
	  "body": [
		"ResetPedAudioFlags(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"RequestScriptAudioBank()": {
	  "prefix": "RequestScriptAudioBank",
	  "body": [
		"RequestScriptAudioBank(${1:char* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nAll occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/AkmDAVn6  \n"
	},
	"RestartScriptedConversation()": {
	  "prefix": "RestartScriptedConversation",
	  "body": [
		"RestartScriptedConversation()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"ResetTrevorRage()": {
	  "prefix": "ResetTrevorRage",
	  "body": [
		"ResetTrevorRage()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetAggressiveHorns()": {
	  "prefix": "SetAggressiveHorns",
	  "body": [
		"SetAggressiveHorns(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nMakes pedestrians sound their horn longer, faster and more agressive when they use their horn.  \n"
	},
	"SetAmbientVoiceName()": {
	  "prefix": "SetAmbientVoiceName",
	  "body": [
		"SetAmbientVoiceName(${1:Ped ped}, ${2:char* name})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAudio List  \ngtaforums.com/topic/795622-audio-for-mods/  \nAll found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/FTeAj4yZ  \nYes  \n"
	},
	"SetAmbientZoneListStatePersistent()": {
	  "prefix": "SetAmbientZoneListStatePersistent",
	  "body": [
		"SetAmbientZoneListStatePersistent(${1:char* ambientZone}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAll occurrences found in b617d, sorted alphabetically and identical lines removed: pastebin.com/WkXDGgQL  \nNew Ambient Zone List (Combind with old): pastebin.com/h8BsKgUD -DasChaos  \n"
	},
	"SetAmbientZoneListState()": {
	  "prefix": "SetAmbientZoneListState",
	  "body": [
		"SetAmbientZoneListState(${1:char* p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetAmbientZoneState()": {
	  "prefix": "SetAmbientZoneState",
	  "body": [
		"SetAmbientZoneState(${1:Any* p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetAmbientZoneStatePersistent()": {
	  "prefix": "SetAmbientZoneStatePersistent",
	  "body": [
		"SetAmbientZoneStatePersistent(${1:char* ambientZone}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAll occurrences found in b617d, sorted alphabetically and identical lines removed: pastebin.com/jYvw7N1S  \nNew Ambient Zone List (Combind with old): pastebin.com/h8BsKgUD -DasChaos  \n"
	},
	"SetAnimalMood()": {
	  "prefix": "SetAnimalMood",
	  "body": [
		"SetAnimalMood(${1:Ped animal}, ${2:int mood})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nmood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.  \n"
	},
	"SetAudioFlag()": {
	  "prefix": "SetAudioFlag",
	  "body": [
		"SetAudioFlag(${1:char* flagName}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nPossible flag names:  \n\"ActivateSwitchWheelAudio\"  \n\"AllowAmbientSpeechInSlowMo\"  \n\"AllowCutsceneOverScreenFade\"  \n\"AllowForceRadioAfterRetune\"  \n\"AllowPainAndAmbientSpeechToPlayDuringCutscene\"  \n\"AllowPlayerAIOnMission\"  \n\"AllowPoliceScannerWhenPlayerHasNoControl\"  \n\"AllowRadioDuringSwitch\"  \n\"AllowRadioOverScreenFade\"  \n\"AllowScoreAndRadio\"  \n\"AllowScriptedSpeechInSlowMo\"  \n\"AvoidMissionCompleteDelay\"  \n\"DisableAbortConversationForDeathAndInjury\"  \n\"DisableAbortConversationForRagdoll\"  \n\"DisableBarks\"  \n\"DisableFlightMusic\"  \n\"DisableReplayScriptStreamRecording\"  \n\"EnableHeadsetBeep\"  \n\"ForceConversationInterrupt\"  \n\"ForceSeamlessRadioSwitch\"  \n\"ForceSniperAudio\"  \n\"FrontendRadioDisabled\"  \n\"HoldMissionCompleteWhenPrepared\"  \n\"IsDirectorModeActive\"  \n\"IsPlayerOnMissionForSpeech\"  \n\"ListenerReverbDisabled\"  \n\"LoadMPData\"  \n\"MobileRadioInGame\"  \n\"OnlyAllowScriptTriggerPoliceScanner\"  \n\"PlayMenuMusic\"  \n\"PoliceScannerDisabled\"  \n\"ScriptedConvListenerMaySpeak\"  \n\"SpeechDucksScore\"  \n\"SuppressPlayerScubaBreathing\"  \n\"WantedMusicDisabled\"  \n\"WantedMusicOnMission\"  \n-------------------------------  \nNo added flag names between b393d and b573d, including b573d.  \n#######################################################################  \n\"IsDirectorModeActive\" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.  \n-----------------------------------------------------------------------  \nAll flag IDs and hashes:  \nID: 01 | Hash: 0x20A7858F  \nID: 02 | Hash: 0xA11C2259  \nID: 03 | Hash: 0x08DE4700  \nID: 04 | Hash: 0x989F652F  \nID: 05 | Hash: 0x3C9E76BA  \nID: 06 | Hash: 0xA805FEB0  \nID: 07 | Hash: 0x4B94EA26  \nID: 08 | Hash: 0x803ACD34  \nID: 09 | Hash: 0x7C741226  \nID: 10 | Hash: 0x31DB9EBD  \nID: 11 | Hash: 0xDF386F18  \nID: 12 | Hash: 0x669CED42  \nID: 13 | Hash: 0x51F22743  \nID: 14 | Hash: 0x2052B35C  \nID: 15 | Hash: 0x071472DC  \nID: 16 | Hash: 0xF9928BCC  \nID: 17 | Hash: 0x7ADBDD48  \nID: 18 | Hash: 0xA959BA1A  \nID: 19 | Hash: 0xBBE89B60  \nID: 20 | Hash: 0x87A08871  \nID: 21 | Hash: 0xED1057CE  \nID: 22 | Hash: 0x1584AD7A  \nID: 23 | Hash: 0x8582CFCB  \nID: 24 | Hash: 0x7E5E2FB0  \nID: 25 | Hash: 0xAE4F72DB  \nID: 26 | Hash: 0x5D16D1FA  \nID: 27 | Hash: 0x06B2F4B8  \nID: 28 | Hash: 0x5D4CDC96  \nID: 29 | Hash: 0x8B5A48BA  \nID: 30 | Hash: 0x98FBD539  \nID: 31 | Hash: 0xD8CB0473  \nID: 32 | Hash: 0x5CBB4874  \nID: 33 | Hash: 0x2E9F93A9  \nID: 34 | Hash: 0xD93BEA86  \nID: 35 | Hash: 0x92109B7D  \nID: 36 | Hash: 0xB7EC9E4D  \nID: 37 | Hash: 0xCABDBB1D  \nID: 38 | Hash: 0xB3FD4A52  \nID: 39 | Hash: 0x370D94E5  \nID: 40 | Hash: 0xA0F7938F  \nID: 41 | Hash: 0xCBE1CE81  \nID: 42 | Hash: 0xC27F1271  \nID: 43 | Hash: 0x9E3258EB  \nID: 44 | Hash: 0x551CDA5B  \nID: 45 | Hash: 0xCB6D663C  \nID: 46 | Hash: 0x7DACE87F  \nID: 47 | Hash: 0xF9DE416F  \nID: 48 | Hash: 0x882E6E9E  \nID: 49 | Hash: 0x16B447E7  \nID: 50 | Hash: 0xBD867739  \nID: 51 | Hash: 0xA3A58604  \nID: 52 | Hash: 0x7E046BBC  \nID: 53 | Hash: 0xD95FDB98  \nID: 54 | Hash: 0x5842C0ED  \nID: 55 | Hash: 0x285FECC6  \nID: 56 | Hash: 0x9351AC43  \nID: 57 | Hash: 0x50032E75  \nID: 58 | Hash: 0xAE6D0D59  \nID: 59 | Hash: 0xD6351785  \nID: 60 | Hash: 0xD25D71BC  \nID: 61 | Hash: 0x1F7F6423  \nID: 62 | Hash: 0xE24C3AA6  \nID: 63 | Hash: 0xBFFDD2B7  \n"
	},
	"SetAudioSceneVariable()": {
	  "prefix": "SetAudioSceneVariable",
	  "body": [
		"SetAudioSceneVariable(${1:char* scene}, ${2:char* variable}, ${3:float value})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetAudioVehiclePriority()": {
	  "prefix": "SetAudioVehiclePriority",
	  "body": [
		"SetAudioVehiclePriority(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetCutsceneAudioOverride()": {
	  "prefix": "SetCutsceneAudioOverride",
	  "body": [
		"SetCutsceneAudioOverride(${1:char* p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAll occurrences found in b617d, sorted alphabetically and identical lines removed:   \nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_AK\");  \nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_CUSTOM\");  \nAUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(\"_TOOTHLESS\");  \n"
	},
	"SetEmitterRadioStation()": {
	  "prefix": "SetEmitterRadioStation",
	  "body": [
		"SetEmitterRadioStation(${1:char* emitterName}, ${2:char* radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetFrontendRadioActive()": {
	  "prefix": "SetFrontendRadioActive",
	  "body": [
		"SetFrontendRadioActive(${1:BOOL active})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetGpsActive()": {
	  "prefix": "SetGpsActive",
	  "body": [
		"SetGpsActive(${1:BOOL active})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetInitialPlayerStation()": {
	  "prefix": "SetInitialPlayerStation",
	  "body": [
		"SetInitialPlayerStation(${1:char* radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetHornEnabled()": {
	  "prefix": "SetHornEnabled",
	  "body": [
		"SetHornEnabled(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetMicrophonePosition()": {
	  "prefix": "SetMicrophonePosition",
	  "body": [
		"SetMicrophonePosition(${1:BOOL p0}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float x3}, ${9:float y3}, ${10:float z3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nIf this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..  \n"
	},
	"SetMobilePhoneRadioState()": {
	  "prefix": "SetMobilePhoneRadioState",
	  "body": [
		"SetMobilePhoneRadioState(${1:BOOL state})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetMobileRadioEnabledDuringGameplay()": {
	  "prefix": "SetMobileRadioEnabledDuringGameplay",
	  "body": [
		"SetMobileRadioEnabledDuringGameplay(${1:BOOL Toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nEnables Radio on phone.  \n"
	},
	"SetPedIsDrunk()": {
	  "prefix": "SetPedIsDrunk",
	  "body": [
		"SetPedIsDrunk(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nSets the ped drunk sounds.  Only works with PLAYER_PED_ID  \n====================================================  \nAs mentioned above, this only sets the drunk sound to ped/player.  \nTo give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET  \nBelow is an example  \nif (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, \"move_m@drunk@verydrunk\"))  \n                {  \n                    Function.Call(Hash.REQUEST_ANIM_SET, \"move_m@drunk@verydrunk\");  \n                }  \n                Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, \"move_m@drunk@verydrunk\", 0x3E800000);  \nAnd to stop the effect use  \nRESET_PED_MOVEMENT_CLIPSET  \n"
	},
	"N_0x7a73d05a607734c7()": {
	  "prefix": "N_0x7a73d05a607734c7",
	  "body": "N_0x7a73d05a607734c7",
	  "description": "OLD NAME, PLEASE USE SetPedMute INSTEAD!"
	},
	"SetPedMute()": {
	  "prefix": "SetPedMute",
	  "body": [
		"SetPedMute(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nStops speech.  \n\nOld name: N_0x7a73d05a607734c7"
	},
	"N_0x40cf0d12d142a9e8()": {
	  "prefix": "N_0x40cf0d12d142a9e8",
	  "body": "N_0x40cf0d12d142a9e8",
	  "description": "OLD NAME, PLEASE USE SetPedScream INSTEAD!"
	},
	"SetPedScream()": {
	  "prefix": "SetPedScream",
	  "body": [
		"SetPedScream(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nAssigns some ambient voice to the ped.  \n\nOld name: N_0x40cf0d12d142a9e8"
	},
	"N_0x4ada3f19be4a6047()": {
	  "prefix": "N_0x4ada3f19be4a6047",
	  "body": "N_0x4ada3f19be4a6047",
	  "description": "OLD NAME, PLEASE USE SetPedTalk INSTEAD!"
	},
	"SetPedTalk()": {
	  "prefix": "SetPedTalk",
	  "body": [
		"SetPedTalk(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nSpeech related.  \n\nOld name: N_0x4ada3f19be4a6047"
	},
	"SetRadioAutoUnfreeze()": {
	  "prefix": "SetRadioAutoUnfreeze",
	  "body": [
		"SetRadioAutoUnfreeze(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetPlayerAngry()": {
	  "prefix": "SetPlayerAngry",
	  "body": [
		"SetPlayerAngry(${1:Ped playerPed}, ${2:BOOL disabled})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nHash collision! Disables speech.  \n"
	},
	"SetRadioToStationName()": {
	  "prefix": "SetRadioToStationName",
	  "body": [
		"SetRadioToStationName(${1:char* stationName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nFor a full list, see here: pastebin.com/Kj9t38KF  \n"
	},
	"SetRadioToStationIndex()": {
	  "prefix": "SetRadioToStationIndex",
	  "body": [
		"SetRadioToStationIndex(${1:int radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nSets radio station by index.  \n"
	},
	"SetSirenWithNoDriver()": {
	  "prefix": "SetSirenWithNoDriver",
	  "body": [
		"SetSirenWithNoDriver(${1:Object* vehicle}, ${2:ScrHandle* toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetStaticEmitterEnabled()": {
	  "prefix": "SetStaticEmitterEnabled",
	  "body": [
		"SetStaticEmitterEnabled(${1:char* emitterName}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nExample:  \nAUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_01_STAGE\", false);\tAUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM\", false);\tAUDIO::SET_STATIC_EMITTER_ENABLED((Any*)\"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM\", false);  \nThis turns off surrounding sounds not connected directly to peds.  \n"
	},
	"SetRadioTrack()": {
	  "prefix": "SetRadioTrack",
	  "body": [
		"SetRadioTrack(${1:char* radioStation}, ${2:char* radioTrack})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nOnly found this one in the decompiled scripts:  \nAUDIO::SET_RADIO_TRACK(\"RADIO_03_HIPHOP_NEW\", \"ARM1_RADIO_STARTS\");  \n"
	},
	"SetUserRadioControlEnabled()": {
	  "prefix": "SetUserRadioControlEnabled",
	  "body": [
		"SetUserRadioControlEnabled(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0x950a154b8dab6185()": {
	  "prefix": "N_0x950a154b8dab6185",
	  "body": "N_0x950a154b8dab6185",
	  "description": "OLD NAME, PLEASE USE SetSynchronizedAudioEventPositionThisFrame INSTEAD!"
	},
	"SetSynchronizedAudioEventPositionThisFrame()": {
	  "prefix": "SetSynchronizedAudioEventPositionThisFrame",
	  "body": [
		"SetSynchronizedAudioEventPositionThisFrame(${1:char* p0}, ${2:Entity p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nSets the position of the audio event to the entity's position for one frame(?)  \nif (l_8C3 == 0) {  \n    sub_27fd1(0, -1, 1);  \n    if (PED::IS_SYNCHRONIZED_SCENE_RUNNING(l_87D)) {  \n        AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(l_87D);  \n    }  \n    if (sub_7dd(l_A00)) {  \n        AUDIO::_950A154B8DAB6185(\"PAP2_IG1_POPPYSEX\", l_A00);  \n    }  \n    sub_91c(\"TK************ SETTING SYNCH SCENE AUDIO POSITION THIS FRAME ************TK\");  \n    l_8C3 = 1;  \n}  \n--  \nFound in the b617d scripts, duplicates removed:   \nAUDIO::_950A154B8DAB6185(\"CAR_5_IG_6\", l_7FE[1/*1*/]);  \nAUDIO::_950A154B8DAB6185(\"EX03_TRAIN_BIKE_LAND\",   PLAYER::PLAYER_PED_ID());  \nAUDIO::_950A154B8DAB6185(\"FBI_2_MCS_1_LeadIn\", l_40[2/*1*/]);  \nAUDIO::_950A154B8DAB6185(\"FIN_C2_MCS_1\", l_24C[0/*1*/]);  \nAUDIO::_950A154B8DAB6185(\"MNT_DNC\", l_5F);  \nAUDIO::_950A154B8DAB6185(\"PAP2_IG1_POPPYSEX\", l_A00);  \n\nOld name: N_0x950a154b8dab6185"
	},
	"SetVariableOnStream()": {
	  "prefix": "SetVariableOnStream",
	  "body": [
		"SetVariableOnStream(${1:char* p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nFrom the scripts, p0:  \n\"ArmWrestlingIntensity\",  \n\"INOUT\",  \n\"Monkey_Stream\",  \n\"ZoomLevel\"  \n"
	},
	"SetVehicleBoostActive()": {
	  "prefix": "SetVehicleBoostActive",
	  "body": [
		"SetVehicleBoostActive(${1:Vehicle vehicle}, ${2:BOOL Toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nSET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);  \nSET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);   \nWill give a boost-soundeffect.  \n"
	},
	"SetVariableOnSound()": {
	  "prefix": "SetVariableOnSound",
	  "body": [
		"SetVariableOnSound(${1:int soundId}, ${2:char* variableName}, ${3:float value})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetVehRadioStation()": {
	  "prefix": "SetVehRadioStation",
	  "body": [
		"SetVehRadioStation(${1:Vehicle vehicle}, ${2:char* radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nFor a full list, see here: pastebin.com/Kj9t38KF  \n"
	},
	"SetVehicleRadioLoud()": {
	  "prefix": "SetVehicleRadioLoud",
	  "body": [
		"SetVehicleRadioLoud(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SetVehicleRadioEnabled()": {
	  "prefix": "SetVehicleRadioEnabled",
	  "body": [
		"SetVehicleRadioEnabled(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\ncan't seem to enable radio on cop cars etc  \n"
	},
	"SkipToNextScriptedConversationLine()": {
	  "prefix": "SkipToNextScriptedConversationLine",
	  "body": [
		"SkipToNextScriptedConversationLine()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SkipRadioForward()": {
	  "prefix": "SkipRadioForward",
	  "body": [
		"SkipRadioForward()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"SpecialFrontendEqual()": {
	  "prefix": "SpecialFrontendEqual",
	  "body": [
		"SpecialFrontendEqual(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nHash collision!!! PLAY_STREAM_FROM_POSITION is the correct name!  \n"
	},
	"StartAlarm()": {
	  "prefix": "StartAlarm",
	  "body": [
		"StartAlarm(${1:char* alarmName}, ${2:BOOL p2})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nExample:  \nThis will start the alarm at Fort Zancudo.  \nAUDIO::START_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);  \nFirst parameter (char) is the name of the alarm.  \nSecond parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.  \n----------  \nIt DOES make a difference but it has to do with the duration or something I dunno yet  \n----------  \n Found in the b617d scripts:  \n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS\", 0);  \n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER\", 1);  \n AUDIO::START_ALARM(\"AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B\", 0);  \n AUDIO::START_ALARM(\"BIG_SCORE_HEIST_VAULT_ALARMS\", a_0);  \n AUDIO::START_ALARM(\"FBI_01_MORGUE_ALARMS\", 1);  \n AUDIO::START_ALARM(\"FIB_05_BIOTECH_LAB_ALARMS\", 0);  \n AUDIO::START_ALARM(\"JEWEL_STORE_HEIST_ALARMS\", 0);  \n AUDIO::START_ALARM(\"PALETO_BAY_SCORE_ALARM\", 1);  \n AUDIO::START_ALARM(\"PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM\", 0);  \n AUDIO::START_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);  \n AUDIO::START_ALARM(\"PORT_OF_LS_HEIST_SHIP_ALARMS\", 0);  \n AUDIO::START_ALARM(\"PRISON_ALARMS\", 0);  \n AUDIO::START_ALARM(\"PROLOGUE_VAULT_ALARMS\", 0);  \n"
	},
	"N_0x9c11908013ea4715()": {
	  "prefix": "N_0x9c11908013ea4715",
	  "body": "N_0x9c11908013ea4715",
	  "description": "OLD NAME, PLEASE USE SoundVehicleHornThisFrame INSTEAD!"
	},
	"SoundVehicleHornThisFrame()": {
	  "prefix": "SoundVehicleHornThisFrame",
	  "body": [
		"SoundVehicleHornThisFrame(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nOld name: N_0x9c11908013ea4715"
	},
	"StartAudioScene()": {
	  "prefix": "StartAudioScene",
	  "body": [
		"StartAudioScene(${1:char* scene})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nUsed to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.  \nList of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC  \n"
	},
	"StartPreloadedConversation()": {
	  "prefix": "StartPreloadedConversation",
	  "body": [
		"StartPreloadedConversation()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StartScriptConversation()": {
	  "prefix": "StartScriptConversation",
	  "body": [
		"StartScriptConversation(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StopAlarm()": {
	  "prefix": "StopAlarm",
	  "body": [
		"StopAlarm(${1:char* alarmName}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nExample:  \nThis will stop the alarm at Fort Zancudo.  \nAUDIO::STOP_ALARM(\"PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS\", 1);  \nFirst parameter (char) is the name of the alarm.  \nSecond parameter (bool) has to be true (1) to have any effect.  \n"
	},
	"StopAllAlarms()": {
	  "prefix": "StopAllAlarms",
	  "body": [
		"StopAllAlarms(${1:BOOL stop})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StartScriptPhoneConversation()": {
	  "prefix": "StartScriptPhoneConversation",
	  "body": [
		"StartScriptPhoneConversation(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StopAudioScenes()": {
	  "prefix": "StopAudioScenes",
	  "body": [
		"StopAudioScenes()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\n??  \n"
	},
	"StopAudioScene()": {
	  "prefix": "StopAudioScene",
	  "body": [
		"StopAudioScene(${1:char* scene})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StopPedRingtone()": {
	  "prefix": "StopPedRingtone",
	  "body": [
		"StopPedRingtone(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StopPedSpeaking()": {
	  "prefix": "StopPedSpeaking",
	  "body": [
		"StopPedSpeaking(${1:Ped ped}, ${2:BOOL shaking})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StopCurrentPlayingAmbientSpeech()": {
	  "prefix": "StopCurrentPlayingAmbientSpeech",
	  "body": [
		"StopCurrentPlayingAmbientSpeech(${1:Ped ped})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nNeeds to be called every frame.  \n"
	},
	"StopScriptedConversation()": {
	  "prefix": "StopScriptedConversation",
	  "body": [
		"StopScriptedConversation(${1:BOOL p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"StopStream()": {
	  "prefix": "StopStream",
	  "body": [
		"StopStream()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"StopSound()": {
	  "prefix": "StopSound",
	  "body": [
		"StopSound(${1:int soundId})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"TriggerMusicEvent()": {
	  "prefix": "TriggerMusicEvent",
	  "body": [
		"TriggerMusicEvent(${1:char* eventName})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n\nList of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W  \nAll music event names found in the b617d scripts: pastebin.com/GnYt0R3P  \n"
	},
	"StopSynchronizedAudioEvent()": {
	  "prefix": "StopSynchronizedAudioEvent",
	  "body": [
		"StopSynchronizedAudioEvent(${1:Any p0})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: BOOL\n"
	},
	"UnlockMissionNewsStory()": {
	  "prefix": "UnlockMissionNewsStory",
	  "body": [
		"UnlockMissionNewsStory(${1:int newsStory})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n\nI see this as a native that would of been used back in GTA III when you finally unlocked the bridge to the next island and such.  \n"
	},
	"UnfreezeRadioStation()": {
	  "prefix": "UnfreezeRadioStation",
	  "body": [
		"UnfreezeRadioStation(${1:char* radioStation})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"UnregisterScriptWithAudio()": {
	  "prefix": "UnregisterScriptWithAudio",
	  "body": [
		"UnregisterScriptWithAudio()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n**This native does absolutely nothing, just a nullsub**\n\n\nOn last-gen this just runs blr and this func is called by several other functions other then the native's table.  \n"
	},
	"UseSirenAsHorn()": {
	  "prefix": "UseSirenAsHorn",
	  "body": [
		"UseSirenAsHorn(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: AUDIO\nReturns: void\n"
	},
	"N_0xc8b1b2425604cdd0()": {
	  "prefix": "N_0xc8b1b2425604cdd0",
	  "body": [
		"N_0xc8b1b2425604cdd0()"
	  ],
	  "description": "Namespace: AUDIO\nReturns: Any\n"
	},
	"N_0x94f2e83ead7e6b82()": {
	  "prefix": "N_0x94f2e83ead7e6b82",
	  "body": "N_0x94f2e83ead7e6b82",
	  "description": "OLD NAME, PLEASE USE SetRadioStationDisabled INSTEAD!"
	},
	"SetRadioStationDisabled()": {
	  "prefix": "SetRadioStationDisabled",
	  "body": [
		"SetRadioStationDisabled(${1:char* stationName}, ${2:BOOL Toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nDisables the radio station from the radio wheel.  \nNote: You cannot disable LSUR, WCTR and Blaine County Radio.  \n\nList of known station names;\n\n\nRADIO_01_CLASS_ROCK  \nRADIO_02_POP  \nRADIO_03_HIPHOP_NEW  \nRADIO_04_PUNK  \nRADIO_05_TALK_01  \nRADIO_06_COUNTRY  \nRADIO_07_DANCE_01  \nRADIO_08_MEXICAN  \nRADIO_09_HIPHOP_OLD  \nRADIO_12_REGGAE  \nRADIO_13_JAZZ  \nRADIO_14_DANCE_02  \nRADIO_15_MOTOWN  \nRADIO_20_THELAB  \nRADIO_16_SILVERLAKE  \nRADIO_17_FUNK  \nRADIO_18_90S_ROCK  \nRADIO_21_DLC_XM17  \nRADIO_22_DLC_BATTLE_MIX1_RADIO  \nRADIO_19_USER \nHIDDEN_RADIO_AMBIENT_TV  \nHIDDEN_RADIO_AMBIENT_TV_BRIGHT  \nHIDDEN_RADIO_01_CLASS_ROCK  \nHIDDEN_RADIO_ADVERTS  \nHIDDEN_RADIO_02_POP  \nHIDDEN_RADIO_03_HIPHOP_NEW  \nHIDDEN_RADIO_04_PUNK  \nHIDDEN_RADIO_06_COUNTRY  \nHIDDEN_RADIO_07_DANCE_01  \nHIDDEN_RADIO_09_HIPHOP_OLD  \nHIDDEN_RADIO_12_REGGAE  \nHIDDEN_RADIO_15_MOTOWN  \nHIDDEN_RADIO_16_SILVERLAKE  \nRADIO_22_DLC_BATTLE_MIX1_CLUB  \nHIDDEN_RADIO_STRIP_CLUB  \nDLC_BATTLE_MIX1_CLUB_PRIV  \nHIDDEN_RADIO_BIKER_CLASSIC_ROCK  \nDLC_BATTLE_MIX2_CLUB_PRIV  \nHIDDEN_RADIO_BIKER_MODERN_ROCK  \nRADIO_23_DLC_BATTLE_MIX2_CLUB  \nRADIO_25_DLC_BATTLE_MIX4_CLUB  \nDLC_BATTLE_MIX3_CLUB_PRIV  \nRADIO_26_DLC_BATTLE_CLUB_WARMUP  \nHIDDEN_RADIO_BIKER_PUNK  \nRADIO_24_DLC_BATTLE_MIX3_CLUB  \nDLC_BATTLE_MIX4_CLUB_PRIV  \nHIDDEN_RADIO_BIKER_HIP_HOP  \n\nOld name: N_0x94f2e83ead7e6b82"
	},
	"AbortTextChat()": {
	  "prefix": "AbortTextChat",
	  "body": [
		"AbortTextChat()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAborts the current message in the text chat.  \n"
	},
	"N_0xce5d0e5e315db238()": {
	  "prefix": "N_0xce5d0e5e315db238",
	  "body": "N_0xce5d0e5e315db238",
	  "description": "OLD NAME, PLEASE USE AddBlipForArea INSTEAD!"
	},
	"AddBlipForArea()": {
	  "prefix": "AddBlipForArea",
	  "body": [
		"AddBlipForArea(${1:float x}, ${2:float y}, ${3:float z}, ${4:float width}, ${5:float height})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\nAdds a rectangular blip for the specified coordinates/area.\n\nIt is recommended to use [SET_BLIP_ROTATION](#_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.\n\nBy default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.\n\nExample image:\n![minimap](https://w.wew.wtf/pdcjig.png)\n![big map](https://w.wew.wtf/zgcjcm.png)\n\n(Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)\nOld name: N_0xce5d0e5e315db238"
	},
	"ActivateFrontendMenu()": {
	  "prefix": "ActivateFrontendMenu",
	  "body": [
		"ActivateFrontendMenu(${1:Hash menuhash}, ${2:BOOL Toggle_Pause}, ${3:int component})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nDoes stuff like this:  \ngyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617  \nExample:  \nint GetHash = GET_HASH_KEY(\"fe_menu_version_corona_lobby\");  \nACTIVATE_FRONTEND_MENU(GetHash, 0, -1);  \nBOOL p1 is a toggle to define the game in pause.  \nint p2 is unknown but -1 always works, not sure why though.  \n[30/03/2017] ins1de :  \nthe int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.  \nExample : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);  \nResult : Opens the \"Online\" tab without pausing the menu, with -1 it opens the map.  \n"
	},
	"AddBlipForCoord()": {
	  "prefix": "AddBlipForCoord",
	  "body": [
		"AddBlipForCoord(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\nCreates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip."
	},
	"AddBlipForEntity()": {
	  "prefix": "AddBlipForEntity",
	  "body": [
		"AddBlipForEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n\nReturns red ( default ) blip attached to entity.  \nExample:  \nBlip blip; //Put this outside your case or option  \nblip = UI::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);  \nUI::SET_BLIP_AS_FRIENDLY(blip, true);  \n"
	},
	"AddBlipForPickup()": {
	  "prefix": "AddBlipForPickup",
	  "body": [
		"AddBlipForPickup(${1:Pickup pickup})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n"
	},
	"AddBlipForRadius()": {
	  "prefix": "AddBlipForRadius",
	  "body": [
		"AddBlipForRadius(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float radius})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n"
	},
	"N_0x311438a071dd9b1a()": {
	  "prefix": "N_0x311438a071dd9b1a",
	  "body": "N_0x311438a071dd9b1a",
	  "description": "OLD NAME, PLEASE USE AddPointToGpsCustomRoute INSTEAD!"
	},
	"AddPointToGpsCustomRoute()": {
	  "prefix": "AddPointToGpsCustomRoute",
	  "body": [
		"AddPointToGpsCustomRoute(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x311438a071dd9b1a"
	},
	"AddNextMessageToPreviousBriefs()": {
	  "prefix": "AddNextMessageToPreviousBriefs",
	  "body": [
		"AddNextMessageToPreviousBriefs(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nhash collision?  \n"
	},
	"N_0xa905192a6781c41b()": {
	  "prefix": "N_0xa905192a6781c41b",
	  "body": "N_0xa905192a6781c41b",
	  "description": "OLD NAME, PLEASE USE AddPointToGpsMultiRoute INSTEAD!"
	},
	"AddPointToGpsMultiRoute()": {
	  "prefix": "AddPointToGpsMultiRoute",
	  "body": [
		"AddPointToGpsMultiRoute(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xa905192a6781c41b"
	},
	"N_0x761b77454205a61d()": {
	  "prefix": "N_0x761b77454205a61d",
	  "body": "N_0x761b77454205a61d",
	  "description": "OLD NAME, PLEASE USE AddTextComponentAppTitle INSTEAD!"
	},
	"AddTextComponentAppTitle()": {
	  "prefix": "AddTextComponentAppTitle",
	  "body": [
		"AddTextComponentAppTitle(${1:char* p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\np1 was always -1.  \nused for phone applications; scaleform  \n\nOld name: N_0x761b77454205a61d"
	},
	"AddTextComponentFloat()": {
	  "prefix": "AddTextComponentFloat",
	  "body": [
		"AddTextComponentFloat(${1:float value}, ${2:int decimalPlaces})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x0e4c749ff9de9cc4()": {
	  "prefix": "N_0x0e4c749ff9de9cc4",
	  "body": "N_0x0e4c749ff9de9cc4",
	  "description": "OLD NAME, PLEASE USE AddTextComponentFormattedInteger INSTEAD!"
	},
	"AddTextComponentFormattedInteger()": {
	  "prefix": "AddTextComponentFormattedInteger",
	  "body": [
		"AddTextComponentFormattedInteger(${1:int value}, ${2:BOOL commaSeparated})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x0e4c749ff9de9cc4"
	},
	"AddTextComponentInteger()": {
	  "prefix": "AddTextComponentInteger",
	  "body": [
		"AddTextComponentInteger(${1:int value})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"AddTextComponentString_3()": {
	  "prefix": "AddTextComponentString_3",
	  "body": "AddTextComponentString_3",
	  "description": "OLD NAME, PLEASE USE AddTextComponentScaleform INSTEAD!"
	},
	"AddTextComponentScaleform()": {
	  "prefix": "AddTextComponentScaleform",
	  "body": [
		"AddTextComponentScaleform(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nThis native (along with 0x6C188BE134E074AA and 0x94CF4AC034C9C986) do not actually filter anything. They simply add the provided text (as of 944)  \ndid you even check the disassembly?  \n> Do you even lift bro? The PLAYER_NAME and WEBSITE natives are the correct names, it doesn't matter if they're filtered or not. Blame R* for that matter. Hashes don't lie, and it's extremely unlikely the validated names are collisions (what are the odds??)  \n\nOld name: AddTextComponentString_3"
	},
	"N_0x80ead8e2e1d5d52e()": {
	  "prefix": "N_0x80ead8e2e1d5d52e",
	  "body": "N_0x80ead8e2e1d5d52e",
	  "description": "OLD NAME, PLEASE USE AddTextComponentSubstringBlipName INSTEAD!"
	},
	"AddTextComponentSubstringBlipName()": {
	  "prefix": "AddTextComponentSubstringBlipName",
	  "body": [
		"AddTextComponentSubstringBlipName(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x80ead8e2e1d5d52e"
	},
	"AddTextComponentString()": {
	  "prefix": "AddTextComponentString",
	  "body": "AddTextComponentString",
	  "description": "OLD NAME, PLEASE USE AddTextComponentSubstringPlayerName INSTEAD!"
	},
	"AddTextComponentSubstringPlayerName()": {
	  "prefix": "AddTextComponentSubstringPlayerName",
	  "body": [
		"AddTextComponentSubstringPlayerName(${1:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nAdds an arbitrary string as a text component placeholder, replacing `~a~` in the current text command's text label.\n\nSee the documentation on text formatting for more information.\nOld name: AddTextComponentString"
	},
	"AddTextComponentItemString()": {
	  "prefix": "AddTextComponentItemString",
	  "body": "AddTextComponentItemString",
	  "description": "OLD NAME, PLEASE USE AddTextComponentSubstringTextLabel INSTEAD!"
	},
	"AddTextComponentSubstringTextLabel()": {
	  "prefix": "AddTextComponentSubstringTextLabel",
	  "body": [
		"AddTextComponentSubstringTextLabel(${1:char* labelName})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: AddTextComponentItemString"
	},
	"N_0x17299b63c7683a2b()": {
	  "prefix": "N_0x17299b63c7683a2b",
	  "body": "N_0x17299b63c7683a2b",
	  "description": "OLD NAME, PLEASE USE AddTextComponentSubstringTextLabelHashKey INSTEAD!"
	},
	"AddTextComponentSubstringTextLabelHashKey()": {
	  "prefix": "AddTextComponentSubstringTextLabelHashKey",
	  "body": [
		"AddTextComponentSubstringTextLabelHashKey(${1:Hash gxtEntryHash})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIt adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY(\"ES_HELP\"), adds \"Continue\". Just uses a text labels hash key  \n\nOld name: N_0x17299b63c7683a2b"
	},
	"AddTextComponentSubstringTime()": {
	  "prefix": "AddTextComponentSubstringTime",
	  "body": [
		"AddTextComponentSubstringTime(${1:int timestamp}, ${2:int flags})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAdds a timer (e.g. \"00:00:00:000\"). The appearance of the timer depends on the flags, which needs more research.  \n"
	},
	"AddTextComponentString_2()": {
	  "prefix": "AddTextComponentString_2",
	  "body": "AddTextComponentString_2",
	  "description": "OLD NAME, PLEASE USE AddTextComponentSubstringWebsite INSTEAD!"
	},
	"AddTextComponentSubstringWebsite()": {
	  "prefix": "AddTextComponentSubstringWebsite",
	  "body": [
		"AddTextComponentSubstringWebsite(${1:char* website})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nThis native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)  \n\nOld name: AddTextComponentString_2"
	},
	"AddTrevorRandomModifier()": {
	  "prefix": "AddTrevorRandomModifier",
	  "body": [
		"AddTrevorRandomModifier(${1:int gamerTagId})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nHash collision!  \n_IS_MP_GAMER_TAG_ACTIVE_2  \n"
	},
	"N_0xaba17d7ce615adbf()": {
	  "prefix": "N_0xaba17d7ce615adbf",
	  "body": "N_0xaba17d7ce615adbf",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandBusyString INSTEAD!"
	},
	"SetLoadingPromptTextEntry()": {
	  "prefix": "SetLoadingPromptTextEntry",
	  "body": "SetLoadingPromptTextEntry",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandBusyString INSTEAD!"
	},
	"BeginTextCommandBusyString()": {
	  "prefix": "BeginTextCommandBusyString",
	  "body": [
		"BeginTextCommandBusyString(${1:char* string})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nInitializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here  \nBEGIN_TEXT_COMMAND_PRINT  \ne.g  \nvoid StartLoadingMessage(char *text, int spinnerType = 3)  \n\t{  \n_SET_LOADING_PROMPT_TEXT_ENTRY(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n_SHOW_LOADING_PROMPT(spinnerType);  \n\t}  \n/*OR*/  \n\tvoid ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)  \n\t{  \n_SET_LOADING_PROMPT_TEXT_ENTRY(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n_SHOW_LOADING_PROMPT(spinnerType);  \nWAIT(timeMs);  \n_REMOVE_LOADING_PROMPT();  \n\t}  \nThese are some localized strings used in the loading spinner.  \n\"PM_WAIT\"                   = Please Wait  \n\"CELEB_WPLYRS\"              = Waiting For Players.  \n\"CELL_SPINNER2\"             = Scanning storage.  \n\"ERROR_CHECKYACHTNAME\" = Registering your yacht's name. Please wait.  \n\"ERROR_CHECKPROFANITY\"   = Checking your text for profanity. Please wait.  \n\"FM_COR_AUTOD\"                        = Just spinner no text  \n\"FM_IHELP_WAT2\"                        = Waiting for other players  \n\"FM_JIP_WAITO\"                            = Game options are being set  \n\"FMMC_DOWNLOAD\"                    = Downloading  \n\"FMMC_PLYLOAD\"                         = Loading  \n\"FMMC_STARTTRAN\"                    = Launching session  \n\"HUD_QUITTING\"                           =  Quiting session  \n\"KILL_STRIP_IDM\"                         = Waiting for to accept  \n\"MP_SPINLOADING\"                      = Loading  \n\nOld name: N_0xaba17d7ce615adbf\nOld name: SetLoadingPromptTextEntry"
	},
	"N_0xe124fa80a759019c()": {
	  "prefix": "N_0xe124fa80a759019c",
	  "body": "N_0xe124fa80a759019c",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandClearPrint INSTEAD!"
	},
	"BeginTextCommandClearPrint()": {
	  "prefix": "BeginTextCommandClearPrint",
	  "body": [
		"BeginTextCommandClearPrint(${1:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nclears a print text command with this text  \n\nOld name: N_0xe124fa80a759019c"
	},
	"SetTextComponentFormat()": {
	  "prefix": "SetTextComponentFormat",
	  "body": "SetTextComponentFormat",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandDisplayHelp INSTEAD!"
	},
	"BeginTextCommandDisplayHelp()": {
	  "prefix": "BeginTextCommandDisplayHelp",
	  "body": [
		"BeginTextCommandDisplayHelp(${1:char* inputType})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nUsed to be known as _SET_TEXT_COMPONENT_FORMAT  \n\nOld name: SetTextComponentFormat"
	},
	"N_0x853648fd1063a213()": {
	  "prefix": "N_0x853648fd1063a213",
	  "body": "N_0x853648fd1063a213",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandIsMessageDisplayed INSTEAD!"
	},
	"BeginTextCommandIsMessageDisplayed()": {
	  "prefix": "BeginTextCommandIsMessageDisplayed",
	  "body": [
		"BeginTextCommandIsMessageDisplayed(${1:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nnothin doin.   \nBOOL Message(char* text)  \n\t{  \nBEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(\"STRING\");  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \nreturn END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();  \n\t}  \n\nOld name: N_0x853648fd1063a213"
	},
	"SetTextEntry()": {
	  "prefix": "SetTextEntry",
	  "body": "SetTextEntry",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandDisplayText INSTEAD!"
	},
	"BeginTextCommandDisplayText()": {
	  "prefix": "BeginTextCommandDisplayText",
	  "body": [
		"BeginTextCommandDisplayText(${1:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nThe following were found in the decompiled script files:  \nSTRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3  \nESDOLLA   \nESMINDOLLA - cash (negative)  \nUsed to be known as _SET_TEXT_ENTRY  \n\nOld name: SetTextEntry"
	},
	"N_0x0a24da3a41b718f5()": {
	  "prefix": "N_0x0a24da3a41b718f5",
	  "body": "N_0x0a24da3a41b718f5",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandIsThisHelpMessageBeingDisplayed INSTEAD!"
	},
	"BeginTextCommandIsThisHelpMessageBeingDisplayed()": {
	  "prefix": "BeginTextCommandIsThisHelpMessageBeingDisplayed",
	  "body": [
		"BeginTextCommandIsThisHelpMessageBeingDisplayed(${1:char* labelName})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nBOOL IsContextActive(char *ctx)  \n{  \n\tBEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);  \n\treturn END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);  \n}  \n\nOld name: N_0x0a24da3a41b718f5"
	},
	"SetTextGxtEntry()": {
	  "prefix": "SetTextGxtEntry",
	  "body": "SetTextGxtEntry",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandLineCount INSTEAD!"
	},
	"BeginTextCommandLineCount()": {
	  "prefix": "BeginTextCommandLineCount",
	  "body": [
		"BeginTextCommandLineCount(${1:char* entry})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nget's line count  \nint GetLineCount(char *text, float x, float y)  \n\t{  \n_BEGIN_TEXT_COMMAND_LINE_COUNT(\"STRING\");  \n                ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \nreturn _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);  \n\t}  \n\nOld name: SetTextGxtEntry"
	},
	"SetTextEntry_2()": {
	  "prefix": "SetTextEntry_2",
	  "body": "SetTextEntry_2",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandPrint INSTEAD!"
	},
	"BeginTextCommandPrint()": {
	  "prefix": "BeginTextCommandPrint",
	  "body": [
		"BeginTextCommandPrint(${1:char* GxtEntry})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nUsed to be known as _SET_TEXT_ENTRY_2  \nvoid ShowSubtitle(char *text)  \n{  \n\tBEGIN_TEXT_COMMAND_PRINT(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\tEND_TEXT_COMMAND_PRINT(2000, 1);  \n}  \n\nOld name: SetTextEntry_2"
	},
	"N_0x8f9ee5687f8eeccd()": {
	  "prefix": "N_0x8f9ee5687f8eeccd",
	  "body": "N_0x8f9ee5687f8eeccd",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandTimer INSTEAD!"
	},
	"BeginTextCommandTimer()": {
	  "prefix": "BeginTextCommandTimer",
	  "body": [
		"BeginTextCommandTimer(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nvoid message(char *text)  \n{  \n\t_BEGIN_TEXT_COMMAND_TIMER(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\t_END_TEXT_COMMAND_TIMER(0);  \n}  \n\nOld name: N_0x8f9ee5687f8eeccd"
	},
	"N_0x23d69e0465570028()": {
	  "prefix": "N_0x23d69e0465570028",
	  "body": "N_0x23d69e0465570028",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandObjective INSTEAD!"
	},
	"BeginTextCommandObjective()": {
	  "prefix": "BeginTextCommandObjective",
	  "body": [
		"BeginTextCommandObjective(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nnothin doin.   \nvoid message()  \n\t{  \n_BEGIN_TEXT_COMMAND_OBJECTIVE(\"AHT_RTIT\");  \n_END_TEXT_COMMAND_OBJECTIVE(0);  \n\t}  \n\nOld name: N_0x23d69e0465570028"
	},
	"BeginTextCommandSetBlipName()": {
	  "prefix": "BeginTextCommandSetBlipName",
	  "body": [
		"BeginTextCommandSetBlipName(${1:char* textLabel})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nStarts a text command to change the name of a blip displayed in the pause menu.\n\nThis should be paired with [`END_TEXT_COMMAND_SET_BLIP_NAME`](#_0xBC38B49BCB83BC9B), once adding all required text components."
	},
	"SetTextEntryForWidth()": {
	  "prefix": "SetTextEntryForWidth",
	  "body": "SetTextEntryForWidth",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandWidth INSTEAD!"
	},
	"BeginTextCommandWidth()": {
	  "prefix": "BeginTextCommandWidth",
	  "body": [
		"BeginTextCommandWidth(${1:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nExample:  \n_BEGIN_TEXT_COMMAND_WIDTH(\"NUMBER\");  \nADD_TEXT_COMPONENT_FLOAT(69.420f, 2);  \nfloat width = _END_TEXT_COMMAND_GET_WIDTH(true);  \n\nOld name: SetTextEntryForWidth"
	},
	"N_0x0afc4af510774b47()": {
	  "prefix": "N_0x0afc4af510774b47",
	  "body": "N_0x0afc4af510774b47",
	  "description": "OLD NAME, PLEASE USE BlockWeaponWheelThisFrame INSTEAD!"
	},
	"BlockWeaponWheelThisFrame()": {
	  "prefix": "BlockWeaponWheelThisFrame",
	  "body": [
		"BlockWeaponWheelThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\ncalling this each frame, it stops the player from receiving a weapon via the weapon wheel.  \n\nOld name: N_0x0afc4af510774b47"
	},
	"ClearAdditionalText()": {
	  "prefix": "ClearAdditionalText",
	  "body": [
		"ClearAdditionalText(${1:int p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"CenterPlayerOnRadarThisFrame()": {
	  "prefix": "CenterPlayerOnRadarThisFrame",
	  "body": [
		"CenterPlayerOnRadarThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nWhen calling this, the current frame will have the players \"arrow icon\" be focused on the dead center of the radar.  \n"
	},
	"ClearAllHelpMessages()": {
	  "prefix": "ClearAllHelpMessages",
	  "body": [
		"ClearAllHelpMessages()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ClearBrief()": {
	  "prefix": "ClearBrief",
	  "body": [
		"ClearBrief()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xd12882d3ff82bf11()": {
	  "prefix": "N_0xd12882d3ff82bf11",
	  "body": "N_0xd12882d3ff82bf11",
	  "description": "OLD NAME, PLEASE USE ClearAllBlipRoutes INSTEAD!"
	},
	"ClearAllBlipRoutes()": {
	  "prefix": "ClearAllBlipRoutes",
	  "body": [
		"ClearAllBlipRoutes()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nClears all active blip routes that have been set with [`SetBlipRoute`](#_0x3E160C90).\nOld name: N_0xd12882d3ff82bf11"
	},
	"ClearGpsFlags()": {
	  "prefix": "ClearGpsFlags",
	  "body": [
		"ClearGpsFlags()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nClears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.  \nDoesn't seem like the flags are actually read by the game at all.  \n"
	},
	"ClearFloatingHelp()": {
	  "prefix": "ClearFloatingHelp",
	  "body": [
		"ClearFloatingHelp(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\np0 looks like int in script  \n"
	},
	"N_0x67eedea1b9bafd94()": {
	  "prefix": "N_0x67eedea1b9bafd94",
	  "body": "N_0x67eedea1b9bafd94",
	  "description": "OLD NAME, PLEASE USE ClearGpsMultiRoute INSTEAD!"
	},
	"ClearGpsMultiRoute()": {
	  "prefix": "ClearGpsMultiRoute",
	  "body": [
		"ClearGpsMultiRoute()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nDoes the same as [`SET_GPS_MULTI_ROUTE_RENDER(false)`](https://runtime.fivem.net/doc/reference.html#_0x3DDA37128DD1ACA8)\nOld name: N_0x67eedea1b9bafd94"
	},
	"N_0xe6de0561d9232a64()": {
	  "prefix": "N_0xe6de0561d9232a64",
	  "body": "N_0xe6de0561d9232a64",
	  "description": "OLD NAME, PLEASE USE ClearGpsCustomRoute INSTEAD!"
	},
	"ClearGpsCustomRoute()": {
	  "prefix": "ClearGpsCustomRoute",
	  "body": [
		"ClearGpsCustomRoute()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xe6de0561d9232a64"
	},
	"ClearGpsRaceTrack()": {
	  "prefix": "ClearGpsRaceTrack",
	  "body": [
		"ClearGpsRaceTrack()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ClearGpsPlayerWaypoint()": {
	  "prefix": "ClearGpsPlayerWaypoint",
	  "body": [
		"ClearGpsPlayerWaypoint()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x55598d21339cb998()": {
	  "prefix": "N_0x55598d21339cb998",
	  "body": "N_0x55598d21339cb998",
	  "description": "OLD NAME, PLEASE USE ClearNotificationsPos INSTEAD!"
	},
	"ClearNotificationsPos()": {
	  "prefix": "ClearNotificationsPos",
	  "body": [
		"ClearNotificationsPos(${1:float pos})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\n_CLEAR_NOTIFICATIONS_POS(0.5f);  \n\nOld name: N_0x55598d21339cb998"
	},
	"ClearHelp()": {
	  "prefix": "ClearHelp",
	  "body": [
		"ClearHelp(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ClearPrints()": {
	  "prefix": "ClearPrints",
	  "body": [
		"ClearPrints()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ClearPedInPauseMenu()": {
	  "prefix": "ClearPedInPauseMenu",
	  "body": [
		"ClearPedInPauseMenu()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xb57d8dd645cfa2cf()": {
	  "prefix": "N_0xb57d8dd645cfa2cf",
	  "body": "N_0xb57d8dd645cfa2cf",
	  "description": "OLD NAME, PLEASE USE ClearReminderMessage INSTEAD!"
	},
	"ClearReminderMessage()": {
	  "prefix": "ClearReminderMessage",
	  "body": [
		"ClearReminderMessage()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**This native does absolutely nothing, just a nullsub**\nOld name: N_0xb57d8dd645cfa2cf"
	},
	"ClearSmallPrints()": {
	  "prefix": "ClearSmallPrints",
	  "body": [
		"ClearSmallPrints()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xd2b32be3fc1626c6()": {
	  "prefix": "N_0xd2b32be3fc1626c6",
	  "body": "N_0xd2b32be3fc1626c6",
	  "description": "OLD NAME, PLEASE USE CloseSocialClubMenu INSTEAD!"
	},
	"CloseSocialClubMenu()": {
	  "prefix": "CloseSocialClubMenu",
	  "body": [
		"CloseSocialClubMenu()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xd2b32be3fc1626c6"
	},
	"ClearThisPrint()": {
	  "prefix": "ClearThisPrint",
	  "body": [
		"ClearThisPrint(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\np0: found arguments in the b617d scripts: pastebin.com/X5akCN7z  \n"
	},
	"N_0x6dd05e9d83efa4c9()": {
	  "prefix": "N_0x6dd05e9d83efa4c9",
	  "body": "N_0x6dd05e9d83efa4c9",
	  "description": "OLD NAME, PLEASE USE CreateMpGamerTagForNetPlayer INSTEAD!"
	},
	"CreateMpGamerTagColor()": {
	  "prefix": "CreateMpGamerTagColor",
	  "body": "CreateMpGamerTagColor",
	  "description": "OLD NAME, PLEASE USE CreateMpGamerTagForNetPlayer INSTEAD!"
	},
	"SetMpGamerTagColor()": {
	  "prefix": "SetMpGamerTagColor",
	  "body": "SetMpGamerTagColor",
	  "description": "OLD NAME, PLEASE USE CreateMpGamerTagForNetPlayer INSTEAD!"
	},
	"CreateMpGamerTagForNetPlayer()": {
	  "prefix": "CreateMpGamerTagForNetPlayer",
	  "body": [
		"CreateMpGamerTagForNetPlayer(${1:int player}, ${2:char* username}, ${3:BOOL pointedClanTag}, ${4:BOOL isRockstarClan}, ${5:char* clanTag}, ${6:int clanFlag}, ${7:int r}, ${8:int g}, ${9:int b})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x6dd05e9d83efa4c9\nOld name: CreateMpGamerTagColor\nOld name: SetMpGamerTagColor"
	},
	"N_0xbfefe3321a3f5015()": {
	  "prefix": "N_0xbfefe3321a3f5015",
	  "body": "N_0xbfefe3321a3f5015",
	  "description": "OLD NAME, PLEASE USE CreateFakeMpGamerTag INSTEAD!"
	},
	"CreateMpGamerTag()": {
	  "prefix": "CreateMpGamerTag",
	  "body": "CreateMpGamerTag",
	  "description": "OLD NAME, PLEASE USE CreateFakeMpGamerTag INSTEAD!"
	},
	"CreateFakeMpGamerTag()": {
	  "prefix": "CreateFakeMpGamerTag",
	  "body": [
		"CreateFakeMpGamerTag(${1:Ped ped}, ${2:char* username}, ${3:BOOL pointedClanTag}, ${4:BOOL isRockstarClan}, ${5:char* clanTag}, ${6:int clanFlag})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\np0 was the return of NET_TO_PED in fm_mission_controler.  \np4 was always \"\".  \nreturns headDisplayId  \n\nOld name: N_0xbfefe3321a3f5015\nOld name: CreateMpGamerTag"
	},
	"DisableFrontendThisFrame()": {
	  "prefix": "DisableFrontendThisFrame",
	  "body": [
		"DisableFrontendThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"DisableBlipNameForVar()": {
	  "prefix": "DisableBlipNameForVar",
	  "body": [
		"DisableBlipNameForVar()"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n\nHash collision!!!   \nReturns a blip handle.  \n"
	},
	"DisableRadarThisFrame()": {
	  "prefix": "DisableRadarThisFrame",
	  "body": [
		"DisableRadarThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nconfirmed working  \n"
	},
	"DisplayAmmoThisFrame()": {
	  "prefix": "DisplayAmmoThisFrame",
	  "body": [
		"DisplayAmmoThisFrame(${1:BOOL display})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"DisplayAreaName()": {
	  "prefix": "DisplayAreaName",
	  "body": [
		"DisplayAreaName(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"DisplayHelpTextThisFrame()": {
	  "prefix": "DisplayHelpTextThisFrame",
	  "body": [
		"DisplayHelpTextThisFrame(${1:char* message}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nThe messages are localized strings.  \nExamples:  \n\"No_bus_money\"  \n\"Enter_bus\"  \n\"Tour_help\"  \n\"LETTERS_HELP2\"  \n\"Dummy\"  \n**The bool appears to always be false (if it even is a bool, as it's represented by a zero)**  \n--------  \np1 doesn't seem to make a difference, regardless of the state it's in.   \npicture of where on the screen this is displayed?  \n"
	},
	"DisplayCash()": {
	  "prefix": "DisplayCash",
	  "body": [
		"DisplayCash(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\n\"DISPLAY_CASH(false);\" makes the cash amount render on the screen when appropriate  \n\"DISPLAY_CASH(true);\" disables cash amount rendering  \n"
	},
	"N_0x523a590c1a3cc0d3()": {
	  "prefix": "N_0x523a590c1a3cc0d3",
	  "body": "N_0x523a590c1a3cc0d3",
	  "description": "OLD NAME, PLEASE USE DisplayJobReport INSTEAD!"
	},
	"DisplayJobReport()": {
	  "prefix": "DisplayJobReport",
	  "body": [
		"DisplayJobReport()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nShows a hud element for reporting jobs  \n\nOld name: N_0x523a590c1a3cc0d3"
	},
	"DisplayHud()": {
	  "prefix": "DisplayHud",
	  "body": [
		"DisplayHud(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIf Hud should be displayed  \n"
	},
	"DisplaySniperScopeThisFrame()": {
	  "prefix": "DisplaySniperScopeThisFrame",
	  "body": [
		"DisplaySniperScopeThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nDisplays the crosshair for this frame.  \n"
	},
	"DisplayRadar()": {
	  "prefix": "DisplayRadar",
	  "body": [
		"DisplayRadar(${1:BOOL Toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n\nIf Minimap / Radar should be displayed.  \n"
	},
	"DoesPedHaveAiBlip()": {
	  "prefix": "DoesPedHaveAiBlip",
	  "body": [
		"DoesPedHaveAiBlip(${1:Ped ped})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nReturns whether the ped's blip is controlled by the game.   \nIt's the default blip you can see on enemies during freeroam in singleplayer (the one that fades out quickly).  \n"
	},
	"DoesBlipExist()": {
	  "prefix": "DoesBlipExist",
	  "body": [
		"DoesBlipExist(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"DoesTextLabelExist()": {
	  "prefix": "DoesTextLabelExist",
	  "body": [
		"DoesTextLabelExist(${1:char* gxt})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nChecks if the passed gxt name exists in the game files.  \n"
	},
	"DrawNotification()": {
	  "prefix": "DrawNotification",
	  "body": [
		"DrawNotification(${1:BOOL blink}, ${2:BOOL showInBrief})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nDraws a notification above the map and returns the notifications handle  \nColor syntax:  \n~r~ = Red  \n~b~ = Blue  \n~g~ = Green  \n~y~ = Yellow  \n~p~ = Purple  \n~o~ = Orange  \n~c~ = Grey  \n~m~ = Darker Grey  \n~u~ = Black  \n~n~ = New Line  \n~s~ = Default White  \n~w~ = White  \n~h~ = Bold Text  \n~nrt~ = ???  \nSpecial characters:  \n¦ = Rockstar Verified Icon (U+00A6:Broken Bar - Alt+0166)  \n÷ = Rockstar Icon (U+00F7:Division Sign - Alt+0247)  \n∑ = Rockstar Icon 2 (U+2211:N-Ary Summation)  \nExample C#:  \n            Function.Call(Hash._ADD_TEXT_COMPONENT_STRING3, \"Now I need you to bring the ~b~vehicle~w~ back to me!\");  \n----  \nshowInBrief==true: the notification will appear in the \"Brief/Info\" -> \"Notifications\" tab in the pause menu.  \nshowInBrief==false: the notification will NOT appear in the pause menu.  \n"
	},
	"DoesTextBlockExist()": {
	  "prefix": "DoesTextBlockExist",
	  "body": [
		"DoesTextBlockExist(${1:char* gxt})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xaa295b6f28bd587d()": {
	  "prefix": "N_0xaa295b6f28bd587d",
	  "body": "N_0xaa295b6f28bd587d",
	  "description": "OLD NAME, PLEASE USE DrawNotificationAward INSTEAD!"
	},
	"DrawNotificationIcon()": {
	  "prefix": "DrawNotificationIcon",
	  "body": "DrawNotificationIcon",
	  "description": "OLD NAME, PLEASE USE DrawNotificationAward INSTEAD!"
	},
	"DrawNotificationAward()": {
	  "prefix": "DrawNotificationAward",
	  "body": [
		"DrawNotificationAward(${1:char* textureDict}, ${2:char* textureName}, ${3:int rpBonus}, ${4:int colorOverlay}, ${5:char* titleLabel})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\nShows an \"award\" notification above the minimap, lua example result:\n\n![](https://i.imgur.com/e2DNaKX.png)\n\nOld description:\n\n\nExample:  \nUI::_SET_NOTIFICATION_TEXT_ENTRY(\"HUNT\");  \nUI::_0xAA295B6F28BD587D(\"Hunting\", \"Hunting_Gold_128\", 0, 109, \"HUD_MED_UNLKED\");  \n\nOld name: N_0xaa295b6f28bd587d\nOld name: DrawNotificationIcon"
	},
	"N_0x15803fec3b9a872b()": {
	  "prefix": "N_0x15803fec3b9a872b",
	  "body": "N_0x15803fec3b9a872b",
	  "description": "OLD NAME, PLEASE USE DrawFrontendAlert INSTEAD!"
	},
	"DrawFrontendAlert()": {
	  "prefix": "DrawFrontendAlert",
	  "body": [
		"DrawFrontendAlert(${1:char* labelTitle}, ${2:char* labelMsg}, ${3:int p2}, ${4:int p3}, ${5:char* labelMsg2}, ${6:int p5}, ${7:int p6}, ${8:int p7}, ${9:char* p8}, ${10:char* p9}, ${11:BOOL background}, ${12:int errorCode})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\ninstructionalKey enum list:\n\n\nButtons = {\n      Empty = 0,\n      Select = 1, -- (RETURN)\n      Ok = 2, -- (RETURN)\n      Yes = 4, -- (RETURN)\n      Back = 8, -- (ESC)\n      Cancel = 16, -- (ESC)\n      No = 32, -- (ESC)\n      RetrySpace = 64, -- (SPACE)\n      Restart = 128, -- (SPACE)\n      Skip = 256, -- (SPACE)\n      Quit = 512, -- (ESC)\n      Adjust = 1024, -- (ARROWS)\n      SpaceKey = 2048, -- (SPACE)\n      Share = 4096, -- (SPACE)\n      SignIn = 8192, -- (SPACE)\n      Continue = 16384, -- (RETURN)\n      AdjustLeftRight = 32768, -- (SCROLL L/R)\n      AdjustUpDown = 65536, -- (SCROLL U/D)\n      Overwrite = 131072, -- (SPACE)\n      SocialClubSignup = 262144, -- (RETURN)\n      Confirm = 524288, -- (RETURN)\n      Queue = 1048576, -- (RETURN)\n      RetryReturn = 2097152, -- (RETURN)\n      BackEsc = 4194304, -- (ESC)\n      SocialClub = 8388608, -- (RETURN)\n      Spectate = 16777216, -- (SPACE)\n      OkEsc = 33554432, -- (ESC)\n      CancelTransfer = 67108864, -- (ESC)\n      LoadingSpinner = 134217728,\n      NoReturnToGTA = 268435456, -- (ESC)\n      CancelEsc = 536870912, -- (ESC)\n}\n\nAlt = {\n      Empty = 0,\n      No = 1, -- (SPACE)\n      Host = 2, -- (ESC)\n      SearchForJob = 4, -- (RETURN)\n      ReturnKey = 8, -- (TURN)\n      Freemode = 16, -- (ESC)\n}\n\n\n**Result of the example code:** <https://i.imgur.com/TvmNF4k.png>\nOld name: N_0x15803fec3b9a872b"
	},
	"N_0xdd6cb2cce7c2735c()": {
	  "prefix": "N_0xdd6cb2cce7c2735c",
	  "body": "N_0xdd6cb2cce7c2735c",
	  "description": "OLD NAME, PLEASE USE DrawNotificationWithButton INSTEAD!"
	},
	"DrawNotificationWithButton()": {
	  "prefix": "DrawNotificationWithButton",
	  "body": [
		"DrawNotificationWithButton(${1:int type}, ${2:char* button}, ${3:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nreturns a notification handle, prints out a notification like below:  \ntype range: 0   \nif you set type to 1, button accepts \"~INPUT_SOMETHING~\"  \nexample:  \nUI::_0xDD6CB2CCE7C2735C(1, \"~INPUT_TALK~\", \"Who you trynna get crazy with, ese? Don't you know I'm LOCO?!\");  \n- imgur.com/UPy0Ial  \nExamples from the scripts:  \nl_D1[1/*1*/]=UI::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING~\",\"\");  \nl_D1[2/*1*/]=UI::_DD6CB2CCE7C2735C(1,\"~INPUT_SAVE_REPLAY_CLIP~\",\"\");  \nl_D1[1/*1*/]=UI::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING~\",\"\");  \nl_D1[2/*1*/]=UI::_DD6CB2CCE7C2735C(1,\"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~\",\"\");  \n\nOld name: N_0xdd6cb2cce7c2735c"
	},
	"DrawNotification_2()": {
	  "prefix": "DrawNotification_2",
	  "body": [
		"DrawNotification_2(${1:BOOL blink}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"N_0x97c9e4e7024a8f2c()": {
	  "prefix": "N_0x97c9e4e7024a8f2c",
	  "body": "N_0x97c9e4e7024a8f2c",
	  "description": "OLD NAME, PLEASE USE DrawNotificationApartmentInvite INSTEAD!"
	},
	"NotificationSendApartmentInvite()": {
	  "prefix": "NotificationSendApartmentInvite",
	  "body": "NotificationSendApartmentInvite",
	  "description": "OLD NAME, PLEASE USE DrawNotificationApartmentInvite INSTEAD!"
	},
	"DrawNotificationApartmentInvite()": {
	  "prefix": "DrawNotificationApartmentInvite",
	  "body": [
		"DrawNotificationApartmentInvite(${1:BOOL p0}, ${2:BOOL p1}, ${3:int* p2}, ${4:int p3}, ${5:BOOL isLeader}, ${6:BOOL unk0}, ${7:int clanDesc}, ${8:int R}, ${9:int G}, ${10:int B})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nThis function and the one below it are for after you receive an invite, not sending it.  \np0 = 1 or 0  \nnothin doin.   \nint invite(Player player)  \n\t{  \nint iVar2, iVar3;  \nnetworkHandleMgr handle;  \nNETWORK_HANDLE_FROM_PLAYER(player, &handle.netHandle, 13);  \nnetworkClanMgr clan;  \nchar *playerName = GET_PLAYER_NAME(player);  \n_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n_SET_NOTIFACTION_COLOR_NEXT(0);  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);  \nif (NETWORK_CLAN_PLAYER_GET_DESC(&clan, 35, &handle.netHandle))  \n{  \n\tiVar2 = 0;  \n\tif (ARE_STRINGS_EQUAL(clan.unk22, \"Leader\") && clan.unk30 == 0)  \n\t{  \niVar2 = 1;  \n\t}  \n\tif (clan.unk21 > 0)  \n\t{  \niVar3 = 0;  \n\t}  \n\telse  \n\t{  \niVar3 = 1;  \n\t}  \n\tBOOL unused = _0x54E79E9C(&clan.clanHandle, 35);  \n\treturn _DRAW_NOTIFICATION_APARTMENT_INVITE(iVar3, 0 /*unused*/, &clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0);  \n}  \n\t}  \n\nOld name: N_0x97c9e4e7024a8f2c\nOld name: NotificationSendApartmentInvite"
	},
	"DrawNotification_4()": {
	  "prefix": "DrawNotification_4",
	  "body": [
		"DrawNotification_4(${1:BOOL blink}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"EnableDeathbloodSeethrough()": {
	  "prefix": "EnableDeathbloodSeethrough",
	  "body": [
		"EnableDeathbloodSeethrough(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nPlease change back to _0x4895BDEA16E7C080 (hash collision)  \n"
	},
	"N_0x137bc35589e34e1e()": {
	  "prefix": "N_0x137bc35589e34e1e",
	  "body": "N_0x137bc35589e34e1e",
	  "description": "OLD NAME, PLEASE USE DrawNotificationClanInvite INSTEAD!"
	},
	"NotificationSendClanInvite()": {
	  "prefix": "NotificationSendClanInvite",
	  "body": "NotificationSendClanInvite",
	  "description": "OLD NAME, PLEASE USE DrawNotificationClanInvite INSTEAD!"
	},
	"DrawNotificationClanInvite()": {
	  "prefix": "DrawNotificationClanInvite",
	  "body": [
		"DrawNotificationClanInvite(${1:BOOL p0}, ${2:BOOL p1}, ${3:int* p2}, ${4:int p3}, ${5:BOOL isLeader}, ${6:BOOL unk0}, ${7:int clanDesc}, ${8:char* playerName}, ${9:int R}, ${10:int G}, ${11:int B})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\np0 = 1 or 0  \ncrashes my game...  \nthis is for sending invites to network players - jobs/apartment/ect...   \nreturn notification handle  \nint invite(Player player)  \n\t{  \nnetworkHandleMgr netHandle;  \nnetworkClanMgr clan;  \nchar *playerName = GET_PLAYER_NAME(player);  \n_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n_SET_NOTIFACTION_COLOR_NEXT(1);  \nADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);  \nNETWORK_HANDLE_FROM_PLAYER(player, &netHandle.netHandle, 13);  \nif (NETWORK_CLAN_PLAYER_IS_ACTIVE(&netHandle.netHandle))  \n{  \n\tNETWORK_CLAN_PLAYER_GET_DESC(&clan.clanHandle, 35, &netHandle.netHandle);  \n\t_DRAW_NOTIFICATION_CLAN_INVITE(0, _0x54E79E9C(&clan.clanHandle, 35), &clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0);  \n}  \n\t}  \n\nOld name: N_0x137bc35589e34e1e\nOld name: NotificationSendClanInvite"
	},
	"N_0xd202b92cbf1d816f()": {
	  "prefix": "N_0xd202b92cbf1d816f",
	  "body": "N_0xd202b92cbf1d816f",
	  "description": "OLD NAME, PLEASE USE DrawNotificationWithIcon INSTEAD!"
	},
	"DrawNotificationWithIcon()": {
	  "prefix": "DrawNotificationWithIcon",
	  "body": [
		"DrawNotificationWithIcon(${1:int type}, ${2:int image}, ${3:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nreturns a notification handle, prints out a notification like below:  \ntype range: 0   \nif you set type to 1, image goes from 0 - 39 - Xbox you can add text to  \nexample:   \nUI::_0xD202B92CBF1D816F(1, 20, \"Who you trynna get crazy with, ese? Don't you know I'm LOCO?!\");  \n\nOld name: N_0xd202b92cbf1d816f"
	},
	"N_0xfcc75460aba29378()": {
	  "prefix": "N_0xfcc75460aba29378",
	  "body": "N_0xfcc75460aba29378",
	  "description": "OLD NAME, PLEASE USE EndTextCommandClearPrint INSTEAD!"
	},
	"EndTextCommandClearPrint()": {
	  "prefix": "EndTextCommandClearPrint",
	  "body": [
		"EndTextCommandClearPrint()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xfcc75460aba29378"
	},
	"DrawNotification_3()": {
	  "prefix": "DrawNotification_3",
	  "body": [
		"DrawNotification_3(${1:BOOL blink}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"DrawText()": {
	  "prefix": "DrawText",
	  "body": "DrawText",
	  "description": "OLD NAME, PLEASE USE EndTextCommandDisplayText INSTEAD!"
	},
	"EndTextCommandDisplayText()": {
	  "prefix": "EndTextCommandDisplayText",
	  "body": [
		"EndTextCommandDisplayText(${1:float x}, ${2:float y})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAfter applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.  \nUsed to be known as _DRAW_TEXT  \n\nOld name: DrawText"
	},
	"N_0xbd12f8228410d9b4()": {
	  "prefix": "N_0xbd12f8228410d9b4",
	  "body": "N_0xbd12f8228410d9b4",
	  "description": "OLD NAME, PLEASE USE EndTextCommandBusyString INSTEAD!"
	},
	"ShowLoadingPrompt()": {
	  "prefix": "ShowLoadingPrompt",
	  "body": "ShowLoadingPrompt",
	  "description": "OLD NAME, PLEASE USE EndTextCommandBusyString INSTEAD!"
	},
	"EndTextCommandBusyString()": {
	  "prefix": "EndTextCommandBusyString",
	  "body": [
		"EndTextCommandBusyString(${1:int busySpinnerType})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nThis does NOT get called per frame. Call it once to show, then use UI::_REMOVE_LOADING_PROMPT to remove it  \nChanges the the above native's (UI::_SET_LOADING_PROMPT_TEXT_ENTRY) spinning circle type.  \nTypes:  \nenum LoadingPromptTypes  \n{  \n\tLOADING_PROMPT_LEFT,  \n\tLOADING_PROMPT_LEFT_2,  \n\tLOADING_PROMPT_LEFT_3,  \n\tSAVE_PROMPT_LEFT,  \n\tLOADING_PROMPT_RIGHT,  \n};  \n\nOld name: N_0xbd12f8228410d9b4\nOld name: ShowLoadingPrompt"
	},
	"DisplayHelpTextFromStringLabel()": {
	  "prefix": "DisplayHelpTextFromStringLabel",
	  "body": "DisplayHelpTextFromStringLabel",
	  "description": "OLD NAME, PLEASE USE EndTextCommandDisplayHelp INSTEAD!"
	},
	"EndTextCommandDisplayHelp()": {
	  "prefix": "EndTextCommandDisplayHelp",
	  "body": [
		"EndTextCommandDisplayHelp(${1:Any p0}, ${2:BOOL loop}, ${3:BOOL beep}, ${4:int duration})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\n-----------  \np3 (duration in MS) was previously mentioned as \"shape\", but with some more testing it seems that it's more likely to be a duration in MS. (Tested this when not calling it every tick, but instead only once and let it display for the specified duration).   \n-1 seems to be default delay (around 3 seconds), 5000 (ms) seems to be the max. Anything > 5000 will still result in 5 seconds of display time.  \nOld p3 (shape) description: \"shape goes from -1 to 50 (may be more).\"  \n--------------  \np0 is always 0.  \nExample:  \nvoid FloatingHelpText(char* text)  \n{  \n\tBEGIN_TEXT_COMMAND_DISPLAY_HELP(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\tEND_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);  \n}  \nImage:  \n- imgbin.org/images/26209.jpg  \nmore inputs/icons:  \n- pastebin.com/nqNYWMSB  \nUsed to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL  \n\nOld name: DisplayHelpTextFromStringLabel"
	},
	"N_0x8a9ba1ab3e237613()": {
	  "prefix": "N_0x8a9ba1ab3e237613",
	  "body": "N_0x8a9ba1ab3e237613",
	  "description": "OLD NAME, PLEASE USE EndTextCommandIsMessageDisplayed INSTEAD!"
	},
	"EndTextCommandIsMessageDisplayed()": {
	  "prefix": "EndTextCommandIsMessageDisplayed",
	  "body": [
		"EndTextCommandIsMessageDisplayed()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0x8a9ba1ab3e237613"
	},
	"GetTextScreenWidth()": {
	  "prefix": "GetTextScreenWidth",
	  "body": "GetTextScreenWidth",
	  "description": "OLD NAME, PLEASE USE EndTextCommandGetWidth INSTEAD!"
	},
	"EndTextCommandGetWidth()": {
	  "prefix": "EndTextCommandGetWidth",
	  "body": [
		"EndTextCommandGetWidth(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: float\n\nUsed with _BEGIN_TEXT_COMMAND_WIDTH.  \nIn scripts, p0 is false when used in combination with \"ESMINDOLLA\" or \"ESDOLLA\", otherwise it's true.  \nReturns from range 0 to 1.  \n\nOld name: GetTextScreenWidth"
	},
	"N_0xcfdbdf5ae59ba0f4()": {
	  "prefix": "N_0xcfdbdf5ae59ba0f4",
	  "body": "N_0xcfdbdf5ae59ba0f4",
	  "description": "OLD NAME, PLEASE USE EndTextCommandObjective INSTEAD!"
	},
	"EndTextCommandObjective()": {
	  "prefix": "EndTextCommandObjective",
	  "body": [
		"EndTextCommandObjective(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\np0 is always false in scripts.  \n\nOld name: N_0xcfdbdf5ae59ba0f4"
	},
	"N_0x10bddbfc529428dd()": {
	  "prefix": "N_0x10bddbfc529428dd",
	  "body": "N_0x10bddbfc529428dd",
	  "description": "OLD NAME, PLEASE USE EndTextCommandIsThisHelpMessageBeingDisplayed INSTEAD!"
	},
	"EndTextCommandIsThisHelpMessageBeingDisplayed()": {
	  "prefix": "EndTextCommandIsThisHelpMessageBeingDisplayed",
	  "body": [
		"EndTextCommandIsThisHelpMessageBeingDisplayed(${1:int p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0x10bddbfc529428dd"
	},
	"DrawSubtitleTimed()": {
	  "prefix": "DrawSubtitleTimed",
	  "body": "DrawSubtitleTimed",
	  "description": "OLD NAME, PLEASE USE EndTextCommandPrint INSTEAD!"
	},
	"EndTextCommandPrint()": {
	  "prefix": "EndTextCommandPrint",
	  "body": [
		"EndTextCommandPrint(${1:int duration}, ${2:BOOL drawImmediately})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nDraws the subtitle at middle center of the screen.  \nint duration = time in milliseconds to show text on screen before disappearing  \ndrawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished  \nUsed to be known as _DRAW_SUBTITLE_TIMED  \n\nOld name: DrawSubtitleTimed"
	},
	"EndTextCommandSetBlipName()": {
	  "prefix": "EndTextCommandSetBlipName",
	  "body": [
		"EndTextCommandSetBlipName(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nFinalizes a text command started with [`BEGIN_TEXT_COMMAND_SET_BLIP_NAME`](#_0xF9113A30DE5C6670), setting the name\nof the specified blip."
	},
	"FlashAbilityBar()": {
	  "prefix": "FlashAbilityBar",
	  "body": [
		"FlashAbilityBar(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIf set to true ability bar will flash  \n"
	},
	"N_0xa86911979638106f()": {
	  "prefix": "N_0xa86911979638106f",
	  "body": "N_0xa86911979638106f",
	  "description": "OLD NAME, PLEASE USE EndTextCommandTimer INSTEAD!"
	},
	"EndTextCommandTimer()": {
	  "prefix": "EndTextCommandTimer",
	  "body": [
		"EndTextCommandTimer(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xa86911979638106f"
	},
	"FlashMinimapDisplay()": {
	  "prefix": "FlashMinimapDisplay",
	  "body": [
		"FlashMinimapDisplay()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nadds a short flash to the Radar/Minimap  \nUsage: UI.FLASH_MINIMAP_DISPLAY  \n"
	},
	"N_0xf9904d11f1acbec3()": {
	  "prefix": "N_0xf9904d11f1acbec3",
	  "body": "N_0xf9904d11f1acbec3",
	  "description": "OLD NAME, PLEASE USE Get_2dCoordFrom_3dCoord INSTEAD!"
	},
	"Get_2dCoordFrom_3dCoord()": {
	  "prefix": "Get_2dCoordFrom_3dCoord",
	  "body": [
		"Get_2dCoordFrom_3dCoord(${1:float worldX}, ${2:float worldY}, ${3:float worldZ}, ${4:float* screenX}, ${5:float* screenY})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nWorld to relative screen coords  \nthis world to screen will keep the text on screen. it will keep it in the screen pos. good for a deer hunting mod  \n\nWas named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5\nAs that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed\nto _GET_2D_COORD_FROM_3D_COORD\n\nOld name: N_0xf9904d11f1acbec3"
	},
	"FlashWantedDisplay()": {
	  "prefix": "FlashWantedDisplay",
	  "body": [
		"FlashWantedDisplay(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"GetBlipAlpha()": {
	  "prefix": "GetBlipAlpha",
	  "body": [
		"GetBlipAlpha(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"GetBlipColour()": {
	  "prefix": "GetBlipColour",
	  "body": [
		"GetBlipColour(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"N_0x01a358d9128b7a86()": {
	  "prefix": "N_0x01a358d9128b7a86",
	  "body": "N_0x01a358d9128b7a86",
	  "description": "OLD NAME, PLEASE USE GetActiveWebsiteId INSTEAD!"
	},
	"GetActiveWebsiteId()": {
	  "prefix": "GetActiveWebsiteId",
	  "body": [
		"GetActiveWebsiteId()"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nnative only found once in appinternet.c4  \nsame thing as this but does not need websiteID  \nAny _0xE3B05614DCE1D014(Any p0) // 0xE3B05614DCE1D014 0xD217EE7E  \nreturns current websitePageID  \n\nOld name: N_0x01a358d9128b7a86"
	},
	"GetBlipFromEntity()": {
	  "prefix": "GetBlipFromEntity",
	  "body": [
		"GetBlipFromEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n\nReturns the Blip handle of given Entity.  \n"
	},
	"N_0x56176892826a4fe8()": {
	  "prefix": "N_0x56176892826a4fe8",
	  "body": "N_0x56176892826a4fe8",
	  "description": "OLD NAME, PLEASE USE GetAiBlip INSTEAD!"
	},
	"GetAiBlip()": {
	  "prefix": "GetAiBlip",
	  "body": [
		"GetAiBlip(${1:Ped ped})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n\nReturns the current AI BLIP for the specified ped  \n\nOld name: N_0x56176892826a4fe8"
	},
	"GetBlipInfoIdCoord()": {
	  "prefix": "GetBlipInfoIdCoord",
	  "body": [
		"GetBlipInfoIdCoord(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: Vector3\n"
	},
	"GetBlipCoords()": {
	  "prefix": "GetBlipCoords",
	  "body": [
		"GetBlipCoords(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: Vector3\n"
	},
	"GetBlipInfoIdDisplay()": {
	  "prefix": "GetBlipInfoIdDisplay",
	  "body": [
		"GetBlipInfoIdDisplay(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"GetBlipHudColour()": {
	  "prefix": "GetBlipHudColour",
	  "body": [
		"GetBlipHudColour(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"GetBlipInfoIdIterator()": {
	  "prefix": "GetBlipInfoIdIterator",
	  "body": [
		"GetBlipInfoIdIterator()"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"GetBlipInfoIdType()": {
	  "prefix": "GetBlipInfoIdType",
	  "body": [
		"GetBlipInfoIdType(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nReturns a value based on what the blip is attached to  \n1   \n2   \n3   \n4   \n5   \n6   \n7  \n"
	},
	"GetBlipInfoIdEntityIndex()": {
	  "prefix": "GetBlipInfoIdEntityIndex",
	  "body": [
		"GetBlipInfoIdEntityIndex(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: Entity\n\n\n"
	},
	"GetBlipInfoIdPickupIndex()": {
	  "prefix": "GetBlipInfoIdPickupIndex",
	  "body": [
		"GetBlipInfoIdPickupIndex(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: Pickup\n\nThis function is hard-coded to always return 0.  \n"
	},
	"N_0x2309595ad6145265()": {
	  "prefix": "N_0x2309595ad6145265",
	  "body": "N_0x2309595ad6145265",
	  "description": "OLD NAME, PLEASE USE GetCurrentFrontendMenu INSTEAD!"
	},
	"GetCurrentFrontendMenu()": {
	  "prefix": "GetCurrentFrontendMenu",
	  "body": [
		"GetCurrentFrontendMenu()"
	  ],
	  "description": "Namespace: HUD\nReturns: Hash\n\nif (UI::_2309595AD6145265() == ${fe_menu_version_empty_no_background})  \nSeems to get the current frontend menu  \n\nOld name: N_0x2309595ad6145265"
	},
	"N_0x82352748437638ca()": {
	  "prefix": "N_0x82352748437638ca",
	  "body": "N_0x82352748437638ca",
	  "description": "OLD NAME, PLEASE USE GetCurrentNotification INSTEAD!"
	},
	"GetCurrentNotification()": {
	  "prefix": "GetCurrentNotification",
	  "body": [
		"GetCurrentNotification()"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nReturns the handle for the notification currently displayed on the screen.  \n\nOld name: N_0x82352748437638ca"
	},
	"GetBlipSprite()": {
	  "prefix": "GetBlipSprite",
	  "body": [
		"GetBlipSprite(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nBlips Images + IDs:  \ngtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html  \n"
	},
	"GetFirstBlipInfoId()": {
	  "prefix": "GetFirstBlipInfoId",
	  "body": [
		"GetFirstBlipInfoId(${1:int blipSprite})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n\n8 = waypoint  \n"
	},
	"GetCurrentWebsiteId()": {
	  "prefix": "GetCurrentWebsiteId",
	  "body": [
		"GetCurrentWebsiteId()"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"GetHudComponentPosition()": {
	  "prefix": "GetHudComponentPosition",
	  "body": [
		"GetHudComponentPosition(${1:int id})"
	  ],
	  "description": "Namespace: HUD\nReturns: Vector3\n"
	},
	"GetDefaultScriptRendertargetRenderId()": {
	  "prefix": "GetDefaultScriptRendertargetRenderId",
	  "body": [
		"GetDefaultScriptRendertargetRenderId()"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nThis function is hard-coded to always return 1.  \n"
	},
	"GetLabelText()": {
	  "prefix": "GetLabelText",
	  "body": [
		"GetLabelText(${1:char* labelName})"
	  ],
	  "description": "Namespace: HUD\nReturns: char*\n\nGets a string literal from a label name.  \n"
	},
	"N_0x43e4111189e54f0e()": {
	  "prefix": "N_0x43e4111189e54f0e",
	  "body": "N_0x43e4111189e54f0e",
	  "description": "OLD NAME, PLEASE USE GetLengthOfString INSTEAD!"
	},
	"GetLengthOfString()": {
	  "prefix": "GetLengthOfString",
	  "body": [
		"GetLengthOfString(${1:char* STRING})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\ngets the length of a null terminated string, without checking unicode encodings  \n\nOld name: N_0x43e4111189e54f0e"
	},
	"GetHudColour()": {
	  "prefix": "GetHudColour",
	  "body": [
		"GetHudColour(${1:int hudColorIndex}, ${2:int* r}, ${3:int* g}, ${4:int* b}, ${5:int* a})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nHUD colors and their values: pastebin.com/d9aHPbXN  \n"
	},
	"GetMainPlayerBlipId()": {
	  "prefix": "GetMainPlayerBlipId",
	  "body": [
		"GetMainPlayerBlipId()"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n"
	},
	"GetNextBlipInfoId()": {
	  "prefix": "GetNextBlipInfoId",
	  "body": [
		"GetNextBlipInfoId(${1:int blipSprite})"
	  ],
	  "description": "Namespace: HUD\nReturns: Blip\n"
	},
	"GetLengthOfLiteralString()": {
	  "prefix": "GetLengthOfLiteralString",
	  "body": [
		"GetLengthOfLiteralString(${1:char* string})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nReturns the length of the string passed (much like strlen).  \n"
	},
	"GetLengthOfStringWithThisTextLabel()": {
	  "prefix": "GetLengthOfStringWithThisTextLabel",
	  "body": [
		"GetLengthOfStringWithThisTextLabel(${1:char* gxt})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nReturns the string length of the string from the gxt string .  \n"
	},
	"GetPauseMenuState()": {
	  "prefix": "GetPauseMenuState",
	  "body": [
		"GetPauseMenuState()"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nReturns:  \n5  \n10  \n15  \n20  \n25  \n30  \n35  \n"
	},
	"GetStreetNameFromHashKey()": {
	  "prefix": "GetStreetNameFromHashKey",
	  "body": [
		"GetStreetNameFromHashKey(${1:Hash hash})"
	  ],
	  "description": "Namespace: HUD\nReturns: char*\n\nThis functions converts the hash of a street name into a readable string.  \nFor how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.  \n"
	},
	"GetNamedRendertargetRenderId()": {
	  "prefix": "GetNamedRendertargetRenderId",
	  "body": [
		"GetNamedRendertargetRenderId(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"GetNumberOfActiveBlips()": {
	  "prefix": "GetNumberOfActiveBlips",
	  "body": [
		"GetNumberOfActiveBlips()"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n"
	},
	"GetTextSubstring()": {
	  "prefix": "GetTextSubstring",
	  "body": [
		"GetTextSubstring(${1:char* text}, ${2:int position}, ${3:int length})"
	  ],
	  "description": "Namespace: HUD\nReturns: char*\n\nReturns a substring of a specified length starting at a specified position.  \nExample:  \n// Get \"STRING\" text from \"MY_STRING\"  \nsubStr = UI::_GET_TEXT_SUBSTRING(\"MY_STRING\", 3, 6);  \n"
	},
	"N_0xdb88a37483346780()": {
	  "prefix": "N_0xdb88a37483346780",
	  "body": "N_0xdb88a37483346780",
	  "description": "OLD NAME, PLEASE USE GetTextScaleHeight INSTEAD!"
	},
	"GetTextScaleHeight()": {
	  "prefix": "GetTextScaleHeight",
	  "body": [
		"GetTextScaleHeight(${1:float size}, ${2:int font})"
	  ],
	  "description": "Namespace: HUD\nReturns: float\n\nThis get's the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.  \n\nOld name: N_0xdb88a37483346780"
	},
	"GetTextSubstringSafe()": {
	  "prefix": "GetTextSubstringSafe",
	  "body": [
		"GetTextSubstringSafe(${1:char* text}, ${2:int position}, ${3:int length}, ${4:int maxLength})"
	  ],
	  "description": "Namespace: HUD\nReturns: char*\n\nReturns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.  \nNOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69  \nExample:  \n// Condensed example of how Rockstar uses this function  \nstrLen = UI::GET_LENGTH_OF_LITERAL_STRING(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());  \nsubStr = UI::_GET_TEXT_SUBSTRING_SAFE(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);  \n--  \n\"fm_race_creator.ysc\", line 85115:  \n// parameters modified for clarity  \nBOOL sub_8e5aa(char *text, int length) {  \n    for (i = 0; i <= (length - 2); i += 1) {  \n        if (!GAMEPLAY::ARE_STRINGS_EQUAL(UI::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), \" \")) {  \n            return FALSE;  \n        }  \n    }  \n    return TRUE;  \n}  \n"
	},
	"N_0x9040dfb09be75706()": {
	  "prefix": "N_0x9040dfb09be75706",
	  "body": "N_0x9040dfb09be75706",
	  "description": "OLD NAME, PLEASE USE GetTextScreenLineCount INSTEAD!"
	},
	"EndTextCommandGetLineCount()": {
	  "prefix": "EndTextCommandGetLineCount",
	  "body": "EndTextCommandGetLineCount",
	  "description": "OLD NAME, PLEASE USE GetTextScreenLineCount INSTEAD!"
	},
	"GetTextScreenLineCount()": {
	  "prefix": "GetTextScreenLineCount",
	  "body": [
		"GetTextScreenLineCount(${1:float x}, ${2:float y})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nDetermines how many lines the text string will use when drawn on screen.   \nMust use _BEGIN_TEXT_COMMAND_LINE_COUNT for setting up  \n\nOld name: N_0x9040dfb09be75706\nOld name: EndTextCommandGetLineCount"
	},
	"GivePedToPauseMenu()": {
	  "prefix": "GivePedToPauseMenu",
	  "body": [
		"GivePedToPauseMenu(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\np1 is either 1 or 2 in the PC scripts.  \n"
	},
	"GetTextSubstringSlice()": {
	  "prefix": "GetTextSubstringSlice",
	  "body": [
		"GetTextSubstringSlice(${1:char* text}, ${2:int startPosition}, ${3:int endPosition})"
	  ],
	  "description": "Namespace: HUD\nReturns: char*\n\nReturns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).  \nExample:  \n// Get \"STRING\" text from \"MY_STRING\"  \nsubStr = UI::_GET_TEXT_SUBSTRING_SLICE(\"MY_STRING\", 3, 9);  \n// Overflows are possibly replaced with underscores (needs verification)  \nsubStr = UI::_GET_TEXT_SUBSTRING_SLICE(\"MY_STRING\", 3, 10); // \"STRING_\"?  \n"
	},
	"N_0x6e0eb3eb47c8d7aa()": {
	  "prefix": "N_0x6e0eb3eb47c8d7aa",
	  "body": "N_0x6e0eb3eb47c8d7aa",
	  "description": "OLD NAME, PLEASE USE HasMpGamerTag INSTEAD!"
	},
	"HasMpGamerTag()": {
	  "prefix": "HasMpGamerTag",
	  "body": [
		"HasMpGamerTag()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0x6e0eb3eb47c8d7aa"
	},
	"HasAdditionalTextLoaded()": {
	  "prefix": "HasAdditionalTextLoaded",
	  "body": [
		"HasAdditionalTextLoaded(${1:int slot})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xeb709a36958abe0d()": {
	  "prefix": "N_0xeb709a36958abe0d",
	  "body": "N_0xeb709a36958abe0d",
	  "description": "OLD NAME, PLEASE USE HasMpGamerTagCrewFlagsSet INSTEAD!"
	},
	"HasMpGamerTag_2()": {
	  "prefix": "HasMpGamerTag_2",
	  "body": "HasMpGamerTag_2",
	  "description": "OLD NAME, PLEASE USE HasMpGamerTagCrewFlagsSet INSTEAD!"
	},
	"HasMpGamerTagCrewFlagsSet()": {
	  "prefix": "HasMpGamerTagCrewFlagsSet",
	  "body": [
		"HasMpGamerTagCrewFlagsSet(${1:int gamerTagId})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0xeb709a36958abe0d\nOld name: HasMpGamerTag_2"
	},
	"HasThisAdditionalTextLoaded()": {
	  "prefix": "HasThisAdditionalTextLoaded",
	  "body": [
		"HasThisAdditionalTextLoaded(${1:char* gxt}, ${2:int slot})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nChecks if the specified gxt has loaded into the passed slot.  \n"
	},
	"HideHudAndRadarThisFrame()": {
	  "prefix": "HideHudAndRadarThisFrame",
	  "body": [
		"HideHudAndRadarThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nI think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)  \n"
	},
	"HideHelpTextThisFrame()": {
	  "prefix": "HideHelpTextThisFrame",
	  "body": [
		"HideHelpTextThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"HideLoadingOnFadeThisFrame()": {
	  "prefix": "HideLoadingOnFadeThisFrame",
	  "body": [
		"HideLoadingOnFadeThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"HideNumberOnBlip()": {
	  "prefix": "HideNumberOnBlip",
	  "body": [
		"HideNumberOnBlip(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"HideHudComponentThisFrame()": {
	  "prefix": "HideHudComponentThisFrame",
	  "body": [
		"HideHudComponentThisFrame(${1:int id})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nThis function hides various HUD (Heads-up Display) components.\n\nListed below are the integers and the corresponding HUD component.\n\n-   1 : WANTED_STARS\n-   2 : WEAPON_ICON\n-   3 : CASH\n-   4 : MP_CASH\n-   5 : MP_MESSAGE\n-   6 : VEHICLE_NAME\n-   7 : AREA_NAME\n-   8 : VEHICLE_CLASS\n-   9 : STREET_NAME\n-   10 : HELP_TEXT\n-   11 : FLOATING_HELP_TEXT_1\n-   12 : FLOATING_HELP_TEXT_2\n-   13 : CASH_CHANGE\n-   14 : RETICLE\n-   15 : SUBTITLE_TEXT\n-   16 : RADIO_STATIONS\n-   17 : SAVING_GAME\n-   18 : GAME_STREAM\n-   19 : WEAPON_WHEEL\n-   20 : WEAPON_WHEEL_STATS\n-   21 : HUD_COMPONENTS\n-   22 : HUD_WEAPONS\n\nThese integers also work for the [`SHOW_HUD_COMPONENT_THIS_FRAME`](#_0x0B4DF1FA60C0E664) native, but instead shows the HUD Component."
	},
	"N_0x25f87b30c382fca7()": {
	  "prefix": "N_0x25f87b30c382fca7",
	  "body": "N_0x25f87b30c382fca7",
	  "description": "OLD NAME, PLEASE USE HideHudNotificationsThisFrame INSTEAD!"
	},
	"HideHudNotificationsThisFrame()": {
	  "prefix": "HideHudNotificationsThisFrame",
	  "body": [
		"HideHudNotificationsThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nOnce called each frame hides all above radar notifications.\nOld name: N_0x25f87b30c382fca7"
	},
	"N_0x0c4bbf625ca98c4e()": {
	  "prefix": "N_0x0c4bbf625ca98c4e",
	  "body": "N_0x0c4bbf625ca98c4e",
	  "description": "OLD NAME, PLEASE USE IsAiBlipAlwaysShown INSTEAD!"
	},
	"IsAiBlipAlwaysShown()": {
	  "prefix": "IsAiBlipAlwaysShown",
	  "body": [
		"IsAiBlipAlwaysShown(${1:Ped ped}, ${2:BOOL flag})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nif \"flag\" is true, the AI blip will always be displayed for the specified ped, if it has an AI blip  \nIf \"flag\" is false, the AI blip will only be displayed when the player is in combat with the specified ped, if it has an AI blip  \n\nOld name: N_0x0c4bbf625ca98c4e"
	},
	"IsBlipFlashing()": {
	  "prefix": "IsBlipFlashing",
	  "body": [
		"IsBlipFlashing(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"HideScriptedHudComponentThisFrame()": {
	  "prefix": "HideScriptedHudComponentThisFrame",
	  "body": [
		"HideScriptedHudComponentThisFrame(${1:int id})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"HideSpecialAbilityLockonOperation()": {
	  "prefix": "HideSpecialAbilityLockonOperation",
	  "body": [
		"HideSpecialAbilityLockonOperation(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nHash collision  \nIf used with a Ped that has an AI blip as the first argument:  \n- if p1 is true, a view cone is displayed with the AI blip  \n"
	},
	"IsBlipShortRange()": {
	  "prefix": "IsBlipShortRange",
	  "body": [
		"IsBlipShortRange(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsHelpMessageFadingOut()": {
	  "prefix": "IsHelpMessageFadingOut",
	  "body": [
		"IsHelpMessageFadingOut()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsHudComponentActive()": {
	  "prefix": "IsHudComponentActive",
	  "body": [
		"IsHudComponentActive(${1:int id})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nFull list of components below  \nHUD = 0;  \nHUD_WANTED_STARS = 1;  \nHUD_WEAPON_ICON = 2;  \nHUD_CASH = 3;  \nHUD_MP_CASH = 4;  \nHUD_MP_MESSAGE = 5;  \nHUD_VEHICLE_NAME = 6;  \nHUD_AREA_NAME = 7;  \nHUD_VEHICLE_CLASS = 8;  \nHUD_STREET_NAME = 9;  \nHUD_HELP_TEXT = 10;  \nHUD_FLOATING_HELP_TEXT_1 = 11;  \nHUD_FLOATING_HELP_TEXT_2 = 12;  \nHUD_CASH_CHANGE = 13;  \nHUD_RETICLE = 14;  \nHUD_SUBTITLE_TEXT = 15;  \nHUD_RADIO_STATIONS = 16;  \nHUD_SAVING_GAME = 17;  \nHUD_GAME_STREAM = 18;  \nHUD_WEAPON_WHEEL = 19;  \nHUD_WEAPON_WHEEL_STATS = 20;  \nMAX_HUD_COMPONENTS = 21;  \nMAX_HUD_WEAPONS = 22;  \nMAX_SCRIPTED_HUD_COMPONENTS = 141;  \n"
	},
	"IsBlipOnMinimap()": {
	  "prefix": "IsBlipOnMinimap",
	  "body": [
		"IsBlipOnMinimap(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsHelpMessageBeingDisplayed()": {
	  "prefix": "IsHelpMessageBeingDisplayed",
	  "body": [
		"IsHelpMessageBeingDisplayed()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsHudPreferenceSwitchedOn()": {
	  "prefix": "IsHudPreferenceSwitchedOn",
	  "body": [
		"IsHudPreferenceSwitchedOn()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsHelpMessageOnScreen()": {
	  "prefix": "IsHelpMessageOnScreen",
	  "body": [
		"IsHelpMessageOnScreen()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nDoesn't appear to work, use IS_HELP_MESSAGE_BEING_DISPLAYED instead  \n"
	},
	"N_0xd422fcc5f239a915()": {
	  "prefix": "N_0xd422fcc5f239a915",
	  "body": "N_0xd422fcc5f239a915",
	  "description": "OLD NAME, PLEASE USE IsLoadingPromptBeingDisplayed INSTEAD!"
	},
	"IsLoadingPromptBeingDisplayed()": {
	  "prefix": "IsLoadingPromptBeingDisplayed",
	  "body": [
		"IsLoadingPromptBeingDisplayed()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0xd422fcc5f239a915"
	},
	"N_0x6e31b91145873922()": {
	  "prefix": "N_0x6e31b91145873922",
	  "body": "N_0x6e31b91145873922",
	  "description": "OLD NAME, PLEASE USE IsMinimapAreaRevealed INSTEAD!"
	},
	"IsMinimapAreaRevealed()": {
	  "prefix": "IsMinimapAreaRevealed",
	  "body": [
		"IsMinimapAreaRevealed(${1:float x}, ${2:float y}, ${3:float radius})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0x6e31b91145873922"
	},
	"IsHudHidden()": {
	  "prefix": "IsHudHidden",
	  "body": [
		"IsHudHidden()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x4e929e7a5796fd26()": {
	  "prefix": "N_0x4e929e7a5796fd26",
	  "body": "N_0x4e929e7a5796fd26",
	  "description": "OLD NAME, PLEASE USE IsMpGamerTagActive INSTEAD!"
	},
	"IsMpGamerTagActive()": {
	  "prefix": "IsMpGamerTagActive",
	  "body": [
		"IsMpGamerTagActive(${1:int gamerTagId})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0x4e929e7a5796fd26"
	},
	"IsMessageBeingDisplayed()": {
	  "prefix": "IsMessageBeingDisplayed",
	  "body": [
		"IsMessageBeingDisplayed()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsNamedRendertargetLinked()": {
	  "prefix": "IsNamedRendertargetLinked",
	  "body": [
		"IsNamedRendertargetLinked(${1:Hash hash})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsMissionCreatorBlip()": {
	  "prefix": "IsMissionCreatorBlip",
	  "body": [
		"IsMissionCreatorBlip(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsPauseMenuActive()": {
	  "prefix": "IsPauseMenuActive",
	  "body": [
		"IsPauseMenuActive()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsNamedRendertargetRegistered()": {
	  "prefix": "IsNamedRendertargetRegistered",
	  "body": [
		"IsNamedRendertargetRegistered(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsPauseMenuRestarting()": {
	  "prefix": "IsPauseMenuRestarting",
	  "body": [
		"IsPauseMenuRestarting()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x6f72cd94f7b5b68c()": {
	  "prefix": "N_0x6f72cd94f7b5b68c",
	  "body": "N_0x6f72cd94f7b5b68c",
	  "description": "OLD NAME, PLEASE USE IsOnlinePoliciesMenuActive INSTEAD!"
	},
	"IsOnlinePoliciesMenuActive()": {
	  "prefix": "IsOnlinePoliciesMenuActive",
	  "body": [
		"IsOnlinePoliciesMenuActive()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\nReturns the same as `IS_SOCIAL_CLUB_ACTIVE`.\nOld name: N_0x6f72cd94f7b5b68c"
	},
	"IsRadarPreferenceSwitchedOn()": {
	  "prefix": "IsRadarPreferenceSwitchedOn",
	  "body": [
		"IsRadarPreferenceSwitchedOn()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsScriptedHudComponentActive()": {
	  "prefix": "IsScriptedHudComponentActive",
	  "body": [
		"IsScriptedHudComponentActive(${1:int id})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xaf754f20eb5cd51a()": {
	  "prefix": "N_0xaf754f20eb5cd51a",
	  "body": "N_0xaf754f20eb5cd51a",
	  "description": "OLD NAME, PLEASE USE IsRadarEnabled INSTEAD!"
	},
	"IsRadarEnabled()": {
	  "prefix": "IsRadarEnabled",
	  "body": [
		"IsRadarEnabled()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0xaf754f20eb5cd51a"
	},
	"N_0xc406be343fc4b9af()": {
	  "prefix": "N_0xc406be343fc4b9af",
	  "body": "N_0xc406be343fc4b9af",
	  "description": "OLD NAME, PLEASE USE IsSocialClubActive INSTEAD!"
	},
	"IsSocialClubActive()": {
	  "prefix": "IsSocialClubActive",
	  "body": [
		"IsSocialClubActive()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: N_0xc406be343fc4b9af"
	},
	"IsRadarHidden()": {
	  "prefix": "IsRadarHidden",
	  "body": [
		"IsRadarHidden()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsTextChatActive()": {
	  "prefix": "IsTextChatActive",
	  "body": [
		"IsTextChatActive()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nReturns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.  \n"
	},
	"IsStreamingAdditionalText()": {
	  "prefix": "IsStreamingAdditionalText",
	  "body": [
		"IsStreamingAdditionalText(${1:int p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsWaypointActive()": {
	  "prefix": "IsWaypointActive",
	  "body": [
		"IsWaypointActive()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"IsSubtitlePreferenceSwitchedOn()": {
	  "prefix": "IsSubtitlePreferenceSwitchedOn",
	  "body": [
		"IsSubtitlePreferenceSwitchedOn()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"KeyHudColour()": {
	  "prefix": "KeyHudColour",
	  "body": [
		"KeyHudColour(${1:BOOL p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nhash collision  \n"
	},
	"IsMedicalDisabled()": {
	  "prefix": "IsMedicalDisabled",
	  "body": "IsMedicalDisabled",
	  "description": "OLD NAME, PLEASE USE IsWarningMessageActive INSTEAD!"
	},
	"IsWarningMessageActive()": {
	  "prefix": "IsWarningMessageActive",
	  "body": [
		"IsWarningMessageActive()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nOld name: IsMedicalDisabled"
	},
	"LockMinimapAngle()": {
	  "prefix": "LockMinimapAngle",
	  "body": [
		"LockMinimapAngle(${1:int angle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nLocks the minimap to the specified angle in integer degrees.  \nangle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.  \n"
	},
	"N_0x2162c446dfdf38fd()": {
	  "prefix": "N_0x2162c446dfdf38fd",
	  "body": "N_0x2162c446dfdf38fd",
	  "description": "OLD NAME, PLEASE USE LogDebugInfo INSTEAD!"
	},
	"LogDebugInfo()": {
	  "prefix": "LogDebugInfo",
	  "body": [
		"LogDebugInfo(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nNot present in retail version of the game, actual definiton seems to be  \n_LOG_DEBUG_INFO(char* category, char* debugText);  \n\nOld name: N_0x2162c446dfdf38fd"
	},
	"LinkNamedRendertarget()": {
	  "prefix": "LinkNamedRendertarget",
	  "body": [
		"LinkNamedRendertarget(${1:Hash hash})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"LockMinimapPosition()": {
	  "prefix": "LockMinimapPosition",
	  "body": [
		"LockMinimapPosition(${1:float x}, ${2:float y})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nLocks the minimap to the specified world position.  \n"
	},
	"N_0x052991e59076e4e4()": {
	  "prefix": "N_0x052991e59076e4e4",
	  "body": [
		"N_0x052991e59076e4e4(${1:Hash p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\np0 was always 0xAE2602A3.  \n"
	},
	"N_0x0923dbf87dff735e()": {
	  "prefix": "N_0x0923dbf87dff735e",
	  "body": [
		"N_0x0923dbf87dff735e(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x04655f9d075d0ae5()": {
	  "prefix": "N_0x04655f9d075d0ae5",
	  "body": [
		"N_0x04655f9d075d0ae5(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x0c5a80a9e096d529()": {
	  "prefix": "N_0x0c5a80a9e096d529",
	  "body": [
		"N_0x0c5a80a9e096d529(${1:Any p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x06a320535f5f0248()": {
	  "prefix": "N_0x06a320535f5f0248",
	  "body": [
		"N_0x06a320535f5f0248(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x0cf54f20de43879c()": {
	  "prefix": "N_0x0cf54f20de43879c",
	  "body": [
		"N_0x0cf54f20de43879c(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x09c0403ed9a751c2()": {
	  "prefix": "N_0x09c0403ed9a751c2",
	  "body": [
		"N_0x09c0403ed9a751c2(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x1185a8087587322c()": {
	  "prefix": "N_0x1185a8087587322c",
	  "body": [
		"N_0x1185a8087587322c(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSET_TEXT_??? - Used in golf and golf_mp  \n"
	},
	"N_0x1121bfa1a1a522a8()": {
	  "prefix": "N_0x1121bfa1a1a522a8",
	  "body": [
		"N_0x1121bfa1a1a522a8()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x14621bb1df14e2b2()": {
	  "prefix": "N_0x14621bb1df14e2b2",
	  "body": [
		"N_0x14621bb1df14e2b2()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nEnables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.\n\nTo disable the keys, use [`0xEC9264727EEC0F28`](#_0xEC9264727EEC0F28)."
	},
	"N_0x13c4b962653a5280()": {
	  "prefix": "N_0x13c4b962653a5280",
	  "body": [
		"N_0x13c4b962653a5280()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x15cfa549788d35ef()": {
	  "prefix": "N_0x15cfa549788d35ef",
	  "body": [
		"N_0x15cfa549788d35ef()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nDisplays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand."
	},
	"N_0x170f541e1cadd1de()": {
	  "prefix": "N_0x170f541e1cadd1de",
	  "body": [
		"N_0x170f541e1cadd1de(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nRelated to displaying cash on the HUD  \nAlways called before UI::_SET_SINGLEPLAYER_HUD_CASH in decompiled scripts  \n"
	},
	"N_0x14c9fdcc41f81f63()": {
	  "prefix": "N_0x14c9fdcc41f81f63",
	  "body": [
		"N_0x14c9fdcc41f81f63(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x16a304e6cb2bfab9()": {
	  "prefix": "N_0x16a304e6cb2bfab9",
	  "body": [
		"N_0x16a304e6cb2bfab9(${1:int r}, ${2:int g}, ${3:int b}, ${4:int a})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x1eae6dd17b7a5efa()": {
	  "prefix": "N_0x1eae6dd17b7a5efa",
	  "body": [
		"N_0x1eae6dd17b7a5efa(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x17ad8c9706bdd88a()": {
	  "prefix": "N_0x17ad8c9706bdd88a",
	  "body": [
		"N_0x17ad8c9706bdd88a(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nRelated to notification color flashing, setting p0 to 0 invalidates a `_SET_NOTIFICATION_FLASH_COLOR` call for the target notification.\n\n\n    var uVar0;\n    var uVar1;\n    var uVar2;\n    var uVar3;\n    int iVar4;\n    iVar4 = 1;\n    \n    UI::GET_HUD_COLOUR(1, &uVar0, &uVar1, &uVar2, &uVar3);\n    UI::_SET_NOTIFICATION_FLASH_COLOR(uVar0, uVar1, uVar2, uVar3);\n    UI::_0x17AD8C9706BDD88A(iVar4);\n    UI::_SET_NOTIFICATION_TEXT_ENTRY(\"RSMAN_N\");\n    UI::_DRAW_NOTIFICATION_2(1, 1);\n"
	},
	"N_0x20fe7fdfeead38c0()": {
	  "prefix": "N_0x20fe7fdfeead38c0",
	  "body": [
		"N_0x20fe7fdfeead38c0()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2432784aca090da4()": {
	  "prefix": "N_0x2432784aca090da4",
	  "body": [
		"N_0x2432784aca090da4(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\np0 is int or bool  \n"
	},
	"N_0x211c4ef450086857()": {
	  "prefix": "N_0x211c4ef450086857",
	  "body": [
		"N_0x211c4ef450086857()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x24a49beaf468dc90()": {
	  "prefix": "N_0x24a49beaf468dc90",
	  "body": [
		"N_0x24a49beaf468dc90(${1:Any p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x214cd562a939246a()": {
	  "prefix": "N_0x214cd562a939246a",
	  "body": [
		"N_0x214cd562a939246a()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nexample  \nif (UI::IS_HELP_MESSAGE_BEING_DISPLAYED()&&(!UI::_214CD562A939246A())) {  \n        return 0;  \n}  \n"
	},
	"N_0x25615540d894b814()": {
	  "prefix": "N_0x25615540d894b814",
	  "body": [
		"N_0x25615540d894b814(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2632482fd6b9ab87()": {
	  "prefix": "N_0x2632482fd6b9ab87",
	  "body": [
		"N_0x2632482fd6b9ab87()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2790f4b17d098e26()": {
	  "prefix": "N_0x2790f4b17d098e26",
	  "body": [
		"N_0x2790f4b17d098e26(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2708fc083123f9ff()": {
	  "prefix": "N_0x2708fc083123f9ff",
	  "body": [
		"N_0x2708fc083123f9ff()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2a25adc48f87841f()": {
	  "prefix": "N_0x2a25adc48f87841f",
	  "body": [
		"N_0x2a25adc48f87841f()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x2916a928514c9827()": {
	  "prefix": "N_0x2916a928514c9827",
	  "body": [
		"N_0x2916a928514c9827()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2c9f302398e13141()": {
	  "prefix": "N_0x2c9f302398e13141",
	  "body": [
		"N_0x2c9f302398e13141(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2c173ae2bdb9385e()": {
	  "prefix": "N_0x2c173ae2bdb9385e",
	  "body": [
		"N_0x2c173ae2bdb9385e(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\nSeems to always return 0 from what I can tell. I've tried a lot of different blip related natives and it always seems to return 0.\nDecompiled scripts always pass a blip handle as p0.\n\n\n// freemode.c\nif (HUD::DOES_BLIP_EXIST(Global_2415594[iParam0]))\n{\n    if (HUD::_0x2C173AE2BDB9385E(Global_2415594[iParam0]) != 0)\n    {\n        return 1;\n    }\n}\n"
	},
	"N_0x2e22fefa0100275e()": {
	  "prefix": "N_0x2e22fefa0100275e",
	  "body": [
		"N_0x2e22fefa0100275e()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x2de6c5e2e996f178()": {
	  "prefix": "N_0x2de6c5e2e996f178",
	  "body": [
		"N_0x2de6c5e2e996f178(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x2f057596f2bd0061()": {
	  "prefix": "N_0x2f057596f2bd0061",
	  "body": [
		"N_0x2f057596f2bd0061()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n\nAppears to return whether the player is using the pause menu store. Can't be sure though.  \n"
	},
	"N_0x317eba71d7543f52()": {
	  "prefix": "N_0x317eba71d7543f52",
	  "body": [
		"N_0x317eba71d7543f52(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nFrom the decompiled scripts, called 61 times:  \nUI::_317EBA71D7543F52(&v_13, &v_13, &v_3, &v_3);  \n"
	},
	"N_0x33ee12743ccd6343()": {
	  "prefix": "N_0x33ee12743ccd6343",
	  "body": [
		"N_0x33ee12743ccd6343(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x35edd5b2e3ff01c0()": {
	  "prefix": "N_0x35edd5b2e3ff01c0",
	  "body": [
		"N_0x35edd5b2e3ff01c0()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x32888337579a5970()": {
	  "prefix": "N_0x32888337579a5970",
	  "body": [
		"N_0x32888337579a5970()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nStops loading screen tips shown by invoking either `_0x488043841BBE156F` or `_0x15CFA549788D35EF`"
	},
	"N_0x359af31a4b52f5ed()": {
	  "prefix": "N_0x359af31a4b52f5ed",
	  "body": [
		"N_0x359af31a4b52f5ed()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x36c1451a88a09630()": {
	  "prefix": "N_0x36c1451a88a09630",
	  "body": [
		"N_0x36c1451a88a09630(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x3d9acb1eb139e702()": {
	  "prefix": "N_0x3d9acb1eb139e702",
	  "body": [
		"N_0x3d9acb1eb139e702()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x3bab9a4e4f2ff5c7()": {
	  "prefix": "N_0x3bab9a4e4f2ff5c7",
	  "body": [
		"N_0x3bab9a4e4f2ff5c7()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x402f9ed62087e898()": {
	  "prefix": "N_0x402f9ed62087e898",
	  "body": [
		"N_0x402f9ed62087e898()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x3f0cf9cb7e589b88()": {
	  "prefix": "N_0x3f0cf9cb7e589b88",
	  "body": [
		"N_0x3f0cf9cb7e589b88()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x41350b4fc28e3941()": {
	  "prefix": "N_0x41350b4fc28e3941",
	  "body": [
		"N_0x41350b4fc28e3941(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x3f5cc444dcaaa8f2()": {
	  "prefix": "N_0x3f5cc444dcaaa8f2",
	  "body": [
		"N_0x3f5cc444dcaaa8f2(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x488043841bbe156f()": {
	  "prefix": "N_0x488043841bbe156f",
	  "body": [
		"N_0x488043841bbe156f()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nDisplays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand."
	},
	"N_0x4167efe0527d706e()": {
	  "prefix": "N_0x4167efe0527d706e",
	  "body": [
		"N_0x4167efe0527d706e()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x4a0c7c9bb10abb36()": {
	  "prefix": "N_0x4a0c7c9bb10abb36",
	  "body": [
		"N_0x4a0c7c9bb10abb36(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x4a9923385bdb9dad()": {
	  "prefix": "N_0x4a9923385bdb9dad",
	  "body": [
		"N_0x4a9923385bdb9dad()"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nexample:  \nif (!((v_7)==UI::_4A9923385BDB9DAD())) {  \n        UI::SET_BLIP_SPRITE((v_6), (v_7));  \n    }  \nThis function is hard-coded to always return 1.  \n"
	},
	"N_0x4e3cd0ef8a489541()": {
	  "prefix": "N_0x4e3cd0ef8a489541",
	  "body": [
		"N_0x4e3cd0ef8a489541()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x4b5b620c9b59ed34()": {
	  "prefix": "N_0x4b5b620c9b59ed34",
	  "body": [
		"N_0x4b5b620c9b59ed34(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x551df99658db6ee8()": {
	  "prefix": "N_0x551df99658db6ee8",
	  "body": [
		"N_0x551df99658db6ee8(${1:float p0}, ${2:float p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x54318c915d27e4ce()": {
	  "prefix": "N_0x54318c915d27e4ce",
	  "body": [
		"N_0x54318c915d27e4ce(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x577599cced639ca2()": {
	  "prefix": "N_0x577599cced639ca2",
	  "body": [
		"N_0x577599cced639ca2(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x56c8b608cfd49854()": {
	  "prefix": "N_0x56c8b608cfd49854",
	  "body": [
		"N_0x56c8b608cfd49854()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nEnables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again."
	},
	"N_0x57d760d55f54e071()": {
	  "prefix": "N_0x57d760d55f54e071",
	  "body": [
		"N_0x57d760d55f54e071(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x583049884a2eee3c()": {
	  "prefix": "N_0x583049884a2eee3c",
	  "body": [
		"N_0x583049884a2eee3c()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x593feae1f73392d4()": {
	  "prefix": "N_0x593feae1f73392d4",
	  "body": [
		"N_0x593feae1f73392d4()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x5bff36d6ed83e0ae()": {
	  "prefix": "N_0x5bff36d6ed83e0ae",
	  "body": [
		"N_0x5bff36d6ed83e0ae()"
	  ],
	  "description": "Namespace: HUD\nReturns: Vector3\n"
	},
	"N_0x5fbd7095fe7ae57f()": {
	  "prefix": "N_0x5fbd7095fe7ae57f",
	  "body": [
		"N_0x5fbd7095fe7ae57f(${1:Any p0}, ${2:float* p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x60734cc207c9833c()": {
	  "prefix": "N_0x60734cc207c9833c",
	  "body": [
		"N_0x60734cc207c9833c(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x60e892ba4f5bdca4()": {
	  "prefix": "N_0x60e892ba4f5bdca4",
	  "body": [
		"N_0x60e892ba4f5bdca4()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSomething with Social Club or online.  \n"
	},
	"N_0x62e849b7eb28e770()": {
	  "prefix": "N_0x62e849b7eb28e770",
	  "body": [
		"N_0x62e849b7eb28e770(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x632b2940c67f4ea9()": {
	  "prefix": "N_0x632b2940c67f4ea9",
	  "body": [
		"N_0x632b2940c67f4ea9(${1:int scaleformHandle}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x66e7cb63c97b7d20()": {
	  "prefix": "N_0x66e7cb63c97b7d20",
	  "body": [
		"N_0x66e7cb63c97b7d20()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x6a1738b4323fe2d9()": {
	  "prefix": "N_0x6a1738b4323fe2d9",
	  "body": [
		"N_0x6a1738b4323fe2d9(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x6b1de27ee78e6a19()": {
	  "prefix": "N_0x6b1de27ee78e6a19",
	  "body": [
		"N_0x6b1de27ee78e6a19(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x6ef54ab721dc6242()": {
	  "prefix": "N_0x6ef54ab721dc6242",
	  "body": [
		"N_0x6ef54ab721dc6242()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x6cdd58146a436083()": {
	  "prefix": "N_0x6cdd58146a436083",
	  "body": [
		"N_0x6cdd58146a436083(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x6f1554b0cc2089fa()": {
	  "prefix": "N_0x6f1554b0cc2089fa",
	  "body": [
		"N_0x6f1554b0cc2089fa(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x72dd432f3cdfc0ee()": {
	  "prefix": "N_0x72dd432f3cdfc0ee",
	  "body": [
		"N_0x72dd432f3cdfc0ee(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float radius}, ${5:int p4})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x72c1056d678bb7d8()": {
	  "prefix": "N_0x72c1056d678bb7d8",
	  "body": [
		"N_0x72c1056d678bb7d8(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAppears to be a HIDE_* native.  \n"
	},
	"N_0x7669f9e39dc17063()": {
	  "prefix": "N_0x7669f9e39dc17063",
	  "body": [
		"N_0x7669f9e39dc17063()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nEnables drawing some hud components, such as help labels, this frame, when the player is dead."
	},
	"N_0x75a16c3da34f1245()": {
	  "prefix": "N_0x75a16c3da34f1245",
	  "body": [
		"N_0x75a16c3da34f1245(${1:Blip blip}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x7792424aa0eac32e()": {
	  "prefix": "N_0x7792424aa0eac32e",
	  "body": [
		"N_0x7792424aa0eac32e()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x7679cc1bcebe3d4c()": {
	  "prefix": "N_0x7679cc1bcebe3d4c",
	  "body": [
		"N_0x7679cc1bcebe3d4c(${1:Any p0}, ${2:float p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x788e7fd431bd67f1()": {
	  "prefix": "N_0x788e7fd431bd67f1",
	  "body": [
		"N_0x788e7fd431bd67f1(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x77f16b447824da6c()": {
	  "prefix": "N_0x77f16b447824da6c",
	  "body": [
		"N_0x77f16b447824da6c(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x7ae0589093a2e088()": {
	  "prefix": "N_0x7ae0589093a2e088",
	  "body": [
		"N_0x7ae0589093a2e088(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x784ba7e0eceb4178()": {
	  "prefix": "N_0x784ba7e0eceb4178",
	  "body": [
		"N_0x784ba7e0eceb4178(${1:Any p0}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x7c226d5346d4d10a()": {
	  "prefix": "N_0x7c226d5346d4d10a",
	  "body": [
		"N_0x7c226d5346d4d10a(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x7e17be53e1aaabaf()": {
	  "prefix": "N_0x7e17be53e1aaabaf",
	  "body": [
		"N_0x7e17be53e1aaabaf(${1:int* p0}, ${2:int* p1}, ${3:int* p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x7b21e0bb01e8224a()": {
	  "prefix": "N_0x7b21e0bb01e8224a",
	  "body": [
		"N_0x7b21e0bb01e8224a(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x80fe4f3ab4e1b62a()": {
	  "prefix": "N_0x80fe4f3ab4e1b62a",
	  "body": [
		"N_0x80fe4f3ab4e1b62a()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x7cd934010e115c2c()": {
	  "prefix": "N_0x7cd934010e115c2c",
	  "body": [
		"N_0x7cd934010e115c2c(${1:Ped ped})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x801879a9b4f4b2fb()": {
	  "prefix": "N_0x801879a9b4f4b2fb",
	  "body": [
		"N_0x801879a9b4f4b2fb()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x82cedc33687e1f50()": {
	  "prefix": "N_0x82cedc33687e1f50",
	  "body": [
		"N_0x82cedc33687e1f50(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x8817605c2ba76200()": {
	  "prefix": "N_0x8817605c2ba76200",
	  "body": [
		"N_0x8817605c2ba76200()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x8efccf6ec66d85e4()": {
	  "prefix": "N_0x8efccf6ec66d85e4",
	  "body": [
		"N_0x8efccf6ec66d85e4(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n\nExample, only occurrence in the scripts:  \nUI::_8EFCCF6EC66D85E4(&v_23, &v_13, &v_13, 1, v_34);  \n"
	},
	"N_0x817b86108eb94e51()": {
	  "prefix": "N_0x817b86108eb94e51",
	  "body": [
		"N_0x817b86108eb94e51(${1:BOOL p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:Any* p8})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nUI::_817B86108EB94E51(1, &g_189F36._f10CD1[0/*16*/], &g_189F36._f10CD1[1/*16*/], &g_189F36._f10CD1[2/*16*/], &g_189F36._f10CD1[3/*16*/], &g_189F36._f10CD1[4/*16*/], &g_189F36._f10CD1[5/*16*/], &g_189F36._f10CD1[6/*16*/], &g_189F36._f10CD1[7/*16*/]);  \n"
	},
	"N_0x84698ab38d0c6636()": {
	  "prefix": "N_0x84698ab38d0c6636",
	  "body": [
		"N_0x84698ab38d0c6636(${1:Hash hash})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x9049fe339d5f6f6f()": {
	  "prefix": "N_0x9049fe339d5f6f6f",
	  "body": [
		"N_0x9049fe339d5f6f6f()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x9135584d09a3437e()": {
	  "prefix": "N_0x9135584d09a3437e",
	  "body": [
		"N_0x9135584d09a3437e()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n\nreturn bool according to scripts  \n"
	},
	"N_0x8f08017f9d7c47bd()": {
	  "prefix": "N_0x8f08017f9d7c47bd",
	  "body": [
		"N_0x8f08017f9d7c47bd(${1:Any p0}, ${2:Any* p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x95cf81bd06ee1887()": {
	  "prefix": "N_0x95cf81bd06ee1887",
	  "body": [
		"N_0x95cf81bd06ee1887()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x90a6526cf0381030()": {
	  "prefix": "N_0x90a6526cf0381030",
	  "body": [
		"N_0x90a6526cf0381030(${1:Any p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0x98215325a695e78a()": {
	  "prefix": "N_0x98215325a695e78a",
	  "body": [
		"N_0x98215325a695e78a(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x9245e81072704b8a()": {
	  "prefix": "N_0x9245e81072704b8a",
	  "body": [
		"N_0x9245e81072704b8a(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x9c16459b2324b2cf()": {
	  "prefix": "N_0x9c16459b2324b2cf",
	  "body": [
		"N_0x9c16459b2324b2cf(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x9e778248d6685fe0()": {
	  "prefix": "N_0x9e778248d6685fe0",
	  "body": [
		"N_0x9e778248d6685fe0(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nUI::0x7AD67C95(\"Gallery\");  \nUI::0x7AD67C95(\"Missions\");  \nUI::0x7AD67C95(\"General\");  \nUI::0x7AD67C95(\"Playlists\");  \n"
	},
	"N_0x975d66a0bc17064c()": {
	  "prefix": "N_0x975d66a0bc17064c",
	  "body": [
		"N_0x975d66a0bc17064c(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xa13e93403f26c812()": {
	  "prefix": "N_0xa13e93403f26c812",
	  "body": [
		"N_0xa13e93403f26c812(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0x98c3cf913d895111()": {
	  "prefix": "N_0x98c3cf913d895111",
	  "body": [
		"N_0x98c3cf913d895111(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xa277800a9eae340e()": {
	  "prefix": "N_0xa277800a9eae340e",
	  "body": [
		"N_0xa277800a9eae340e()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xa13c11e1b5c06bfc()": {
	  "prefix": "N_0xa13c11e1b5c06bfc",
	  "body": [
		"N_0xa13c11e1b5c06bfc()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xa48931185f0536fe()": {
	  "prefix": "N_0xa48931185f0536fe",
	  "body": [
		"N_0xa48931185f0536fe()"
	  ],
	  "description": "Namespace: HUD\nReturns: Hash\n"
	},
	"N_0xa17784fca9548d15()": {
	  "prefix": "N_0xa17784fca9548d15",
	  "body": [
		"N_0xa17784fca9548d15(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xa4dede28b1814289()": {
	  "prefix": "N_0xa4dede28b1814289",
	  "body": [
		"N_0xa4dede28b1814289()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xa238192f33110615()": {
	  "prefix": "N_0xa238192f33110615",
	  "body": [
		"N_0xa238192f33110615(${1:int* p0}, ${2:int* p1}, ${3:int* p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xa8b6afdac320ac87()": {
	  "prefix": "N_0xa8b6afdac320ac87",
	  "body": [
		"N_0xa8b6afdac320ac87(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xa9cbfd40b3fa3010()": {
	  "prefix": "N_0xa9cbfd40b3fa3010",
	  "body": [
		"N_0xa9cbfd40b3fa3010()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xa8fdb297a8d25fba()": {
	  "prefix": "N_0xa8fdb297a8d25fba",
	  "body": [
		"N_0xa8fdb297a8d25fba()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xaded7f5748acafe6()": {
	  "prefix": "N_0xaded7f5748acafe6",
	  "body": [
		"N_0xaded7f5748acafe6()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nDisplays \"normal\" notifications again after calling `_0x56C8B608CFD49854` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script)."
	},
	"N_0xaf42195a42c63bba()": {
	  "prefix": "N_0xaf42195a42c63bba",
	  "body": [
		"N_0xaf42195a42c63bba()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xb094bc1db4018240()": {
	  "prefix": "N_0xb094bc1db4018240",
	  "body": [
		"N_0xb094bc1db4018240(${1:Any p0}, ${2:Any p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xb13dcb4c6faad238()": {
	  "prefix": "N_0xb13dcb4c6faad238",
	  "body": [
		"N_0xb13dcb4c6faad238(${1:Ped ped}, ${2:BOOL toggle}, ${3:Any p3})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nCalled in decompiled scripts as alternative to _SET_PED_ENEMY_AI_BLIP in an else, when the additional parameter p3 is not -1  \n"
	},
	"N_0xb2a592b04648a9cb()": {
	  "prefix": "N_0xb2a592b04648a9cb",
	  "body": [
		"N_0xb2a592b04648a9cb()"
	  ],
	  "description": "Namespace: HUD\nReturns: Pickup\n"
	},
	"N_0xb552929b85fc27ec()": {
	  "prefix": "N_0xb552929b85fc27ec",
	  "body": [
		"N_0xb552929b85fc27ec(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xb6871b0555b02996()": {
	  "prefix": "N_0xb6871b0555b02996",
	  "body": [
		"N_0xb6871b0555b02996(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xb695e2cd0a2da9ee()": {
	  "prefix": "N_0xb695e2cd0a2da9ee",
	  "body": [
		"N_0xb695e2cd0a2da9ee()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xb99c4e4d9499df29()": {
	  "prefix": "N_0xb99c4e4d9499df29",
	  "body": [
		"N_0xb99c4e4d9499df29(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xba751764f0821256()": {
	  "prefix": "N_0xba751764f0821256",
	  "body": [
		"N_0xba751764f0821256()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xb9c362babecddc7a()": {
	  "prefix": "N_0xb9c362babecddc7a",
	  "body": [
		"N_0xb9c362babecddc7a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xba8d65c1c65702e5()": {
	  "prefix": "N_0xba8d65c1c65702e5",
	  "body": [
		"N_0xba8d65c1c65702e5(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xbae4f9b97cd43b30()": {
	  "prefix": "N_0xbae4f9b97cd43b30",
	  "body": [
		"N_0xbae4f9b97cd43b30(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xbf4f34a85ca2970c()": {
	  "prefix": "N_0xbf4f34a85ca2970c",
	  "body": [
		"N_0xbf4f34a85ca2970c()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xc2d15bef167e27bc()": {
	  "prefix": "N_0xc2d15bef167e27bc",
	  "body": [
		"N_0xc2d15bef167e27bc()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xc2d2ad9eaae265b8()": {
	  "prefix": "N_0xc2d2ad9eaae265b8",
	  "body": [
		"N_0xc2d2ad9eaae265b8()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xc4278f70131baa6d()": {
	  "prefix": "N_0xc4278f70131baa6d",
	  "body": [
		"N_0xc4278f70131baa6d(${1:Blip p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xc65ab383cd91df98()": {
	  "prefix": "N_0xc65ab383cd91df98",
	  "body": [
		"N_0xc65ab383cd91df98()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOften called after _REMOVE_LOADING_PROMPT. Unsure what exactly it does, but It references busy_spinner, I can only guess its freeing the busy_spinner scaleform from memory  \n"
	},
	"N_0xc594b315edf2d4af()": {
	  "prefix": "N_0xc594b315edf2d4af",
	  "body": [
		"N_0xc594b315edf2d4af(${1:Ped ped})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nInteresting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS  \n"
	},
	"N_0xc8e1071177a23be5()": {
	  "prefix": "N_0xc8e1071177a23be5",
	  "body": [
		"N_0xc8e1071177a23be5(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xc78e239ac5b2ddb9()": {
	  "prefix": "N_0xc78e239ac5b2ddb9",
	  "body": [
		"N_0xc78e239ac5b2ddb9(${1:BOOL p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xca6b2f7ce32ab653()": {
	  "prefix": "N_0xca6b2f7ce32ab653",
	  "body": [
		"N_0xca6b2f7ce32ab653(${1:Any p0}, ${2:Any* p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xc8f3aaf93d0600bf()": {
	  "prefix": "N_0xc8f3aaf93d0600bf",
	  "body": [
		"N_0xc8f3aaf93d0600bf(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xcd74233600c4ea6b()": {
	  "prefix": "N_0xcd74233600c4ea6b",
	  "body": [
		"N_0xcd74233600c4ea6b(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xcc3fdded67bcfc63()": {
	  "prefix": "N_0xcc3fdded67bcfc63",
	  "body": [
		"N_0xcc3fdded67bcfc63()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nAllows opening the pause menu this frame, when the player is dead."
	},
	"N_0xcef214315d276fd1()": {
	  "prefix": "N_0xcef214315d276fd1",
	  "body": [
		"N_0xcef214315d276fd1(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xd1942374085c8469()": {
	  "prefix": "N_0xd1942374085c8469",
	  "body": [
		"N_0xd1942374085c8469(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xcdca26e80faecb8f()": {
	  "prefix": "N_0xcdca26e80faecb8f",
	  "body": [
		"N_0xcdca26e80faecb8f()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xd68a5ff8a3a89874()": {
	  "prefix": "N_0xd68a5ff8a3a89874",
	  "body": [
		"N_0xd68a5ff8a3a89874(${1:int r}, ${2:int g}, ${3:int b}, ${4:int a})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xd2049635deb9c375()": {
	  "prefix": "N_0xd2049635deb9c375",
	  "body": [
		"N_0xd2049635deb9c375()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0xd4438c0564490e63()": {
	  "prefix": "N_0xd4438c0564490e63",
	  "body": [
		"N_0xd4438c0564490e63()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xd8e694757bcea8e9()": {
	  "prefix": "N_0xd8e694757bcea8e9",
	  "body": [
		"N_0xd8e694757bcea8e9()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xdd2238f57b977751()": {
	  "prefix": "N_0xdd2238f57b977751",
	  "body": [
		"N_0xdd2238f57b977751(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xdaf87174be7454ff()": {
	  "prefix": "N_0xdaf87174be7454ff",
	  "body": [
		"N_0xdaf87174be7454ff(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xe0130b41d3cf4574()": {
	  "prefix": "N_0xe0130b41d3cf4574",
	  "body": [
		"N_0xe0130b41d3cf4574()"
	  ],
	  "description": "Namespace: HUD\nReturns: float\n"
	},
	"N_0xde03620f8703a9df()": {
	  "prefix": "N_0xde03620f8703a9df",
	  "body": [
		"N_0xde03620f8703a9df()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xe3b05614dce1d014()": {
	  "prefix": "N_0xe3b05614dce1d014",
	  "body": [
		"N_0xe3b05614dce1d014(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n\nUI::GET_CURRENT_WEBSITE_PAGE_ID(int websiteID)  \nreturns the current website page sometimes returns false  \n"
	},
	"N_0xe1cd1e48e025e661()": {
	  "prefix": "N_0xe1cd1e48e025e661",
	  "body": [
		"N_0xe1cd1e48e025e661()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xec9264727eec0f28()": {
	  "prefix": "N_0xec9264727eec0f28",
	  "body": [
		"N_0xec9264727eec0f28()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nDisables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.\n\nTo enable the keys again, use [`0x14621BB1DF14E2B2`](#_0x14621BB1DF14E2B2)."
	},
	"N_0xe67c6dfd386ea5e7()": {
	  "prefix": "N_0xe67c6dfd386ea5e7",
	  "body": [
		"N_0xe67c6dfd386ea5e7(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xf06ebb91a81e09e3()": {
	  "prefix": "N_0xf06ebb91a81e09e3",
	  "body": [
		"N_0xf06ebb91a81e09e3(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xee4c0e6dbc6f2c6f()": {
	  "prefix": "N_0xee4c0e6dbc6f2c6f",
	  "body": [
		"N_0xee4c0e6dbc6f2c6f()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nHides the hud element displayed by _0x523A590C1A3CC0D3  \n"
	},
	"N_0xf1a6c18b35bcade6()": {
	  "prefix": "N_0xf1a6c18b35bcade6",
	  "body": [
		"N_0xf1a6c18b35bcade6(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xf47e567b3630dd12()": {
	  "prefix": "N_0xf47e567b3630dd12",
	  "body": [
		"N_0xf47e567b3630dd12(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xf13fe2a80c05c561()": {
	  "prefix": "N_0xf13fe2a80c05c561",
	  "body": [
		"N_0xf13fe2a80c05c561()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xf98e4b3e56afc7b1()": {
	  "prefix": "N_0xf98e4b3e56afc7b1",
	  "body": [
		"N_0xf98e4b3e56afc7b1(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xf284ac67940c6812()": {
	  "prefix": "N_0xf284ac67940c6812",
	  "body": [
		"N_0xf284ac67940c6812()"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\n"
	},
	"N_0xfdb423997fa30340()": {
	  "prefix": "N_0xfdb423997fa30340",
	  "body": [
		"N_0xfdb423997fa30340()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xfcfacd0db9d7a57d()": {
	  "prefix": "N_0xfcfacd0db9d7a57d",
	  "body": [
		"N_0xfcfacd0db9d7a57d(${1:Ped ped}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ObjectDecalToggle()": {
	  "prefix": "ObjectDecalToggle",
	  "body": [
		"ObjectDecalToggle(${1:Hash hash})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nPlease change back to _0x444D8CF241EC25C5 (hash collision)  \n"
	},
	"N_0xfdd85225b2dea55e()": {
	  "prefix": "N_0xfdd85225b2dea55e",
	  "body": [
		"N_0xfdd85225b2dea55e()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x75d3691713c3b05a()": {
	  "prefix": "N_0x75d3691713c3b05a",
	  "body": "N_0x75d3691713c3b05a",
	  "description": "OLD NAME, PLEASE USE OpenSocialClubMenu INSTEAD!"
	},
	"OpenSocialClubMenu()": {
	  "prefix": "OpenSocialClubMenu",
	  "body": [
		"OpenSocialClubMenu()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nUses the `SOCIAL_CLUB2` scaleform. <https://i.imgur.com/KleabIw.png>\n\nOld name: `_SHOW_SOCIAL_CLUB_BANNED_SCREEN`\nOld name: N_0x75d3691713c3b05a"
	},
	"N_0xfdec055ab549e328()": {
	  "prefix": "N_0xfdec055ab549e328",
	  "body": [
		"N_0xfdec055ab549e328()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"PulseBlip()": {
	  "prefix": "PulseBlip",
	  "body": [
		"PulseBlip(${1:Blip blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"RegisterNamedRendertarget()": {
	  "prefix": "RegisterNamedRendertarget",
	  "body": [
		"RegisterNamedRendertarget(${1:char* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"N_0xdd564bdd0472c936()": {
	  "prefix": "N_0xdd564bdd0472c936",
	  "body": "N_0xdd564bdd0472c936",
	  "description": "OLD NAME, PLEASE USE PauseMenuActivateContext INSTEAD!"
	},
	"AddFrontendMenuContext()": {
	  "prefix": "AddFrontendMenuContext",
	  "body": "AddFrontendMenuContext",
	  "description": "OLD NAME, PLEASE USE PauseMenuActivateContext INSTEAD!"
	},
	"PauseMenuActivateContext()": {
	  "prefix": "PauseMenuActivateContext",
	  "body": [
		"PauseMenuActivateContext(${1:Hash hash})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nActivates the specified frontend menu context.\n\npausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'. \n\nThe `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.\n\nThe `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.\n\nThis basically allows you to hide certain menu sections, or things like instructional buttons.\n\nSee the old description below for more info.\n\n* * *\n\n> Seems to add/set the current menu context (to show/hide buttons?)\n> Pausemenu.xml:\n> `<Contexts>*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION</Contexts>`\n> Code:\n>\n> \n> if (...) {\n>     sub_bbd34(a_0, 0, \"FM_BET_HELP\");\n>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_available}); // This native\n>     UI::OBJECT_DECAL_TOGGLE(${bet_locked});\n> } else {\n>     sub_bbd34(a_0, 0, \"\");\n>     UI::OBJECT_DECAL_TOGGLE(${bet_available});\n>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_locked}); // This native\n> }\n> \n>\n> OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision\n> // Old\n> Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, \"OBJECT_DECAL_TOGGLE\" is called prior.\nOld name: N_0xdd564bdd0472c936\nOld name: AddFrontendMenuContext"
	},
	"RemoveBlip()": {
	  "prefix": "RemoveBlip",
	  "body": [
		"RemoveBlip(${1:Blip* blip})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIn the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.  \nE.g.:  \nPed pped = PLAYER::PLAYER_PED_ID();  \nVehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);  \nBlip b = UI::ADD_BLIP_FOR_ENTITY(v);  \nworks fine.  \nBut later attempting to delete it with:  \nBlip b = UI::GET_BLIP_FROM_ENTITY(v);  \nif (UI::DOES_BLIP_EXIST(b)) UI::REMOVE_BLIP(&b);  \ndoesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).  \nThus for me, UI::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.  \n-------------  \nPassing the address of the variable instead of the value works for me.  \ne.g.  \nint blip = UI::ADD_BLIP_FOR_ENTITY(ped);  \nUI::REMOVE_BLIP(&blip);  \nRemove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.  \n--  \nIt crashes my game.  \n"
	},
	"RefreshWaypoint()": {
	  "prefix": "RefreshWaypoint",
	  "body": [
		"RefreshWaypoint()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x31698aa80e0223f8()": {
	  "prefix": "N_0x31698aa80e0223f8",
	  "body": "N_0x31698aa80e0223f8",
	  "description": "OLD NAME, PLEASE USE RemoveMpGamerTag INSTEAD!"
	},
	"RemoveMpGamerTag()": {
	  "prefix": "RemoveMpGamerTag",
	  "body": [
		"RemoveMpGamerTag(${1:int gamerTagId})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x31698aa80e0223f8"
	},
	"ReleaseNamedRendertarget()": {
	  "prefix": "ReleaseNamedRendertarget",
	  "body": [
		"ReleaseNamedRendertarget(${1:char* p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n"
	},
	"RemoveMultiplayerHudCash()": {
	  "prefix": "RemoveMultiplayerHudCash",
	  "body": [
		"RemoveMultiplayerHudCash()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nRemoves multiplayer cash hud each frame  \n"
	},
	"N_0x10d373323e5b9c0d()": {
	  "prefix": "N_0x10d373323e5b9c0d",
	  "body": "N_0x10d373323e5b9c0d",
	  "description": "OLD NAME, PLEASE USE RemoveLoadingPrompt INSTEAD!"
	},
	"RemoveLoadingPrompt()": {
	  "prefix": "RemoveLoadingPrompt",
	  "body": [
		"RemoveLoadingPrompt()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nRemoves the loading prompt at the bottom right of the screen, created by the UI::_SHOW_LOADING_PROMPT native.  \n\nOld name: N_0x10d373323e5b9c0d"
	},
	"RemoveMultiplayerBankCash()": {
	  "prefix": "RemoveMultiplayerBankCash",
	  "body": [
		"RemoveMultiplayerBankCash()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"RemoveNotification()": {
	  "prefix": "RemoveNotification",
	  "body": [
		"RemoveNotification(${1:int notificationId})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nRemoves a notification instantly instead of waiting for it to disappear  \n"
	},
	"RequestAdditionalText()": {
	  "prefix": "RequestAdditionalText",
	  "body": [
		"RequestAdditionalText(${1:char* gxt}, ${2:int slot})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nRequest a gxt into the passed slot.  \n"
	},
	"RequestAdditionalText_2()": {
	  "prefix": "RequestAdditionalText_2",
	  "body": [
		"RequestAdditionalText_2(${1:char* gxt}, ${2:int slot})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ResetHudComponentValues()": {
	  "prefix": "ResetHudComponentValues",
	  "body": [
		"ResetHudComponentValues(${1:int id})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ResetReticuleValues()": {
	  "prefix": "ResetReticuleValues",
	  "body": [
		"ResetReticuleValues()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"RespondingAsTemp()": {
	  "prefix": "RespondingAsTemp",
	  "body": [
		"RespondingAsTemp(${1:float p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nPlease change back to _0xBD12C5EEE184C33 (hash collision)  \nactual native starts with SET_RADAR_ZOOM_...  \n"
	},
	"SetAbilityBarValue()": {
	  "prefix": "SetAbilityBarValue",
	  "body": [
		"SetAbilityBarValue(${1:float value}, ${2:float maxValue})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIf 'value' is 50 and 'maxValue' is 100, the bar is halfway filled.  \nSame with 5/10, 2/4, etc.  \n"
	},
	"RestartFrontendMenu()": {
	  "prefix": "RestartFrontendMenu",
	  "body": [
		"RestartFrontendMenu(${1:Hash menuHash}, ${2:int p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nBefore using this native click the native above and look at the decription.  \nExample:  \nint GetHash = Function.Call<int>(Hash.GET_HASH_KEY, \"fe_menu_version_corona_lobby\");  \nFunction.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);  \nFunction.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);  \nThis native refreshes the frontend menu.  \np1 = Hash of Menu  \np2 = Unknown but always works with -1.  \n"
	},
	"N_0xe52b8e7f85d39a08()": {
	  "prefix": "N_0xe52b8e7f85d39a08",
	  "body": "N_0xe52b8e7f85d39a08",
	  "description": "OLD NAME, PLEASE USE SetAiBlipType INSTEAD!"
	},
	"SetAiBlipType()": {
	  "prefix": "SetAiBlipType",
	  "body": [
		"SetAiBlipType(${1:Ped ped}, ${2:int type})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSet a ped's AI blip type:  \n1 - Yellow blip with no name  \n2  \n\nOld name: N_0xe52b8e7f85d39a08"
	},
	"N_0x97c65887d4b37fa9()": {
	  "prefix": "N_0x97c65887d4b37fa9",
	  "body": "N_0x97c65887d4b37fa9",
	  "description": "OLD NAME, PLEASE USE SetAiBlipMaxDistance INSTEAD!"
	},
	"SetAiBlipMaxDistance()": {
	  "prefix": "SetAiBlipMaxDistance",
	  "body": [
		"SetAiBlipMaxDistance(${1:Ped ped}, ${2:float distance})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nPreviously named _0x97C65887D4B37FA9.  \nSets the maximum view distance for the AI BIP  \n\nOld name: N_0x97c65887d4b37fa9"
	},
	"SetRadarBigmapEnabled()": {
	  "prefix": "SetRadarBigmapEnabled",
	  "body": "SetRadarBigmapEnabled",
	  "description": "OLD NAME, PLEASE USE SetBigmapActive INSTEAD!"
	},
	"SetBigmapActive()": {
	  "prefix": "SetBigmapActive",
	  "body": [
		"SetBigmapActive(${1:BOOL toggleBigMap}, ${2:BOOL showFullMap})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nToggles the big minimap state like in GTA:Online.\n\nTo get the current state of the minimap, use [`GetBigmapActive`](#_0xF6AE18A7).\nOld name: SetRadarBigmapEnabled"
	},
	"SetBlipAsFriendly()": {
	  "prefix": "SetBlipAsFriendly",
	  "body": [
		"SetBlipAsFriendly(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nfalse for enemy  \ntrue for friendly  \n"
	},
	"SetBlipAsShortRange()": {
	  "prefix": "SetBlipAsShortRange",
	  "body": [
		"SetBlipAsShortRange(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nSets whether or not the specified blip should only be displayed when nearby, or on the minimap."
	},
	"SetBlipAlpha()": {
	  "prefix": "SetBlipAlpha",
	  "body": [
		"SetBlipAlpha(${1:Blip blip}, ${2:int alpha})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSets alpha-channel for blip color.  \nExample:  \nBlip blip = UI::ADD_BLIP_FOR_ENTITY(entity);  \nUI::SET_BLIP_COLOUR(blip , 3);  \nUI::SET_BLIP_ALPHA(blip , 64);  \n"
	},
	"SetBlipCategory()": {
	  "prefix": "SetBlipCategory",
	  "body": [
		"SetBlipCategory(${1:Blip blip}, ${2:int index})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nExamples result:\n\n![](https://i.imgur.com/skY6vAJ.png)\n\n**index:**\n\n\n1 = No distance shown in legend\n2 = Distance shown in legend\n7 = \"Other Players\" category, also shows distance in legend\n10 = \"Property\" category\n11 = \"Owned Property\" category\n\n\nAny other value behaves like `index = 1`, `index` wraps around after 255\n\nBlips with categories `7`, `10` or `11` will all show under the specific categories listing in the map legend, regardless of sprite or name.\n\n**Legend entries**\n\n| index | Legend entry   | Label           |\n| ----- | -------------- | --------------- |\n| 7     | Other Players  | `BLIP_OTHPLYR`  |\n| 10    | Property       | `BLIP_PROPCAT`  |\n| 11    | Owned Property | `BLIP_APARTCAT` |"
	},
	"SetBlipAsMissionCreatorBlip()": {
	  "prefix": "SetBlipAsMissionCreatorBlip",
	  "body": [
		"SetBlipAsMissionCreatorBlip(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipCoords()": {
	  "prefix": "SetBlipCoords",
	  "body": [
		"SetBlipCoords(${1:Blip blip}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipDisplay()": {
	  "prefix": "SetBlipDisplay",
	  "body": [
		"SetBlipDisplay(${1:Blip blip}, ${2:int displayId})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**displayId Behaviour** <br>\n0 = Doesn't show up, ever, anywhere. <br>\n1 = Doesn't show up, ever, anywhere. <br>\n2 = Shows on both main map and minimap. (Selectable on map) <br>\n3 = Shows on main map only. (Selectable on map) <br>\n4 = Shows on main map only. (Selectable on map) <br>\n5 = Shows on minimap only. <br>\n6 = Shows on both main map and minimap. (Selectable on map) <br>\n7 = Doesn't show up, ever, anywhere. <br>\n8 = Shows on both main map and minimap. (Not selectable on map) <br>\n9 = Shows on minimap only. <br>\n10 = Shows on both main map and minimap. (Not selectable on map) <br>\nAnything higher than 10 seems to be exactly the same as 10. <br>\n<br>\nRockstar seem to only use 0, 2, 3, 4, 5 and 8 in the decompiled scripts."
	},
	"SetBlipBright()": {
	  "prefix": "SetBlipBright",
	  "body": [
		"SetBlipBright(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipColour()": {
	  "prefix": "SetBlipColour",
	  "body": [
		"SetBlipColour(${1:Blip blip}, ${2:int color})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\n(Hex code are approximate)  \n0: White (#fefefe)  \n1: Red (#e03232)  \n2: Green (#71cb71)  \n3: Blue (#5db6e5)  \n4: White (#fefefe)  \n5: Taxi Yellow (#eec64e)  \n6: Light Red (#c25050)  \n7: Violet (#9c6eaf)  \n8: Pink (#fe7ac3)  \n9: Light Orange (#f59d79)  \n10: Light Brown (#b18f83)  \n11: Light Green (#8dcea7)  \n12: Light Blue (Teal) (#70a8ae)  \n13: Very Light Purple (#d3d1e7)  \n14: Dark Purple (#8f7e98)  \n15: Cyan (#6ac4bf)  \n16: Light Yellow (#d5c398)  \n17: Orange (#ea8e50)  \n18: Light Blue (#97cae9)  \n19: Dark Pink (#b26287)  \n20: Dark Yellow (#8f8d79)  \n21: Dark Orange (#a6755e)  \n22: Light Gray (#afa8a8)  \n23: Light Pink (#e78d9a)  \n24: Lemon Green (#bbd65b)  \n25: Forest Green (#0c7b56)  \n26: Electric Blue (#7ac3fe)  \n27: Bright Purple (#ab3ce6)  \n28: Dark Taxi Yellow (#cda80c)  \n29: Dark Blue (#4561ab)  \n30: Dark Cyan (#29a5b8)  \n31: Light Brown (#b89b7b)  \n32: Very Light Blue (#c8e0fe)  \n33: Light Yellow (#f0f096)  \n34: Light Pink (#ed8ca1)  \n35: Light Red (#f98a8a)  \n36: Light Yellow (#fbeea5)  \n37: White (#fefefe)  \n38: Blue (#2c6db8)  \n39: Light Gray (#9a9a9a)  \n40: Dark Gray (#4c4c4c)  \nCertainly a lot more remaining.  \n"
	},
	"SetBlipFlashInterval()": {
	  "prefix": "SetBlipFlashInterval",
	  "body": [
		"SetBlipFlashInterval(${1:Blip blip}, ${2:Any p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipFlashes()": {
	  "prefix": "SetBlipFlashes",
	  "body": [
		"SetBlipFlashes(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipFade()": {
	  "prefix": "SetBlipFade",
	  "body": [
		"SetBlipFade(${1:Blip blip}, ${2:int opacity}, ${3:int duration})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipHighDetail()": {
	  "prefix": "SetBlipHighDetail",
	  "body": [
		"SetBlipHighDetail(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipNameFromTextFile()": {
	  "prefix": "SetBlipNameFromTextFile",
	  "body": [
		"SetBlipNameFromTextFile(${1:Blip blip}, ${2:char* gxtEntry})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nDoesn't work if the label text of gxtEntry is >= 80.  \n"
	},
	"SetBlipFlashTimer()": {
	  "prefix": "SetBlipFlashTimer",
	  "body": [
		"SetBlipFlashTimer(${1:Blip blip}, ${2:int duration})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAdds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.  \n"
	},
	"SetBlipPriority()": {
	  "prefix": "SetBlipPriority",
	  "body": [
		"SetBlipPriority(${1:Blip blip}, ${2:int priority})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSee this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935  \n"
	},
	"SetBlipFlashesAlternate()": {
	  "prefix": "SetBlipFlashesAlternate",
	  "body": [
		"SetBlipFlashesAlternate(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipRouteColour()": {
	  "prefix": "SetBlipRouteColour",
	  "body": [
		"SetBlipRouteColour(${1:Blip blip}, ${2:int colour})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipScale()": {
	  "prefix": "SetBlipScale",
	  "body": [
		"SetBlipScale(${1:Blip blip}, ${2:float scale})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipNameToPlayerName()": {
	  "prefix": "SetBlipNameToPlayerName",
	  "body": [
		"SetBlipNameToPlayerName(${1:Blip blip}, ${2:Player player})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipShowCone()": {
	  "prefix": "SetBlipShowCone",
	  "body": [
		"SetBlipShowCone(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetBlipRotation()": {
	  "prefix": "SetBlipRotation",
	  "body": [
		"SetBlipRotation(${1:Blip blip}, ${2:int rotation})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAfter some testing, looks like you need to use UI:CEIL() on the rotation (vehicle/ped heading) before using it there.  \n"
	},
	"SetBlipRoute()": {
	  "prefix": "SetBlipRoute",
	  "body": [
		"SetBlipRoute(${1:Blip blip}, ${2:BOOL enabled})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nEnable / disable showing route for the Blip-object.  \n"
	},
	"SetBlipSprite()": {
	  "prefix": "SetBlipSprite",
	  "body": [
		"SetBlipSprite(${1:Blip blip}, ${2:int spriteId})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n<!--\n_loc1_.map((name, idx) => `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\\n')\n-->\n\nSets the displayed sprite for a specific blip.\n\nThere's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site."
	},
	"N_0x8db8cffd58b62552()": {
	  "prefix": "N_0x8db8cffd58b62552",
	  "body": "N_0x8db8cffd58b62552",
	  "description": "OLD NAME, PLEASE USE SetCursorSprite INSTEAD!"
	},
	"SetCursorSprite()": {
	  "prefix": "SetCursorSprite",
	  "body": [
		"SetCursorSprite(${1:int spriteId})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nChanges the mouse cursor's sprite.   \npublic enum CursorType  \n{  \n    None = 0,  \n    Normal = 1,  \n    TransparentNormal = 2,  \n    PreGrab = 3,  \n    Grab = 4,  \n    MiddleFinger = 5,  \n    LeftArrow = 6,  \n    RightArrow = 7,  \n    UpArrow = 8,  \n    DownArrow = 9,  \n    HorizontalExpand = 10,  \n    Add = 11,  \n    Remove = 12,  \n}  \n\nOld name: N_0x8db8cffd58b62552"
	},
	"SetBlipSecondaryColour()": {
	  "prefix": "SetBlipSecondaryColour",
	  "body": [
		"SetBlipSecondaryColour(${1:Blip blip}, ${2:float r}, ${3:float g}, ${4:float b})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x900086f371220b6f()": {
	  "prefix": "N_0x900086f371220b6f",
	  "body": "N_0x900086f371220b6f",
	  "description": "OLD NAME, PLEASE USE SetGpsCustomRouteRender INSTEAD!"
	},
	"SetGpsCustomRouteRender()": {
	  "prefix": "SetGpsCustomRouteRender",
	  "body": [
		"SetGpsCustomRouteRender(${1:BOOL toggle}, ${2:int thickness}, ${3:int p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x900086f371220b6f"
	},
	"N_0x2b6d467dab714e8d()": {
	  "prefix": "N_0x2b6d467dab714e8d",
	  "body": "N_0x2b6d467dab714e8d",
	  "description": "OLD NAME, PLEASE USE SetBlipShrink INSTEAD!"
	},
	"SetBlipShrink()": {
	  "prefix": "SetBlipShrink",
	  "body": [
		"SetBlipShrink(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nMakes a blip go small when off the minimap.  \n\nOld name: N_0x2b6d467dab714e8d"
	},
	"SetGpsFlags()": {
	  "prefix": "SetGpsFlags",
	  "body": [
		"SetGpsFlags(${1:int p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOnly the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.  \nDoesn't seem like the flags are actually read by the game at all.  \n---------------  \nMight be left-over from GTA IV. I kind of miss the *ding-dong* turn left in 2 meters lady lol.  \n"
	},
	"N_0x808519373fd336a3()": {
	  "prefix": "N_0x808519373fd336a3",
	  "body": "N_0x808519373fd336a3",
	  "description": "OLD NAME, PLEASE USE SetDirectorMode INSTEAD!"
	},
	"SetDirectorMode()": {
	  "prefix": "SetDirectorMode",
	  "body": [
		"SetDirectorMode(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIf toggle is true, hides special ability bar / character name in the pause menu  \nIf toggle is false, shows special ability bar / character name in the pause menu  \n\nOld name: N_0x808519373fd336a3"
	},
	"N_0x3dda37128dd1aca8()": {
	  "prefix": "N_0x3dda37128dd1aca8",
	  "body": "N_0x3dda37128dd1aca8",
	  "description": "OLD NAME, PLEASE USE SetGpsMultiRouteRender INSTEAD!"
	},
	"SetGpsMultiRouteRender()": {
	  "prefix": "SetGpsMultiRouteRender",
	  "body": [
		"SetGpsMultiRouteRender(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x3dda37128dd1aca8"
	},
	"SetFrontendActive()": {
	  "prefix": "SetFrontendActive",
	  "body": [
		"SetFrontendActive(${1:BOOL active})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0xf314cf4f0211894e()": {
	  "prefix": "N_0xf314cf4f0211894e",
	  "body": "N_0xf314cf4f0211894e",
	  "description": "OLD NAME, PLEASE USE SetHudColour INSTEAD!"
	},
	"SetHudColour()": {
	  "prefix": "SetHudColour",
	  "body": [
		"SetHudColour(${1:int hudColorIndex}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nHUD colors and their values: pastebin.com/d9aHPbXN  \n\nOld name: N_0xf314cf4f0211894e"
	},
	"SetHudComponentPosition()": {
	  "prefix": "SetHudComponentPosition",
	  "body": [
		"SetHudComponentPosition(${1:int id}, ${2:float x}, ${3:float y})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetGpsFlashes()": {
	  "prefix": "SetGpsFlashes",
	  "body": [
		"SetGpsFlashes(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetMinimapAttitudeIndicatorLevel()": {
	  "prefix": "SetMinimapAttitudeIndicatorLevel",
	  "body": [
		"SetMinimapAttitudeIndicatorLevel(${1:float altitude}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nArgument must be 0.0f or above 38.0f, or it will be ignored.  \n"
	},
	"N_0x1ccc708f0f850613()": {
	  "prefix": "N_0x1ccc708f0f850613",
	  "body": "N_0x1ccc708f0f850613",
	  "description": "OLD NAME, PLEASE USE SetHudColoursSwitch INSTEAD!"
	},
	"SetHudColoursSwitch()": {
	  "prefix": "SetHudColoursSwitch",
	  "body": [
		"SetHudColoursSwitch(${1:int hudColorIndex}, ${2:int hudColorIndex2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nHUD colors and their values: pastebin.com/d9aHPbXN  \n--------------------------------------------------  \nmakes hudColorIndex2 color into hudColorIndex color  \n\nOld name: N_0x1ccc708f0f850613"
	},
	"SetMinimapBlockWaypoint()": {
	  "prefix": "SetMinimapBlockWaypoint",
	  "body": [
		"SetMinimapBlockWaypoint(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x5354c5ba2ea868a4()": {
	  "prefix": "N_0x5354c5ba2ea868a4",
	  "body": "N_0x5354c5ba2ea868a4",
	  "description": "OLD NAME, PLEASE USE SetMapFullScreen INSTEAD!"
	},
	"SetMapFullScreen()": {
	  "prefix": "SetMapFullScreen",
	  "body": [
		"SetMapFullScreen(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIf toggle is true, the map is shown in full screen  \nIf toggle is false, the map is shown in normal mode  \n\nOld name: N_0x5354c5ba2ea868a4"
	},
	"N_0x71bdb63dbaf8da59()": {
	  "prefix": "N_0x71bdb63dbaf8da59",
	  "body": "N_0x71bdb63dbaf8da59",
	  "description": "OLD NAME, PLEASE USE SetMinimapGolfCourse INSTEAD!"
	},
	"SetMinimapGolfCourse()": {
	  "prefix": "SetMinimapGolfCourse",
	  "body": [
		"SetMinimapGolfCourse(${1:int hole})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nNot much is known so far on what it does _exactly_.\nAll I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.\n\nYou need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.\nYou'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.\n\nUse [`N_0x35edd5b2e3ff01c0()`](https://runtime.fivem.net/doc/reference.html#_0x35EDD5B2E3FF01C0) to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).\nOld name: N_0x71bdb63dbaf8da59"
	},
	"N_0xe45087d85f468bc2()": {
	  "prefix": "N_0xe45087d85f468bc2",
	  "body": "N_0xe45087d85f468bc2",
	  "description": "OLD NAME, PLEASE USE SetMissionName_2 INSTEAD!"
	},
	"SetMissionName_2()": {
	  "prefix": "SetMissionName_2",
	  "body": [
		"SetMissionName_2(${1:BOOL p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSimilar to SET_MISSION_NAME but this one can take any string (must not be greater than 600 chars, should not exceed 64 chars), not just text labels.  \np0 must be true.  \n\nOld name: N_0xe45087d85f468bc2"
	},
	"SetMinimapComponent()": {
	  "prefix": "SetMinimapComponent",
	  "body": [
		"SetMinimapComponent(${1:int componentID}, ${2:BOOL toggle}, ${3:int p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: Any\nThis native is used to toggle map components like the army base at the top of the map.  \np2 appears to be always -1.  \n\nAn incomplete list of components ID:\n\n\n0: Los Santos' air port yellow lift-off markers.\n1: Sandy Shore's air port yellow lift-off markers.\n2: Trevor's air port yellow lift-off markers.\n3: Unknown.\n4: Unknown.\n5: Unknown.\n6: Vespucci Beach lifeguard building.\n7: Unknown.\n8: Unknown.\n15: Army base.\n"
	},
	"N_0xd48fe545cd46f857()": {
	  "prefix": "N_0xd48fe545cd46f857",
	  "body": "N_0xd48fe545cd46f857",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagAlpha INSTEAD!"
	},
	"SetMpGamerTagAlpha()": {
	  "prefix": "SetMpGamerTagAlpha",
	  "body": [
		"SetMpGamerTagAlpha(${1:int gamerTagId}, ${2:int component}, ${3:int alpha})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSets flag's sprite transparency. 0-255.  \n\nOld name: N_0xd48fe545cd46f857"
	},
	"N_0xf8dee0a5600cbb93()": {
	  "prefix": "N_0xf8dee0a5600cbb93",
	  "body": "N_0xf8dee0a5600cbb93",
	  "description": "OLD NAME, PLEASE USE SetMinimapRevealed INSTEAD!"
	},
	"SetMinimapRevealed()": {
	  "prefix": "SetMinimapRevealed",
	  "body": [
		"SetMinimapRevealed(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIf true, the entire map will be revealed.  \n\nOld name: N_0xf8dee0a5600cbb93"
	},
	"N_0x613ed644950626ae()": {
	  "prefix": "N_0x613ed644950626ae",
	  "body": "N_0x613ed644950626ae",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagColour INSTEAD!"
	},
	"SetMpGamerTagColour()": {
	  "prefix": "SetMpGamerTagColour",
	  "body": [
		"SetMpGamerTagColour(${1:int gamerTagId}, ${2:int flag}, ${3:int color})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nRanges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.  \n\nOld name: N_0x613ed644950626ae"
	},
	"SetMissionName()": {
	  "prefix": "SetMissionName",
	  "body": [
		"SetMissionName(${1:BOOL p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nTakes a text label, gets the string (must not be longer than 600 chars, should not exceed 64 chars) and sets the name to that string.  \np0 must be true.  \n"
	},
	"N_0xa67f9c46d612b6f1()": {
	  "prefix": "N_0xa67f9c46d612b6f1",
	  "body": "N_0xa67f9c46d612b6f1",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagIcons INSTEAD!"
	},
	"SetMpGamerTagIcons()": {
	  "prefix": "SetMpGamerTagIcons",
	  "body": [
		"SetMpGamerTagIcons(${1:int headDisplayId}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nDisplays a bunch of icons above the players name, and level, and their name twice  \n\nOld name: N_0xa67f9c46d612b6f1"
	},
	"N_0x7b7723747ccb55b6()": {
	  "prefix": "N_0x7b7723747ccb55b6",
	  "body": "N_0x7b7723747ccb55b6",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagChatting INSTEAD!"
	},
	"SetMpGamerTagChatting()": {
	  "prefix": "SetMpGamerTagChatting",
	  "body": [
		"SetMpGamerTagChatting(${1:int gamerTagId}, ${2:char* string})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSet's the string displayed when flag 3 (AudioSpeaker) active.  \n\nOld name: N_0x7b7723747ccb55b6"
	},
	"N_0x3158c77a7e888ab4()": {
	  "prefix": "N_0x3158c77a7e888ab4",
	  "body": "N_0x3158c77a7e888ab4",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagHealthBarColour INSTEAD!"
	},
	"SetMpGamerTagHealthBarColor()": {
	  "prefix": "SetMpGamerTagHealthBarColor",
	  "body": "SetMpGamerTagHealthBarColor",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagHealthBarColour INSTEAD!"
	},
	"SetMpGamerTagHealthBarColour()": {
	  "prefix": "SetMpGamerTagHealthBarColour",
	  "body": [
		"SetMpGamerTagHealthBarColour(${1:int headDisplayId}, ${2:int color})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nRanges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.  \nShould be enabled as flag (2). Has 0 opacity by default.  \n- This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,  \n\nOld name: N_0x3158c77a7e888ab4\nOld name: SetMpGamerTagHealthBarColor"
	},
	"N_0xdea2b8283baa3944()": {
	  "prefix": "N_0xdea2b8283baa3944",
	  "body": "N_0xdea2b8283baa3944",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagName INSTEAD!"
	},
	"SetMpGamerTagName()": {
	  "prefix": "SetMpGamerTagName",
	  "body": [
		"SetMpGamerTagName(${1:int gamerTagId}, ${2:char* string})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xdea2b8283baa3944"
	},
	"N_0xcf228e2aa03099c3()": {
	  "prefix": "N_0xcf228e2aa03099c3",
	  "body": "N_0xcf228e2aa03099c3",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagWantedLevel INSTEAD!"
	},
	"SetMpGamerTagWantedLevel()": {
	  "prefix": "SetMpGamerTagWantedLevel",
	  "body": [
		"SetMpGamerTagWantedLevel(${1:int gamerTagId}, ${2:int wantedlvl})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\ndisplays wanted star above head  \n\nOld name: N_0xcf228e2aa03099c3"
	},
	"N_0x9b9aa95688f78dd3()": {
	  "prefix": "N_0x9b9aa95688f78dd3",
	  "body": "N_0x9b9aa95688f78dd3",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagMpBagLargeCount INSTEAD!"
	},
	"SetMpGamerTagMpBagLargeCount()": {
	  "prefix": "SetMpGamerTagMpBagLargeCount",
	  "body": [
		"SetMpGamerTagMpBagLargeCount(${1:int gamerTagId}, ${2:int count})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\ndisplays wanted star above head  \n\nOld name: N_0x9b9aa95688f78dd3"
	},
	"N_0xee76ff7e6a0166b0()": {
	  "prefix": "N_0xee76ff7e6a0166b0",
	  "body": "N_0xee76ff7e6a0166b0",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTag INSTEAD!"
	},
	"SetMpGamerTag()": {
	  "prefix": "SetMpGamerTag",
	  "body": [
		"SetMpGamerTag(${1:int headDisplayId}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xee76ff7e6a0166b0"
	},
	"N_0x63bb75abedc1f6a0()": {
	  "prefix": "N_0x63bb75abedc1f6a0",
	  "body": "N_0x63bb75abedc1f6a0",
	  "description": "OLD NAME, PLEASE USE SetMpGamerTagVisibility INSTEAD!"
	},
	"SetMpGamerTagVisibility()": {
	  "prefix": "SetMpGamerTagVisibility",
	  "body": [
		"SetMpGamerTagVisibility(${1:int gamerTagId}, ${2:int component}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nenum MpGamerTagComponent  \n{  \n  GAMER_NAME = 0,  \n  CREW_TAG,  \n  healthArmour,  \n  BIG_TEXT,  \n  AUDIO_ICON,  \n  MP_USING_MENU,  \n  MP_PASSIVE_MODE,  \n  WANTED_STARS,  \n  MP_DRIVER,  \n  MP_CO_DRIVER,  \n  MP_TAGGED,  \n  GAMER_NAME_NEARBY,  \n  ARROW,  \n  MP_PACKAGES,  \n  INV_IF_PED_FOLLOWING,  \n  RANK_TEXT,  \n  MP_TYPING  \n};  \n\nOld name: N_0x63bb75abedc1f6a0"
	},
	"SetMultiplayerBankCash()": {
	  "prefix": "SetMultiplayerBankCash",
	  "body": [
		"SetMultiplayerBankCash()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetMultiplayerHudCash()": {
	  "prefix": "SetMultiplayerHudCash",
	  "body": [
		"SetMultiplayerHudCash(${1:int p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"SetDrawMapVisible()": {
	  "prefix": "SetDrawMapVisible",
	  "body": "SetDrawMapVisible",
	  "description": "OLD NAME, PLEASE USE SetNorthYanktonMap INSTEAD!"
	},
	"SetNorthYanktonMap()": {
	  "prefix": "SetNorthYanktonMap",
	  "body": [
		"SetNorthYanktonMap(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nToggles the North Yankton map  \n\nOld name: SetDrawMapVisible"
	},
	"SetNewWaypoint()": {
	  "prefix": "SetNewWaypoint",
	  "body": [
		"SetNewWaypoint(${1:float x}, ${2:float y})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x39bbf623fc803eac()": {
	  "prefix": "N_0x39bbf623fc803eac",
	  "body": "N_0x39bbf623fc803eac",
	  "description": "OLD NAME, PLEASE USE SetNotificationColorNext INSTEAD!"
	},
	"SetNotificationColorNext()": {
	  "prefix": "SetNotificationColorNext",
	  "body": [
		"SetNotificationColorNext(${1:int hudIndex})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nsets font color for the next notification  \n\nOld name: N_0x39bbf623fc803eac"
	},
	"N_0x92f0da1e27db96dc()": {
	  "prefix": "N_0x92f0da1e27db96dc",
	  "body": "N_0x92f0da1e27db96dc",
	  "description": "OLD NAME, PLEASE USE SetNotificationBackgroundColor INSTEAD!"
	},
	"SetNotificationBackgroundColor()": {
	  "prefix": "SetNotificationBackgroundColor",
	  "body": [
		"SetNotificationBackgroundColor(${1:int hudIndex})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nFrom the decompiled scripts:  \nUI::_92F0DA1E27DB96DC(6);  \nUI::_92F0DA1E27DB96DC(184);  \nUI::_92F0DA1E27DB96DC(190);  \nsets background color for the next notification  \n6 = red  \n184 = green  \n190 = yellow  \nHere is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15  \nthis seems to set the alpha to 255 automatically, if you have a work around let me know  \n\nOld name: N_0x92f0da1e27db96dc"
	},
	"N_0x17430b918701c342()": {
	  "prefix": "N_0x17430b918701c342",
	  "body": "N_0x17430b918701c342",
	  "description": "OLD NAME, PLEASE USE SetNotificationFlashColor INSTEAD!"
	},
	"SetNotificationFlashColor()": {
	  "prefix": "SetNotificationFlashColor",
	  "body": [
		"SetNotificationFlashColor(${1:int red}, ${2:int green}, ${3:int blue}, ${4:int alpha})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nsets color for notification flash  \n\nOld name: N_0x17430b918701c342"
	},
	"SetNotificationMessage()": {
	  "prefix": "SetNotificationMessage",
	  "body": [
		"SetNotificationMessage(${1:char* textureDict}, ${2:char* textureName}, ${3:BOOL flash}, ${4:int iconType}, ${5:char* sender}, ${6:char* subject})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\nSets some extra options for a notification. It adds an image (or icon type) and sets a notification title (sender) and subtitle (subject).\n\nTexture dictionary and texture name parameters are usually the same exact value.\n\nExample result:\n\n![](https://i.imgur.com/LviutDl.png)\n\nOld description with list of possible icons and texture names:\n\n\nList of picNames: pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n"
	},
	"SetNotificationMessageClanTag()": {
	  "prefix": "SetNotificationMessageClanTag",
	  "body": [
		"SetNotificationMessageClanTag(${1:char* picName1}, ${2:char* picName2}, ${3:BOOL flash}, ${4:int iconType}, ${5:char* sender}, ${6:char* subject}, ${7:float duration}, ${8:char* clanTag})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nList of picNames pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n\"duration\" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.  \n\"clanTag\" shows a crew tag in the \"sender\" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. \"MK\" becomes \"___MK\", \"ACE\" becomes \"___ACE\", etc.)  \n"
	},
	"SetNotificationMessageClanTag_2()": {
	  "prefix": "SetNotificationMessageClanTag_2",
	  "body": [
		"SetNotificationMessageClanTag_2(${1:char* picName1}, ${2:char* picName2}, ${3:BOOL flash}, ${4:int iconType1}, ${5:char* sender}, ${6:char* subject}, ${7:float duration}, ${8:char* clanTag}, ${9:int iconType2}, ${10:int p9})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nList of picNames: pastebin.com/XdpJVbHz  \nflash is a bool for fading in.  \niconTypes:  \n1 : Chat Box  \n2 : Email  \n3 : Add Friend Request  \n4 : Nothing  \n5 : Nothing  \n6 : Nothing  \n7 : Right Jumping Arrow  \n8 : RP Icon  \n9 : $ Icon  \n\"sender\" is the very top header. This can be any old string.  \n\"subject\" is the header under the sender.  \n\"duration\" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.  \n\"clanTag\" shows a crew tag in the \"sender\" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. \"MK\" becomes \"___MK\", \"ACE\" becomes \"___ACE\", etc.)  \niconType2 is a mirror of iconType. It shows in the \"subject\" line, right under the original iconType.  \nint IconNotification(char *text, char *text2, char *Subject)  \n{  \n\t_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\t_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2(\"CHAR_SOCIAL_CLUB\", \"CHAR_SOCIAL_CLUB\", 1, 7, text2, Subject, 1.0f, \"__EXAMPLE\", 7);  \n\treturn _DRAW_NOTIFICATION(1, 1);  \n}  \n"
	},
	"N_0x2b7e9a4eaaa93c89()": {
	  "prefix": "N_0x2b7e9a4eaaa93c89",
	  "body": "N_0x2b7e9a4eaaa93c89",
	  "description": "OLD NAME, PLEASE USE SetNotificationMessage_2 INSTEAD!"
	},
	"SetNotificationMessage_2()": {
	  "prefix": "SetNotificationMessage_2",
	  "body": [
		"SetNotificationMessage_2(${1:char* picName1}, ${2:int picName2}, ${3:BOOL flash}, ${4:int iconType}, ${5:BOOL p4}, ${6:char* sender}, ${7:char* subject})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nList of picNames: pastebin.com/XdpJVbHz  \n\nOld name: N_0x2b7e9a4eaaa93c89"
	},
	"N_0x1e6611149db3db6b()": {
	  "prefix": "N_0x1e6611149db3db6b",
	  "body": "N_0x1e6611149db3db6b",
	  "description": "OLD NAME, PLEASE USE SetNotificationMessage_4 INSTEAD!"
	},
	"SetNotificationMessage_4()": {
	  "prefix": "SetNotificationMessage_4",
	  "body": [
		"SetNotificationMessage_4(${1:char* picName1}, ${2:char* picName2}, ${3:BOOL flash}, ${4:int iconType}, ${5:char* sender}, ${6:char* subject}, ${7:float duration})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nNOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.  \nExample, only occurrence in the scripts:  \nv_8 = UI::_1E6611149DB3DB6B(\"CHAR_SOCIAL_CLUB\", \"CHAR_SOCIAL_CLUB\", 0, 0, &v_9, \"\", a_5);  \n\nOld name: N_0x1e6611149db3db6b"
	},
	"N_0xc6f580e4c94926ac()": {
	  "prefix": "N_0xc6f580e4c94926ac",
	  "body": "N_0xc6f580e4c94926ac",
	  "description": "OLD NAME, PLEASE USE SetNotificationMessage_3 INSTEAD!"
	},
	"SetNotificationMessage_3()": {
	  "prefix": "SetNotificationMessage_3",
	  "body": [
		"SetNotificationMessage_3(${1:char* picName1}, ${2:char* picName2}, ${3:BOOL p2}, ${4:Any p3}, ${5:char* p4}, ${6:char* p5})"
	  ],
	  "description": "Namespace: HUD\nReturns: int\n\nNeeds more research.  \nOnly one type of usage in the scripts:  \nUI::_C6F580E4C94926AC(\"CHAR_ACTING_UP\", \"CHAR_ACTING_UP\", 0, 0, \"DI_FEED_CHAR\", a_0);  \n\nOld name: N_0xc6f580e4c94926ac"
	},
	"SetNotificationTextEntry()": {
	  "prefix": "SetNotificationTextEntry",
	  "body": [
		"SetNotificationTextEntry(${1:char* text})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nDeclares the entry type of a notification, for example \"STRING\".  \nint ShowNotification(char *text)  \n{  \n\t_SET_NOTIFICATION_TEXT_ENTRY(\"STRING\");  \n\tADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);  \n\treturn _DRAW_NOTIFICATION(1, 1);  \n}  \n"
	},
	"N_0x3ca6050692bc61b0()": {
	  "prefix": "N_0x3ca6050692bc61b0",
	  "body": "N_0x3ca6050692bc61b0",
	  "description": "OLD NAME, PLEASE USE SetPauseMenuPedLighting INSTEAD!"
	},
	"SetPauseMenuPedLighting()": {
	  "prefix": "SetPauseMenuPedLighting",
	  "body": [
		"SetPauseMenuPedLighting(${1:BOOL state})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nToggles the light state for the pause menu ped in frontend menus.\n\nThis is used by R\\* in combination with [`SET_PAUSE_MENU_PED_SLEEP_STATE`](#_0xECF128344E9FF9F1) to toggle the \"offline\" or \"online\" state in the \"friends\" tab of the pause menu in GTA Online.\n\nExample:\nOn: ![lights on](https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png)\nOff: ![lights off](https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png)\nOld name: N_0x3ca6050692bc61b0"
	},
	"N_0xecf128344e9ff9f1()": {
	  "prefix": "N_0xecf128344e9ff9f1",
	  "body": "N_0xecf128344e9ff9f1",
	  "description": "OLD NAME, PLEASE USE SetPauseMenuPedSleepState INSTEAD!"
	},
	"SetPauseMenuPedSleepState()": {
	  "prefix": "SetPauseMenuPedSleepState",
	  "body": [
		"SetPauseMenuPedSleepState(${1:BOOL state})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nToggles the pause menu ped sleep state for frontend menus.\n\n[Example GIF](https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif)\nOld name: N_0xecf128344e9ff9f1"
	},
	"SetPauseMenuActive()": {
	  "prefix": "SetPauseMenuActive",
	  "body": [
		"SetPauseMenuActive(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetPlayerBlipPositionThisFrame()": {
	  "prefix": "SetPlayerBlipPositionThisFrame",
	  "body": [
		"SetPlayerBlipPositionThisFrame(${1:float x}, ${2:float y})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSets the position of the arrow icon representing the player on both the minimap and world map.  \nToo bad this wouldn't work over the network (obviously not). Could spoof where we would be.  \n"
	},
	"N_0xd30c50df888d58b5()": {
	  "prefix": "N_0xd30c50df888d58b5",
	  "body": "N_0xd30c50df888d58b5",
	  "description": "OLD NAME, PLEASE USE SetPedAiBlip INSTEAD!"
	},
	"SetPedEnemyAiBlip()": {
	  "prefix": "SetPedEnemyAiBlip",
	  "body": "SetPedEnemyAiBlip",
	  "description": "OLD NAME, PLEASE USE SetPedAiBlip INSTEAD!"
	},
	"SetPedAiBlip()": {
	  "prefix": "SetPedAiBlip",
	  "body": [
		"SetPedAiBlip(${1:int pedHandle}, ${2:BOOL showViewCones})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nPreviously named _0xD30C50DF888D58B5, this native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.   \nSee gtaforums.com/topic/884370-native-research-ai-blips for further information.  \nNote: Everything said at the bottom is only valid for persistant peds, as AI blips seem to behave differently for non-persistant peds.  \n• To create an AI blip, you must use UI::0xD30C50DF888D58B5() (_SET_PED_ENEMY_AI_BLIP). It has two arguments: \"ped\" which is the ped you want to AI blip to be linked to, and \"showViewCones\" which needs to be true for AI blips to appear.  \n• To check if a ped has an AI blip, you can use UI::DOES_PED_HAVE_AI_BLIP(Ped ped), which returns a simple bool.  \n• By default, AI blips never disappear. If you want them to disappear when you're at a certain distance from a ped, you can use UI::0x97C65887D4B37FA9(Ped ped, float distance) (_SET_AI_BLIP_MAX_DISTANCE)  \n• By default, the blip only appears when you're in combat with the specified ped. If you want it to be always displayed, you can use UI::x0C4BBF625CA98C4E() (_IS_AI_BLIP_ALWAYS_SHOWN). It also has two arguments: \"ped\", and a flag. If the flag is set to true, the blip will always be displayed. If it's set to false, the AI blip will have its default behaviour.  \n• By default, a view cone is displayed with the blip (basically a blue surface that represents the field of view of the ped, like in vanilla stealth missions). If you don't want it, you can disable it with UI::HIDE_SPECIAL_ABILITY_LOCKON_OPERATION(Ped ped, bool flag). If the flag is set to true, the view cone is displayed. If the flag is set to false, it is not.  \n• Finally, there's actually 3 types of AI blips:  \n0 - the default, red, \"enemy\" blip  \n1 - a weird, semi-transparent, nameless, yellow blip  \n2 - the blue \"friend\" blip  \nYou can change an AI blip's type with UI::0xE52B8E7F85D39A08(Ped ped, int type) (_SET_AI_BLIP_TYPE).  \n\nOld name: N_0xd30c50df888d58b5\nOld name: SetPedEnemyAiBlip"
	},
	"SetSingleplayerHudCash()": {
	  "prefix": "SetSingleplayerHudCash",
	  "body": "SetSingleplayerHudCash",
	  "description": "OLD NAME, PLEASE USE SetPlayerCashChange INSTEAD!"
	},
	"SetPlayerCashChange()": {
	  "prefix": "SetPlayerCashChange",
	  "body": [
		"SetPlayerCashChange(${1:int cash}, ${2:int bank})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nDisplays cash change notifications on HUD.  \n\nOld name: SetSingleplayerHudCash"
	},
	"SetRadarAsExteriorThisFrame()": {
	  "prefix": "SetRadarAsExteriorThisFrame",
	  "body": [
		"SetRadarAsExteriorThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetRadarAsInteriorThisFrame()": {
	  "prefix": "SetRadarAsInteriorThisFrame",
	  "body": [
		"SetRadarAsInteriorThisFrame(${1:Hash interior}, ${2:float x}, ${3:float y}, ${4:int heading}, ${5:int zoom})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nList of interior hashes: pastebin.com/1FUyXNqY  \nNot for every interior zoom > 0 available.  \n"
	},
	"N_0x1eac5f91bcbc5073()": {
	  "prefix": "N_0x1eac5f91bcbc5073",
	  "body": "N_0x1eac5f91bcbc5073",
	  "description": "OLD NAME, PLEASE USE SetRaceTrackRender INSTEAD!"
	},
	"SetRaceTrackRender()": {
	  "prefix": "SetRaceTrackRender",
	  "body": [
		"SetRaceTrackRender(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x1eac5f91bcbc5073"
	},
	"SetRadarZoomLevelThisFrame()": {
	  "prefix": "SetRadarZoomLevelThisFrame",
	  "body": [
		"SetRadarZoomLevelThisFrame(${1:float zoomLevel})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetRadarZoom()": {
	  "prefix": "SetRadarZoom",
	  "body": [
		"SetRadarZoom(${1:int zoomLevel})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nzoomLevel ranges from 0 to 200  \n"
	},
	"SetTextChatUnk()": {
	  "prefix": "SetTextChatUnk",
	  "body": [
		"SetTextChatUnk(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSets an unknown boolean value in the text chat.  \n"
	},
	"SetTextCentre()": {
	  "prefix": "SetTextCentre",
	  "body": [
		"SetTextCentre(${1:BOOL align})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetTextDropShadow()": {
	  "prefix": "SetTextDropShadow",
	  "body": [
		"SetTextDropShadow()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetTextEdge()": {
	  "prefix": "SetTextEdge",
	  "body": [
		"SetTextEdge(${1:int p0}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"SetTextColour()": {
	  "prefix": "SetTextColour",
	  "body": [
		"SetTextColour(${1:int red}, ${2:int green}, ${3:int blue}, ${4:int alpha})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetTextFont()": {
	  "prefix": "SetTextFont",
	  "body": [
		"SetTextFont(${1:int fontType})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nfonts that mess up your text where made for number values/misc stuff  \n"
	},
	"SetTextDropshadow()": {
	  "prefix": "SetTextDropshadow",
	  "body": [
		"SetTextDropshadow(${1:int distance}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nSets the drop shadow for the current text style."
	},
	"SetTextOutline()": {
	  "prefix": "SetTextOutline",
	  "body": [
		"SetTextOutline()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"N_0x4e096588b13ffeca()": {
	  "prefix": "N_0x4e096588b13ffeca",
	  "body": "N_0x4e096588b13ffeca",
	  "description": "OLD NAME, PLEASE USE SetTextJustification INSTEAD!"
	},
	"SetTextJustification()": {
	  "prefix": "SetTextJustification",
	  "body": [
		"SetTextJustification(${1:int justifyType})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nTypes -  \n0: Center-Justify  \n1: Left-Justify  \n2: Right-Justify  \nRight-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen  \n\nOld name: N_0x4e096588b13ffeca"
	},
	"SetTextProportional()": {
	  "prefix": "SetTextProportional",
	  "body": [
		"SetTextProportional(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"SetTextRightJustify()": {
	  "prefix": "SetTextRightJustify",
	  "body": [
		"SetTextRightJustify(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetTextLeading()": {
	  "prefix": "SetTextLeading",
	  "body": [
		"SetTextLeading(${1:BOOL p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nfrom script am_mp_yacht.c int?  \nui::set_text_leading(2);  \n"
	},
	"SetTextRenderId()": {
	  "prefix": "SetTextRenderId",
	  "body": [
		"SetTextRenderId(${1:int renderId})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetUseridsUihidden()": {
	  "prefix": "SetUseridsUihidden",
	  "body": [
		"SetUseridsUihidden(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: HUD\nReturns: BOOL\n\nHash collision! Please change back to _0xEF4CED81CEBEDC6D  \n"
	},
	"SetTextScale()": {
	  "prefix": "SetTextScale",
	  "body": [
		"SetTextScale(${1:float scale}, ${2:float size})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nSize range : 0f to 1.0f  \n"
	},
	"SetWarningMessage()": {
	  "prefix": "SetWarningMessage",
	  "body": [
		"SetWarningMessage(${1:char* entryLine1}, ${2:int instructionalKey}, ${3:char* entryLine2}, ${4:BOOL p3}, ${5:Any p4}, ${6:Any* background}, ${7:Any* p6}, ${8:BOOL p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n**instructionalKey enum list**:\n\n\nenum INSTRUCTIONAL_BUTTON_TYPES\n{\n    NONE = 0,\n    SELECT = 1,\n    OK = 2,\n    YES = 4,\n    BACK = 8,\n    BACK_SELECT = 9,\n    BACK_OK = 10,\n    BACK_YES = 12,\n    CANCEL = 16,\n    CANCEL_SELECT = 17,\n    CANCEL_OK = 18,\n    CANCEL_YES = 20,\n    NO = 32,\n    NO_SELECT = 33,\n    NO_OK = 34,\n    YES_NO = 36,\n    RETRY = 64,\n    RETRY_SELECT = 65,\n    RETRY_OK = 66,\n    RETRY_YES = 68,\n    RETRY_BACK = 72,\n    RETRY_BACK_SELECT = 73,\n    RETRY_BACK_OK = 74,\n    RETRY_BACK_YES = 76,\n    RETRY_CANCEL = 80,\n    RETRY_CANCEL_SELECT = 81,\n    RETRY_CANCEL_OK = 82,\n    RETRY_CANCEL_YES = 84,\n    SKIP = 256,\n    SKIP_SELECT = 257,\n    SKIP_OK = 258,\n    SKIP_YES = 260,\n    SKIP_BACK = 264,\n    SKIP_BACK_SELECT = 265,\n    SKIP_BACK_OK = 266,\n    SKIP_BACK_YES = 268,\n    SKIP_CANCEL = 272,\n    SKIP_CANCEL_SELECT = 273,\n    SKIP_CANCEL_OK = 274,\n    SKIP_CANCEL_YES = 276,\n    CONTINUE = 16384,\n    BACK_CONTINUE = 16392,\n    CANCEL_CONTINUE = 16400,\n    LOADING_SPINNER = 134217728,\n    SELECT_LOADING_SPINNER = 134217729,\n    OK_LOADING_SPINNER = 134217730,\n    YES_LOADING_SPINNER = 134217732,\n    BACK_LOADING_SPINNER = 134217736,\n    BACK_SELECT_LOADING_SPINNER = 134217737,\n    BACK_OK_LOADING_SPINNER = 134217738,\n    BACK_YES_LOADING_SPINNER = 134217740,\n    CANCEL_LOADING_SPINNER = 134217744,\n    CANCEL_SELECT_LOADING_SPINNER = 134217745,\n    CANCEL_OK_LOADING_SPINNER = 134217746,\n    CANCEL_YES_LOADING_SPINNER = 134217748\n}\n\n\nNote: this list is definitely NOT complete, but these are the ones I've been able to find before giving up because it's such a boring thing to look for 'good' combinations.\n\n**Result of the example code:**\n<https://i.imgur.com/imwoimm.png>"
	},
	"SetTextWrap()": {
	  "prefix": "SetTextWrap",
	  "body": [
		"SetTextWrap(${1:float start}, ${2:float end})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nIt sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.  \nstart - left boundry on screen position (0.0 - 1.0)  \nend - right boundry on screen position (0.0 - 1.0)  \n"
	},
	"SetWarningMessage_3()": {
	  "prefix": "SetWarningMessage_3",
	  "body": [
		"SetWarningMessage_3(${1:char* entryHeader}, ${2:char* entryLine1}, ${3:Any instructionalKey}, ${4:char* entryLine2}, ${5:BOOL p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:BOOL p9})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nYou can only use text entries. No custom text.  \n"
	},
	"SetWarningMessage_2()": {
	  "prefix": "SetWarningMessage_2",
	  "body": "SetWarningMessage_2",
	  "description": "OLD NAME, PLEASE USE SetWarningMessageWithHeader INSTEAD!"
	},
	"SetWarningMessageWithHeader()": {
	  "prefix": "SetWarningMessageWithHeader",
	  "body": [
		"SetWarningMessageWithHeader(${1:char* entryHeader}, ${2:char* entryLine1}, ${3:int instructionalKey}, ${4:char* entryLine2}, ${5:BOOL p4}, ${6:Any p5}, ${7:BOOL background}, ${8:Any* p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nYou can only use text entries. No custom text.  \nC# Example :  \nFunction.Call(Hash._SET_WARNING_MESSAGE_2, \"HUD_QUIT\", \"HUD_CGIGNORE\", 2, \"HUD_CGINVITE\", 0, -1, 0, 0, 1);  \nyou can recreate this easily with scaleforms  \n---------------  \nFixed native name, from before nativedb restoration.  \n\nOld name: SetWarningMessage_2"
	},
	"SetWidescreenFormat()": {
	  "prefix": "SetWidescreenFormat",
	  "body": [
		"SetWidescreenFormat(${1:Any p0})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"SetWaypointOff()": {
	  "prefix": "SetWaypointOff",
	  "body": [
		"SetWaypointOff()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nThis native removes the current waypoint from the map.  \nExample:  \nC#:  \nFunction.Call(Hash.SET_WAYPOINT_OFF);  \nC++:  \nUI::SET_WAYPOINT_OFF();  \n"
	},
	"ShowCursorThisFrame()": {
	  "prefix": "ShowCursorThisFrame",
	  "body": [
		"ShowCursorThisFrame()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nShows the cursor on screen for the frame its called.  \n"
	},
	"N_0xdcfb5d4db8bf367e()": {
	  "prefix": "N_0xdcfb5d4db8bf367e",
	  "body": "N_0xdcfb5d4db8bf367e",
	  "description": "OLD NAME, PLEASE USE ShowCrewIndicatorOnBlip INSTEAD!"
	},
	"SetBlipCrew()": {
	  "prefix": "SetBlipCrew",
	  "body": "SetBlipCrew",
	  "description": "OLD NAME, PLEASE USE ShowCrewIndicatorOnBlip INSTEAD!"
	},
	"ShowCrewIndicatorOnBlip()": {
	  "prefix": "ShowCrewIndicatorOnBlip",
	  "body": [
		"ShowCrewIndicatorOnBlip(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nEnables or disables the blue half circle ![](https://i.imgur.com/iZes9Ec.png) around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using [`SET_BLIP_SECONDARY_COLOUR`](#_0x14892474891E09EB).\n\nTo toggle the right side of the circle use: [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#_0x23C3EB807312F01A).\n\nExample code result:\n![](https://i.imgur.com/iZ9tNWl.png)\nOld name: N_0xdcfb5d4db8bf367e\nOld name: SetBlipCrew"
	},
	"N_0x23c3eb807312f01a()": {
	  "prefix": "N_0x23c3eb807312f01a",
	  "body": "N_0x23c3eb807312f01a",
	  "description": "OLD NAME, PLEASE USE ShowFriendIndicatorOnBlip INSTEAD!"
	},
	"SetBlipFriend()": {
	  "prefix": "SetBlipFriend",
	  "body": "SetBlipFriend",
	  "description": "OLD NAME, PLEASE USE ShowFriendIndicatorOnBlip INSTEAD!"
	},
	"ShowFriendIndicatorOnBlip()": {
	  "prefix": "ShowFriendIndicatorOnBlip",
	  "body": [
		"ShowFriendIndicatorOnBlip(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nHighlights a blip by a half cyan circle on the right side of the blip. ![](https://i.imgur.com/FrV9M4e.png) Indicating that that player is a friend (in GTA:O). This color can not be changed.\n\nTo toggle the left side (crew member indicator) of the half circle around the blip, use: [`SHOW_CREW_INDICATOR_ON_BLIP`](#_0xDCFB5D4DB8BF367E).\nOld name: N_0x23c3eb807312f01a\nOld name: SetBlipFriend"
	},
	"ShowHudComponentThisFrame()": {
	  "prefix": "ShowHudComponentThisFrame",
	  "body": [
		"ShowHudComponentThisFrame(${1:int id})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nThis function shows various HUD (Heads-up Display) components.\n\nListed below are the integers and the corresponding HUD component.\n\n-   1 : WANTED_STARS\n-   2 : WEAPON_ICON\n-   3 : CASH\n-   4 : MP_CASH\n-   5 : MP_MESSAGE\n-   6 : VEHICLE_NAME\n-   7 : AREA_NAME\n-   8 : VEHICLE_CLASS\n-   9 : STREET_NAME\n-   10 : HELP_TEXT\n-   11 : FLOATING_HELP_TEXT_1\n-   12 : FLOATING_HELP_TEXT_2\n-   13 : CASH_CHANGE\n-   14 : RETICLE\n-   15 : SUBTITLE_TEXT\n-   16 : RADIO_STATIONS\n-   17 : SAVING_GAME\n-   18 : GAME_STREAM\n-   19 : WEAPON_WHEEL\n-   20 : WEAPON_WHEEL_STATS\n-   21 : HUD_COMPONENTS\n-   22 : HUD_WEAPONS\n\nThese integers also work for the [`HIDE_HUD_COMPONENT_THIS_FRAME`](#_0x6806C51AD12B83B8) native, but instead hides the HUD component."
	},
	"N_0x5fbca48327b914df()": {
	  "prefix": "N_0x5fbca48327b914df",
	  "body": "N_0x5fbca48327b914df",
	  "description": "OLD NAME, PLEASE USE ShowHeadingIndicatorOnBlip INSTEAD!"
	},
	"ShowHeadingIndicatorOnBlip()": {
	  "prefix": "ShowHeadingIndicatorOnBlip",
	  "body": [
		"ShowHeadingIndicatorOnBlip(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAdds the GTA: Online player heading indicator to a blip.  \n\nOld name: N_0x5fbca48327b914df"
	},
	"N_0xb81656bc81fe24d1()": {
	  "prefix": "N_0xb81656bc81fe24d1",
	  "body": "N_0xb81656bc81fe24d1",
	  "description": "OLD NAME, PLEASE USE ShowOutlineIndicatorOnBlip INSTEAD!"
	},
	"SetBlipFriendly()": {
	  "prefix": "SetBlipFriendly",
	  "body": "SetBlipFriendly",
	  "description": "OLD NAME, PLEASE USE ShowOutlineIndicatorOnBlip INSTEAD!"
	},
	"ShowOutlineIndicatorOnBlip()": {
	  "prefix": "ShowOutlineIndicatorOnBlip",
	  "body": [
		"ShowOutlineIndicatorOnBlip(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\nToggles a cyan outline around the blip.\n\nColor can be changed with `SET_BLIP_SECONDARY_COLOUR`. Enabling this circle will override the \"crew\" and \"friend\" half-circles (see [`SHOW_CREW_INDICATOR_ON_BLIP`](#_0xDCFB5D4DB8BF367E) and [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#_0x23C3EB807312F01A)). \n\n~~Oddly enough, this native is called `_SET_BLIP_FRIENDLY`, but the color of the circle is only changable for the 'crew' half-circle (using `SET_BLIP_SECONDARY_COLOUR`), the 'friendly' side can NOT be changed and will always stay cyan/blue. This makes it seem more likely that this should be called `_SET_BLIP_CREW_CIRCLE` or something similar?~~\n\nReal name is `SHOW_OUTLINE_INDICATOR_ON_BLIP`, discovered by Blattersturm.\nOld name: N_0xb81656bc81fe24d1\nOld name: SetBlipFriendly"
	},
	"ShowNumberOnBlip()": {
	  "prefix": "ShowNumberOnBlip",
	  "body": [
		"ShowNumberOnBlip(${1:Blip blip}, ${2:int number})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ShowSocialClubLegalScreen()": {
	  "prefix": "ShowSocialClubLegalScreen",
	  "body": [
		"ShowSocialClubLegalScreen()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nprobs one frame  \n"
	},
	"N_0x74513ea3e505181e()": {
	  "prefix": "N_0x74513ea3e505181e",
	  "body": "N_0x74513ea3e505181e",
	  "description": "OLD NAME, PLEASE USE ShowTickOnBlip INSTEAD!"
	},
	"SetBlipChecked()": {
	  "prefix": "SetBlipChecked",
	  "body": "SetBlipChecked",
	  "description": "OLD NAME, PLEASE USE ShowTickOnBlip INSTEAD!"
	},
	"ShowTickOnBlip()": {
	  "prefix": "ShowTickOnBlip",
	  "body": [
		"ShowTickOnBlip(${1:Blip blip}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nAdds a green checkmark on top of a blip.  \n\nOld name: N_0x74513ea3e505181e\nOld name: SetBlipChecked"
	},
	"N_0xdb34e8d56fc13b08()": {
	  "prefix": "N_0xdb34e8d56fc13b08",
	  "body": "N_0xdb34e8d56fc13b08",
	  "description": "OLD NAME, PLEASE USE StartGpsCustomRoute INSTEAD!"
	},
	"StartGpsCustomRoute()": {
	  "prefix": "StartGpsCustomRoute",
	  "body": [
		"StartGpsCustomRoute(${1:int hudColor}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0xdb34e8d56fc13b08"
	},
	"N_0x3d3d15af7bcaaf83()": {
	  "prefix": "N_0x3d3d15af7bcaaf83",
	  "body": "N_0x3d3d15af7bcaaf83",
	  "description": "OLD NAME, PLEASE USE StartGpsMultiRoute INSTEAD!"
	},
	"StartGpsMultiRoute()": {
	  "prefix": "StartGpsMultiRoute",
	  "body": [
		"StartGpsMultiRoute(${1:int hudColor}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nOld name: N_0x3d3d15af7bcaaf83"
	},
	"N_0xeb354e5376bc81a7()": {
	  "prefix": "N_0xeb354e5376bc81a7",
	  "body": "N_0xeb354e5376bc81a7",
	  "description": "OLD NAME, PLEASE USE ShowWeaponWheel INSTEAD!"
	},
	"ShowWeaponWheel()": {
	  "prefix": "ShowWeaponWheel",
	  "body": [
		"ShowWeaponWheel(${1:BOOL forcedShow})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n\nForces the weapon wheel to appear on screen.  \n\nOld name: N_0xeb354e5376bc81a7"
	},
	"UnlockMinimapAngle()": {
	  "prefix": "UnlockMinimapAngle",
	  "body": [
		"UnlockMinimapAngle()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"ToggleStealthRadar()": {
	  "prefix": "ToggleStealthRadar",
	  "body": [
		"ToggleStealthRadar(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"UnlockMinimapPosition()": {
	  "prefix": "UnlockMinimapPosition",
	  "body": [
		"UnlockMinimapPosition()"
	  ],
	  "description": "Namespace: HUD\nReturns: void\n"
	},
	"AddCoverBlockingArea()": {
	  "prefix": "AddCoverBlockingArea",
	  "body": [
		"AddCoverBlockingArea(${1:float playerX}, ${2:float playerY}, ${3:float playerZ}, ${4:float radiusX}, ${5:float radiusY}, ${6:float radiusZ}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"AddCoverPoint()": {
	  "prefix": "AddCoverPoint",
	  "body": [
		"AddCoverPoint(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: ScrHandle\n"
	},
	"AddScriptToRandomPed()": {
	  "prefix": "AddScriptToRandomPed",
	  "body": [
		"AddScriptToRandomPed(${1:char* name}, ${2:Hash model}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nBRAIN::ADD_SCRIPT_TO_RANDOM_PED(\"pb_prostitute\", ${s_f_y_hooker_01}, 100, 0);  \n-----  \nHardcoded to not work in Multiplayer.  \n------  \nWhich I'm sure can easily be bypassed by nop'ing the branch preventing it from working if you are in multiplayer lol. Which would still be pointless since you don't need this to make peds do what you wish.  \n"
	},
	"AddPatrolRouteLink()": {
	  "prefix": "AddPatrolRouteLink",
	  "body": [
		"AddPatrolRouteLink(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"AddVehicleSubtaskAttackPed()": {
	  "prefix": "AddVehicleSubtaskAttackPed",
	  "body": [
		"AddVehicleSubtaskAttackPed(${1:Ped ped}, ${2:Ped ped2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"AddPatrolRouteNode()": {
	  "prefix": "AddPatrolRouteNode",
	  "body": [
		"AddPatrolRouteNode(${1:int p0}, ${2:char* p1}, ${3:float x1}, ${4:float y1}, ${5:float z1}, ${6:float x2}, ${7:float y2}, ${8:float z2}, ${9:int p8})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExample:   \nAI::ADD_PATROL_ROUTE_NODE(2, \"WORLD_HUMAN_GUARD_STAND\", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);  \np0 is between 0 and 4 in the scripts.  \np1 is \"WORLD_HUMAN_GUARD_STAND\" or \"StandGuard\".  \np2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.   \nExamples:   \nAI::ADD_PATROL_ROUTE_NODE(1, \"WORLD_HUMAN_GUARD_STAND\", l_739[7/*3*/], 0.0, 0.0, 0.0, 0);  \nAI::ADD_PATROL_ROUTE_NODE(1, \"WORLD_HUMAN_GUARD_STAND\", l_B0[17/*44*/]._f3, l_B0[17/*44*/]._f3, 2000);  \np5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.  \np8 is an int, often random set to for example: GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000).  \n"
	},
	"AssistedMovementRemoveRoute()": {
	  "prefix": "AssistedMovementRemoveRoute",
	  "body": [
		"AssistedMovementRemoveRoute(${1:char* route})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"AddVehicleSubtaskAttackCoord()": {
	  "prefix": "AddVehicleSubtaskAttackCoord",
	  "body": [
		"AddVehicleSubtaskAttackCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nx, y, z: offset in world coords from some entity.  \n"
	},
	"AssistedMovementRequestRoute()": {
	  "prefix": "AssistedMovementRequestRoute",
	  "body": [
		"AssistedMovementRequestRoute(${1:char* route})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nRoutes: \"1_FIBStairs\", \"2_FIBStairs\", \"3_FIBStairs\", \"4_FIBStairs\", \"5_FIBStairs\", \"5_TowardsFire\", \"6a_FIBStairs\", \"7_FIBStairs\", \"8_FIBStairs\", \"Aprtmnt_1\", \"AssAfterLift\", \"ATM_1\", \"coroner2\", \"coroner_stairs\", \"f5_jimmy1\", \"fame1\", \"family5b\", \"family5c\", \"Family5d\", \"family5d\", \"FIB_Glass1\", \"FIB_Glass2\", \"FIB_Glass3\", \"finaBroute1A\", \"finalb1st\", \"finalB1sta\", \"finalbround\", \"finalbroute2\", \"Hairdresser1\", \"jan_foyet_ft_door\", \"Jo_3\", \"Lemar1\", \"Lemar2\", \"mansion_1\", \"Mansion_1\", \"pols_1\", \"pols_2\", \"pols_3\", \"pols_4\", \"pols_5\", \"pols_6\", \"pols_7\", \"pols_8\", \"Pro_S1\", \"Pro_S1a\", \"Pro_S2\", \"Towards_case\", \"trev_steps\", \"tunrs1\", \"tunrs2\", \"tunrs3\", \"Wave01457s\"  \n"
	},
	"AssistedMovementIsRouteLoaded()": {
	  "prefix": "AssistedMovementIsRouteLoaded",
	  "body": [
		"AssistedMovementIsRouteLoaded(${1:char* route})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"ClearDrivebyTaskUnderneathDrivingTask()": {
	  "prefix": "ClearDrivebyTaskUnderneathDrivingTask",
	  "body": [
		"ClearDrivebyTaskUnderneathDrivingTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"AssistedMovementOverrideLoadDistanceThisFrame()": {
	  "prefix": "AssistedMovementOverrideLoadDistanceThisFrame",
	  "body": [
		"AssistedMovementOverrideLoadDistanceThisFrame(${1:float dist})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"ClearPedTasks()": {
	  "prefix": "ClearPedTasks",
	  "body": [
		"ClearPedTasks(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"AssistedMovementSetRouteProperties()": {
	  "prefix": "AssistedMovementSetRouteProperties",
	  "body": [
		"AssistedMovementSetRouteProperties(${1:char* route}, ${2:int props})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"ClearSequenceTask()": {
	  "prefix": "ClearSequenceTask",
	  "body": [
		"ClearSequenceTask(${1:Object* taskSequence})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"ClearPedSecondaryTask()": {
	  "prefix": "ClearPedSecondaryTask",
	  "body": [
		"ClearPedSecondaryTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"CloseSequenceTask()": {
	  "prefix": "CloseSequenceTask",
	  "body": [
		"CloseSequenceTask(${1:Object taskSequence})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"ClearPedTasksImmediately()": {
	  "prefix": "ClearPedTasksImmediately",
	  "body": [
		"ClearPedTasksImmediately(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nImmediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.  \n"
	},
	"ClosePatrolRoute()": {
	  "prefix": "ClosePatrolRoute",
	  "body": [
		"ClosePatrolRoute()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"ControlMountedWeapon()": {
	  "prefix": "ControlMountedWeapon",
	  "body": [
		"ControlMountedWeapon(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nForces the ped to use the mounted weapon.  \nReturns false if task is not possible.  \n"
	},
	"DeletePatrolRoute()": {
	  "prefix": "DeletePatrolRoute",
	  "body": [
		"DeletePatrolRoute(${1:char* patrolRoute})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFrom the b617d scripts:  \nAI::DELETE_PATROL_ROUTE(\"miss_merc0\");  \nAI::DELETE_PATROL_ROUTE(\"miss_merc1\");  \nAI::DELETE_PATROL_ROUTE(\"miss_merc2\");  \nAI::DELETE_PATROL_ROUTE(\"miss_dock\");  \n"
	},
	"CreatePatrolRoute()": {
	  "prefix": "CreatePatrolRoute",
	  "body": [
		"CreatePatrolRoute()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"DisableScriptBrainSet()": {
	  "prefix": "DisableScriptBrainSet",
	  "body": [
		"DisableScriptBrainSet(${1:int brainSet})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"DoesScenarioExistInArea()": {
	  "prefix": "DoesScenarioExistInArea",
	  "body": [
		"DoesScenarioExistInArea(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL b})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"DoesScenarioGroupExist()": {
	  "prefix": "DoesScenarioGroupExist",
	  "body": [
		"DoesScenarioGroupExist(${1:char* scenarioGroup})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nOccurrences in the b617d scripts:  \n\"ARMY_GUARD\",  \n\"ARMY_HELI\",  \n\"Cinema_Downtown\",  \n\"Cinema_Morningwood\",  \n\"Cinema_Textile\",  \n\"City_Banks\",  \n\"Countryside_Banks\",  \n\"DEALERSHIP\",  \n\"GRAPESEED_PLANES\",  \n\"KORTZ_SECURITY\",  \n\"LOST_BIKERS\",  \n\"LSA_Planes\",  \n\"LSA_Planes\",  \n\"MP_POLICE\",  \n\"Observatory_Bikers\",   \n\"POLICE_POUND1\",  \n\"POLICE_POUND2\",  \n\"POLICE_POUND3\",  \n\"POLICE_POUND4\",  \n\"POLICE_POUND5\"  \n\"QUARRY\",  \n\"SANDY_PLANES\",  \n\"SCRAP_SECURITY\",  \n\"SEW_MACHINE\",  \n\"SOLOMON_GATE\",  \n\"Triathlon_1_Start\",   \n\"Triathlon_2_Start\",   \n\"Triathlon_3_Start\"  \nSometimes used with IS_SCENARIO_GROUP_ENABLED:  \nif (AI::DOES_SCENARIO_GROUP_EXIST(\"Observatory_Bikers\") && (!AI::IS_SCENARIO_GROUP_ENABLED(\"Observatory_Bikers\"))) {  \nelse if (AI::IS_SCENARIO_GROUP_ENABLED(\"BLIMP\")) {  \n"
	},
	"DoesScenarioOfTypeExistInArea()": {
	  "prefix": "DoesScenarioOfTypeExistInArea",
	  "body": [
		"DoesScenarioOfTypeExistInArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:Any* p3}, ${5:float p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"EnableScriptBrainSet()": {
	  "prefix": "EnableScriptBrainSet",
	  "body": [
		"EnableScriptBrainSet(${1:int brainSet})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\n#4  \n"
	},
	"DoesScriptedCoverPointExistAtCoords()": {
	  "prefix": "DoesScriptedCoverPointExistAtCoords",
	  "body": [
		"DoesScriptedCoverPointExistAtCoords(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nChecks if there is a cover point at position  \n"
	},
	"GetClipSetForScriptedGunTask()": {
	  "prefix": "GetClipSetForScriptedGunTask",
	  "body": [
		"GetClipSetForScriptedGunTask(${1:int p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: char*\n"
	},
	"GetActiveVehicleMissionType()": {
	  "prefix": "GetActiveVehicleMissionType",
	  "body": [
		"GetActiveVehicleMissionType(${1:Vehicle veh})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: int\n"
	},
	"GetIsWaypointRecordingLoaded()": {
	  "prefix": "GetIsWaypointRecordingLoaded",
	  "body": [
		"GetIsWaypointRecordingLoaded(${1:char* name})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nFor a full list, see here: pastebin.com/Tp0XpBMN  \n"
	},
	"GetIsTaskActive()": {
	  "prefix": "GetIsTaskActive",
	  "body": [
		"GetIsTaskActive(${1:Ped ped}, ${2:int taskNumber})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nfrom docks_heistb.c4:  \nAI::GET_IS_TASK_ACTIVE(PLAYER::PLAYER_PED_ID(), 2))  \nKnown Tasks: pastebin.com/2gFqJ3Px  \n"
	},
	"GetNavmeshRouteDistanceRemaining()": {
	  "prefix": "GetNavmeshRouteDistanceRemaining",
	  "body": [
		"GetNavmeshRouteDistanceRemaining(${1:Ped ped}, ${2:float* distRemaining}, ${3:BOOL* isPathReady})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: int\n\nLooks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.  \nReturn value of native is the same as GET_NAVMESH_ROUTE_RESULT  \nLooks like the native returns an int for the path's state:  \n1 - ???  \n2   \n3 - Finished Generating  \n"
	},
	"GetNavmeshRouteResult()": {
	  "prefix": "GetNavmeshRouteResult",
	  "body": [
		"GetNavmeshRouteResult(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: int\n\nSee GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.  \n"
	},
	"GetPedDesiredMoveBlendRatio()": {
	  "prefix": "GetPedDesiredMoveBlendRatio",
	  "body": [
		"GetPedDesiredMoveBlendRatio(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: float\n"
	},
	"GetPedWaypointDistance()": {
	  "prefix": "GetPedWaypointDistance",
	  "body": [
		"GetPedWaypointDistance(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: float\n"
	},
	"GetPhoneGestureAnimCurrentTime()": {
	  "prefix": "GetPhoneGestureAnimCurrentTime",
	  "body": [
		"GetPhoneGestureAnimCurrentTime(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: float\n"
	},
	"GetPedWaypointProgress()": {
	  "prefix": "GetPedWaypointProgress",
	  "body": [
		"GetPedWaypointProgress(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: int\n\nReturns the progress percent to current waypoint.  \n"
	},
	"GetPhoneGestureAnimTotalTime()": {
	  "prefix": "GetPhoneGestureAnimTotalTime",
	  "body": [
		"GetPhoneGestureAnimTotalTime(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: float\n"
	},
	"GetScriptTaskStatus()": {
	  "prefix": "GetScriptTaskStatus",
	  "body": [
		"GetScriptTaskStatus(${1:Ped targetPed}, ${2:Hash taskHash})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: int\n\nGets the status of a script-assigned task. The hash does not seem to match the actual native name, but is assigned hardcoded from the executable during task creation.  \nStatuses are specific to tasks, in addition '7' means the specified task is not assigned to the ped.  \nA few hashes found in the executable (although not a complete list) can be found at pastebin.com/R9iK6M9W as it was too long for this wiki.  \n"
	},
	"GetSequenceProgress()": {
	  "prefix": "GetSequenceProgress",
	  "body": [
		"GetSequenceProgress(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: int\n\nreturned values:  \n0 to 7 = task that's currently in progress, 0 meaning the first one.  \n"
	},
	"GetScriptedCoverPointCoords()": {
	  "prefix": "GetScriptedCoverPointCoords",
	  "body": [
		"GetScriptedCoverPointCoords(${1:ScrHandle coverpoint})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Vector3\n"
	},
	"GetVehicleWaypointProgress()": {
	  "prefix": "GetVehicleWaypointProgress",
	  "body": [
		"GetVehicleWaypointProgress(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: int\n"
	},
	"GetVehicleWaypointTargetPoint()": {
	  "prefix": "GetVehicleWaypointTargetPoint",
	  "body": [
		"GetVehicleWaypointTargetPoint(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"IsDrivebyTaskUnderneathDrivingTask()": {
	  "prefix": "IsDrivebyTaskUnderneathDrivingTask",
	  "body": [
		"IsDrivebyTaskUnderneathDrivingTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"GetWaypointDistanceAlongRoute()": {
	  "prefix": "GetWaypointDistanceAlongRoute",
	  "body": [
		"GetWaypointDistanceAlongRoute(${1:char* p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: float\n"
	},
	"IsMountedWeaponTaskUnderneathDrivingTask()": {
	  "prefix": "IsMountedWeaponTaskUnderneathDrivingTask",
	  "body": [
		"IsMountedWeaponTaskUnderneathDrivingTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsMoveBlendRatioSprinting()": {
	  "prefix": "IsMoveBlendRatioSprinting",
	  "body": [
		"IsMoveBlendRatioSprinting(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsMoveBlendRatioRunning()": {
	  "prefix": "IsMoveBlendRatioRunning",
	  "body": [
		"IsMoveBlendRatioRunning(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsMoveBlendRatioWalking()": {
	  "prefix": "IsMoveBlendRatioWalking",
	  "body": [
		"IsMoveBlendRatioWalking(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsMoveBlendRatioStill()": {
	  "prefix": "IsMoveBlendRatioStill",
	  "body": [
		"IsMoveBlendRatioStill(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsObjectWithinBrainActivationRange()": {
	  "prefix": "IsObjectWithinBrainActivationRange",
	  "body": [
		"IsObjectWithinBrainActivationRange(${1:Object object})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedBeingArrested()": {
	  "prefix": "IsPedBeingArrested",
	  "body": [
		"IsPedBeingArrested(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nThis function is hard-coded to always return 0.  \n"
	},
	"IsPedActiveInScenario()": {
	  "prefix": "IsPedActiveInScenario",
	  "body": [
		"IsPedActiveInScenario(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedGettingUp()": {
	  "prefix": "IsPedGettingUp",
	  "body": [
		"IsPedGettingUp(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedCuffed()": {
	  "prefix": "IsPedCuffed",
	  "body": [
		"IsPedCuffed(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nl  \n"
	},
	"IsPedInWrithe()": {
	  "prefix": "IsPedInWrithe",
	  "body": [
		"IsPedInWrithe(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nreturns true is the ped is on the ground whining like a little female dog from a gunshot wound  \n"
	},
	"IsPedRunning()": {
	  "prefix": "IsPedRunning",
	  "body": [
		"IsPedRunning(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedRunningArrestTask()": {
	  "prefix": "IsPedRunningArrestTask",
	  "body": [
		"IsPedRunningArrestTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedSprinting()": {
	  "prefix": "IsPedSprinting",
	  "body": [
		"IsPedSprinting(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedStill()": {
	  "prefix": "IsPedStill",
	  "body": [
		"IsPedStill(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedStrafing()": {
	  "prefix": "IsPedStrafing",
	  "body": [
		"IsPedStrafing(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nWhat's strafing?  \n"
	},
	"IsPlayingPhoneGestureAnim()": {
	  "prefix": "IsPlayingPhoneGestureAnim",
	  "body": [
		"IsPlayingPhoneGestureAnim(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsPedWalking()": {
	  "prefix": "IsPedWalking",
	  "body": [
		"IsPedWalking(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsScenarioGroupEnabled()": {
	  "prefix": "IsScenarioGroupEnabled",
	  "body": [
		"IsScenarioGroupEnabled(${1:char* scenarioGroup})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nOccurrences in the b617d scripts:   \n\"ARMY_GUARD\",  \n\"ARMY_HELI\",  \n\"BLIMP\",  \n\"Cinema_Downtown\",  \n\"Cinema_Morningwood\",  \n\"Cinema_Textile\",  \n\"City_Banks\",  \n\"Countryside_Banks\",  \n\"DEALERSHIP\",  \n\"KORTZ_SECURITY\",  \n\"LSA_Planes\",  \n\"MP_POLICE\",  \n\"Observatory_Bikers\",  \n\"POLICE_POUND1\",  \n\"POLICE_POUND2\",  \n\"POLICE_POUND3\",  \n\"POLICE_POUND4\",  \n\"POLICE_POUND5\",  \n\"Rampage1\",  \n\"SANDY_PLANES\",  \n\"SCRAP_SECURITY\",  \n\"SEW_MACHINE\",  \n\"SOLOMON_GATE\"  \n\t\tSometimes used with DOES_SCENARIO_GROUP_EXIST:  \n\t\tif (AI::DOES_SCENARIO_GROUP_EXIST(\"Observatory_Bikers\") &&   (!AI::IS_SCENARIO_GROUP_ENABLED(\"Observatory_Bikers\"))) {  \n\t\telse if (AI::IS_SCENARIO_GROUP_ENABLED(\"BLIMP\")) {  \n"
	},
	"IsScenarioOccupied()": {
	  "prefix": "IsScenarioOccupied",
	  "body": [
		"IsScenarioOccupied(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsScenarioTypeEnabled()": {
	  "prefix": "IsScenarioTypeEnabled",
	  "body": [
		"IsScenarioTypeEnabled(${1:char* scenarioType})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nOccurrences in the b617d scripts:  \n\"PROP_HUMAN_SEAT_CHAIR\",  \n\"WORLD_HUMAN_DRINKING\",  \n\"WORLD_HUMAN_HANG_OUT_STREET\",  \n\"WORLD_HUMAN_SMOKING\",  \n\"WORLD_MOUNTAIN_LION_WANDER\",  \n\"WORLD_HUMAN_DRINKING\"  \nSometimes used together with GAMEPLAY::IS_STRING_NULL_OR_EMPTY in the scripts.  \nscenarioType could be the same as scenarioName, used in for example AI::TASK_START_SCENARIO_AT_POSITION.  \n"
	},
	"IsWaypointPlaybackGoingOnForPed()": {
	  "prefix": "IsWaypointPlaybackGoingOnForPed",
	  "body": [
		"IsWaypointPlaybackGoingOnForPed(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"IsWaypointPlaybackGoingOnForVehicle()": {
	  "prefix": "IsWaypointPlaybackGoingOnForVehicle",
	  "body": [
		"IsWaypointPlaybackGoingOnForVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"N_0x0b40ed49d7d6ff84()": {
	  "prefix": "N_0x0b40ed49d7d6ff84",
	  "body": [
		"N_0x0b40ed49d7d6ff84()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"IsWorldPointWithinBrainActivationRange()": {
	  "prefix": "IsWorldPointWithinBrainActivationRange",
	  "body": [
		"IsWorldPointWithinBrainActivationRange()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nGets whether the world point the calling script is registered to is within desired range of the player.  \n"
	},
	"N_0x19d1b791cb3670fe()": {
	  "prefix": "N_0x19d1b791cb3670fe",
	  "body": [
		"N_0x19d1b791cb3670fe(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"N_0x1f351cf1c6475734()": {
	  "prefix": "N_0x1f351cf1c6475734",
	  "body": [
		"N_0x1f351cf1c6475734(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"N_0x30ed88d5e0c56a37()": {
	  "prefix": "N_0x30ed88d5e0c56a37",
	  "body": [
		"N_0x30ed88d5e0c56a37(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"N_0x3e38e28a1d80ddf6()": {
	  "prefix": "N_0x3e38e28a1d80ddf6",
	  "body": [
		"N_0x3e38e28a1d80ddf6(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"N_0x4d953df78ebf8158()": {
	  "prefix": "N_0x4d953df78ebf8158",
	  "body": [
		"N_0x4d953df78ebf8158()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nSomething like flush_all_scripts   \nMost of time comes after NETWORK_END_TUTORIAL_SESSION() or before TERMINATE_THIS_THREAD()  \n"
	},
	"N_0x621c6e4729388e41()": {
	  "prefix": "N_0x621c6e4729388e41",
	  "body": [
		"N_0x621c6e4729388e41(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nUsed only once (am_mp_property_int)  \nped was PLAYER_PED_ID()  \n"
	},
	"N_0x6d6840cee8845831()": {
	  "prefix": "N_0x6d6840cee8845831",
	  "body": [
		"N_0x6d6840cee8845831(${1:char* action})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nPossible values:  \nact_cinema  \nam_mp_carwash_launch  \nam_mp_carwash_control  \nam_mp_property_ext  \nchop  \nfairgroundHub  \nlauncher_BasejumpHeli  \nlauncher_BasejumpPack  \nlauncher_CarWash  \nlauncher_golf  \nlauncher_Hunting_Ambient  \nlauncher_MrsPhilips  \nlauncher_OffroadRacing  \nlauncher_pilotschool  \nlauncher_Racing  \nlauncher_rampage  \nlauncher_rampage  \nlauncher_range  \nlauncher_stunts  \nlauncher_stunts  \nlauncher_tennis  \nlauncher_Tonya  \nlauncher_Triathlon  \nlauncher_Yoga  \nob_mp_bed_low  \nob_mp_bed_med  \n"
	},
	"N_0x6e91b04e08773030()": {
	  "prefix": "N_0x6e91b04e08773030",
	  "body": [
		"N_0x6e91b04e08773030(${1:char* action})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nLooks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar  \nHere are possible values of argument -   \n\"ob_tv\"  \n\"launcher_Darts\"  \n"
	},
	"N_0x88e32db8c1a4aa4b()": {
	  "prefix": "N_0x88e32db8c1a4aa4b",
	  "body": [
		"N_0x88e32db8c1a4aa4b(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nSET_PED_PATH_*  \nCould be the move speed on the path. Needs testing.  \nDefault is 1.0 and maximum is 10.0  \n"
	},
	"N_0x717e4d1f2048376d()": {
	  "prefix": "N_0x717e4d1f2048376d",
	  "body": [
		"N_0x717e4d1f2048376d(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: char*\n\nIf the function fails, returns \"Unknown\".  \nCould be task (sequence) name. Needs more research.  \n"
	},
	"N_0x8fd89a6240813fd0()": {
	  "prefix": "N_0x8fd89a6240813fd0",
	  "body": [
		"N_0x8fd89a6240813fd0(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nAppears only in fm_mission_controller and used only 3 times.  \nped was always PLAYER_PED_ID()  \np1 was always true  \np2 was always true  \n"
	},
	"N_0x8c33220c8d78ca0d()": {
	  "prefix": "N_0x8c33220c8d78ca0d",
	  "body": [
		"N_0x8c33220c8d78ca0d(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"N_0x92c360b5f15d2302()": {
	  "prefix": "N_0x92c360b5f15d2302",
	  "body": [
		"N_0x92c360b5f15d2302(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"N_0x921ce12c489c4c41()": {
	  "prefix": "N_0x921ce12c489c4c41",
	  "body": [
		"N_0x921ce12c489c4c41(${1:int PlayerID})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"N_0xab13a5565480b6d9()": {
	  "prefix": "N_0xab13a5565480b6d9",
	  "body": [
		"N_0xab13a5565480b6d9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"N_0xa7ffba498e4aaf67()": {
	  "prefix": "N_0xa7ffba498e4aaf67",
	  "body": [
		"N_0xa7ffba498e4aaf67(${1:Ped ped}, ${2:char* p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nFound in scripts:  \nif (AI::_A7FFBA498E4AAF67(l_9BC, \"Run\")) {  \nif (AI::_A7FFBA498E4AAF67(l_9BC, \"Escape\")) {  \n"
	},
	"N_0xb4f47213df45a64c()": {
	  "prefix": "N_0xb4f47213df45a64c",
	  "body": [
		"N_0xb4f47213df45a64c(${1:Ped ped}, ${2:char* p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"N_0xd01015c7316ae176()": {
	  "prefix": "N_0xd01015c7316ae176",
	  "body": [
		"N_0xd01015c7316ae176(${1:Ped ped}, ${2:char* p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"OpenPatrolRoute()": {
	  "prefix": "OpenPatrolRoute",
	  "body": [
		"OpenPatrolRoute(${1:char* patrolRoute})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\npatrolRoutes found in the b617d scripts:  \n\"miss_Ass0\",  \n\"miss_Ass1\",  \n\"miss_Ass2\",  \n\"miss_Ass3\",  \n\"miss_Ass4\",  \n\"miss_Ass5\",  \n\"miss_Ass6\",  \n\"MISS_PATROL_6\",  \n\"MISS_PATROL_7\",  \n\"MISS_PATROL_8\",  \n\"MISS_PATROL_9\",  \n\"miss_Tower_01\",  \n\"miss_Tower_02\",  \n\"miss_Tower_03\",  \n\"miss_Tower_04\",  \n\"miss_Tower_05\",  \n\"miss_Tower_06\",  \n\"miss_Tower_07\",  \n\"miss_Tower_08\",  \n\"miss_Tower_10\"  \n"
	},
	"N_0xe70ba7b90f8390dc()": {
	  "prefix": "N_0xe70ba7b90f8390dc",
	  "body": [
		"N_0xe70ba7b90f8390dc(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"PedHasUseScenarioTask()": {
	  "prefix": "PedHasUseScenarioTask",
	  "body": [
		"PedHasUseScenarioTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"OpenSequenceTask()": {
	  "prefix": "OpenSequenceTask",
	  "body": [
		"OpenSequenceTask(${1:Object* taskSequence})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"PlayEntityScriptedAnim()": {
	  "prefix": "PlayEntityScriptedAnim",
	  "body": [
		"PlayEntityScriptedAnim(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"RegisterWorldPointScriptBrain()": {
	  "prefix": "RegisterWorldPointScriptBrain",
	  "body": [
		"RegisterWorldPointScriptBrain(${1:Any* p0}, ${2:float p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"PlayAnimOnRunningScenario()": {
	  "prefix": "PlayAnimOnRunningScenario",
	  "body": [
		"PlayAnimOnRunningScenario(${1:Ped ped}, ${2:char* animDict}, ${3:char* animName})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"RemoveCoverPoint()": {
	  "prefix": "RemoveCoverPoint",
	  "body": [
		"RemoveCoverPoint(${1:ScrHandle coverpoint})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"RegisterObjectScriptBrain()": {
	  "prefix": "RegisterObjectScriptBrain",
	  "body": [
		"RegisterObjectScriptBrain(${1:char* scriptName}, ${2:Hash objectName}, ${3:int p2}, ${4:float p3}, ${5:int p4}, ${6:int p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nRegisters a script for any object with a specific model hash.  \nBRAIN::REGISTER_OBJECT_SCRIPT_BRAIN(\"ob_telescope\", ${prop_telescope_01}, 100, 4.0, -1, 9);  \n"
	},
	"RemoveWaypointRecording()": {
	  "prefix": "RemoveWaypointRecording",
	  "body": [
		"RemoveWaypointRecording(${1:char* name})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFor a full list, see here: pastebin.com/Tp0XpBMN  \n"
	},
	"RemoveAllCoverBlockingAreas()": {
	  "prefix": "RemoveAllCoverBlockingAreas",
	  "body": [
		"RemoveAllCoverBlockingAreas()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"RequestWaypointRecording()": {
	  "prefix": "RequestWaypointRecording",
	  "body": [
		"RequestWaypointRecording(${1:char* name})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFor a full list, see here: pastebin.com/Tp0XpBMN  \nFor a full list of the points, see here: goo.gl/wIH0vn  \nMax number of loaded recordings is 32.  \n"
	},
	"ResetExclusiveScenarioGroup()": {
	  "prefix": "ResetExclusiveScenarioGroup",
	  "body": [
		"ResetExclusiveScenarioGroup()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"ResetScenarioTypesEnabled()": {
	  "prefix": "ResetScenarioTypesEnabled",
	  "body": [
		"ResetScenarioTypesEnabled()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"ResetScenarioGroupsEnabled()": {
	  "prefix": "ResetScenarioGroupsEnabled",
	  "body": [
		"ResetScenarioGroupsEnabled()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetAnimRate()": {
	  "prefix": "SetAnimRate",
	  "body": [
		"SetAnimRate(${1:Any p0}, ${2:float p1}, ${3:Any p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetAnimLooped()": {
	  "prefix": "SetAnimLooped",
	  "body": [
		"SetAnimLooped(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetDriveTaskCruiseSpeed()": {
	  "prefix": "SetDriveTaskCruiseSpeed",
	  "body": [
		"SetDriveTaskCruiseSpeed(${1:Ped driver}, ${2:float cruiseSpeed})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetAnimWeight()": {
	  "prefix": "SetAnimWeight",
	  "body": [
		"SetAnimWeight(${1:Any p0}, ${2:float p1}, ${3:Any p2}, ${4:Any p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetDriveTaskMaxCruiseSpeed()": {
	  "prefix": "SetDriveTaskMaxCruiseSpeed",
	  "body": [
		"SetDriveTaskMaxCruiseSpeed(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetDriveTaskDrivingStyle()": {
	  "prefix": "SetDriveTaskDrivingStyle",
	  "body": [
		"SetDriveTaskDrivingStyle(${1:Ped ped}, ${2:int drivingStyle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nThis native is used to set the driving style for specific ped.  \nDriving styles id seems to be:  \n786468  \n262144  \n786469  \nhttp://gtaforums.com/topic/822314-guide-driving-styles/  \n"
	},
	"SetExclusiveScenarioGroup()": {
	  "prefix": "SetExclusiveScenarioGroup",
	  "body": [
		"SetExclusiveScenarioGroup(${1:char* scenarioGroup})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nGroups found in the scripts used with this native:  \n\"AMMUNATION\",  \n\"QUARRY\",  \n\"Triathlon_1\",  \n\"Triathlon_2\",  \n\"Triathlon_3\"  \n"
	},
	"SetHighFallTask()": {
	  "prefix": "SetHighFallTask",
	  "body": [
		"SetHighFallTask(${1:Ped ped}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes the ped ragdoll like when falling from a great height  \n"
	},
	"SetDrivebyTaskTarget()": {
	  "prefix": "SetDrivebyTaskTarget",
	  "body": [
		"SetDrivebyTaskTarget(${1:Ped shootingPed}, ${2:Ped targetPed}, ${3:Vehicle targetVehicle}, ${4:float x}, ${5:float y}, ${6:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFor p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.  \n"
	},
	"SetGlobalMinBirdFlightHeight()": {
	  "prefix": "SetGlobalMinBirdFlightHeight",
	  "body": [
		"SetGlobalMinBirdFlightHeight(${1:float height})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nNeeds to be looped! And yes, it does work and is not a hash collision.  \nBirds will try to reach the given height.  \n"
	},
	"SetMountedWeaponTarget()": {
	  "prefix": "SetMountedWeaponTarget",
	  "body": [
		"SetMountedWeaponTarget(${1:Ped shootingPed}, ${2:Ped targetPed}, ${3:Vehicle targetVehicle}, ${4:float x}, ${5:float y}, ${6:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nNote: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.  \n"
	},
	"SetNextDesiredMoveState()": {
	  "prefix": "SetNextDesiredMoveState",
	  "body": [
		"SetNextDesiredMoveState(${1:float p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n**This native does absolutely nothing, just a nullsub**\n\n\nNot used in the scripts.  \nBullshit! It's used in spawn_activities  \n"
	},
	"SetParachuteTaskTarget()": {
	  "prefix": "SetParachuteTaskTarget",
	  "body": [
		"SetParachuteTaskTarget(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetParachuteTaskThrust()": {
	  "prefix": "SetParachuteTaskThrust",
	  "body": [
		"SetParachuteTaskThrust(${1:Ped ped}, ${2:float thrust})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetPedDesiredMoveBlendRatio()": {
	  "prefix": "SetPedDesiredMoveBlendRatio",
	  "body": [
		"SetPedDesiredMoveBlendRatio(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetPedPathAvoidFire()": {
	  "prefix": "SetPedPathAvoidFire",
	  "body": [
		"SetPedPathAvoidFire(${1:Ped ped}, ${2:BOOL avoidFire})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetPedPathCanUseClimbovers()": {
	  "prefix": "SetPedPathCanUseClimbovers",
	  "body": [
		"SetPedPathCanUseClimbovers(${1:Ped ped}, ${2:BOOL Toggle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"SetPedPathCanDropFromHeight()": {
	  "prefix": "SetPedPathCanDropFromHeight",
	  "body": [
		"SetPedPathCanDropFromHeight(${1:Ped ped}, ${2:BOOL Toggle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetPedPathCanUseLadders()": {
	  "prefix": "SetPedPathCanUseLadders",
	  "body": [
		"SetPedPathCanUseLadders(${1:Ped ped}, ${2:BOOL Toggle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"SetPedPathPreferToAvoidWater()": {
	  "prefix": "SetPedPathPreferToAvoidWater",
	  "body": [
		"SetPedPathPreferToAvoidWater(${1:Ped ped}, ${2:BOOL avoidWater})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetPedPathsWidthPlant()": {
	  "prefix": "SetPedPathsWidthPlant",
	  "body": [
		"SetPedPathsWidthPlant(${1:Ped ped}, ${2:BOOL mayEnterWater})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nHash collision!!! Actual name: SET_PED_PATH_MAY_ENTER_WATER  \n"
	},
	"SetPedWaypointRouteOffset()": {
	  "prefix": "SetPedWaypointRouteOffset",
	  "body": [
		"SetPedWaypointRouteOffset(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"SetScenarioGroupEnabled()": {
	  "prefix": "SetScenarioGroupEnabled",
	  "body": [
		"SetScenarioGroupEnabled(${1:char* scenarioGroup}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nOccurrences in the b617d scripts: pastebin.com/Tvg2PRHU  \n"
	},
	"SetScenarioTypeEnabled()": {
	  "prefix": "SetScenarioTypeEnabled",
	  "body": [
		"SetScenarioTypeEnabled(${1:char* scenarioType}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nseems to enable/disable specific scenario-types from happening in the game world.  \nHere are some scenario types from the scripts:  \n\"WORLD_MOUNTAIN_LION_REST\"                                               \n\"WORLD_MOUNTAIN_LION_WANDER\"                                              \n\"DRIVE\"                                                                    \n\"WORLD_VEHICLE_POLICE_BIKE\"                                               \n\"WORLD_VEHICLE_POLICE_CAR\"                                               \n\"WORLD_VEHICLE_POLICE_NEXT_TO_CAR\"                                          \n\"WORLD_VEHICLE_DRIVE_SOLO\"                                                   \n\"WORLD_VEHICLE_BIKER\"                                                        \n\"WORLD_VEHICLE_DRIVE_PASSENGERS\"                                             \n\"WORLD_VEHICLE_SALTON_DIRT_BIKE\"                                             \n\"WORLD_VEHICLE_BICYCLE_MOUNTAIN\"                                             \n\"PROP_HUMAN_SEAT_CHAIR\"                                               \n\"WORLD_VEHICLE_ATTRACTOR\"                                               \n\"WORLD_HUMAN_LEANING\"                                                   \n\"WORLD_HUMAN_HANG_OUT_STREET\"                                          \n\"WORLD_HUMAN_DRINKING\"                                                  \n\"WORLD_HUMAN_SMOKING\"                                                  \n\"WORLD_HUMAN_GUARD_STAND\"                                              \n\"WORLD_HUMAN_CLIPBOARD\"                                                \n\"WORLD_HUMAN_HIKER\"                                                    \n\"WORLD_VEHICLE_EMPTY\"                                                        \n\"WORLD_VEHICLE_BIKE_OFF_ROAD_RACE\"                                        \n\"WORLD_HUMAN_PAPARAZZI\"                                                 \n\"WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN\"                              \n\"WORLD_VEHICLE_PARK_PARALLEL\"                                                \n\"WORLD_VEHICLE_CONSTRUCTION_SOLO\"                                 \n\"WORLD_VEHICLE_CONSTRUCTION_PASSENGERS\"                                                                      \n\"WORLD_VEHICLE_TRUCK_LOGS\"   \n-alphazolam  \nscenarioType could be the same as scenarioName, used in for example AI::TASK_START_SCENARIO_AT_POSITION.  \n"
	},
	"SetSequenceToRepeat()": {
	  "prefix": "SetSequenceToRepeat",
	  "body": [
		"SetSequenceToRepeat(${1:Object taskSequence}, ${2:BOOL repeat})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"N_0xb0a6cfd2c69c1088()": {
	  "prefix": "N_0xb0a6cfd2c69c1088",
	  "body": "N_0xb0a6cfd2c69c1088",
	  "description": "OLD NAME, PLEASE USE SetTaskPropertyBool INSTEAD!"
	},
	"SetTaskPropertyBool()": {
	  "prefix": "SetTaskPropertyBool",
	  "body": [
		"SetTaskPropertyBool(${1:Ped ped}, ${2:char* p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExamples:  \nAI::_B0A6CFD2C69C1088(PLAYER::PLAYER_PED_ID(), \"isFirstPerson\", 0);  \nAI::_B0A6CFD2C69C1088(PLAYER::PLAYER_PED_ID(), \"isFirstPerson\", 1);  \nAI::_B0A6CFD2C69C1088(PLAYER::PLAYER_PED_ID(), \"isBlocked\", sub_179027());  \n\nOld name: N_0xb0a6cfd2c69c1088"
	},
	"N_0xd5bb4025ae449a4e()": {
	  "prefix": "N_0xd5bb4025ae449a4e",
	  "body": "N_0xd5bb4025ae449a4e",
	  "description": "OLD NAME, PLEASE USE SetTaskPropertyFloat INSTEAD!"
	},
	"SetTaskPropertyFloat()": {
	  "prefix": "SetTaskPropertyFloat",
	  "body": [
		"SetTaskPropertyFloat(${1:Ped ped}, ${2:char* p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\np0 - PLAYER::PLAYER_PED_ID();  \np1 - \"Phase\", \"Wobble\", \"x_axis\",\"y_axis\",\"introphase\",\"speed\".  \np2 - From what i can see it goes up to 1f (maybe).  \n-LcGamingHD  \nExample: AI::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), \"Phase\", 0.5);  \n\nOld name: N_0xd5bb4025ae449a4e"
	},
	"SetTaskVehicleChaseIdealPursuitDistance()": {
	  "prefix": "SetTaskVehicleChaseIdealPursuitDistance",
	  "body": [
		"SetTaskVehicleChaseIdealPursuitDistance(${1:Ped ped}, ${2:float distance})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"SetTaskVehicleChaseBehaviorFlag()": {
	  "prefix": "SetTaskVehicleChaseBehaviorFlag",
	  "body": [
		"SetTaskVehicleChaseBehaviorFlag(${1:Ped ped}, ${2:int flag}, ${3:BOOL set})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"StopAnimPlayback()": {
	  "prefix": "StopAnimPlayback",
	  "body": [
		"StopAnimPlayback(${1:Ped ped}, ${2:int p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFrom re_drunkdriver:  \n• AI::STOP_ANIM_PLAYBACK(l_5B[0/*1*/], 0, 0);  \nLooks like p1 may be a flag, still need to do some research, though.  \n"
	},
	"StopAnimTask()": {
	  "prefix": "StopAnimTask",
	  "body": [
		"StopAnimTask(${1:Ped ped}, ${2:char* animDictionary}, ${3:char* animationName}, ${4:float p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"TaskAchieveHeading()": {
	  "prefix": "TaskAchieveHeading",
	  "body": [
		"TaskAchieveHeading(${1:Ped ped}, ${2:float heading}, ${3:int timeout})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes the specified ped achieve the specified heading.  \npedHandle: The handle of the ped to assign the task to.  \nheading: The desired heading.  \ntimeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.  \n"
	},
	"TaskAimGunAtCoord()": {
	  "prefix": "TaskAimGunAtCoord",
	  "body": [
		"TaskAimGunAtCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int time}, ${6:BOOL p5}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\n\n"
	},
	"TaskAimGunAtEntity()": {
	  "prefix": "TaskAimGunAtEntity",
	  "body": [
		"TaskAimGunAtEntity(${1:Ped ped}, ${2:Entity entity}, ${3:int duration}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nduration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped  \n"
	},
	"TaskAimGunScriptedWithTarget()": {
	  "prefix": "TaskAimGunScriptedWithTarget",
	  "body": [
		"TaskAimGunScriptedWithTarget(${1:Any p0}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:Any p5}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskAimGunScripted()": {
	  "prefix": "TaskAimGunScripted",
	  "body": [
		"TaskAimGunScripted(${1:Ped ped}, ${2:Hash scriptTask}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskBoatMission()": {
	  "prefix": "TaskBoatMission",
	  "body": [
		"TaskBoatMission(${1:Ped pedDriver}, ${2:Vehicle boat}, ${3:Any p2}, ${4:Any p3}, ${5:float x}, ${6:float y}, ${7:float z}, ${8:Any p7}, ${9:float maxSpeed}, ${10:int drivingStyle}, ${11:float p10}, ${12:Any p11})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nYou need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.  \nWorking example  \nfloat vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));  \nAI::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);  \nPED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);  \nP8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation  \n"
	},
	"TaskArrestPed()": {
	  "prefix": "TaskArrestPed",
	  "body": [
		"TaskArrestPed(${1:Ped ped}, ${2:Ped target})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExample from \"me_amanda1.ysc.c4\":  \nAI::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID());  \nExample from \"armenian1.ysc.c4\":  \nif (!PED::IS_PED_INJURED(l_B18[0/*1*/])) {  \n    AI::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID());  \n}  \nI would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.  \nLooks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.  \n"
	},
	"TaskClearDefensiveArea()": {
	  "prefix": "TaskClearDefensiveArea",
	  "body": [
		"TaskClearDefensiveArea(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskChatToPed()": {
	  "prefix": "TaskChatToPed",
	  "body": [
		"TaskChatToPed(${1:Ped ped}, ${2:Ped target}, ${3:Any p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\np2 tend to be 16, 17 or 1  \np3 to p7 tend to be 0.0  \n"
	},
	"TaskClimb()": {
	  "prefix": "TaskClimb",
	  "body": [
		"TaskClimb(${1:Ped ped}, ${2:BOOL unused})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nClimbs or vaults the nearest thing.  \n"
	},
	"TaskClearLookAt()": {
	  "prefix": "TaskClearLookAt",
	  "body": [
		"TaskClearLookAt(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nNot clear what it actually does, but here's how script uses it -   \nif (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...)   \n{  \n\tif(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))  \n\t{  \nAI::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());  \n\t}  \n\t...  \n}  \nAnother one where it doesn't \"look\" at current player -   \nAI::TASK_PLAY_ANIM(l_3ED, \"missheist_agency2aig_2\", \"look_at_phone_a\", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0);  \nPED::_2208438012482A1A(l_3ED, 0, 0);  \nAI::TASK_CLEAR_LOOK_AT(l_3ED);  \n"
	},
	"TaskClimbLadder()": {
	  "prefix": "TaskClimbLadder",
	  "body": [
		"TaskClimbLadder(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskCombatHatedTargetsAroundPed()": {
	  "prefix": "TaskCombatHatedTargetsAroundPed",
	  "body": [
		"TaskCombatHatedTargetsAroundPed(${1:Ped ped}, ${2:float radius}, ${3:int p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nDespite its name, it only attacks ONE hated target. The one closest hated target.  \np2 seems to be always 0  \n"
	},
	"TaskCombatHatedTargetsAroundPedTimed()": {
	  "prefix": "TaskCombatHatedTargetsAroundPedTimed",
	  "body": [
		"TaskCombatHatedTargetsAroundPedTimed(${1:Any p0}, ${2:float p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskCombatPed()": {
	  "prefix": "TaskCombatPed",
	  "body": [
		"TaskCombatPed(${1:Ped ped}, ${2:Ped targetPed}, ${3:int p2}, ${4:int p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes the specified ped attack the target ped.  \np2 should be 0  \np3 should be 16  \n"
	},
	"TaskCombatHatedTargetsInArea()": {
	  "prefix": "TaskCombatHatedTargetsInArea",
	  "body": [
		"TaskCombatHatedTargetsInArea(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:Any p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nDespite its name, it only attacks ONE hated target. The one closest to the specified position.  \n"
	},
	"TaskCower()": {
	  "prefix": "TaskCower",
	  "body": [
		"TaskCower(${1:Ped ped}, ${2:int duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskCombatPedTimed()": {
	  "prefix": "TaskCombatPedTimed",
	  "body": [
		"TaskCombatPedTimed(${1:Any p0}, ${2:Ped ped}, ${3:int p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskEnterVehicle()": {
	  "prefix": "TaskEnterVehicle",
	  "body": [
		"TaskEnterVehicle(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int timeout}, ${4:int seat}, ${5:float speed}, ${6:int flag}, ${7:Any p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nspeed 1.0 = walk, 2.0 = run  \np5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle  \np6 is always 0  \nUsage of seat   \n-1 = driver  \n0 = passenger  \n1 = left back seat  \n2 = right back seat  \n3 = outside left  \n4 = outside right  \n"
	},
	"TaskDriveBy()": {
	  "prefix": "TaskDriveBy",
	  "body": [
		"TaskDriveBy(${1:Ped driverPed}, ${2:Ped targetPed}, ${3:Vehicle targetVehicle}, ${4:float targetX}, ${5:float targetY}, ${6:float targetZ}, ${7:float distanceToShoot}, ${8:int pedAccuracy}, ${9:BOOL p8}, ${10:Hash firingPattern})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExample:  \nAI::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});  \nNeeds working example. Doesn't seem to do anything.  \nI marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.  \nI marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.  \nI marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.  \n"
	},
	"TaskExitCover()": {
	  "prefix": "TaskExitCover",
	  "body": [
		"TaskExitCover(${1:Any p0}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskEveryoneLeaveVehicle()": {
	  "prefix": "TaskEveryoneLeaveVehicle",
	  "body": [
		"TaskEveryoneLeaveVehicle(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskFollowNavMeshToCoord()": {
	  "prefix": "TaskFollowNavMeshToCoord",
	  "body": [
		"TaskFollowNavMeshToCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float speed}, ${6:int timeout}, ${7:float stoppingRange}, ${8:BOOL persistFollowing}, ${9:float unk})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nIf no timeout, set timeout to -1.  \n"
	},
	"TaskExtendRoute()": {
	  "prefix": "TaskExtendRoute",
	  "body": [
		"TaskExtendRoute(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.  \nA maximum of 8 points can be added.  \n"
	},
	"TaskFollowPointRoute()": {
	  "prefix": "TaskFollowPointRoute",
	  "body": [
		"TaskFollowPointRoute(${1:Ped ped}, ${2:float speed}, ${3:int unknown})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMulleKD19: Makes the ped go on the created point route.  \nped: The ped to give the task to.  \nspeed: The speed to move at in m/s.  \nint: Unknown. Can be 0, 1, 2 or 3.  \nExample:  \nTASK_FLUSH_ROUTE();  \nTASK_EXTEND_ROUTE(0f, 0f, 70f);  \nTASK_EXTEND_ROUTE(10f, 0f, 70f);  \nTASK_EXTEND_ROUTE(10f, 10f, 70f);  \nTASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);  \n"
	},
	"TaskFlushRoute()": {
	  "prefix": "TaskFlushRoute",
	  "body": [
		"TaskFlushRoute()"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.  \n"
	},
	"TaskFollowWaypointRecording()": {
	  "prefix": "TaskFollowWaypointRecording",
	  "body": [
		"TaskFollowWaypointRecording(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskFollowNavMeshToCoordAdvanced()": {
	  "prefix": "TaskFollowNavMeshToCoordAdvanced",
	  "body": [
		"TaskFollowNavMeshToCoordAdvanced(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float speed}, ${6:int timeout}, ${7:float unkFloat}, ${8:int unkInt}, ${9:float unkX}, ${10:float unkY}, ${11:float unkZ}, ${12:float unk_40000f})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskGetOffBoat()": {
	  "prefix": "TaskGetOffBoat",
	  "body": [
		"TaskGetOffBoat(${1:Ped ped}, ${2:Vehicle boat})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nJenkins of this native is 0x4293601F. This is the actual name.  \n"
	},
	"TaskGoStraightToCoord()": {
	  "prefix": "TaskGoStraightToCoord",
	  "body": [
		"TaskGoStraightToCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float speed}, ${6:int timeout}, ${7:float targetHeading}, ${8:float distanceToSlide})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskFollowToOffsetOfEntity()": {
	  "prefix": "TaskFollowToOffsetOfEntity",
	  "body": [
		"TaskFollowToOffsetOfEntity(${1:Ped ped}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float movementSpeed}, ${7:int timeout}, ${8:float stoppingRange}, ${9:BOOL persistFollowing})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\np6 always -1  \np7 always 10.0  \np8 always 1  \n"
	},
	"TaskForceMotionState()": {
	  "prefix": "TaskForceMotionState",
	  "body": [
		"TaskForceMotionState(${1:Ped ped}, ${2:Hash state}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\np2 always false  \n[30/03/2017] ins1de :  \nSee dev-c.com/nativedb/func/info/f28965d04f570dca  \n"
	},
	"TaskGoToCoordAndAimAtHatedEntitiesNearCoord()": {
	  "prefix": "TaskGoToCoordAndAimAtHatedEntitiesNearCoord",
	  "body": [
		"TaskGoToCoordAndAimAtHatedEntitiesNearCoord(${1:Ped pedHandle}, ${2:float goToLocationX}, ${3:float goToLocationY}, ${4:float goToLocationZ}, ${5:float focusLocationX}, ${6:float focusLocationY}, ${7:float focusLocationZ}, ${8:float speed}, ${9:BOOL shootAtEnemies}, ${10:float distanceToStopAt}, ${11:float noRoadsDistance}, ${12:BOOL unkTrue}, ${13:int unkFlag}, ${14:int aimingFlag}, ${15:Hash firingPattern})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nThe ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.  \nIf the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.  \nIf the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.  \nThe ped will stop aiming when he is closer than distanceToStopAt to goToLocation.  \nI still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.  \nI think that unkFlag, like the driving styles, could be a flag that \"work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function\". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.  \nNote: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.  \nThe aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).  \nExample:  \nenum AimFlag  \n{  \n   AimAtFocusLocation,  \n   AimAtGoToLocation  \n};  \nVector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.  \nVector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.  \nVector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground  \n// 1st example  \nAI::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/);  \n// 2nd example  \nAI::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don't shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/);  \n1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using \"FullAuto\" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.  \n2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.  \n"
	},
	"TaskGoToCoordAnyMeans()": {
	  "prefix": "TaskGoToCoordAnyMeans",
	  "body": [
		"TaskGoToCoordAnyMeans(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float speed}, ${6:Any p5}, ${7:BOOL p6}, ${8:int walkingStyle}, ${9:float p8})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nexample from fm_mission_controller  \nAI::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);  \n"
	},
	"TaskGoStraightToCoordRelativeToEntity()": {
	  "prefix": "TaskGoStraightToCoordRelativeToEntity",
	  "body": [
		"TaskGoStraightToCoordRelativeToEntity(${1:Entity entity1}, ${2:Entity entity2}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed()": {
	  "prefix": "TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed",
	  "body": [
		"TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float speed}, ${6:Any p5}, ${7:BOOL p6}, ${8:int walkingStyle}, ${9:float p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11}, ${13:Any p12})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskGoToCoordWhileAimingAtEntity()": {
	  "prefix": "TaskGoToCoordWhileAimingAtEntity",
	  "body": [
		"TaskGoToCoordWhileAimingAtEntity(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4}, ${6:float p5}, ${7:BOOL p6}, ${8:float p7}, ${9:float p8}, ${10:BOOL p9}, ${11:Any p10}, ${12:BOOL p11}, ${13:Any p12}, ${14:Any p13})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskGoToCoordAnyMeansExtraParams()": {
	  "prefix": "TaskGoToCoordAnyMeansExtraParams",
	  "body": [
		"TaskGoToCoordAnyMeansExtraParams(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float speed}, ${6:Any p5}, ${7:BOOL p6}, ${8:int walkingStyle}, ${9:float p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskGoToEntityWhileAimingAtCoord()": {
	  "prefix": "TaskGoToEntityWhileAimingAtCoord",
	  "body": [
		"TaskGoToEntityWhileAimingAtCoord(${1:Any p0}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:float p7}, ${9:float p8}, ${10:BOOL p9}, ${11:BOOL p10}, ${12:Any p11})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskGoToCoordWhileAimingAtCoord()": {
	  "prefix": "TaskGoToCoordWhileAimingAtCoord",
	  "body": [
		"TaskGoToCoordWhileAimingAtCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float aimAtX}, ${6:float aimAtY}, ${7:float aimAtZ}, ${8:float moveSpeed}, ${9:BOOL p8}, ${10:float p9}, ${11:float p10}, ${12:BOOL p11}, ${13:Any flags}, ${14:BOOL p13}, ${15:Hash firingPattern})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nmovement_speed: mostly 2f, but also 1/1.2f, etc.  \np8: always false  \np9: 2f  \np10: 0.5f  \np11: true  \np12: 0 / 512 / 513, etc.  \np13: 0  \nfiring_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C  \n"
	},
	"TaskGotoEntityAiming()": {
	  "prefix": "TaskGotoEntityAiming",
	  "body": [
		"TaskGotoEntityAiming(${1:Ped ped}, ${2:Entity target}, ${3:float distanceToStopAt}, ${4:float StartAimingDist})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\neg  \nAI::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);  \n\t\tped = Ped you want to perform this task.  \n\t\ttarget = the Entity they should aim at.  \n\t\tdistanceToStopAt = distance from the target, where the ped should stop to aim.  \n\t\tStartAimingDist = distance where the ped should start to aim.  \n"
	},
	"TaskGoToEntity()": {
	  "prefix": "TaskGoToEntity",
	  "body": [
		"TaskGoToEntity(${1:Entity entity}, ${2:Entity target}, ${3:int duration}, ${4:float distance}, ${5:float speed}, ${6:float p5}, ${7:int p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nThe entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0  \nNote: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.  \nExample: AI::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)  \nPed will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).  \n"
	},
	"TaskGoToEntityWhileAimingAtEntity()": {
	  "prefix": "TaskGoToEntityWhileAimingAtEntity",
	  "body": [
		"TaskGoToEntityWhileAimingAtEntity(${1:Ped ped}, ${2:Entity entityToWalkTo}, ${3:Entity entityToAimAt}, ${4:float speed}, ${5:BOOL shootatEntity}, ${6:float p5}, ${7:float p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:Hash firingPattern})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nshootatEntity:  \nIf true, peds will shoot at Entity till it is dead.  \nIf false, peds will just walk till they reach the entity and will cease shooting.  \n"
	},
	"TaskGotoEntityOffsetXy()": {
	  "prefix": "TaskGotoEntityOffsetXy",
	  "body": [
		"TaskGotoEntityOffsetXy(${1:Ped ped}, ${2:Entity entity}, ${3:int duration}, ${4:float xOffset}, ${5:float yOffset}, ${6:float zOffset}, ${7:float moveBlendRatio}, ${8:BOOL useNavmesh})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskGuardCurrentPosition()": {
	  "prefix": "TaskGuardCurrentPosition",
	  "body": [
		"TaskGuardCurrentPosition(${1:Ped p0}, ${2:float p1}, ${3:float p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFrom re_prisonvanbreak:  \nAI::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);  \n"
	},
	"TaskGotoEntityOffset()": {
	  "prefix": "TaskGotoEntityOffset",
	  "body": [
		"TaskGotoEntityOffset(${1:Ped ped}, ${2:Any p1}, ${3:Any p2}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:int duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskHandsUp()": {
	  "prefix": "TaskHandsUp",
	  "body": [
		"TaskHandsUp(${1:Ped ped}, ${2:int duration}, ${3:Ped facingPed}, ${4:int p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nIn the scripts, p3 was always -1.  \np3 seems to be duration or timeout of turn animation.  \nAlso facingPed can be 0 or -1 so ped will just raise hands up.  \n"
	},
	"TaskGuardAssignedDefensiveArea()": {
	  "prefix": "TaskGuardAssignedDefensiveArea",
	  "body": [
		"TaskGuardAssignedDefensiveArea(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskHeliChase()": {
	  "prefix": "TaskHeliChase",
	  "body": [
		"TaskHeliChase(${1:Ped pilot}, ${2:Entity entityToFollow}, ${3:float x}, ${4:float y}, ${5:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nPed pilot should be in a heli.  \nEntityToFollow can be a vehicle or Ped.  \nx,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)  \nNOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.  \n"
	},
	"TaskGuardSphereDefensiveArea()": {
	  "prefix": "TaskGuardSphereDefensiveArea",
	  "body": [
		"TaskGuardSphereDefensiveArea(${1:Ped p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\np0 - Guessing PedID  \np1, p2, p3 - XYZ?  \np4 - ???  \np5 - Maybe the size of sphere from XYZ?  \np6 - ???  \np7, p8, p9 - XYZ again?  \np10 - Maybe the size of sphere from second XYZ?  \n"
	},
	"TaskLeaveAnyVehicle()": {
	  "prefix": "TaskLeaveAnyVehicle",
	  "body": [
		"TaskLeaveAnyVehicle(${1:Ped ped}, ${2:int p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskHeliMission()": {
	  "prefix": "TaskHeliMission",
	  "body": [
		"TaskHeliMission(${1:Ped pilot}, ${2:Vehicle aircraft}, ${3:Vehicle targetVehicle}, ${4:Ped targetPed}, ${5:float destinationX}, ${6:float destinationY}, ${7:float destinationZ}, ${8:int missionFlag}, ${9:float maxSpeed}, ${10:float landingRadius}, ${11:float targetHeading}, ${12:int unk1}, ${13:int unk2}, ${14:Hash unk3}, ${15:int landingFlags})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nEDITED (8/16/2017)  \nDESCRIPTION:  \nAllow a ped to fly to a specific destination.  \nUSAGE:  \n-- REQUIRED --  \n• pilot = The ped flying the aircraft.  \n• aircraft = The aircraft the pilot is flying.  \n-- OPTIONAL -- [atleast 1 must be assigned]  \n• targetVehicle = The vehicle the pilot will target.  \n• targetPed = The ped the pilot will target.  \n• destinationX, destinationY, destinationZ = The location the pilot will target.  \n-- LOGIC --  \n• missionFlag = The type of mission.  \n• maxSpeed = The speed in mph that the pilot will limit his/her self to while flying.  \n• landingRadius = The distance from the destination that the pilot must be to land.  \n• targetHeading = The heading that the pilot will try to achieve while flying.  \n• unk1, unk2 = Set to -1 and it will be okay.  \n• unk3 = I'm almost sure this is a vehicle record/waypoint recording hash. A value of -1 is for none. Maybe it's a float? Idk.  \n• landingFlags = Bit flags used for landing. All I know is:  \n0 = Hover over the destination.  \n32 = Land on destination.  \n1024 = Erratic, crash into nearby obstacles.  \n4096 = Rushed movement + Hover over destination  \nKnown Mission Types:  \n4 = FlyToCoord  \n8 = FleeFromPed  \n9 = CircleAroundTarget  \n10 = CopyTargetHeading  \n20 = LandNearPed  \n21 = Crash  \nExample C#:  \nFunction.Call(Hash.TASK_HELI_MISSION, driver, heli, 0, 0, position.X, position.Y, position.Z, 4, 50.0, 10.0, (position - heli.Position).ToHeading(), -1, -1, -1, 32);  \nOLD USAGE: pastebin.com/ndkSjaaW  \n"
	},
	"TaskLeaveVehicle()": {
	  "prefix": "TaskLeaveVehicle",
	  "body": [
		"TaskLeaveVehicle(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int flags})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFlags from decompiled scripts:  \n0 = normal exit and closes door.  \n1 = normal exit and closes door.  \n16 = teleports outside, door kept closed.  \n64 = normal exit and closes door, maybe a bit slower animation than 0.  \n256 = normal exit but does not close the door.  \n4160 = ped is throwing himself out, even when the vehicle is still.  \n262144 = ped moves to passenger seat first, then exits normally  \nOthers to be tried out: 320, 512, 131072.  \n"
	},
	"TaskJump()": {
	  "prefix": "TaskJump",
	  "body": [
		"TaskJump(${1:Ped ped}, ${2:BOOL unused})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nDefinition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).  \nv350: Ped ped, bool unused  \nv678: Ped ped, bool unused, bool flag1, bool flag2  \nflag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.  \n"
	},
	"TaskLookAtEntity()": {
	  "prefix": "TaskLookAtEntity",
	  "body": [
		"TaskLookAtEntity(${1:Ped ped}, ${2:Entity lookAt}, ${3:int duration}, ${4:int unknown1}, ${5:int unknown2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nparam3: duration in ms, use -1 to look forever  \nparam4: using 2048 is fine  \nparam5: using 3 is fine  \n"
	},
	"N_0x2d537ba194896636()": {
	  "prefix": "N_0x2d537ba194896636",
	  "body": "N_0x2d537ba194896636",
	  "description": "OLD NAME, PLEASE USE TaskMoveNetwork INSTEAD!"
	},
	"TaskMoveNetwork()": {
	  "prefix": "TaskMoveNetwork",
	  "body": [
		"TaskMoveNetwork(${1:Ped ped}, ${2:char* task}, ${3:float multiplier}, ${4:BOOL p3}, ${5:char* animDict}, ${6:int flags})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExample:  \nAI::_2D537BA194896636(PLAYER::PLAYER_PED_ID(), \"arm_wrestling_sweep_paired_a_rev3\", 0.0, 1, \"mini@arm_wrestling\", 0);  \n\nOld name: N_0x2d537ba194896636"
	},
	"TaskLookAtCoord()": {
	  "prefix": "TaskLookAtCoord",
	  "body": [
		"TaskLookAtCoord(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float duration}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\np5 = 0, p6 = 2  \n"
	},
	"TaskOpenVehicleDoor()": {
	  "prefix": "TaskOpenVehicleDoor",
	  "body": [
		"TaskOpenVehicleDoor(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int timeOut}, ${4:int doorIndex}, ${5:float speed})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskParachuteToTarget()": {
	  "prefix": "TaskParachuteToTarget",
	  "body": [
		"TaskParachuteToTarget(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nmakes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED  \n"
	},
	"N_0xd5b35bea41919acb()": {
	  "prefix": "N_0xd5b35bea41919acb",
	  "body": "N_0xd5b35bea41919acb",
	  "description": "OLD NAME, PLEASE USE TaskMoveNetworkAdvanced INSTEAD!"
	},
	"TaskMoveNetworkAdvanced()": {
	  "prefix": "TaskMoveNetworkAdvanced",
	  "body": [
		"TaskMoveNetworkAdvanced(${1:Ped ped}, ${2:char* p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:Any p8}, ${10:float p9}, ${11:BOOL p10}, ${12:char* animDict}, ${13:int flags})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExample:  \nAI::_D5B35BEA41919ACB(PLAYER::PLAYER_PED_ID(), \"minigame_tattoo_michael_parts\", 324.13, 181.29, 102.6, 0.0, 0.0, 22.32, 2, 0, 0, 0, 0);  \n\nOld name: N_0xd5b35bea41919acb"
	},
	"TaskParachute()": {
	  "prefix": "TaskParachute",
	  "body": [
		"TaskParachute(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nThis function has a third parameter as well (bool).  \nSecond parameter is unused.  \nseconds parameter was for jetpack in the early stages of gta and the hard coded code is now removed  \n"
	},
	"TaskPedSlideToCoord()": {
	  "prefix": "TaskPedSlideToCoord",
	  "body": [
		"TaskPedSlideToCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:float duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskPatrol()": {
	  "prefix": "TaskPatrol",
	  "body": [
		"TaskPatrol(${1:Ped ped}, ${2:char* p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nAfter looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:  \n\"miss_Tower_01\" (this went from 01 - 10)  \n\"miss_Ass0\" (0, 4, 6, 3)  \n\"MISS_PATROL_8\"  \nI think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.  \nAs far as I can see the patrol routes names such as \"miss_Ass0\" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.   \nFrom the scripts  \n    AI::OPEN_PATROL_ROUTE(\"miss_Ass0\");  \n    AI::ADD_PATROL_ROUTE_NODE(0, \"WORLD_HUMAN_GUARD_STAND\", l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000));  \n    AI::ADD_PATROL_ROUTE_NODE(1, \"WORLD_HUMAN_GUARD_STAND\", l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000));  \n    AI::ADD_PATROL_ROUTE_NODE(2, \"WORLD_HUMAN_GUARD_STAND\", l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000));  \n    AI::ADD_PATROL_ROUTE_LINK(0, 1);  \n    AI::ADD_PATROL_ROUTE_LINK(1, 2);  \n    AI::ADD_PATROL_ROUTE_LINK(2, 0);  \n    AI::CLOSE_PATROL_ROUTE();  \n    AI::CREATE_PATROL_ROUTE();  \n"
	},
	"TaskPedSlideToCoordHdgRate()": {
	  "prefix": "TaskPedSlideToCoordHdgRate",
	  "body": [
		"TaskPedSlideToCoordHdgRate(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:float p5}, ${7:float p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskPause()": {
	  "prefix": "TaskPause",
	  "body": [
		"TaskPause(${1:Ped ped}, ${2:int ms})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nStand still (?)  \n"
	},
	"TaskPerformSequenceFromProgress()": {
	  "prefix": "TaskPerformSequenceFromProgress",
	  "body": [
		"TaskPerformSequenceFromProgress(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskPerformSequence()": {
	  "prefix": "TaskPerformSequence",
	  "body": [
		"TaskPerformSequence(${1:Ped ped}, ${2:Object taskSequence})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: Any\n"
	},
	"TaskPlaneLand()": {
	  "prefix": "TaskPlaneLand",
	  "body": [
		"TaskPlaneLand(${1:Ped pilot}, ${2:Vehicle plane}, ${3:float runwayStartX}, ${4:float runwayStartY}, ${5:float runwayStartZ}, ${6:float runwayEndX}, ${7:float runwayEndY}, ${8:float runwayEndZ})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFunction.Call(Hash.TASK_PLANE_LAND, pilot, selectedAirplane, runwayStartPoint.X, runwayStartPoint.Y, runwayStartPoint.Z, runwayEndPoint.X, runwayEndPoint.Y, runwayEndPoint.Z);  \n"
	},
	"TaskPlaneChase()": {
	  "prefix": "TaskPlaneChase",
	  "body": [
		"TaskPlaneChase(${1:Ped pilot}, ${2:Entity entityToFollow}, ${3:float x}, ${4:float y}, ${5:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskPlantBomb()": {
	  "prefix": "TaskPlantBomb",
	  "body": [
		"TaskPlantBomb(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskPlaneMission()": {
	  "prefix": "TaskPlaneMission",
	  "body": [
		"TaskPlaneMission(${1:Ped pilot}, ${2:Vehicle aircraft}, ${3:Vehicle targetVehicle}, ${4:Ped targetPed}, ${5:float destinationX}, ${6:float destinationY}, ${7:float destinationZ}, ${8:int missionFlag}, ${9:float angularDrag}, ${10:float unk}, ${11:float targetHeading}, ${12:float maxZ}, ${13:float minZ})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nEDITED (7/13/2017)  \nNOTE: If you want air combat, AI::TASK_COMBAT_PED (while your pilot is in an aircraft) also does the same thing as this native.  \nDESCRIPTION:  \nEver wish your buddy could shoot down one of your enemies for you? Ever wanted an auto-pilot? Well look no further! This is the native for you! (Ped intelligence may vary)  \nUSAGE:  \n-- REQUIRED --  \n• pilot = The ped flying the aircraft.  \n• aircraft = The aircraft the pilot is flying  \n-- OPTIONAL -- [atleast 1 must be assigned]  \n• targetVehicle = The vehicle the pilot will target.  \n• targetPed = The ped the pilot will target.  \n• destinationX, destinationY, destinationZ = The location the pilot will target.  \n-- LOGIC --  \n• missionFlag = The type of mission. pastebin.com/R8x73dbv  \n• angularDrag = The higher the value, the slower the plane will rotate. Value ranges from 0 - Infinity.  \n• unk = Set to 0, and you'll be fine.  \n• targetHeading = The target angle (from world space north) that the pilot will try to acheive before executing an attack/landing.  \n• maxZ = Maximum Z coordinate height for flying.  \n• minZ = Minimum Z coordinate height for flying.  \nZ: 2,700 is the default max height a pilot will be able to fly. Anything greater and he will fly downward until reaching 2,700 again.  \nMission Types (incase you don't like links..):  \n0 = None  \n1 = Unk  \n2 = CTaskVehicleRam  \n3 = CTaskVehicleBlock  \n4 = CTaskVehicleGoToPlane  \n5 = CTaskVehicleStop  \n6 = CTaskVehicleAttack  \n7 = CTaskVehicleFollow  \n8 = CTaskVehicleFleeAirborne  \n9 = CTaskVehicleCircle  \n10 = CTaskVehicleEscort  \n15 = CTaskVehicleFollowRecording  \n16 = CTaskVehiclePoliceBehaviour  \n17 = CTaskVehicleCrash  \nExample C#:  \nFunction.Call(Hash.TASK_PLANE_MISSION, pilot, vehicle, 0, Game.Player.Character, 0, 0, 0, 6, 0f, 0f, 0f, 2500.0f, -1500f);  \nExample C++  \nAI::TASK_PLANE_MISSION(pilot, vehicle, 0, PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_INDEX()), 0, 0, 0, 6, 0.0, 0.0, 0.0, 2500.0, -1500.0);  \n[DEPRECATED] EXAMPLE USAGE:  \npastebin.com/gx7Finsk  \n"
	},
	"TaskPlayAnimAdvanced()": {
	  "prefix": "TaskPlayAnimAdvanced",
	  "body": [
		"TaskPlayAnimAdvanced(${1:Ped ped}, ${2:char* animDict}, ${3:char* animName}, ${4:float posX}, ${5:float posY}, ${6:float posZ}, ${7:float rotX}, ${8:float rotY}, ${9:float rotZ}, ${10:float speed}, ${11:float speedMultiplier}, ${12:int duration}, ${13:Any flag}, ${14:float animTime}, ${15:Any p14}, ${16:Any p15})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nIt's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position). animTime is a float from 0.0 -> 1.0, lets you start an animation from given point. The rest as in AI::TASK_PLAY_ANIM.   \nRotation information : rotX and rotY don't seem to have any effect, only rotZ works.  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"TaskPutPedDirectlyIntoCover()": {
	  "prefix": "TaskPutPedDirectlyIntoCover",
	  "body": [
		"TaskPutPedDirectlyIntoCover(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:Any timeout}, ${6:BOOL p5}, ${7:float p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:Any p9}, ${11:BOOL p10})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskPlayAnim()": {
	  "prefix": "TaskPlayAnim",
	  "body": [
		"TaskPlayAnim(${1:Ped ped}, ${2:char* animDictionary}, ${3:char* animationName}, ${4:float blendInSpeed}, ${5:float blendOutSpeed}, ${6:int duration}, ${7:int flag}, ${8:float playbackRate}, ${9:BOOL lockX}, ${10:BOOL lockY}, ${11:BOOL lockZ})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \nfloat blendInSpeed > normal speed is 8.0f\n----------------------  \nfloat blendOutSpeed > normal speed is 8.0f\n----------------------  \nint duration: time in millisecond  \n----------------------  \n-1 _ _ _ _ _ _ _> Default (see flag)  \n0 _ _ _ _ _ _ _ > Not play at all  \nSmall value _ _ > Slow down animation speed  \nOther _ _ _ _ _ > freeze player control until specific time (ms) has   \n_ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be   \n_ _ _ _ _ _ _ _ _ controllable.)  \nint flag:  \n----------------------  \nenum eAnimationFlags  \n{  \n ANIM_FLAG_NORMAL = 0,  \n   ANIM_FLAG_REPEAT = 1,  \n   ANIM_FLAG_STOP_LAST_FRAME = 2,  \n   ANIM_FLAG_UPPERBODY = 16,  \n   ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,  \n   ANIM_FLAG_CANCELABLE = 120,  \n};  \nOdd number : loop infinitely  \nEven number : Freeze at last frame  \nMultiple of 4: Freeze at last frame but controllable  \n01 to 15 > Full body  \n10 to 31 > Upper body  \n32 to 47 > Full body > Controllable  \n48 to 63 > Upper body > Controllable  \n...  \n001 to 255 > Normal  \n256 to 511 > Garbled  \n...  \nplaybackRate:  \nvalues are between 0.0 and 1.0  \nlockX:    \n0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3  \n> 1 for mini@sprunk  \nlockY:  \n0 in most cases   \n1 for missfam5_yoga, missfra1mcs_2_crew_react  \nlockZ:   \n    0 for single player   \n    Can be 1 but only for MP  \n"
	},
	"TaskPlayPhoneGestureAnimation()": {
	  "prefix": "TaskPlayPhoneGestureAnimation",
	  "body": [
		"TaskPlayPhoneGestureAnimation(${1:Ped ped}, ${2:char* animDict}, ${3:char* animation}, ${4:char* boneMaskType}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExample from the scripts:  \nAI::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);  \n=========================================================  \n^^ No offense, but Idk how that would really help anyone.  \nAs for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.  \nKnown boneMaskTypes'  \n\"BONEMASK_HEADONLY\"  \n\"BONEMASK_HEAD_NECK_AND_ARMS\"  \n\"BONEMASK_HEAD_NECK_AND_L_ARM\"  \n\"BONEMASK_HEAD_NECK_AND_R_ARM\"  \np4 known args - 0.0f, 0.5f, 0.25f  \np5 known args - 0.0f, 0.25f  \np6 known args - 1 if a global if check is passed.  \np7 known args - 1 if a global if check is passed.  \nThe values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).  \n=========================================================  \n"
	},
	"TaskPutPedDirectlyIntoMelee()": {
	  "prefix": "TaskPutPedDirectlyIntoMelee",
	  "body": [
		"TaskPutPedDirectlyIntoMelee(${1:Ped ped}, ${2:Ped meleeTarget}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nfrom armenian3.c4  \nAI::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);  \n"
	},
	"TaskRappelFromHeli()": {
	  "prefix": "TaskRappelFromHeli",
	  "body": [
		"TaskRappelFromHeli(${1:Ped ped}, ${2:int unused})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nOnly appears twice in the scripts.  \nAI::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000);  \nAI::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);  \nFixed, definitely not a float and since it's such a big number obviously not a bool. All though note when I thought it was a bool and set it to 1 it seemed to work that same as int 0x41200000.  \n0x41200000 = 10.0 as float.  \nNot all helicopters support rappelling.  \n"
	},
	"TaskReactAndFleePed()": {
	  "prefix": "TaskReactAndFleePed",
	  "body": [
		"TaskReactAndFleePed(${1:Ped ped}, ${2:Ped fleeTarget})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskReloadWeapon()": {
	  "prefix": "TaskReloadWeapon",
	  "body": [
		"TaskReloadWeapon(${1:Ped ped}, ${2:BOOL unused})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nThe 2nd param (unused) is not implemented.  \n-----------------------------------------------------------------------  \nThe only occurrence I found in a R* script (\"assassin_construction.ysc.c4\"):  \n            if (((v_3 < v_4) && (AI::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {  \n                AI::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);  \n            }  \n"
	},
	"TaskScriptedAnimation()": {
	  "prefix": "TaskScriptedAnimation",
	  "body": [
		"TaskScriptedAnimation(${1:Ped ped}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nFrom fm_mission_controller.c:  \nreserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);  \n\tvVar28 = {0.094f, 0.02f, -0.005f};  \n\tvVar29 = {-92.24f, 63.64f, 150.24f};  \n\tfunc_253(&uVar30, joaat(\"prop_ld_case_01\"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);  \n\tset_entity_lod_dist(net_to_ent(uVar30), 500);  \n\tattach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);  \n\tVar31.imm_4 = 1065353216;  \n\tVar31.imm_5 = 1065353216;  \n\tVar31.imm_9 = 1065353216;  \n\tVar31.imm_10 = 1065353216;  \n\tVar31.imm_14 = 1065353216;  \n\tVar31.imm_15 = 1065353216;  \n\tVar31.imm_17 = 1040187392;  \n\tVar31.imm_18 = 1040187392;  \n\tVar31.imm_19 = -1;  \n\tVar32.imm_4 = 1065353216;  \n\tVar32.imm_5 = 1065353216;  \n\tVar32.imm_9 = 1065353216;  \n\tVar32.imm_10 = 1065353216;  \n\tVar32.imm_14 = 1065353216;  \n\tVar32.imm_15 = 1065353216;  \n\tVar32.imm_17 = 1040187392;  \n\tVar32.imm_18 = 1040187392;  \n\tVar32.imm_19 = -1;  \n\tVar31 = 1;  \n\tVar31.imm_1 = \"weapons@misc@jerrycan@mp_male\";  \n\tVar31.imm_2 = \"idle\";  \n\tVar31.imm_20 = 1048633;  \n\tVar31.imm_4 = 0.5f;  \n\tVar31.imm_16 = get_hash_key(\"BONEMASK_ARMONLY_R\");  \n\ttask_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);  \n\tset_model_as_no_longer_needed(joaat(\"prop_ld_case_01\"));  \n\tremove_anim_dict(\"anim@heists@biolab@\");  \n"
	},
	"TaskSeekCoverFromPed()": {
	  "prefix": "TaskSeekCoverFromPed",
	  "body": [
		"TaskSeekCoverFromPed(${1:Ped ped}, ${2:Ped target}, ${3:int duration}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskSeekCoverToCoords()": {
	  "prefix": "TaskSeekCoverToCoords",
	  "body": [
		"TaskSeekCoverToCoords(${1:Ped ped}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:Any p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nfrom michael2:  \nAI::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);  \nappears to be shorter variation  \nfrom michael3:  \nAI::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);  \n"
	},
	"TaskSeekCoverFromPos()": {
	  "prefix": "TaskSeekCoverFromPos",
	  "body": [
		"TaskSeekCoverFromPos(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int duration}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskSetBlockingOfNonTemporaryEvents()": {
	  "prefix": "TaskSetBlockingOfNonTemporaryEvents",
	  "body": [
		"TaskSetBlockingOfNonTemporaryEvents(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nI cant believe I have to define this, this is one of the best natives.  \nIt makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.  \nSince it is a task, every time the native is called the ped will stop for a moment.  \n"
	},
	"TaskSeekCoverToCoverPoint()": {
	  "prefix": "TaskSeekCoverToCoverPoint",
	  "body": [
		"TaskSeekCoverToCoverPoint(${1:Any p0}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:Any p5}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskSetSphereDefensiveArea()": {
	  "prefix": "TaskSetSphereDefensiveArea",
	  "body": [
		"TaskSetSphereDefensiveArea(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskSetDecisionMaker()": {
	  "prefix": "TaskSetDecisionMaker",
	  "body": [
		"TaskSetDecisionMaker(${1:Ped p0}, ${2:Hash p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\np1 is always GET_HASH_KEY(\"empty\") in scripts, for the rare times this is used  \n"
	},
	"TaskShootAtCoord()": {
	  "prefix": "TaskShootAtCoord",
	  "body": [
		"TaskShootAtCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int duration}, ${6:Hash firingPattern})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskShockingEventReact()": {
	  "prefix": "TaskShockingEventReact",
	  "body": [
		"TaskShockingEventReact(${1:Ped ped}, ${2:int eventHandle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskShuffleToNextVehicleSeat()": {
	  "prefix": "TaskShuffleToNextVehicleSeat",
	  "body": [
		"TaskShuffleToNextVehicleSeat(${1:Ped ped}, ${2:Vehicle vehicle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes the specified ped shuffle to the next vehicle seat.  \nThe ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.  \n"
	},
	"TaskShootAtEntity()": {
	  "prefix": "TaskShootAtEntity",
	  "body": [
		"TaskShootAtEntity(${1:Entity entity}, ${2:Entity target}, ${3:int duration}, ${4:Hash firingPattern})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\n//this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds  \nEntity aimedentity;  \nPlayer player = PLAYER::PLAYER_ID();  \nPLAYER::_GET_AIMED_ENTITY(player, &aimedentity);  \n//bg is an array of peds  \nAI::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, GAMEPLAY::GET_HASH_KEY(\"FIRING_PATTERN_FULL_AUTO\"));  \nin practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.  \n"
	},
	"TaskSkyDive()": {
	  "prefix": "TaskSkyDive",
	  "body": [
		"TaskSkyDive(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskSmartFleePed()": {
	  "prefix": "TaskSmartFleePed",
	  "body": [
		"TaskSmartFleePed(${1:Ped ped}, ${2:Ped fleeTarget}, ${3:float distance}, ${4:Any fleeTime}, ${5:BOOL p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes a ped run away from another ped (fleeTarget).  \ndistance = ped will flee this distance.  \nfleeTime = ped will flee for this amount of time, set to \"-1\" to flee forever  \n"
	},
	"TaskSmartFleeCoord()": {
	  "prefix": "TaskSmartFleeCoord",
	  "body": [
		"TaskSmartFleeCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float distance}, ${6:int time}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes the specified ped flee the specified distance from the specified position.  \n"
	},
	"TaskStandGuard()": {
	  "prefix": "TaskStandGuard",
	  "body": [
		"TaskStandGuard(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:char* scenarioName})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nscenarioName example: \"WORLD_HUMAN_GUARD_STAND\"  \n"
	},
	"TaskStandStill()": {
	  "prefix": "TaskStandStill",
	  "body": [
		"TaskStandStill(${1:Ped ped}, ${2:int time})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes the specified ped stand still for (time) milliseconds.  \n"
	},
	"TaskStartScenarioAtPosition()": {
	  "prefix": "TaskStartScenarioAtPosition",
	  "body": [
		"TaskStartScenarioAtPosition(${1:Ped ped}, ${2:char* scenarioName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float heading}, ${7:int duration}, ${8:BOOL sittingScenario}, ${9:BOOL teleport})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nList of scenarioNames: pastebin.com/6mrYTdQv  \nAlso a few more listed at AI::TASK_START_SCENARIO_IN_PLACE just above.  \n---------------  \nThe first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.   \nThe next 4 parameters were harder to decipher. After viewing \"hairdo_shop_mp.ysc.c4\", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.  \nI haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.  \nI have no idea what the last 3 parameters are, but I'll try to find out.  \n-going on the last 3 parameters, they appear to always be \"0, 0, 1\"  \np6 -1 also used in scrips  \np7 used for sitting scenarios  \np8 teleports ped to position  \n"
	},
	"TaskStartScenarioInPlace()": {
	  "prefix": "TaskStartScenarioInPlace",
	  "body": [
		"TaskStartScenarioInPlace(${1:Ped ped}, ${2:char* scenarioName}, ${3:int unkDelay}, ${4:BOOL playEnterAnim})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nPlays a scenario on a Ped at their current location.  \nunkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.  \nplayEnterAnim - Plays the \"Enter\" anim if true, otherwise plays the \"Exit\" anim. Scenarios that don't have any \"Enter\" anims won't play if this is set to true.  \n----  \nFrom \"am_hold_up.ysc.c4\" at line 339:  \nAI::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);  \nI'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:  \nWORLD_HUMAN_SMOKING  \nWORLD_HUMAN_HANG_OUT_STREET  \nWORLD_HUMAN_STAND_MOBILE  \nThis makes sense, as these are what I commonly see when going by a liquor store.  \n-------------------------  \nList of scenarioNames: pastebin.com/6mrYTdQv  \n(^ Thank you so fucking much for this)  \nAlso these:  \nWORLD_FISH_FLEE  \nDRIVE  \nWORLD_HUMAN_HIKER  \nWORLD_VEHICLE_ATTRACTOR  \nWORLD_VEHICLE_BICYCLE_MOUNTAIN  \nWORLD_VEHICLE_BIKE_OFF_ROAD_RACE  \nWORLD_VEHICLE_BIKER  \nWORLD_VEHICLE_CONSTRUCTION_PASSENGERS  \nWORLD_VEHICLE_CONSTRUCTION_SOLO  \nWORLD_VEHICLE_DRIVE_PASSENGERS  \nWORLD_VEHICLE_DRIVE_SOLO  \nWORLD_VEHICLE_EMPTY  \nWORLD_VEHICLE_PARK_PARALLEL  \nWORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN  \nWORLD_VEHICLE_POLICE_BIKE  \nWORLD_VEHICLE_POLICE_CAR  \nWORLD_VEHICLE_POLICE_NEXT_TO_CAR  \nWORLD_VEHICLE_SALTON_DIRT_BIKE  \nWORLD_VEHICLE_TRUCK_LOGS  \n"
	},
	"TaskStayInCover()": {
	  "prefix": "TaskStayInCover",
	  "body": [
		"TaskStayInCover(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes the ped run to take cover  \n"
	},
	"TaskStealthKill()": {
	  "prefix": "TaskStealthKill",
	  "body": [
		"TaskStealthKill(${1:Ped killer}, ${2:Ped target}, ${3:Hash actionType}, ${4:float p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nStealth kill action name hashes:  \nstealth kills can be found here: Grand Theft Auto V\\common.rpf\\data\\action\\stealth_kills.meta  \n...  \n{  \n    \"ACT_stealth_kill_a\",  \n    \"ACT_stealth_kill_weapon\",  \n    \"ACT_stealth_kill_b\",  \n    \"ACT_stealth_kill_c\",  \n    \"ACT_stealth_kill_d\",  \n    \"ACT_stealth_kill_a_gardener\"  \n}  \nOnly known script using this native: fbi4_prep2  \nEXAMPLE:  \nai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key(\"AR_stealth_kill_a\"), 1f, 0);ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key(\"AR_stealth_kill_knife\"), 1f, 0);  \nAlso it may be important to note, that each time this task is called, it's followed by AI::CLEAR_PED_TASKS on the target  \n"
	},
	"TaskStopPhoneGestureAnimation()": {
	  "prefix": "TaskStopPhoneGestureAnimation",
	  "body": [
		"TaskStopPhoneGestureAnimation(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nTODO: add hash from x360  \n^^^  \nI got you, x360 Hash: 0x5A32D4B4.   \nNote: Whoever named this I just compared it and the hash matches, it was the correct name thanks.   \nNote: Alexander Blade, needs to fix this site or his code one, as when we do find the right name the server throws an error saying the name is already in use. AB is a legend coder, so I'm sure this is a simple fix for him.  \n"
	},
	"TaskSweepAimEntity()": {
	  "prefix": "TaskSweepAimEntity",
	  "body": [
		"TaskSweepAimEntity(${1:Ped ped}, ${2:char* anim}, ${3:char* p2}, ${4:char* p3}, ${5:char* p4}, ${6:int p5}, ${7:Vehicle vehicle}, ${8:float p7}, ${9:float p8})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nThis function is called on peds in vehicles.  \nanim: animation name  \np2, p3, p4: \"sweep_low\", \"sweep_med\" or \"sweep_high\"  \np5: no idea what it does but is usually -1  \n"
	},
	"TaskSwapWeapon()": {
	  "prefix": "TaskSwapWeapon",
	  "body": [
		"TaskSwapWeapon(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskSynchronizedScene()": {
	  "prefix": "TaskSynchronizedScene",
	  "body": [
		"TaskSynchronizedScene(${1:Ped ped}, ${2:int scene}, ${3:char* animDictionary}, ${4:char* animationName}, ${5:float speed}, ${6:float speedMultiplier}, ${7:int duration}, ${8:int flag}, ${9:float playbackRate}, ${10:Any p9})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nAI::TASK_SYNCHRONIZED_SCENE(ped, scene, \"creatures@rottweiler@in_vehicle@std_car\", \"get_in\", 1000.0, -8.0, 4, 0, 0x447a0000, 0);  \nAnimations List : www.ls-multiplayer.com/dev/index.php?section=3  \n"
	},
	"TaskSweepAimPosition()": {
	  "prefix": "TaskSweepAimPosition",
	  "body": [
		"TaskSweepAimPosition(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskToggleDuck()": {
	  "prefix": "TaskToggleDuck",
	  "body": [
		"TaskToggleDuck(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nused in sequence task  \nboth parameters seems to be always 0  \n"
	},
	"TaskThrowProjectile()": {
	  "prefix": "TaskThrowProjectile",
	  "body": [
		"TaskThrowProjectile(${1:int ped}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nIn every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.  \nThe last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.  \n---  \nIt seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).  \nIt is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.  \n----------------------------------------------------  \nThe first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.  \n"
	},
	"TaskTurnPedToFaceEntity()": {
	  "prefix": "TaskTurnPedToFaceEntity",
	  "body": [
		"TaskTurnPedToFaceEntity(${1:Ped ped}, ${2:Entity entity}, ${3:int duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nduration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped  \n"
	},
	"TaskUseMobilePhoneTimed()": {
	  "prefix": "TaskUseMobilePhoneTimed",
	  "body": [
		"TaskUseMobilePhoneTimed(${1:Ped ped}, ${2:int duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskTurnPedToFaceCoord()": {
	  "prefix": "TaskTurnPedToFaceCoord",
	  "body": [
		"TaskTurnPedToFaceCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nduration in milliseconds  \n"
	},
	"TaskUseNearestScenarioChainToCoord()": {
	  "prefix": "TaskUseNearestScenarioChainToCoord",
	  "body": [
		"TaskUseNearestScenarioChainToCoord(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskUseMobilePhone()": {
	  "prefix": "TaskUseMobilePhone",
	  "body": [
		"TaskUseMobilePhone(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nActually has 3 params, not 2.  \np0: Ped  \np1: int (or bool?)  \np2: int  \n"
	},
	"TaskUseNearestScenarioToCoord()": {
	  "prefix": "TaskUseNearestScenarioToCoord",
	  "body": [
		"TaskUseNearestScenarioToCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float distance}, ${6:int duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nUpdated variables  \nAn alternative to AI::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.  \n"
	},
	"TaskUseNearestScenarioChainToCoordWarp()": {
	  "prefix": "TaskUseNearestScenarioChainToCoordWarp",
	  "body": [
		"TaskUseNearestScenarioChainToCoordWarp(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehicleAimAtCoord()": {
	  "prefix": "TaskVehicleAimAtCoord",
	  "body": [
		"TaskVehicleAimAtCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskUseNearestScenarioToCoordWarp()": {
	  "prefix": "TaskUseNearestScenarioToCoordWarp",
	  "body": [
		"TaskUseNearestScenarioToCoordWarp(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:Any p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehicleChase()": {
	  "prefix": "TaskVehicleChase",
	  "body": [
		"TaskVehicleChase(${1:Ped driver}, ${2:Entity targetEnt})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nchases targetEnt fast and aggressively  \n--  \nMakes ped (needs to be in vehicle) chase targetEnt.  \n"
	},
	"TaskVehicleAimAtPed()": {
	  "prefix": "TaskVehicleAimAtPed",
	  "body": [
		"TaskVehicleAimAtPed(${1:Ped ped}, ${2:Ped target})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehicleDriveToCoord()": {
	  "prefix": "TaskVehicleDriveToCoord",
	  "body": [
		"TaskVehicleDriveToCoord(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float speed}, ${7:Any p6}, ${8:Hash vehicleModel}, ${9:int drivingMode}, ${10:float stopRange}, ${11:float p10})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\ninfo about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/  \n---------------------------------------------------------------  \nPassing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.  \nP10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.  \nHere the e.g. code I used  \nFunction.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);  \n"
	},
	"TaskVehicleDriveToCoordLongrange()": {
	  "prefix": "TaskVehicleDriveToCoordLongrange",
	  "body": [
		"TaskVehicleDriveToCoordLongrange(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float speed}, ${7:int driveMode}, ${8:float stopRange})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehicleEscort()": {
	  "prefix": "TaskVehicleEscort",
	  "body": [
		"TaskVehicleEscort(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:Vehicle targetVehicle}, ${4:int mode}, ${5:float speed}, ${6:int drivingStyle}, ${7:float minDistance}, ${8:int p7}, ${9:float noRoadsDistance})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes a ped follow the targetVehicle with <minDistance> in between.  \nnote: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.  \nMode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.  \n-1 = behind  \n0 = ahead  \n1 = left  \n2 = right  \n3 = back left  \n4 = back right  \nif the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.  \nDriving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/  \n"
	},
	"TaskVehicleDriveWander()": {
	  "prefix": "TaskVehicleDriveWander",
	  "body": [
		"TaskVehicleDriveWander(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float speed}, ${4:int drivingStyle})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehicleFollowWaypointRecording()": {
	  "prefix": "TaskVehicleFollowWaypointRecording",
	  "body": [
		"TaskVehicleFollowWaypointRecording(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:char* WPRecording}, ${4:int p3}, ${5:int p4}, ${6:int p5}, ${7:int p6}, ${8:float p7}, ${9:BOOL p8}, ${10:float p9})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\ntask_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)  \np2 = Waypoint recording string (found in update\\update.rpf\\x64\\levels\\gta5\\waypointrec.rpf  \np3 = 786468  \np4 = 0  \np5 = 16  \np6 = -1 (angle?)  \np7/8/9 = usually v3.zero  \np10 = bool (repeat?)  \np11 = 1073741824  \n"
	},
	"TaskVehicleFollow()": {
	  "prefix": "TaskVehicleFollow",
	  "body": [
		"TaskVehicleFollow(${1:Ped driver}, ${2:Vehicle vehicle}, ${3:Entity targetEntity}, ${4:float speed}, ${5:int drivingStyle}, ${6:int minDistance})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes a ped in a vehicle follow an entity (ped, vehicle, etc.)  \nDriving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/  \nConsole Hash: 0xA8B917D7  \nAI::_TASK_VEHICLE_FOLLOW(l_244[3/*1*/], l_268[3/*1*/], l_278, 40.0, 262144, 10);  \nWhat is this known as in the decompiled scripts ffs. I need more examples. I've searched in all scripts for keywords suchas,  \nTASK_VEHICLE_FOLLOW, FC545A9F0626E3B6, 0xFC545A9F0626E3B6, all the parameters in the above example even just search the last few params '40.0, 262144, 10' and couldnt find where this native is used in scripts at all unless whoever decompiled the scripts gave it a whack a.. name.  \n"
	},
	"TaskVehicleHeliProtect()": {
	  "prefix": "TaskVehicleHeliProtect",
	  "body": [
		"TaskVehicleHeliProtect(${1:Ped pilot}, ${2:Vehicle vehicle}, ${3:Entity entityToFollow}, ${4:float targetSpeed}, ${5:int p4}, ${6:float radius}, ${7:int altitude}, ${8:int p7})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\npilot, vehicle and altitude are rather self-explanatory.  \np4: is unused variable in the function.  \nentityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.  \n'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.  \n'radius' isn't just \"stop within radius of X of target\" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.  \nNOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.  \nNOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.  \n"
	},
	"TaskVehicleGotoNavmesh()": {
	  "prefix": "TaskVehicleGotoNavmesh",
	  "body": [
		"TaskVehicleGotoNavmesh(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float speed}, ${7:int behaviorFlag}, ${8:float stoppingRange})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nDiffers from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other \"road laws\" into consideration.  \nWARNING:  \nA behaviorFlag value of 0 will result in a clunky, stupid driver!  \nRecommended settings:  \nspeed = 30.0f,  \nbehaviorFlag = 156,   \nstoppingRange = 5.0f;  \nIf you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.   \nIf using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an \"anti-stuck\" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.  \nEDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/  \n"
	},
	"TaskVehicleMissionCoorsTarget()": {
	  "prefix": "TaskVehicleMissionCoorsTarget",
	  "body": [
		"TaskVehicleMissionCoorsTarget(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:int p5}, ${7:int p6}, ${8:int p7}, ${9:float p8}, ${10:float p9}, ${11:BOOL p10})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nExample from fm_mission_controller.c4:  \nAI::TASK_VEHICLE_MISSION_COORS_TARGET(l_65E1, l_65E2, 324.84588623046875, 325.09619140625, 104.3525, 4, 15.0, 802987, 5.0, 5.0, 0);  \n"
	},
	"TaskVehicleMission()": {
	  "prefix": "TaskVehicleMission",
	  "body": [
		"TaskVehicleMission(${1:int p0}, ${2:int p1}, ${3:Vehicle veh}, ${4:Any p3}, ${5:float p4}, ${6:Any p5}, ${7:float p6}, ${8:float p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehiclePark()": {
	  "prefix": "TaskVehiclePark",
	  "body": [
		"TaskVehiclePark(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float heading}, ${7:int mode}, ${8:float radius}, ${9:BOOL keepEngineOn})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nModes:  \n0 - ignore heading  \n1 - park forward  \n2 - park backwards  \nDepending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.  \nRadius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.  \n"
	},
	"TaskVehicleMissionPedTarget()": {
	  "prefix": "TaskVehicleMissionPedTarget",
	  "body": [
		"TaskVehicleMissionPedTarget(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:Ped pedTarget}, ${4:int mode}, ${5:float maxSpeed}, ${6:int drivingStyle}, ${7:float minDistance}, ${8:float p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nModes:  \n8= flees  \n1=drives around the ped  \n4=drives and stops near  \n7=follows  \n10=follows to the left  \n11=follows to the  right  \n12 = follows behind  \n13=follows ahead  \n14=follows, stop when near  \n"
	},
	"TaskVehicleShootAtCoord()": {
	  "prefix": "TaskVehicleShootAtCoord",
	  "body": [
		"TaskVehicleShootAtCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehiclePlayAnim()": {
	  "prefix": "TaskVehiclePlayAnim",
	  "body": [
		"TaskVehiclePlayAnim(${1:Vehicle vehicle}, ${2:char* animation_set}, ${3:char* animation_name})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMost probably plays a specific animation on vehicle. For example getting chop out of van etc...  \nHere's how its used -   \nAI::TASK_VEHICLE_PLAY_ANIM(l_325, \"rcmnigel1b\", \"idle_speedo\");  \nAI::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], \"missfra0_chop_drhome\", \"InCar_GetOutofBack_Speedo\");  \nFYI : Speedo is the name of van in which chop was put in the mission.  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"TaskVehicleShootAtPed()": {
	  "prefix": "TaskVehicleShootAtPed",
	  "body": [
		"TaskVehicleShootAtPed(${1:Ped ped}, ${2:Ped target}, ${3:float p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskVehicleTempAction()": {
	  "prefix": "TaskVehicleTempAction",
	  "body": [
		"TaskVehicleTempAction(${1:Ped driver}, ${2:Vehicle vehicle}, ${3:int action}, ${4:int time})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\n'1   \n'3 - brake + reverse  \n'4 - turn left 90 + braking  \n'5 - turn right 90 + braking  \n'6 - brake strong (handbrake?) until time ends  \n'7 - turn left + accelerate  \n'7 - turn right + accelerate  \n'9 - weak acceleration  \n'10 - turn left + restore wheel pos to center in the end  \n'11 - turn right + restore wheel pos to center in the end  \n'13 - turn left + go reverse  \n'14 - turn left + go reverse  \n'16 - crash the game after like 2 seconds :)  \n'17 - keep actual state, game crashed after few tries  \n'18 - game crash  \n'19 - strong brake + turn left/right  \n'20 - weak brake + turn left then turn right  \n'21 - weak brake + turn right then turn left  \n'22 - brake + reverse  \n'23 - accelerate fast  \n'24   \n'25 - brake turning left then when almost stopping it turns left more  \n'26 - brake turning right then when almost stopping it turns right more  \n'27 - brake until car stop or until time ends  \n'28 - brake + strong reverse acceleration  \n'30 - performs a burnout (brake until stop + brake and accelerate)  \n'31 - accelerate + handbrake  \n'32 - accelerate very strong  \nSeems to be this:  \nWorks on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), \"time\" will work, otherwise the task will be performed forever until tasked with something else  \n"
	},
	"TaskWanderStandard()": {
	  "prefix": "TaskWanderStandard",
	  "body": [
		"TaskWanderStandard(${1:Ped ped}, ${2:float p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nMakes ped walk around the area.  \nset p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.  \n"
	},
	"TaskWanderInArea()": {
	  "prefix": "TaskWanderInArea",
	  "body": [
		"TaskWanderInArea(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:float minimalLength}, ${7:float timeBetweenWalks})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"TaskWarpPedIntoVehicle()": {
	  "prefix": "TaskWarpPedIntoVehicle",
	  "body": [
		"TaskWarpPedIntoVehicle(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int seat})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nSeat Numbers  \n-------------------------------  \nDriver = -1  \nAny = -2  \nLeft-Rear = 1  \nRight-Front = 0  \nRight-Rear = 2  \nExtra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)  \n"
	},
	"TaskWrithe()": {
	  "prefix": "TaskWrithe",
	  "body": [
		"TaskWrithe(${1:Ped ped}, ${2:Ped target}, ${3:int time}, ${4:int p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n\nEX: Function.Call(Ped1, Ped2, Time, 0);  \nThe last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.  \nMulleDK19: Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).  \n"
	},
	"UncuffPed()": {
	  "prefix": "UncuffPed",
	  "body": [
		"UncuffPed(${1:Ped ped})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"UpdateTaskAimGunScriptedTarget()": {
	  "prefix": "UpdateTaskAimGunScriptedTarget",
	  "body": [
		"UpdateTaskAimGunScriptedTarget(${1:Ped p0}, ${2:Ped p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"UpdateTaskHandsUpDuration()": {
	  "prefix": "UpdateTaskHandsUpDuration",
	  "body": [
		"UpdateTaskHandsUpDuration(${1:Ped ped}, ${2:int duration})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"UpdateTaskSweepAimEntity()": {
	  "prefix": "UpdateTaskSweepAimEntity",
	  "body": [
		"UpdateTaskSweepAimEntity(${1:Ped ped}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"UpdateTaskSweepAimPosition()": {
	  "prefix": "UpdateTaskSweepAimPosition",
	  "body": [
		"UpdateTaskSweepAimPosition(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"UseWaypointRecordingAsAssistedMovementRoute()": {
	  "prefix": "UseWaypointRecordingAsAssistedMovementRoute",
	  "body": [
		"UseWaypointRecordingAsAssistedMovementRoute(${1:char* name}, ${2:BOOL p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"VehicleWaypointPlaybackOverrideSpeed()": {
	  "prefix": "VehicleWaypointPlaybackOverrideSpeed",
	  "body": [
		"VehicleWaypointPlaybackOverrideSpeed(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"VehicleWaypointPlaybackPause()": {
	  "prefix": "VehicleWaypointPlaybackPause",
	  "body": [
		"VehicleWaypointPlaybackPause(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"VehicleWaypointPlaybackResume()": {
	  "prefix": "VehicleWaypointPlaybackResume",
	  "body": [
		"VehicleWaypointPlaybackResume(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"VehicleWaypointPlaybackUseDefaultSpeed()": {
	  "prefix": "VehicleWaypointPlaybackUseDefaultSpeed",
	  "body": [
		"VehicleWaypointPlaybackUseDefaultSpeed(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackOverrideSpeed()": {
	  "prefix": "WaypointPlaybackOverrideSpeed",
	  "body": [
		"WaypointPlaybackOverrideSpeed(${1:Any p0}, ${2:float p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackGetIsPaused()": {
	  "prefix": "WaypointPlaybackGetIsPaused",
	  "body": [
		"WaypointPlaybackGetIsPaused(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n"
	},
	"WaypointPlaybackResume()": {
	  "prefix": "WaypointPlaybackResume",
	  "body": [
		"WaypointPlaybackResume(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackPause()": {
	  "prefix": "WaypointPlaybackPause",
	  "body": [
		"WaypointPlaybackPause(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackStartAimingAtCoord()": {
	  "prefix": "WaypointPlaybackStartAimingAtCoord",
	  "body": [
		"WaypointPlaybackStartAimingAtCoord(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackStartAimingAtPed()": {
	  "prefix": "WaypointPlaybackStartAimingAtPed",
	  "body": [
		"WaypointPlaybackStartAimingAtPed(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackStopAimingOrShooting()": {
	  "prefix": "WaypointPlaybackStopAimingOrShooting",
	  "body": [
		"WaypointPlaybackStopAimingOrShooting(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackStartShootingAtCoord()": {
	  "prefix": "WaypointPlaybackStartShootingAtCoord",
	  "body": [
		"WaypointPlaybackStartShootingAtCoord(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointPlaybackUseDefaultSpeed()": {
	  "prefix": "WaypointPlaybackUseDefaultSpeed",
	  "body": [
		"WaypointPlaybackUseDefaultSpeed(${1:Any p0})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: void\n"
	},
	"WaypointRecordingGetClosestWaypoint()": {
	  "prefix": "WaypointRecordingGetClosestWaypoint",
	  "body": [
		"WaypointRecordingGetClosestWaypoint(${1:char* name}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int* point})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nFor a full list, see here: pastebin.com/Tp0XpBMN  \nFor a full list of the points, see here: goo.gl/wIH0vn  \n"
	},
	"WaypointRecordingGetCoord()": {
	  "prefix": "WaypointRecordingGetCoord",
	  "body": [
		"WaypointRecordingGetCoord(${1:char* name}, ${2:int point}, ${3:Vector3* coord})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nFor a full list, see here: pastebin.com/Tp0XpBMN  \nFor a full list of the points, see here: goo.gl/wIH0vn  \n"
	},
	"WaypointRecordingGetNumPoints()": {
	  "prefix": "WaypointRecordingGetNumPoints",
	  "body": [
		"WaypointRecordingGetNumPoints(${1:char* name}, ${2:int* points})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: BOOL\n\nFor a full list, see here: pastebin.com/Tp0XpBMN  \nFor a full list of the points, see here: goo.gl/wIH0vn  \n"
	},
	"WaypointRecordingGetSpeedAtPoint()": {
	  "prefix": "WaypointRecordingGetSpeedAtPoint",
	  "body": [
		"WaypointRecordingGetSpeedAtPoint(${1:char* name}, ${2:int point})"
	  ],
	  "description": "Namespace: BRAIN\nReturns: float\n"
	},
	"AddCamSplineNode()": {
	  "prefix": "AddCamSplineNode",
	  "body": [
		"AddCamSplineNode(${1:Cam camera}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:int length}, ${9:int p8}, ${10:int transitionType})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nI filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.  \np7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one  \np8 big values ~100 will slow down the camera movement before reaching this node  \np9 != 0 seems to override the rotation/pitch (bool?)  \n"
	},
	"AnimateGameplayCamZoom()": {
	  "prefix": "AnimateGameplayCamZoom",
	  "body": [
		"AnimateGameplayCamZoom(${1:float p0}, ${2:float distance})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSeems to animate the gameplay camera zoom.  \nEg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);  \nwill animate the camera zooming in from 1000 meters away.  \nGame scripts use it like this:  \n// Setting this to 1 prevents V key from changing zoom  \nPLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);  \n// These restrict how far you can move cam up/down left/right  \nCAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);  \nCAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);  \nCAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);  \n"
	},
	"AnimatedShakeCam()": {
	  "prefix": "AnimatedShakeCam",
	  "body": [
		"AnimatedShakeCam(${1:Cam cam}, ${2:char* p1}, ${3:char* p2}, ${4:char* p3}, ${5:float amplitude})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nExample from michael2 script.  \nCAM::ANIMATED_SHAKE_CAM(l_5069, \"shake_cam_all@\", \"light\", \"\", 1f);  \n"
	},
	"AttachCamToEntity()": {
	  "prefix": "AttachCamToEntity",
	  "body": [
		"AttachCamToEntity(${1:Cam cam}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:BOOL isRelative})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nLast param determines if its relative to the Entity  \n"
	},
	"AttachCamToPedBone()": {
	  "prefix": "AttachCamToPedBone",
	  "body": [
		"AttachCamToPedBone(${1:Cam cam}, ${2:Ped ped}, ${3:int boneIndex}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:BOOL heading})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x8db3f12a02caef72()": {
	  "prefix": "N_0x8db3f12a02caef72",
	  "body": "N_0x8db3f12a02caef72",
	  "description": "OLD NAME, PLEASE USE AttachCamToVehicleBone INSTEAD!"
	},
	"AttachCamToVehicleBone()": {
	  "prefix": "AttachCamToVehicleBone",
	  "body": [
		"AttachCamToVehicleBone(${1:Cam cam}, ${2:Vehicle vehicle}, ${3:int boneIndex}, ${4:BOOL relativeRotation}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float offX}, ${9:float offY}, ${10:float offZ}, ${11:BOOL fixedDirection})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\nThis native works with vehicles only.\nBone indexes are usually given by this native [GET_ENTITY_BONE_INDEX_BY_NAME](#_0xFB71170B7E76ACBA).\nOld name: N_0x8db3f12a02caef72"
	},
	"ClampGameplayCamPitch()": {
	  "prefix": "ClampGameplayCamPitch",
	  "body": [
		"ClampGameplayCamPitch(${1:float minimum}, ${2:float maximum})"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n\nminimum: Degrees between -90f and 90f.  \nmaximum: Degrees between -90f and 90f.  \nClamps the gameplay camera's current pitch.  \nEg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.  \n"
	},
	"ClampGameplayCamYaw()": {
	  "prefix": "ClampGameplayCamYaw",
	  "body": [
		"ClampGameplayCamYaw(${1:float minimum}, ${2:float maximum})"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n\nminimum: Degrees between -180f and 180f.  \nmaximum: Degrees between -180f and 180f.  \nClamps the gameplay camera's current yaw.  \nEg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.  \n"
	},
	"CreateCam()": {
	  "prefix": "CreateCam",
	  "body": [
		"CreateCam(${1:char* Gippo}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: Cam\n\n\"DEFAULT_SCRIPTED_CAMERA\"  \n\"DEFAULT_ANIMATED_CAMERA\"  \n\"DEFAULT_SPLINE_CAMERA\"  \n\"DEFAULT_SCRIPTED_FLY_CAMERA\"  \n\"TIMED_SPLINE_CAMERA\"  \n"
	},
	"CreateCamWithParams()": {
	  "prefix": "CreateCamWithParams",
	  "body": [
		"CreateCamWithParams(${1:char* camName}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float fov}, ${9:BOOL p8}, ${10:int p9})"
	  ],
	  "description": "Namespace: CAM\nReturns: Cam\n\ncamName is always set to \"DEFAULT_SCRIPTED_CAMERA\" in Rockstar's scripts.  \n------------  \nCamera names found in the b617d scripts:  \n\"DEFAULT_ANIMATED_CAMERA\"  \n\"DEFAULT_SCRIPTED_CAMERA\"  \n\"DEFAULT_SCRIPTED_FLY_CAMERA\"  \n\"DEFAULT_SPLINE_CAMERA\"  \n------------  \nSide Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.  \n"
	},
	"CreateCameraWithParams()": {
	  "prefix": "CreateCameraWithParams",
	  "body": [
		"CreateCameraWithParams(${1:Hash camHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float fov}, ${9:BOOL p8}, ${10:Any p9})"
	  ],
	  "description": "Namespace: CAM\nReturns: Cam\n\nCAM::_GET_GAMEPLAY_CAM_COORDS can be used instead of posX,Y,Z  \nCAM::_GET_GAMEPLAY_CAM_ROT can be used instead of rotX,Y,Z  \nCAM::_80EC114669DAEFF4() can be used instead of p7 (Possible p7 is FOV parameter. )  \np8 ???  \np9 uses 2 by default  \n"
	},
	"CreateCamera()": {
	  "prefix": "CreateCamera",
	  "body": [
		"CreateCamera(${1:Hash camHash}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: Cam\n"
	},
	"CreateCinematicShot()": {
	  "prefix": "CreateCinematicShot",
	  "body": [
		"CreateCinematicShot(${1:Any p0}, ${2:int p1}, ${3:Any p2}, ${4:Entity entity})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x487a82c650eb7799()": {
	  "prefix": "N_0x487a82c650eb7799",
	  "body": "N_0x487a82c650eb7799",
	  "description": "OLD NAME, PLEASE USE CustomMenuCoordinates INSTEAD!"
	},
	"CustomMenuCoordinates()": {
	  "prefix": "CustomMenuCoordinates",
	  "body": [
		"CustomMenuCoordinates(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nsome camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.  \n\nOld name: N_0x487a82c650eb7799"
	},
	"DestroyCam()": {
	  "prefix": "DestroyCam",
	  "body": [
		"DestroyCam(${1:Cam cam}, ${2:BOOL thisScriptCheck})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nBOOL param indicates whether the cam should be destroyed if it belongs to the calling script.  \n"
	},
	"DestroyAllCams()": {
	  "prefix": "DestroyAllCams",
	  "body": [
		"DestroyAllCams(${1:BOOL thisScriptCheck})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nBOOL param indicates whether the cam should be destroyed if it belongs to the calling script.  \n"
	},
	"N_0x1a31fe0049e542f6()": {
	  "prefix": "N_0x1a31fe0049e542f6",
	  "body": "N_0x1a31fe0049e542f6",
	  "description": "OLD NAME, PLEASE USE DisableAimCamThisUpdate INSTEAD!"
	},
	"DisableAimCamThisUpdate()": {
	  "prefix": "DisableAimCamThisUpdate",
	  "body": [
		"DisableAimCamThisUpdate()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nOld name: N_0x1a31fe0049e542f6"
	},
	"DetachCam()": {
	  "prefix": "DetachCam",
	  "body": [
		"DetachCam(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"DisableVehicleFirstPersonCamThisFrame()": {
	  "prefix": "DisableVehicleFirstPersonCamThisFrame",
	  "body": [
		"DisableVehicleFirstPersonCamThisFrame()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"DisableFirstPersonCamThisFrame()": {
	  "prefix": "DisableFirstPersonCamThisFrame",
	  "body": [
		"DisableFirstPersonCamThisFrame()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nDisables first person camera for the current frame.  \nFound in decompiled scripts:  \nGRAPHICS::DRAW_DEBUG_TEXT_2D(\"Disabling First Person Cam\", 0.5, 0.8, 0.0, 0, 0, 255, 255);  \nCAM::_DE2EF5DA284CC8DF();  \n"
	},
	"DoScreenFadeOut()": {
	  "prefix": "DoScreenFadeOut",
	  "body": [
		"DoScreenFadeOut(${1:int duration})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nFades the screen out.  \nduration: The time the fade should take, in milliseconds.  \n"
	},
	"EnableCrosshairThisFrame()": {
	  "prefix": "EnableCrosshairThisFrame",
	  "body": [
		"EnableCrosshairThisFrame()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nShows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.  \n"
	},
	"DoScreenFadeIn()": {
	  "prefix": "DoScreenFadeIn",
	  "body": [
		"DoScreenFadeIn(${1:int duration})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nFades the screen in.  \nduration: The time the fade should take, in milliseconds.  \n"
	},
	"DoesCamExist()": {
	  "prefix": "DoesCamExist",
	  "body": [
		"DoesCamExist(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nReturns whether or not the passed camera handle exists.  \n"
	},
	"GetCamCoord()": {
	  "prefix": "GetCamCoord",
	  "body": [
		"GetCamCoord(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: Vector3\n"
	},
	"GetCamFarDof()": {
	  "prefix": "GetCamFarDof",
	  "body": [
		"GetCamFarDof(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetCamAnimCurrentPhase()": {
	  "prefix": "GetCamAnimCurrentPhase",
	  "body": [
		"GetCamAnimCurrentPhase(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetCamFarClip()": {
	  "prefix": "GetCamFarClip",
	  "body": [
		"GetCamFarClip(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetCamNearClip()": {
	  "prefix": "GetCamNearClip",
	  "body": [
		"GetCamNearClip(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetCamRot()": {
	  "prefix": "GetCamRot",
	  "body": [
		"GetCamRot(${1:Cam cam}, ${2:int rotationOrder})"
	  ],
	  "description": "Namespace: CAM\nReturns: Vector3\n\nThe last parameter, as in other \"ROT\" methods, is usually 2.  \n"
	},
	"GetCamSplinePhase()": {
	  "prefix": "GetCamSplinePhase",
	  "body": [
		"GetCamSplinePhase(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\nCan use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.  \n(returns 1.0f when no nodes has been added, reached end of non existing spline)  \n"
	},
	"GetCamFov()": {
	  "prefix": "GetCamFov",
	  "body": [
		"GetCamFov(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetFollowPedCamViewMode()": {
	  "prefix": "GetFollowPedCamViewMode",
	  "body": [
		"GetFollowPedCamViewMode()"
	  ],
	  "description": "Namespace: CAM\nReturns: int\n\nReturns  \n0 - Third Person Close  \n1 - Third Person Mid  \n2 - Third Person Far  \n4 - First Person  \n"
	},
	"GetCamSplineNodeIndex()": {
	  "prefix": "GetCamSplineNodeIndex",
	  "body": [
		"GetCamSplineNodeIndex(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: int\n\nI named the beginning from Any to BOOL as this native is used in an if statement as well.   \nBig surprise it returns an int.  \n"
	},
	"GetFollowVehicleCamViewMode()": {
	  "prefix": "GetFollowVehicleCamViewMode",
	  "body": [
		"GetFollowVehicleCamViewMode()"
	  ],
	  "description": "Namespace: CAM\nReturns: int\n\nReturns the type of camera:  \n0 - Third Person Close  \n1 - Third Person Mid  \n2 - Third Person Far  \n4 - First Person  \n"
	},
	"GetCamSplineNodePhase()": {
	  "prefix": "GetCamSplineNodePhase",
	  "body": [
		"GetCamSplineNodePhase(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\nI'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.  \n"
	},
	"GetFollowPedCamZoomLevel()": {
	  "prefix": "GetFollowPedCamZoomLevel",
	  "body": [
		"GetFollowPedCamZoomLevel()"
	  ],
	  "description": "Namespace: CAM\nReturns: int\n"
	},
	"GetGameplayCamCoord()": {
	  "prefix": "GetGameplayCamCoord",
	  "body": [
		"GetGameplayCamCoord()"
	  ],
	  "description": "Namespace: CAM\nReturns: Vector3\n"
	},
	"GetFollowVehicleCamZoomLevel()": {
	  "prefix": "GetFollowVehicleCamZoomLevel",
	  "body": [
		"GetFollowVehicleCamZoomLevel()"
	  ],
	  "description": "Namespace: CAM\nReturns: int\n"
	},
	"N_0xdfc8cbc606fdb0fc()": {
	  "prefix": "N_0xdfc8cbc606fdb0fc",
	  "body": "N_0xdfc8cbc606fdb0fc",
	  "description": "OLD NAME, PLEASE USE GetGameplayCamFarClip INSTEAD!"
	},
	"GetGameplayCamFarClip()": {
	  "prefix": "GetGameplayCamFarClip",
	  "body": [
		"GetGameplayCamFarClip()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\nGets the gameplay camera's far clipping plane.  \n\nOld name: N_0xdfc8cbc606fdb0fc"
	},
	"GetGameplayCamCoords()": {
	  "prefix": "GetGameplayCamCoords",
	  "body": [
		"GetGameplayCamCoords()"
	  ],
	  "description": "Namespace: CAM\nReturns: Vector3\n"
	},
	"N_0x9780f32bcaf72431()": {
	  "prefix": "N_0x9780f32bcaf72431",
	  "body": "N_0x9780f32bcaf72431",
	  "description": "OLD NAME, PLEASE USE GetGameplayCamFarDof INSTEAD!"
	},
	"GetGameplayCamFarDof()": {
	  "prefix": "GetGameplayCamFarDof",
	  "body": [
		"GetGameplayCamFarDof()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\nGets the gameplay camera's far depth of field distance.  \n\nOld name: N_0x9780f32bcaf72431"
	},
	"GetGameplayCamFov()": {
	  "prefix": "GetGameplayCamFov",
	  "body": [
		"GetGameplayCamFov()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetGameplayCamRelativeHeading()": {
	  "prefix": "GetGameplayCamRelativeHeading",
	  "body": [
		"GetGameplayCamRelativeHeading()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"N_0xa03502fc581f7d9b()": {
	  "prefix": "N_0xa03502fc581f7d9b",
	  "body": "N_0xa03502fc581f7d9b",
	  "description": "OLD NAME, PLEASE USE GetGameplayCamNearDof INSTEAD!"
	},
	"GetGameplayCamNearDof()": {
	  "prefix": "GetGameplayCamNearDof",
	  "body": [
		"GetGameplayCamNearDof()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\nGets the gameplay camera's near depth of field distance.  \n\nOld name: N_0xa03502fc581f7d9b"
	},
	"GetGameplayCamRelativePitch()": {
	  "prefix": "GetGameplayCamRelativePitch",
	  "body": [
		"GetGameplayCamRelativePitch()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetGameplayCamRot()": {
	  "prefix": "GetGameplayCamRot",
	  "body": [
		"GetGameplayCamRot(${1:int rotationOrder})"
	  ],
	  "description": "Namespace: CAM\nReturns: Vector3\n\np0 dosen't seem to change much, I tried it with 0, 1, 2:  \n0-Pitch(X): -70.000092  \n0-Roll(Y): -0.000001  \n0-Yaw(Z): -43.886459  \n1-Pitch(X): -70.000092  \n1-Roll(Y): -0.000001  \n1-Yaw(Z): -43.886463  \n2-Pitch(X): -70.000092  \n2-Roll(Y): -0.000002  \n2-Yaw(Z): -43.886467  \n"
	},
	"GetGameplayCamRot_2()": {
	  "prefix": "GetGameplayCamRot_2",
	  "body": [
		"GetGameplayCamRot_2(${1:int rotationOrder})"
	  ],
	  "description": "Namespace: CAM\nReturns: Vector3\n\np0 seems to consistently be 2 across scripts  \nFunction is called faily often by CAM::CREATE_CAM_WITH_PARAMS  \n"
	},
	"GetGameplayCamZoom()": {
	  "prefix": "GetGameplayCamZoom",
	  "body": [
		"GetGameplayCamZoom()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"GetIsMultiplayerBrief()": {
	  "prefix": "GetIsMultiplayerBrief",
	  "body": [
		"GetIsMultiplayerBrief(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nHash collision  \n"
	},
	"N_0xf4f2c0d4ee209e20()": {
	  "prefix": "N_0xf4f2c0d4ee209e20",
	  "body": "N_0xf4f2c0d4ee209e20",
	  "description": "OLD NAME, PLEASE USE InvalidateIdleCam INSTEAD!"
	},
	"InvalidateIdleCam()": {
	  "prefix": "InvalidateIdleCam",
	  "body": [
		"InvalidateIdleCam()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\nResets the idle camera timer. Calling this in a loop will disable the idle camera.\nOld name: N_0xf4f2c0d4ee209e20"
	},
	"GetRenderingCam()": {
	  "prefix": "GetRenderingCam",
	  "body": [
		"GetRenderingCam()"
	  ],
	  "description": "Namespace: CAM\nReturns: Cam\n"
	},
	"IsCamActive()": {
	  "prefix": "IsCamActive",
	  "body": [
		"IsCamActive(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nReturns whether or not the passed camera handle is active.  \n"
	},
	"IsAimCamActive()": {
	  "prefix": "IsAimCamActive",
	  "body": [
		"IsAimCamActive()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsCamPlayingAnim()": {
	  "prefix": "IsCamPlayingAnim",
	  "body": [
		"IsCamPlayingAnim(${1:Cam cam}, ${2:char* animName}, ${3:char* animDictionary})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"IsCamInterpolating()": {
	  "prefix": "IsCamInterpolating",
	  "body": [
		"IsCamInterpolating(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsCamRendering()": {
	  "prefix": "IsCamRendering",
	  "body": [
		"IsCamRendering(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsCamSplinePaused()": {
	  "prefix": "IsCamSplinePaused",
	  "body": [
		"IsCamSplinePaused(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsCamShaking()": {
	  "prefix": "IsCamShaking",
	  "body": [
		"IsCamShaking(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsCinematicCamRendering()": {
	  "prefix": "IsCinematicCamRendering",
	  "body": [
		"IsCinematicCamRendering()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsCinematicCamShaking()": {
	  "prefix": "IsCinematicCamShaking",
	  "body": [
		"IsCinematicCamShaking()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsCinematicShotActive()": {
	  "prefix": "IsCinematicShotActive",
	  "body": [
		"IsCinematicShotActive(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsFirstPersonAimCamActive()": {
	  "prefix": "IsFirstPersonAimCamActive",
	  "body": [
		"IsFirstPersonAimCamActive()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsFollowPedCamActive()": {
	  "prefix": "IsFollowPedCamActive",
	  "body": [
		"IsFollowPedCamActive()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsFollowVehicleCamActive()": {
	  "prefix": "IsFollowVehicleCamActive",
	  "body": [
		"IsFollowVehicleCamActive()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsGameplayCamLookingBehind()": {
	  "prefix": "IsGameplayCamLookingBehind",
	  "body": [
		"IsGameplayCamLookingBehind()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsGameplayCamRendering()": {
	  "prefix": "IsGameplayCamRendering",
	  "body": [
		"IsGameplayCamRendering()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nExamples when this function will return 0 are:  \n- During busted screen.  \n- When player is coming out from a hospital.  \n- When player is coming out from a police station.  \n"
	},
	"IsGameplayHintActive()": {
	  "prefix": "IsGameplayHintActive",
	  "body": [
		"IsGameplayHintActive()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsGameplayCamShaking()": {
	  "prefix": "IsGameplayCamShaking",
	  "body": [
		"IsGameplayCamShaking()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"N_0x4f32c0d5a90a9b40()": {
	  "prefix": "N_0x4f32c0d5a90a9b40",
	  "body": "N_0x4f32c0d5a90a9b40",
	  "description": "OLD NAME, PLEASE USE IsInVehicleCamDisabled INSTEAD!"
	},
	"IsInVehicleCamDisabled()": {
	  "prefix": "IsInVehicleCamDisabled",
	  "body": [
		"IsInVehicleCamDisabled()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nOld name: N_0x4f32c0d5a90a9b40"
	},
	"IsScreenFadedOut()": {
	  "prefix": "IsScreenFadedOut",
	  "body": [
		"IsScreenFadedOut()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsScreenFadedIn()": {
	  "prefix": "IsScreenFadedIn",
	  "body": [
		"IsScreenFadedIn()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsScreenFadingOut()": {
	  "prefix": "IsScreenFadingOut",
	  "body": [
		"IsScreenFadingOut()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsScreenFadingIn()": {
	  "prefix": "IsScreenFadingIn",
	  "body": [
		"IsScreenFadingIn()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"IsSphereVisible()": {
	  "prefix": "IsSphereVisible",
	  "body": [
		"IsSphereVisible(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"N_0xc912af078af19212()": {
	  "prefix": "N_0xc912af078af19212",
	  "body": "N_0xc912af078af19212",
	  "description": "OLD NAME, PLEASE USE IsScriptGlobalShaking INSTEAD!"
	},
	"IsScriptGlobalShaking()": {
	  "prefix": "IsScriptGlobalShaking",
	  "body": [
		"IsScriptGlobalShaking()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nIn drunk_controller.c4, sub_309  \nif (CAM::_C912AF078AF19212()) {  \n    CAM::_1C9D7949FA533490(0);  \n}  \nWhat does \"IS_SCRIPT_GLOBAL_SHAKING\" mean..? :/ Is this a hash collision?  \n\nOld name: N_0xc912af078af19212"
	},
	"N_0x0aa27680a0bd43fa()": {
	  "prefix": "N_0x0aa27680a0bd43fa",
	  "body": [
		"N_0x0aa27680a0bd43fa()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x0225778816fdc28c()": {
	  "prefix": "N_0x0225778816fdc28c",
	  "body": [
		"N_0x0225778816fdc28c(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nsome camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. Possibly a cinematic or script-cam version of _0x487A82C650EB7799  \n"
	},
	"N_0x0fb82563989cf4fb()": {
	  "prefix": "N_0x0fb82563989cf4fb",
	  "body": [
		"N_0x0fb82563989cf4fb(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x0a9f2a468b328e74()": {
	  "prefix": "N_0x0a9f2a468b328e74",
	  "body": [
		"N_0x0a9f2a468b328e74(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x12ded8ca53d47ea5()": {
	  "prefix": "N_0x12ded8ca53d47ea5",
	  "body": [
		"N_0x12ded8ca53d47ea5(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nHardcoded to only work in multiplayer.  \n"
	},
	"N_0x17fca7199a530203()": {
	  "prefix": "N_0x17fca7199a530203",
	  "body": [
		"N_0x17fca7199a530203()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0x11fa5d3479c7dd47()": {
	  "prefix": "N_0x11fa5d3479c7dd47",
	  "body": [
		"N_0x11fa5d3479c7dd47(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x1f2300cb7fa7b7f6()": {
	  "prefix": "N_0x1f2300cb7fa7b7f6",
	  "body": [
		"N_0x1f2300cb7fa7b7f6()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0x162f9d995753dc19()": {
	  "prefix": "N_0x162f9d995753dc19",
	  "body": [
		"N_0x162f9d995753dc19()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\ngets some camera far clip  \n"
	},
	"N_0x19cafa3c87f7c2ff()": {
	  "prefix": "N_0x19cafa3c87f7c2ff",
	  "body": [
		"N_0x19cafa3c87f7c2ff()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n\nSeems to return the current type of view  \nexample: // checks if you're currently in first person  \nif ((CAM::_EE778F8C7E1142E2(CAM::_19CAFA3C87F7C2FF()) == 4) && (!__463_$28ED382849B17AFC())) {  \n    UI::_FDEC055AB549E328();  \n    UI::_SET_NOTIFICATION_TEXT_ENTRY(\"REC_FEED_WAR\");  \n    l_CE[0/*1*/] = UI::_DRAW_NOTIFICATION(0, 1);  \n}  \n"
	},
	"N_0x247acbc4abbc9d1c()": {
	  "prefix": "N_0x247acbc4abbc9d1c",
	  "body": [
		"N_0x247acbc4abbc9d1c(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x21e253a7f8da5dfb()": {
	  "prefix": "N_0x21e253a7f8da5dfb",
	  "body": [
		"N_0x21e253a7f8da5dfb(${1:char* vehicleName})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nFrom b617 scripts:  \nCAM::_21E253A7F8DA5DFB(\"DINGHY\");  \nCAM::_21E253A7F8DA5DFB(\"ISSI2\");  \nCAM::_21E253A7F8DA5DFB(\"SPEEDO\");  \n"
	},
	"N_0x271017b9ba825366()": {
	  "prefix": "N_0x271017b9ba825366",
	  "body": [
		"N_0x271017b9ba825366(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x26903d9cd1175f2c()": {
	  "prefix": "N_0x26903d9cd1175f2c",
	  "body": [
		"N_0x26903d9cd1175f2c(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: int\n"
	},
	"N_0x271401846bd26e92()": {
	  "prefix": "N_0x271401846bd26e92",
	  "body": [
		"N_0x271401846bd26e92(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x2a2173e46daecd12()": {
	  "prefix": "N_0x2a2173e46daecd12",
	  "body": [
		"N_0x2a2173e46daecd12(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x2aed6301f67007d5()": {
	  "prefix": "N_0x2aed6301f67007d5",
	  "body": [
		"N_0x2aed6301f67007d5(${1:Entity entity})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nif (ENTITY::DOES_ENTITY_EXIST(l_228)) {  \nCAM::_2AED6301F67007D5(l_228);  \n"
	},
	"N_0x2f7f2b26dd3f18ee()": {
	  "prefix": "N_0x2f7f2b26dd3f18ee",
	  "body": [
		"N_0x2f7f2b26dd3f18ee(${1:float p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x3044240d2e0fa842()": {
	  "prefix": "N_0x3044240d2e0fa842",
	  "body": [
		"N_0x3044240d2e0fa842()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"N_0x4008edf7d6e48175()": {
	  "prefix": "N_0x4008edf7d6e48175",
	  "body": [
		"N_0x4008edf7d6e48175(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x469f2ecdec046337()": {
	  "prefix": "N_0x469f2ecdec046337",
	  "body": [
		"N_0x469f2ecdec046337(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x47b595d60664cffa()": {
	  "prefix": "N_0x47b595d60664cffa",
	  "body": [
		"N_0x47b595d60664cffa(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x48608c3464f58ab4()": {
	  "prefix": "N_0x48608c3464f58ab4",
	  "body": [
		"N_0x48608c3464f58ab4(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x4879e4fe39074cdf()": {
	  "prefix": "N_0x4879e4fe39074cdf",
	  "body": [
		"N_0x4879e4fe39074cdf()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0x49482f9fcd825aaa()": {
	  "prefix": "N_0x49482f9fcd825aaa",
	  "body": [
		"N_0x49482f9fcd825aaa(${1:Entity entity})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x59424bd75174c9b1()": {
	  "prefix": "N_0x59424bd75174c9b1",
	  "body": [
		"N_0x59424bd75174c9b1()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x503f5920162365b2()": {
	  "prefix": "N_0x503f5920162365b2",
	  "body": [
		"N_0x503f5920162365b2(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x5c41e6babc9e2112()": {
	  "prefix": "N_0x5c41e6babc9e2112",
	  "body": [
		"N_0x5c41e6babc9e2112(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x5a43c76f7fc7ba5f()": {
	  "prefix": "N_0x5a43c76f7fc7ba5f",
	  "body": [
		"N_0x5a43c76f7fc7ba5f()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x5c48a1d6e3b33179()": {
	  "prefix": "N_0x5c48a1d6e3b33179",
	  "body": [
		"N_0x5c48a1d6e3b33179(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"N_0x5d7b620dae436138()": {
	  "prefix": "N_0x5d7b620dae436138",
	  "body": [
		"N_0x5d7b620dae436138(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x5f35f6732c3fbba0()": {
	  "prefix": "N_0x5f35f6732c3fbba0",
	  "body": [
		"N_0x5f35f6732c3fbba0(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n"
	},
	"N_0x609278246a29ca34()": {
	  "prefix": "N_0x609278246a29ca34",
	  "body": [
		"N_0x609278246a29ca34(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x62374889a4d59f72()": {
	  "prefix": "N_0x62374889a4d59f72",
	  "body": [
		"N_0x62374889a4d59f72()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x62ecfcfdee7885d6()": {
	  "prefix": "N_0x62ecfcfdee7885d6",
	  "body": [
		"N_0x62ecfcfdee7885d6()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x661b5c8654add825()": {
	  "prefix": "N_0x661b5c8654add825",
	  "body": [
		"N_0x661b5c8654add825(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x6493cf69859b116a()": {
	  "prefix": "N_0x6493cf69859b116a",
	  "body": [
		"N_0x6493cf69859b116a()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x70894bd0915c5bca()": {
	  "prefix": "N_0x70894bd0915c5bca",
	  "body": [
		"N_0x70894bd0915c5bca(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0x705a276ebff3133d()": {
	  "prefix": "N_0x705a276ebff3133d",
	  "body": [
		"N_0x705a276ebff3133d()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"N_0x74bd83ea840f6bc9()": {
	  "prefix": "N_0x74bd83ea840f6bc9",
	  "body": [
		"N_0x74bd83ea840f6bc9()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"N_0x7b8a361c1813fbef()": {
	  "prefix": "N_0x7b8a361c1813fbef",
	  "body": [
		"N_0x7b8a361c1813fbef()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x7bf1a54ae67ac070()": {
	  "prefix": "N_0x7bf1a54ae67ac070",
	  "body": [
		"N_0x7bf1a54ae67ac070(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x80ec114669daeff4()": {
	  "prefix": "N_0x80ec114669daeff4",
	  "body": [
		"N_0x80ec114669daeff4()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\ngets some camera fov  \n"
	},
	"N_0x89215ec747df244a()": {
	  "prefix": "N_0x89215ec747df244a",
	  "body": [
		"N_0x89215ec747df244a(${1:float p0}, ${2:int p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:int p7}, ${9:int p8})"
	  ],
	  "description": "Namespace: CAM\nReturns: Entity\n"
	},
	"N_0x83b8201ed82a9a2d()": {
	  "prefix": "N_0x83b8201ed82a9a2d",
	  "body": [
		"N_0x83b8201ed82a9a2d(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x8bfceb5ea1b161b6()": {
	  "prefix": "N_0x8bfceb5ea1b161b6",
	  "body": [
		"N_0x8bfceb5ea1b161b6()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0x8bbacbf51da047a8()": {
	  "prefix": "N_0x8bbacbf51da047a8",
	  "body": [
		"N_0x8bbacbf51da047a8(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x9e4cfff989258472()": {
	  "prefix": "N_0x9e4cfff989258472",
	  "body": [
		"N_0x9e4cfff989258472()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xa41bcd7213805aac()": {
	  "prefix": "N_0xa41bcd7213805aac",
	  "body": [
		"N_0xa41bcd7213805aac(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x91ef6ee6419e5b97()": {
	  "prefix": "N_0x91ef6ee6419e5b97",
	  "body": [
		"N_0x91ef6ee6419e5b97(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xbf72910d0f26f025()": {
	  "prefix": "N_0xbf72910d0f26f025",
	  "body": [
		"N_0xbf72910d0f26f025()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0xa2767257a320fc82()": {
	  "prefix": "N_0xa2767257a320fc82",
	  "body": [
		"N_0xa2767257a320fc82(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xa6385deb180f319f()": {
	  "prefix": "N_0xa6385deb180f319f",
	  "body": [
		"N_0xa6385deb180f319f(${1:Any p0}, ${2:Any p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xc8391c309684595a()": {
	  "prefix": "N_0xc8391c309684595a",
	  "body": [
		"N_0xc8391c309684595a()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xc2eae3fb8cdbed31()": {
	  "prefix": "N_0xc2eae3fb8cdbed31",
	  "body": [
		"N_0xc2eae3fb8cdbed31(${1:char* p0}, ${2:char* p1}, ${3:char* p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nCAM::_C2EAE3FB8CDBED31(\"SHAKE_CAM_medium\", \"medium\", \"\", 0.5f);  \n"
	},
	"N_0xc8b5c4a79cc18b94()": {
	  "prefix": "N_0xc8b5c4a79cc18b94",
	  "body": [
		"N_0xc8b5c4a79cc18b94(${1:Cam p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xc92717ef615b6704()": {
	  "prefix": "N_0xc92717ef615b6704",
	  "body": [
		"N_0xc92717ef615b6704(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xc91c6c55199308ca()": {
	  "prefix": "N_0xc91c6c55199308ca",
	  "body": [
		"N_0xc91c6c55199308ca(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xced08cbe8ebb97c7()": {
	  "prefix": "N_0xced08cbe8ebb97c7",
	  "body": [
		"N_0xced08cbe8ebb97c7(${1:float p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xca9d2aa3e326d720()": {
	  "prefix": "N_0xca9d2aa3e326d720",
	  "body": [
		"N_0xca9d2aa3e326d720()"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n"
	},
	"N_0xd1b0f412f109ea5d()": {
	  "prefix": "N_0xd1b0f412f109ea5d",
	  "body": [
		"N_0xd1b0f412f109ea5d(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xd1f8363dfad03848()": {
	  "prefix": "N_0xd1f8363dfad03848",
	  "body": [
		"N_0xd1f8363dfad03848(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xccd078c2665d2973()": {
	  "prefix": "N_0xccd078c2665d2973",
	  "body": [
		"N_0xccd078c2665d2973(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0xdb90c6cca48940f1()": {
	  "prefix": "N_0xdb90c6cca48940f1",
	  "body": [
		"N_0xdb90c6cca48940f1(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xd0082607100d7193()": {
	  "prefix": "N_0xd0082607100d7193",
	  "body": [
		"N_0xd0082607100d7193()"
	  ],
	  "description": "Namespace: CAM\nReturns: float\n\nMaybe gets gameplay cam near clip?  \n"
	},
	"N_0xdd79df9f4d26e1c9()": {
	  "prefix": "N_0xdd79df9f4d26e1c9",
	  "body": [
		"N_0xdd79df9f4d26e1c9()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xd7360051c885628b()": {
	  "prefix": "N_0xd7360051c885628b",
	  "body": [
		"N_0xd7360051c885628b()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0xe111a7c0d200cbc5()": {
	  "prefix": "N_0xe111a7c0d200cbc5",
	  "body": [
		"N_0xe111a7c0d200cbc5(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xdc9da9e8789f5246()": {
	  "prefix": "N_0xdc9da9e8789f5246",
	  "body": [
		"N_0xdc9da9e8789f5246()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xe9ea16d6e54cdca4()": {
	  "prefix": "N_0xe9ea16d6e54cdca4",
	  "body": [
		"N_0xe9ea16d6e54cdca4(${1:Vehicle p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0xe827b9382cfb41ba()": {
	  "prefix": "N_0xe827b9382cfb41ba",
	  "body": [
		"N_0xe827b9382cfb41ba(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xeaf0fa793d05c592()": {
	  "prefix": "N_0xeaf0fa793d05c592",
	  "body": [
		"N_0xeaf0fa793d05c592()"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"N_0xf4c8cf9e353afeca()": {
	  "prefix": "N_0xf4c8cf9e353afeca",
	  "body": [
		"N_0xf4c8cf9e353afeca(${1:char* p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSomething to do with shake:  \nCAM::_F4C8CF9E353AFECA(\"HAND_SHAKE\", 0.2);  \n"
	},
	"N_0xf8bdbf3d573049a1()": {
	  "prefix": "N_0xf8bdbf3d573049a1",
	  "body": [
		"N_0xf8bdbf3d573049a1(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xee778f8c7e1142e2()": {
	  "prefix": "N_0xee778f8c7e1142e2",
	  "body": [
		"N_0xee778f8c7e1142e2(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n\ninterprets the result of CAM::_0x19CAFA3C87F7C2FF()  \nexample: // checks if you're currently in first person  \nif ((CAM::_EE778F8C7E1142E2(CAM::_19CAFA3C87F7C2FF()) == 4) && (!__463_$28ED382849B17AFC())) {  \nUI::_FDEC055AB549E328();  \nUI::_SET_NOTIFICATION_TEXT_ENTRY(\"REC_FEED_WAR\");  \nl_CE[0/*1*/] = UI::_DRAW_NOTIFICATION(0, 1);  \n}  \n"
	},
	"N_0xfd3151cd37ea2245()": {
	  "prefix": "N_0xfd3151cd37ea2245",
	  "body": [
		"N_0xfd3151cd37ea2245(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xf55e4046f6f831dc()": {
	  "prefix": "N_0xf55e4046f6f831dc",
	  "body": [
		"N_0xf55e4046f6f831dc(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"OverrideCamSplineMotionBlur()": {
	  "prefix": "OverrideCamSplineMotionBlur",
	  "body": [
		"OverrideCamSplineMotionBlur(${1:Cam cam}, ${2:int p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nMax value for p1 is 15.  \n"
	},
	"OverrideCamSplineVelocity()": {
	  "prefix": "OverrideCamSplineVelocity",
	  "body": [
		"OverrideCamSplineVelocity(${1:Cam cam}, ${2:int p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"PlaySynchronizedCamAnim()": {
	  "prefix": "PlaySynchronizedCamAnim",
	  "body": [
		"PlaySynchronizedCamAnim(${1:Any p0}, ${2:Any p1}, ${3:char* animName}, ${4:char* animDictionary})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nExamples:  \nCAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), \"PLAYER_EXIT_L_CAM\", \"mp_doorbell\");  \nCAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], \"ah3b_attackheli_cam2\", \"missheistfbi3b_helicrash\");  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"PlayCamAnim()": {
	  "prefix": "PlayCamAnim",
	  "body": [
		"PlayCamAnim(${1:Cam cam}, ${2:char* animName}, ${3:char* animDictionary}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:float xRot}, ${8:float yRot}, ${9:float zRot}, ${10:BOOL p9}, ${11:int p10})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nAtleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.  \np9 is unknown at this time.  \np10 throughout all the X360 Scripts is always 2.  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"PointCamAtCoord()": {
	  "prefix": "PointCamAtCoord",
	  "body": [
		"PointCamAtCoord(${1:Cam cam}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"PointCamAtEntity()": {
	  "prefix": "PointCamAtEntity",
	  "body": [
		"PointCamAtEntity(${1:Cam cam}, ${2:Entity entity}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\np5 always seems to be 1 i.e TRUE  \n"
	},
	"N_0xc819f3cbb62bf692()": {
	  "prefix": "N_0xc819f3cbb62bf692",
	  "body": "N_0xc819f3cbb62bf692",
	  "description": "OLD NAME, PLEASE USE RenderFirstPersonCam INSTEAD!"
	},
	"RenderFirstPersonCam()": {
	  "prefix": "RenderFirstPersonCam",
	  "body": [
		"RenderFirstPersonCam(${1:BOOL render}, ${2:float p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nThis native makes the gameplay camera zoom into first person/third person with a special effect.  \nFor example, if you were first person in a mission and after the cutscene ends, the camera would then zoom into the first person camera view.  \nif (CAM::GET_FOLLOW_PED_CAM_VIEW_MODE() != 4)  \n           CAM::_C819F3CBB62BF692(1, 0, 3, 0)  \nThis makes the camera zoom in to first person.  \n--------------------------------------------  \n1st Param Options: 0 or 1 (Changes quit often, toggle?)  \n2nd Param Options: 0, 0f, 1f, 3.8f, 10f, 20f (Mostly 0)   \n3rd Param Options: 3, 2, 1 (Mostly 3);  \nNote for the 2nd param 10f (offroad_race.c) and 3rd param 20f (range_modern.c) are the only times those 2 high floats are called.  \nNote for the 3rd param 2 is only ever set in (franklin0.c), but it also sets it as 3. (0, 0, 3) ||(0, 0f, 2) || (0, 0, 3)  \n\nOld name: N_0xc819f3cbb62bf692"
	},
	"PointCamAtPedBone()": {
	  "prefix": "PointCamAtPedBone",
	  "body": [
		"PointCamAtPedBone(${1:Cam cam}, ${2:int ped}, ${3:int boneIndex}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nParameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.  \n"
	},
	"RenderScriptCams()": {
	  "prefix": "RenderScriptCams",
	  "body": [
		"RenderScriptCams(${1:BOOL render}, ${2:BOOL ease}, ${3:int easeTime}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nease - smooth transition between the camera's positions  \neaseTime - Time in milliseconds for the transition to happen  \nIf you have created a script (rendering) camera, and want to go back to the   \ncharacter (gameplay) camera, call this native with render set to 0.  \nSetting ease to 1 will smooth the transition.  \n"
	},
	"SetCamActive()": {
	  "prefix": "SetCamActive",
	  "body": [
		"SetCamActive(${1:Cam cam}, ${2:BOOL active})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSet camera as active/inactive.  \n"
	},
	"SetCamActiveWithInterp()": {
	  "prefix": "SetCamActiveWithInterp",
	  "body": [
		"SetCamActiveWithInterp(${1:Cam camTo}, ${2:Cam camFrom}, ${3:int duration}, ${4:int easeLocation}, ${5:int easeRotation})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nPrevious declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...  \n"
	},
	"SetCamAffectsAiming()": {
	  "prefix": "SetCamAffectsAiming",
	  "body": [
		"SetCamAffectsAiming(${1:Cam cam}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nAllows you to aim and shoot at the direction the camera is facing.  \n"
	},
	"SetCamAnimCurrentPhase()": {
	  "prefix": "SetCamAnimCurrentPhase",
	  "body": [
		"SetCamAnimCurrentPhase(${1:Cam cam}, ${2:float phase})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamCoord()": {
	  "prefix": "SetCamCoord",
	  "body": [
		"SetCamCoord(${1:Cam cam}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the position of the cam.  \n"
	},
	"N_0x7dd234d6f3914c5b()": {
	  "prefix": "N_0x7dd234d6f3914c5b",
	  "body": "N_0x7dd234d6f3914c5b",
	  "description": "OLD NAME, PLEASE USE SetCamDofFnumberOfLens INSTEAD!"
	},
	"SetCamDofFnumberOfLens()": {
	  "prefix": "SetCamDofFnumberOfLens",
	  "body": [
		"SetCamDofFnumberOfLens(${1:Cam camera}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nThis native has its name defined inside its codE  \n\nOld name: N_0x7dd234d6f3914c5b"
	},
	"SetCamDebugName()": {
	  "prefix": "SetCamDebugName",
	  "body": [
		"SetCamDebugName(${1:Cam camera}, ${2:char* name})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"N_0xc669eea5d031b7de()": {
	  "prefix": "N_0xc669eea5d031b7de",
	  "body": "N_0xc669eea5d031b7de",
	  "description": "OLD NAME, PLEASE USE SetCamDofFocusDistanceBias INSTEAD!"
	},
	"SetCamDofFocusDistanceBias()": {
	  "prefix": "SetCamDofFocusDistanceBias",
	  "body": [
		"SetCamDofFocusDistanceBias(${1:Cam camera}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nThis native has a name defined inside its code  \n\nOld name: N_0xc669eea5d031b7de"
	},
	"N_0xc3654a441402562d()": {
	  "prefix": "N_0xc3654a441402562d",
	  "body": "N_0xc3654a441402562d",
	  "description": "OLD NAME, PLEASE USE SetCamDofMaxNearInFocusDistance INSTEAD!"
	},
	"SetCamDofMaxNearInFocusDistance()": {
	  "prefix": "SetCamDofMaxNearInFocusDistance",
	  "body": [
		"SetCamDofMaxNearInFocusDistance(${1:Cam camera}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nThis native has a name defined inside its code  \n\nOld name: N_0xc3654a441402562d"
	},
	"N_0x2c654b4943bddf7c()": {
	  "prefix": "N_0x2c654b4943bddf7c",
	  "body": "N_0x2c654b4943bddf7c",
	  "description": "OLD NAME, PLEASE USE SetCamDofMaxNearInFocusDistanceBlendLevel INSTEAD!"
	},
	"SetCamDofMaxNearInFocusDistanceBlendLevel()": {
	  "prefix": "SetCamDofMaxNearInFocusDistanceBlendLevel",
	  "body": [
		"SetCamDofMaxNearInFocusDistanceBlendLevel(${1:Cam camera}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nThis native has a name defined inside its code  \n\nOld name: N_0x2c654b4943bddf7c"
	},
	"SetCamDofPlanes()": {
	  "prefix": "SetCamDofPlanes",
	  "body": [
		"SetCamDofPlanes(${1:Cam cam}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamDofStrength()": {
	  "prefix": "SetCamDofStrength",
	  "body": [
		"SetCamDofStrength(${1:Cam cam}, ${2:float dofStrength})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamEffect()": {
	  "prefix": "SetCamEffect",
	  "body": [
		"SetCamEffect(${1:int p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nif p0 is 0, effect is cancelled  \nif p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.  \nif p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.  \n"
	},
	"SetCamFarDof()": {
	  "prefix": "SetCamFarDof",
	  "body": [
		"SetCamFarDof(${1:Cam cam}, ${2:float farDOF})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamFarClip()": {
	  "prefix": "SetCamFarClip",
	  "body": [
		"SetCamFarClip(${1:Cam cam}, ${2:float farClip})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamFov()": {
	  "prefix": "SetCamFov",
	  "body": [
		"SetCamFov(${1:Cam cam}, ${2:float fieldOfView})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the field of view of the cam.  \n---------------------------------------------  \nMin: 1.0f  \nMax: 130.0f  \n"
	},
	"SetCamInheritRollVehicle()": {
	  "prefix": "SetCamInheritRollVehicle",
	  "body": [
		"SetCamInheritRollVehicle(${1:Cam cam}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nThe native seems to only be called once.  \nThe native is used as so,  \nCAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));  \nIn the exile1 script.  \n"
	},
	"SetCamMotionBlurStrength()": {
	  "prefix": "SetCamMotionBlurStrength",
	  "body": [
		"SetCamMotionBlurStrength(${1:Cam cam}, ${2:float strength})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamNearClip()": {
	  "prefix": "SetCamNearClip",
	  "body": [
		"SetCamNearClip(${1:Cam cam}, ${2:float nearClip})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamParams()": {
	  "prefix": "SetCamParams",
	  "body": [
		"SetCamParams(${1:Cam cam}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float fieldOfView}, ${9:Any p8}, ${10:int p9}, ${11:int p10}, ${12:int p11})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamNearDof()": {
	  "prefix": "SetCamNearDof",
	  "body": [
		"SetCamNearDof(${1:Cam cam}, ${2:float nearDOF})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamShakeAmplitude()": {
	  "prefix": "SetCamShakeAmplitude",
	  "body": [
		"SetCamShakeAmplitude(${1:Cam cam}, ${2:float amplitude})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamSplinePhase()": {
	  "prefix": "SetCamSplinePhase",
	  "body": [
		"SetCamSplinePhase(${1:Cam cam}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetCamRot()": {
	  "prefix": "SetCamRot",
	  "body": [
		"SetCamRot(${1:Cam cam}, ${2:float rotX}, ${3:float rotY}, ${4:float rotZ}, ${5:int rotationOrder})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the rotation of the cam.  \nLast parameter unknown.  \nLast parameter seems to always be set to 2.  \n"
	},
	"N_0xf9d02130ecdd1d77()": {
	  "prefix": "N_0xf9d02130ecdd1d77",
	  "body": "N_0xf9d02130ecdd1d77",
	  "description": "OLD NAME, PLEASE USE SetCameraRange INSTEAD!"
	},
	"SetCameraRange()": {
	  "prefix": "SetCameraRange",
	  "body": [
		"SetCameraRange(${1:Cam cam}, ${2:float range})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nOld name: N_0xf9d02130ecdd1d77"
	},
	"SetCamSplineDuration()": {
	  "prefix": "SetCamSplineDuration",
	  "body": [
		"SetCamSplineDuration(${1:int cam}, ${2:int timeDuration})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nI named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.  \n"
	},
	"SetCinematicCamShakeAmplitude()": {
	  "prefix": "SetCinematicCamShakeAmplitude",
	  "body": [
		"SetCinematicCamShakeAmplitude(${1:float p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x0af7b437918103b3()": {
	  "prefix": "N_0x0af7b437918103b3",
	  "body": "N_0x0af7b437918103b3",
	  "description": "OLD NAME, PLEASE USE SetFirstPersonCamNearClip INSTEAD!"
	},
	"SetFirstPersonCamNearClip()": {
	  "prefix": "SetFirstPersonCamNearClip",
	  "body": [
		"SetFirstPersonCamNearClip(${1:float distance})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the near clipping plane of the first person camera.  \n\nOld name: N_0x0af7b437918103b3"
	},
	"SetCamUseShallowDofMode()": {
	  "prefix": "SetCamUseShallowDofMode",
	  "body": [
		"SetCamUseShallowDofMode(${1:Cam cam}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0xbcfc632db7673bf0()": {
	  "prefix": "N_0xbcfc632db7673bf0",
	  "body": "N_0xbcfc632db7673bf0",
	  "description": "OLD NAME, PLEASE USE SetFirstPersonCamPitchRange INSTEAD!"
	},
	"SetFirstPersonCamPitchRange()": {
	  "prefix": "SetFirstPersonCamPitchRange",
	  "body": [
		"SetFirstPersonCamPitchRange(${1:float minAngle}, ${2:float maxAngle})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSimilar to _CLAMP_GAMEPLAY_CAM_PITCH except this is specifically for the FP camera, and it only lets you clamp the pitch within the normal range.  \n\nOld name: N_0xbcfc632db7673bf0"
	},
	"SetCinematicButtonActive()": {
	  "prefix": "SetCinematicButtonActive",
	  "body": [
		"SetCinematicButtonActive(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetFollowPedCamViewMode()": {
	  "prefix": "SetFollowPedCamViewMode",
	  "body": [
		"SetFollowPedCamViewMode(${1:int viewMode})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the type of Player camera:  \n0 - Third Person Close  \n1 - Third Person Mid  \n2 - Third Person Far  \n4 - First Person  \n"
	},
	"SetCinematicModeActive()": {
	  "prefix": "SetCinematicModeActive",
	  "body": [
		"SetCinematicModeActive(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\np0 = 0/1 or true/false  \nIt doesn't seems to work  \n"
	},
	"SetGameplayCamRawPitch()": {
	  "prefix": "SetGameplayCamRawPitch",
	  "body": [
		"SetGameplayCamRawPitch(${1:float pitch})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetGameplayCamRawYaw()": {
	  "prefix": "SetGameplayCamRawYaw",
	  "body": [
		"SetGameplayCamRawYaw(${1:float yaw})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nDoes nothing  \n"
	},
	"SetFollowPedCamCutsceneChat()": {
	  "prefix": "SetFollowPedCamCutsceneChat",
	  "body": [
		"SetFollowPedCamCutsceneChat(${1:char* p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: BOOL\n\nFrom the b617d scripts:  \nCAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(\"FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA\", 0);  \n CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(\"FOLLOW_PED_ON_EXILE1_LADDER_CAMERA\", 1500);  \n CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 0);  \n CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 3000);  \n CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(\"FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA\", 0);  \nCAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(\"FOLLOW_PED_SKY_DIVING_CAMERA\", 0);  \n"
	},
	"SetGameplayCamRelativePitch()": {
	  "prefix": "SetGameplayCamRelativePitch",
	  "body": [
		"SetGameplayCamRelativePitch(${1:float x}, ${2:float Value2})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the camera pitch.  \nParameters:  \nx = pitches the camera on the x axis.  \nValue2 = always seems to be hex 0x3F800000 (1.000000 float).  \n"
	},
	"SetFollowVehicleCamViewMode()": {
	  "prefix": "SetFollowVehicleCamViewMode",
	  "body": [
		"SetFollowVehicleCamViewMode(${1:int viewMode})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the type of Player camera in vehicles:  \n0 - Third Person Close  \n1 - Third Person Mid  \n2 - Third Person Far  \n4 - First Person  \n"
	},
	"SetGameplayCoordHint()": {
	  "prefix": "SetGameplayCoordHint",
	  "body": [
		"SetGameplayCoordHint(${1:float x}, ${2:float y}, ${3:float z}, ${4:int duration}, ${5:int blendOutDuration}, ${6:int blendInDuration}, ${7:int unk})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nExample C#:  \nFunction.Call(Hash.SET_GAMEPLAY_COORD_HINT, position.X, position.Y, position.Z, hintDuration, 1500, 1000, 0);  \nThe camera look-at is canceled if the user is already panning the camera around.  \n"
	},
	"SetFollowVehicleCamZoomLevel()": {
	  "prefix": "SetFollowVehicleCamZoomLevel",
	  "body": [
		"SetFollowVehicleCamZoomLevel(${1:int zoomLevel})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetGameplayEntityHint()": {
	  "prefix": "SetGameplayEntityHint",
	  "body": [
		"SetGameplayEntityHint(${1:Entity entity}, ${2:float xOffset}, ${3:float yOffset}, ${4:float zOffset}, ${5:BOOL p4}, ${6:int p5}, ${7:int p6}, ${8:int p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\np6 & p7 - possibly length or time  \n"
	},
	"SetGameplayObjectHint()": {
	  "prefix": "SetGameplayObjectHint",
	  "body": [
		"SetGameplayObjectHint(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetGameplayCamRelativeHeading()": {
	  "prefix": "SetGameplayCamRelativeHeading",
	  "body": [
		"SetGameplayCamRelativeHeading(${1:float heading})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the camera position relative to heading in float from -360 to +360.  \nHeading is alwyas 0 in aiming camera.  \n"
	},
	"SetGameplayVehicleHint()": {
	  "prefix": "SetGameplayVehicleHint",
	  "body": [
		"SetGameplayVehicleHint(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetGameplayCamShakeAmplitude()": {
	  "prefix": "SetGameplayCamShakeAmplitude",
	  "body": [
		"SetGameplayCamShakeAmplitude(${1:float amplitude})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script \"drunk_controller.ysc.c4\" to simulate making the player drunk.  \n"
	},
	"N_0x42156508606de65e()": {
	  "prefix": "N_0x42156508606de65e",
	  "body": "N_0x42156508606de65e",
	  "description": "OLD NAME, PLEASE USE SetThirdPersonAimCamNearClip INSTEAD!"
	},
	"SetThirdPersonAimCamNearClip()": {
	  "prefix": "SetThirdPersonAimCamNearClip",
	  "body": [
		"SetThirdPersonAimCamNearClip(${1:float distance})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nSets the near clipping plane of the third person aim camera.  \n\nOld name: N_0x42156508606de65e"
	},
	"SetGameplayHintFov()": {
	  "prefix": "SetGameplayHintFov",
	  "body": [
		"SetGameplayHintFov(${1:float FOV})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetUseHiDof()": {
	  "prefix": "SetUseHiDof",
	  "body": [
		"SetUseHiDof()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"ShakeCam()": {
	  "prefix": "ShakeCam",
	  "body": [
		"ShakeCam(${1:Cam cam}, ${2:char* type}, ${3:float amplitude})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nPossible shake types (updated b617d):  \nDEATH_FAIL_IN_EFFECT_SHAKE  \nDRUNK_SHAKE  \nFAMILY5_DRUG_TRIP_SHAKE  \nHAND_SHAKE  \nJOLT_SHAKE  \nLARGE_EXPLOSION_SHAKE  \nMEDIUM_EXPLOSION_SHAKE  \nSMALL_EXPLOSION_SHAKE  \nROAD_VIBRATION_SHAKE  \nSKY_DIVING_SHAKE  \nVIBRATE_SHAKE  \n"
	},
	"SetGameplayPedHint()": {
	  "prefix": "SetGameplayPedHint",
	  "body": [
		"SetGameplayPedHint(${1:Ped p0}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:BOOL p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"ShakeGameplayCam()": {
	  "prefix": "ShakeGameplayCam",
	  "body": [
		"ShakeGameplayCam(${1:char* shakeName}, ${2:float intensity})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nPossible shake types (updated b617d):  \nDEATH_FAIL_IN_EFFECT_SHAKE  \nDRUNK_SHAKE  \nFAMILY5_DRUG_TRIP_SHAKE  \nHAND_SHAKE  \nJOLT_SHAKE  \nLARGE_EXPLOSION_SHAKE  \nMEDIUM_EXPLOSION_SHAKE  \nSMALL_EXPLOSION_SHAKE  \nROAD_VIBRATION_SHAKE  \nSKY_DIVING_SHAKE  \nVIBRATE_SHAKE  \n"
	},
	"N_0x9dfe13ecdc1ec196()": {
	  "prefix": "N_0x9dfe13ecdc1ec196",
	  "body": "N_0x9dfe13ecdc1ec196",
	  "description": "OLD NAME, PLEASE USE SetTimeIdleDrop INSTEAD!"
	},
	"SetTimeIdleDrop()": {
	  "prefix": "SetTimeIdleDrop",
	  "body": [
		"SetTimeIdleDrop(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nhash collision?  \n\nOld name: N_0x9dfe13ecdc1ec196"
	},
	"StopCamPointing()": {
	  "prefix": "StopCamPointing",
	  "body": [
		"StopCamPointing(${1:Cam cam})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"SetWidescreenBorders()": {
	  "prefix": "SetWidescreenBorders",
	  "body": [
		"SetWidescreenBorders(${1:BOOL p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: Any\n"
	},
	"ShakeCinematicCam()": {
	  "prefix": "ShakeCinematicCam",
	  "body": [
		"ShakeCinematicCam(${1:char* p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\np0 argument found in the b617d scripts: \"DRUNK_SHAKE\"  \n"
	},
	"StopCinematicCamShaking()": {
	  "prefix": "StopCinematicCamShaking",
	  "body": [
		"StopCinematicCamShaking(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"StopCamShaking()": {
	  "prefix": "StopCamShaking",
	  "body": [
		"StopCamShaking(${1:Cam cam}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"StopCutsceneCamShaking()": {
	  "prefix": "StopCutsceneCamShaking",
	  "body": [
		"StopCutsceneCamShaking()"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"StopCinematicShot()": {
	  "prefix": "StopCinematicShot",
	  "body": [
		"StopCinematicShot(${1:Any p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"StopGameplayHint()": {
	  "prefix": "StopGameplayHint",
	  "body": [
		"StopGameplayHint(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"StopGameplayCamShaking()": {
	  "prefix": "StopGameplayCamShaking",
	  "body": [
		"StopGameplayCamShaking(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n"
	},
	"N_0x1c9d7949fa533490()": {
	  "prefix": "N_0x1c9d7949fa533490",
	  "body": "N_0x1c9d7949fa533490",
	  "description": "OLD NAME, PLEASE USE StopScriptGlobalShaking INSTEAD!"
	},
	"StopScriptGlobalShaking()": {
	  "prefix": "StopScriptGlobalShaking",
	  "body": [
		"StopScriptGlobalShaking(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CAM\nReturns: void\n\nIn drunk_controller.c4, sub_309  \nif (CAM::_C912AF078AF19212()) {  \n    CAM::_1C9D7949FA533490(0);  \n}  \n\nOld name: N_0x1c9d7949fa533490"
	},
	"AddMinimapOverlay()": {
	  "prefix": "AddMinimapOverlay",
	  "body": [
		"AddMinimapOverlay(${1:char* name})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nLoads a minimap overlay from a GFx file in the current resource."
	},
	"AddReplaceTexture()": {
	  "prefix": "AddReplaceTexture",
	  "body": [
		"AddReplaceTexture(${1:char* origTxd}, ${2:char* origTxn}, ${3:char* newTxd}, ${4:char* newTxn})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nExperimental natives, please do not use in a live environment."
	},
	"AddTextEntry()": {
	  "prefix": "AddTextEntry",
	  "body": [
		"AddTextEntry(${1:char* entryKey}, ${2:char* entryText})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"AddTextEntryByHash()": {
	  "prefix": "AddTextEntryByHash",
	  "body": [
		"AddTextEntryByHash(${1:Hash entryKey}, ${2:char* entryText})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"CanPlayerStartCommerceSession()": {
	  "prefix": "CanPlayerStartCommerceSession",
	  "body": [
		"CanPlayerStartCommerceSession(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\nReturns whether or not the specified player has enough information to start a commerce session for."
	},
	"CallMinimapScaleformFunction()": {
	  "prefix": "CallMinimapScaleformFunction",
	  "body": [
		"CallMinimapScaleformFunction(${1:int miniMap}, ${2:char* fnName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\nThis is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay."
	},
	"CancelEvent()": {
	  "prefix": "CancelEvent",
	  "body": [
		"CancelEvent()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\nCancels the currently executing event."
	},
	"CommitRuntimeTexture()": {
	  "prefix": "CommitRuntimeTexture",
	  "body": [
		"CommitRuntimeTexture(${1:long tex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nCommits the backing pixels to the specified runtime texture."
	},
	"CreateDui()": {
	  "prefix": "CreateDui",
	  "body": [
		"CreateDui(${1:char* url}, ${2:int width}, ${3:int height})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: long\nCreates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE."
	},
	"CreateRuntimeTexture()": {
	  "prefix": "CreateRuntimeTexture",
	  "body": [
		"CreateRuntimeTexture(${1:long txd}, ${2:char* txn}, ${3:int width}, ${4:int height})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: long\nCreates a blank runtime texture."
	},
	"CreateRuntimeTextureFromDuiHandle()": {
	  "prefix": "CreateRuntimeTextureFromDuiHandle",
	  "body": [
		"CreateRuntimeTextureFromDuiHandle(${1:long txd}, ${2:long txn}, ${3:char* duiHandle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: long\nCreates a runtime texture from a DUI handle."
	},
	"CreateRuntimeTextureFromImage()": {
	  "prefix": "CreateRuntimeTextureFromImage",
	  "body": [
		"CreateRuntimeTextureFromImage(${1:long txd}, ${2:char* txn}, ${3:char* fileName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: long\nCreates a runtime texture from the specified file in the current resource."
	},
	"CreateRuntimeTxd()": {
	  "prefix": "CreateRuntimeTxd",
	  "body": [
		"CreateRuntimeTxd(${1:char* name})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: long\nCreates a runtime texture dictionary with the specified name.\nExample:\n\nlua\nlocal txd = CreateRuntimeTxd('meow')\n"
	},
	"DeleteFunctionReference()": {
	  "prefix": "DeleteFunctionReference",
	  "body": [
		"DeleteFunctionReference(${1:char* referenceIdentity})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\n"
	},
	"DeleteResourceKvp()": {
	  "prefix": "DeleteResourceKvp",
	  "body": [
		"DeleteResourceKvp(${1:char* key})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"DestroyDui()": {
	  "prefix": "DestroyDui",
	  "body": [
		"DestroyDui(${1:long duiObject})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nDestroys a DUI browser."
	},
	"DoesPlayerOwnSku()": {
	  "prefix": "DoesPlayerOwnSku",
	  "body": [
		"DoesPlayerOwnSku(${1:char* playerSrc}, ${2:int skuId})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\nRequests whether or not the player owns the specified SKU."
	},
	"DoesEntityExist()": {
	  "prefix": "DoesEntityExist",
	  "body": [
		"DoesEntityExist(${1:Object entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"DuplicateFunctionReference()": {
	  "prefix": "DuplicateFunctionReference",
	  "body": [
		"DuplicateFunctionReference(${1:char* referenceIdentity})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\n"
	},
	"DropPlayer()": {
	  "prefix": "DropPlayer",
	  "body": [
		"DropPlayer(${1:char* playerSrc}, ${2:char* reason})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"EndFindKvp()": {
	  "prefix": "EndFindKvp",
	  "body": [
		"EndFindKvp(${1:int handle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"EnableEnhancedHostSupport()": {
	  "prefix": "EnableEnhancedHostSupport",
	  "body": [
		"EnableEnhancedHostSupport(${1:BOOL enabled})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"EndFindPed()": {
	  "prefix": "EndFindPed",
	  "body": [
		"EndFindPed(${1:int findHandle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"EndFindObject()": {
	  "prefix": "EndFindObject",
	  "body": [
		"EndFindObject(${1:int findHandle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"EndFindPickup()": {
	  "prefix": "EndFindPickup",
	  "body": [
		"EndFindPickup(${1:int findHandle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"EndFindVehicle()": {
	  "prefix": "EndFindVehicle",
	  "body": [
		"EndFindVehicle(${1:int findHandle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"ExecuteCommand()": {
	  "prefix": "ExecuteCommand",
	  "body": [
		"ExecuteCommand(${1:char* commandString})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\n"
	},
	"ExperimentalLoadCloneCreate()": {
	  "prefix": "ExperimentalLoadCloneCreate",
	  "body": [
		"ExperimentalLoadCloneCreate(${1:char* data}, ${2:int objectId}, ${3:char* tree})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: Entity\nThis native is not implemented."
	},
	"ExperimentalLoadCloneSync()": {
	  "prefix": "ExperimentalLoadCloneSync",
	  "body": [
		"ExperimentalLoadCloneSync(${1:Entity entity}, ${2:char* data})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThis native is not implemented."
	},
	"ExperimentalSaveCloneCreate()": {
	  "prefix": "ExperimentalSaveCloneCreate",
	  "body": [
		"ExperimentalSaveCloneCreate(${1:Entity entity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: char*\nThis native is not implemented."
	},
	"ExperimentalSaveCloneSync()": {
	  "prefix": "ExperimentalSaveCloneSync",
	  "body": [
		"ExperimentalSaveCloneSync(${1:Entity entity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: char*\nThis native is not implemented."
	},
	"FindFirstObject()": {
	  "prefix": "FindFirstObject",
	  "body": [
		"FindFirstObject(${1:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"FindFirstPickup()": {
	  "prefix": "FindFirstPickup",
	  "body": [
		"FindFirstPickup(${1:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"FindFirstPed()": {
	  "prefix": "FindFirstPed",
	  "body": [
		"FindFirstPed(${1:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"FindKvp()": {
	  "prefix": "FindKvp",
	  "body": [
		"FindKvp(${1:int handle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: char*\n"
	},
	"FindFirstVehicle()": {
	  "prefix": "FindFirstVehicle",
	  "body": [
		"FindFirstVehicle(${1:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"FindNextObject()": {
	  "prefix": "FindNextObject",
	  "body": [
		"FindNextObject(${1:int findHandle}, ${2:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"FindNextPed()": {
	  "prefix": "FindNextPed",
	  "body": [
		"FindNextPed(${1:int findHandle}, ${2:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"FindNextPickup()": {
	  "prefix": "FindNextPickup",
	  "body": [
		"FindNextPickup(${1:int findHandle}, ${2:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"FindNextVehicle()": {
	  "prefix": "FindNextVehicle",
	  "body": [
		"FindNextVehicle(${1:int findHandle}, ${2:Entity* outEntity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"FlagServerAsPrivate()": {
	  "prefix": "FlagServerAsPrivate",
	  "body": [
		"FlagServerAsPrivate(${1:BOOL private_})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"GetAllVehicles()": {
	  "prefix": "GetAllVehicles",
	  "body": [
		"GetAllVehicles(${1:Any* vehArray})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetActivePlayers()": {
	  "prefix": "GetActivePlayers",
	  "body": [
		"GetActivePlayers()"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: object\nReturns all player indices for 'active' physical players known to the client.\nThe data returned adheres to the following layout:\n\n\n[127, 42, 13, 37]\n"
	},
	"GetCamMatrix()": {
	  "prefix": "GetCamMatrix",
	  "body": [
		"GetCamMatrix(${1:Cam camera}, ${2:Vector3* rightVector}, ${3:Vector3* forwardVector}, ${4:Vector3* upVector}, ${5:Vector3* position})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nReturns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse."
	},
	"GetConsoleBuffer()": {
	  "prefix": "GetConsoleBuffer",
	  "body": [
		"GetConsoleBuffer()"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\nReturns the current console output buffer."
	},
	"GetConvarInt()": {
	  "prefix": "GetConvarInt",
	  "body": [
		"GetConvarInt(${1:char* varName}, ${2:int default_})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: int\n"
	},
	"GetConvar()": {
	  "prefix": "GetConvar",
	  "body": [
		"GetConvar(${1:char* varName}, ${2:char* default_})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\n"
	},
	"GetCurrentServerEndpoint()": {
	  "prefix": "GetCurrentServerEndpoint",
	  "body": [
		"GetCurrentServerEndpoint()"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: char*\nReturns the peer address of the remote game server that the user is currently connected to."
	},
	"GetCurrentResourceName()": {
	  "prefix": "GetCurrentResourceName",
	  "body": [
		"GetCurrentResourceName()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\nReturns the name of the currently executing resource."
	},
	"GetEntityCoords()": {
	  "prefix": "GetEntityCoords",
	  "body": [
		"GetEntityCoords(${1:Entity entity}, ${2:BOOL alive})"
	  ],
	  "description": "CFX API Set: client\nNamespace: ENTITY\nReturns: Vector3\nGets the current coordinates for a specified entity."
	},
	"GetDuiHandle()": {
	  "prefix": "GetDuiHandle",
	  "body": [
		"GetDuiHandle(${1:long duiObject})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: char*\nReturns the NUI window handle for a specified DUI browser object."
	},
	"GetEntityHealth()": {
	  "prefix": "GetEntityHealth",
	  "body": [
		"GetEntityHealth(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: int\n\nReturns an integer value of entity's current health.  \nExample of range for ped:  \n- Player [0 to 200]  \n- Ped [100 to 200]  \n- Vehicle [0 to 1000]  \n- Object [0 to 1000]  \nHealth is actually a float value but this native casts it to int.  \nIn order to get the actual value, do:  \nfloat health = *(float *)(entityAddress + 0x280);  \n"
	},
	"GetEntityHeading()": {
	  "prefix": "GetEntityHeading",
	  "body": [
		"GetEntityHeading(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nReturns the heading of the entity in degrees. Also know as the \"Yaw\" of an entity.  \n"
	},
	"GetEntityMaxHealth()": {
	  "prefix": "GetEntityMaxHealth",
	  "body": [
		"GetEntityMaxHealth(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: int\n\nReturn an integer value of entity's maximum health.  \nExample:  \n- Player = 200  \n"
	},
	"GetEntityModel()": {
	  "prefix": "GetEntityModel",
	  "body": [
		"GetEntityModel(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Hash\n\nReturns the model hash from the entity  \nSometimes throws an exception, idk what causes it though.  \n"
	},
	"GetEntityRotation()": {
	  "prefix": "GetEntityRotation",
	  "body": [
		"GetEntityRotation(${1:Entity entity}, ${2:int rotationOrder})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nrotationOrder refers to the order yaw pitch roll is applied  \nvalue ranges from 0 to 5. What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.   \nUnsure what value corresponds to what rotation order, more testing will be needed for that.  \n------  \nrotationOrder is usually 2 in scripts  \n------  \nENTITY::GET_ENTITY_ROTATION(Any p0, false or true);  \nif false than return from -180 to 180  \nif true than return from -90 to 90  \n---  \nAs said above, the value of p1 affects the outcome. R* uses 1 and 2 instead of 0 and 1, so I marked it as an int.  \nWhat it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll:  \nwww.allstar.fiu.edu/aero/images/pic5-1.gif  \nI don't know why it returns a Vec3, but sometimes the values x and y go negative, yet they're always zero. Just use GET_ENTITY_PITCH and GET_ENTITY_ROLL for pitch and roll.  \n"
	},
	"GetEntityScript()": {
	  "prefix": "GetEntityScript",
	  "body": [
		"GetEntityScript(${1:Entity entity}, ${2:ScrHandle* script})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: char*\n\nAll ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.  \n"
	},
	"GetEntityPopulationType()": {
	  "prefix": "GetEntityPopulationType",
	  "body": [
		"GetEntityPopulationType(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: int\nGets an entity's population type.\n\n**Valid population types:**\n\ncpp\nenum ePopulationType\n{\n\tPOPTYPE_UNKNOWN = 0,\n\tPOPTYPE_RANDOM_PERMANENT,\n\tPOPTYPE_RANDOM_PARKED,\n\tPOPTYPE_RANDOM_PATROL,\n\tPOPTYPE_RANDOM_SCENARIO,\n\tPOPTYPE_RANDOM_AMBIENT,\n\tPOPTYPE_PERMANENT,\n\tPOPTYPE_MISSION,\n\tPOPTYPE_REPLAY,\n\tPOPTYPE_CACHE,\n\tPOPTYPE_TOOL\n};\n"
	},
	"GetEntityRotationVelocity()": {
	  "prefix": "GetEntityRotationVelocity",
	  "body": [
		"GetEntityRotationVelocity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nANGULAR_VELOCITY*  \n"
	},
	"GetEntityVelocity()": {
	  "prefix": "GetEntityVelocity",
	  "body": [
		"GetEntityVelocity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nthe unit is m/s along each axis  \nGET_ENTITY_VELOCITY(aEntity) is the same as GET_ENTITY_SPEED_VECTOR(aEntity,false)  \n"
	},
	"GetEntityType()": {
	  "prefix": "GetEntityType",
	  "body": [
		"GetEntityType(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: int\n\nReturns:  \n0 = no entity  \n1 = ped  \n2 = vehicle  \n3 = object  \nThis is weird, because in memory atleast on xbox360 it stores it from testing with a variety of (ped, vehicle, and objects).  \n03   \n04   \n05   \nThe above is more then likely true for the native's return, but if you were to skip using the native it's a bit weird it returns different results.  \n"
	},
	"GetHashKey()": {
	  "prefix": "GetHashKey",
	  "body": [
		"GetHashKey(${1:char* string})"
	  ],
	  "description": "Namespace: MISC\nReturns: Hash\nGets the (case-insensitive, lower-cased) hash value for the passed string. This uses the 'Jenkins one-at-a-time' hashing\nalgorithm."
	},
	"GetHostId()": {
	  "prefix": "GetHostId",
	  "body": [
		"GetHostId()"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n"
	},
	"GetGameTimer()": {
	  "prefix": "GetGameTimer",
	  "body": [
		"GetGameTimer()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"GetInstanceId()": {
	  "prefix": "GetInstanceId",
	  "body": [
		"GetInstanceId()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorEntitiesExtents()": {
	  "prefix": "GetInteriorEntitiesExtents",
	  "body": [
		"GetInteriorEntitiesExtents(${1:int interiorId}, ${2:float* bbMinX}, ${3:float* bbMinY}, ${4:float* bbMinZ}, ${5:float* bbMaxX}, ${6:float* bbMaxY}, ${7:float* bbMaxZ})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"GetInteriorPortalCornerPosition()": {
	  "prefix": "GetInteriorPortalCornerPosition",
	  "body": [
		"GetInteriorPortalCornerPosition(${1:int interiorId}, ${2:int portalIndex}, ${3:int cornerIndex}, ${4:float* posX}, ${5:float* posY}, ${6:float* posZ})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"GetInteriorPortalCount()": {
	  "prefix": "GetInteriorPortalCount",
	  "body": [
		"GetInteriorPortalCount(${1:int interiorId})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorPortalFlag()": {
	  "prefix": "GetInteriorPortalFlag",
	  "body": [
		"GetInteriorPortalFlag(${1:int interiorId}, ${2:int portalIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorPortalRoomFrom()": {
	  "prefix": "GetInteriorPortalRoomFrom",
	  "body": [
		"GetInteriorPortalRoomFrom(${1:int interiorId}, ${2:int portalIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorPosition()": {
	  "prefix": "GetInteriorPosition",
	  "body": [
		"GetInteriorPosition(${1:int interiorId}, ${2:float* posX}, ${3:float* posY}, ${4:float* posZ})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"GetInteriorPortalRoomTo()": {
	  "prefix": "GetInteriorPortalRoomTo",
	  "body": [
		"GetInteriorPortalRoomTo(${1:int interiorId}, ${2:int portalIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorRoomCount()": {
	  "prefix": "GetInteriorRoomCount",
	  "body": [
		"GetInteriorRoomCount(${1:int interiorId})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorRoomFlag()": {
	  "prefix": "GetInteriorRoomFlag",
	  "body": [
		"GetInteriorRoomFlag(${1:int interiorId}, ${2:int roomIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorRoomExtents()": {
	  "prefix": "GetInteriorRoomExtents",
	  "body": [
		"GetInteriorRoomExtents(${1:int interiorId}, ${2:int roomIndex}, ${3:float* bbMinX}, ${4:float* bbMinY}, ${5:float* bbMinZ}, ${6:float* bbMaxX}, ${7:float* bbMaxY}, ${8:float* bbMaxZ})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"GetInteriorRoomIndexByHash()": {
	  "prefix": "GetInteriorRoomIndexByHash",
	  "body": [
		"GetInteriorRoomIndexByHash(${1:int interiorId}, ${2:int roomHash})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInteriorRoomName()": {
	  "prefix": "GetInteriorRoomName",
	  "body": [
		"GetInteriorRoomName(${1:int interiorId}, ${2:int roomIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: char*\n"
	},
	"GetInteriorRoomTimecycle()": {
	  "prefix": "GetInteriorRoomTimecycle",
	  "body": [
		"GetInteriorRoomTimecycle(${1:int interiorId}, ${2:int roomIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetInvokingResource()": {
	  "prefix": "GetInvokingResource",
	  "body": [
		"GetInvokingResource()"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n"
	},
	"GetInteriorRotation()": {
	  "prefix": "GetInteriorRotation",
	  "body": [
		"GetInteriorRotation(${1:int interiorId}, ${2:float* rotx}, ${3:float* rotY}, ${4:float* rotZ}, ${5:float* rotW})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"GetMapZoomDataLevel()": {
	  "prefix": "GetMapZoomDataLevel",
	  "body": [
		"GetMapZoomDataLevel(${1:int index}, ${2:float* zoomScale}, ${3:float* zoomSpeed}, ${4:float* scrollSpeed}, ${5:float* tilesX}, ${6:float* tilesY})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\nReturns the zoom level data by index from mapzoomdata.meta file."
	},
	"GetIsVehicleEngineRunning()": {
	  "prefix": "GetIsVehicleEngineRunning",
	  "body": [
		"GetIsVehicleEngineRunning(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns true when in a vehicle, false whilst entering/exiting.  \n\nOld name: IsVehicleEngineOn"
	},
	"GetNumPlayerIdentifiers()": {
	  "prefix": "GetNumPlayerIdentifiers",
	  "body": [
		"GetNumPlayerIdentifiers(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: int\n"
	},
	"GetNuiCursorPosition()": {
	  "prefix": "GetNuiCursorPosition",
	  "body": [
		"GetNuiCursorPosition(${1:int* x}, ${2:int* y})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"GetNumResourceMetadata()": {
	  "prefix": "GetNumResourceMetadata",
	  "body": [
		"GetNumResourceMetadata(${1:char* resourceName}, ${2:char* metadataKey})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: int\nGets the amount of metadata values with the specified key existing in the specified resource's manifest.\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)"
	},
	"GetNumPlayerIndices()": {
	  "prefix": "GetNumPlayerIndices",
	  "body": [
		"GetNumPlayerIndices()"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: int\n"
	},
	"GetPasswordHash()": {
	  "prefix": "GetPasswordHash",
	  "body": [
		"GetPasswordHash(${1:char* password})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n"
	},
	"GetNumResources()": {
	  "prefix": "GetNumResources",
	  "body": [
		"GetNumResources()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: int\n"
	},
	"GetPedCauseOfDeath()": {
	  "prefix": "GetPedCauseOfDeath",
	  "body": [
		"GetPedCauseOfDeath(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Hash\n\nReturns the hash of the weapon/model/object that killed the ped.  \n"
	},
	"GetPedArmour()": {
	  "prefix": "GetPedArmour",
	  "body": [
		"GetPedArmour(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"GetPedEyeColor()": {
	  "prefix": "GetPedEyeColor",
	  "body": [
		"GetPedEyeColor(${1:Ped ped})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nA getter for [\\_SET_PED_EYE_COLOR](#_0x50B56988B170AFDF). Returns -1 if fails to get."
	},
	"GetPedFaceFeature()": {
	  "prefix": "GetPedFaceFeature",
	  "body": [
		"GetPedFaceFeature(${1:Ped ped}, ${2:int index})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\nA getter for [\\_SET_PED_FACE_FEATURE](#_0x71A5C1DBA060049E). Returns 0.0 if fails to get."
	},
	"GetPedHairColor()": {
	  "prefix": "GetPedHairColor",
	  "body": [
		"GetPedHairColor(${1:Ped ped})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nA getter for [\\_SET_PED_HAIR_COLOR](#_0x4CFFC65454C93A49). Returns -1 if fails to get."
	},
	"GetPedHairHighlightColor()": {
	  "prefix": "GetPedHairHighlightColor",
	  "body": [
		"GetPedHairHighlightColor(${1:Ped ped})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nA getter for [\\_SET_PED_HAIR_COLOR](#_0x4CFFC65454C93A49). Returns -1 if fails to get."
	},
	"GetPedMaxHealth()": {
	  "prefix": "GetPedMaxHealth",
	  "body": [
		"GetPedMaxHealth(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"GetPedHeadOverlayData()": {
	  "prefix": "GetPedHeadOverlayData",
	  "body": [
		"GetPedHeadOverlayData(${1:Ped ped}, ${2:int index}, ${3:int* overlayValue}, ${4:int* colourType}, ${5:int* firstColour}, ${6:int* secondColour}, ${7:float* overlayOpacity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\nA getter for [SET_PED_HEAD_OVERLAY](#_0x48F44967FA05CC1E) and [\\_SET_PED_HEAD_OVERLAY_COLOR](#_0x497BF74A7B9CB952) natives."
	},
	"GetPlayerEndpoint()": {
	  "prefix": "GetPlayerEndpoint",
	  "body": [
		"GetPlayerEndpoint(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n"
	},
	"GetPlayerFromIndex()": {
	  "prefix": "GetPlayerFromIndex",
	  "body": [
		"GetPlayerFromIndex(${1:int index})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n"
	},
	"GetPlayerFromServerId()": {
	  "prefix": "GetPlayerFromServerId",
	  "body": [
		"GetPlayerFromServerId(${1:int serverId})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: Player\n"
	},
	"GetPlayerGuid()": {
	  "prefix": "GetPlayerGuid",
	  "body": [
		"GetPlayerGuid(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n"
	},
	"GetPlayerIdentifier()": {
	  "prefix": "GetPlayerIdentifier",
	  "body": [
		"GetPlayerIdentifier(${1:char* playerSrc}, ${2:int identifier})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n"
	},
	"GetPlayerLastMsg()": {
	  "prefix": "GetPlayerLastMsg",
	  "body": [
		"GetPlayerLastMsg(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: int\n"
	},
	"GetPlayerName()": {
	  "prefix": "GetPlayerName",
	  "body": [
		"GetPlayerName(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: char*\n\nReturns the players name  \n"
	},
	"GetPlayerPed()": {
	  "prefix": "GetPlayerPed",
	  "body": [
		"GetPlayerPed(${1:Player playerId})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Ped\nGets the ped for a specified player index."
	},
	"GetPlayerPing()": {
	  "prefix": "GetPlayerPing",
	  "body": [
		"GetPlayerPing(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: int\n"
	},
	"GetPlayerServerId()": {
	  "prefix": "GetPlayerServerId",
	  "body": [
		"GetPlayerServerId(${1:Player player})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetRegisteredCommands()": {
	  "prefix": "GetRegisteredCommands",
	  "body": [
		"GetRegisteredCommands()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: object\nReturns all commands that are registered in the command system.\nThe data returned adheres to the following layout:\n\n\n[\n{\n\"name\": \"cmdlist\"\n},\n{\n\"name\": \"command1\"\n}\n]\n"
	},
	"GetResourceByFindIndex()": {
	  "prefix": "GetResourceByFindIndex",
	  "body": [
		"GetResourceByFindIndex(${1:int findIndex})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\n"
	},
	"GetResourceKvpFloat()": {
	  "prefix": "GetResourceKvpFloat",
	  "body": [
		"GetResourceKvpFloat(${1:char* key})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetResourceKvpInt()": {
	  "prefix": "GetResourceKvpInt",
	  "body": [
		"GetResourceKvpInt(${1:char* key})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetResourceKvpString()": {
	  "prefix": "GetResourceKvpString",
	  "body": [
		"GetResourceKvpString(${1:char* key})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: char*\n"
	},
	"GetResourceMetadata()": {
	  "prefix": "GetResourceMetadata",
	  "body": [
		"GetResourceMetadata(${1:char* resourceName}, ${2:char* metadataKey}, ${3:int index})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\nGets the metadata value at a specified key/index from a resource's manifest.\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)"
	},
	"GetResourcePath()": {
	  "prefix": "GetResourcePath",
	  "body": [
		"GetResourcePath(${1:char* resourceName})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\nReturns the physical on-disk path of the specified resource."
	},
	"GetResourceState()": {
	  "prefix": "GetResourceState",
	  "body": [
		"GetResourceState(${1:char* resourceName})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\nReturns the current state of the specified resource."
	},
	"GetRuntimeTexturePitch()": {
	  "prefix": "GetRuntimeTexturePitch",
	  "body": [
		"GetRuntimeTexturePitch(${1:long tex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nGets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`."
	},
	"GetRuntimeTextureHeight()": {
	  "prefix": "GetRuntimeTextureHeight",
	  "body": [
		"GetRuntimeTextureHeight(${1:long tex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nGets the height of the specified runtime texture."
	},
	"GetRuntimeTextureWidth()": {
	  "prefix": "GetRuntimeTextureWidth",
	  "body": [
		"GetRuntimeTextureWidth(${1:long tex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nGets the width of the specified runtime texture."
	},
	"GetTrainCurrentTrackNode()": {
	  "prefix": "GetTrainCurrentTrackNode",
	  "body": [
		"GetTrainCurrentTrackNode(${1:Vehicle train})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleBodyHealth()": {
	  "prefix": "GetVehicleBodyHealth",
	  "body": [
		"GetVehicleBodyHealth(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nSeems related to vehicle health, like the one in IV.  \nMax 1000, min 0.  \nVehicle does not necessarily explode or become undrivable at 0.  \n"
	},
	"GetVehicleAlarmTimeLeft()": {
	  "prefix": "GetVehicleAlarmTimeLeft",
	  "body": [
		"GetVehicleAlarmTimeLeft(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleCurrentAcceleration()": {
	  "prefix": "GetVehicleCurrentAcceleration",
	  "body": [
		"GetVehicleCurrentAcceleration(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleClutch()": {
	  "prefix": "GetVehicleClutch",
	  "body": [
		"GetVehicleClutch(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleCurrentRpm()": {
	  "prefix": "GetVehicleCurrentRpm",
	  "body": [
		"GetVehicleCurrentRpm(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleCurrentGear()": {
	  "prefix": "GetVehicleCurrentGear",
	  "body": [
		"GetVehicleCurrentGear(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleDoorLockStatus()": {
	  "prefix": "GetVehicleDoorLockStatus",
	  "body": [
		"GetVehicleDoorLockStatus(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nenum VehicleLockStatus = {\n    None = 0,\n    Unlocked = 1,\n    Locked = 2,\n    LockedForPlayer = 3,\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\n}\n"
	},
	"GetVehicleDashboardSpeed()": {
	  "prefix": "GetVehicleDashboardSpeed",
	  "body": [
		"GetVehicleDashboardSpeed(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleDoorStatus()": {
	  "prefix": "GetVehicleDoorStatus",
	  "body": [
		"GetVehicleDoorStatus(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleDoorsLockedForPlayer()": {
	  "prefix": "GetVehicleDoorsLockedForPlayer",
	  "body": [
		"GetVehicleDoorsLockedForPlayer(${1:Vehicle vehicle}, ${2:Player player})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"GetVehicleEngineTemperature()": {
	  "prefix": "GetVehicleEngineTemperature",
	  "body": [
		"GetVehicleEngineTemperature(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleEngineHealth()": {
	  "prefix": "GetVehicleEngineHealth",
	  "body": [
		"GetVehicleEngineHealth(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nReturns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.  \nMinimum: -4000  \nMaximum: 1000  \n-4000: Engine is destroyed  \n0 and below: Engine catches fire and health rapidly declines  \n300: Engine is smoking and losing functionality  \n1000: Engine is perfect  \n"
	},
	"GetVehicleGravityAmount()": {
	  "prefix": "GetVehicleGravityAmount",
	  "body": [
		"GetVehicleGravityAmount(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleFuelLevel()": {
	  "prefix": "GetVehicleFuelLevel",
	  "body": [
		"GetVehicleFuelLevel(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleHandlingFloat()": {
	  "prefix": "GetVehicleHandlingFloat",
	  "body": [
		"GetVehicleHandlingFloat(${1:Vehicle vehicle}, ${2:char* class_}, ${3:char* fieldName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\nReturns the effective handling data of a vehicle as a floating-point value.\nExample: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`"
	},
	"GetVehicleHandlingInt()": {
	  "prefix": "GetVehicleHandlingInt",
	  "body": [
		"GetVehicleHandlingInt(${1:Vehicle vehicle}, ${2:char* class_}, ${3:char* fieldName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nReturns the effective handling data of a vehicle as an integer value.\nExample: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`"
	},
	"GetVehicleHandbrake()": {
	  "prefix": "GetVehicleHandbrake",
	  "body": [
		"GetVehicleHandbrake(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: BOOL\n"
	},
	"GetVehicleHighGear()": {
	  "prefix": "GetVehicleHighGear",
	  "body": [
		"GetVehicleHighGear(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleHandlingVector()": {
	  "prefix": "GetVehicleHandlingVector",
	  "body": [
		"GetVehicleHandlingVector(${1:Vehicle vehicle}, ${2:char* class_}, ${3:char* fieldName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: Vector3\nReturns the effective handling data of a vehicle as a vector value.\nExample: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`"
	},
	"GetVehicleHeadlightsColour()": {
	  "prefix": "GetVehicleHeadlightsColour",
	  "body": [
		"GetVehicleHeadlightsColour(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\nReturns the headlight color index from the vehicle. Value between 0, 12.\nUse [\\_SET_VEHICLE_HEADLIGHTS_COLOUR](#_0xE41033B25D003A07) to set the headlights color for the vehicle.\nMust enable xenon headlights before it'll take affect.\n\nList of colors and ids:\n\n\nenum headlightColors {\n    Default = -1,\n    White = 0,\n    Blue = 1,\n    Electric_Blue = 2,\n    Mint_Green = 3,\n    Lime_Green = 4,\n    Yellow = 5,\n    Golden_Shower = 6,\n    Orange = 7,\n    Red = 8,\n    Pony_Pink = 9,\n    Hot_Pink = 10,\n    Purple = 11,\n    Blacklight = 12\n}\n\nOld name: N_0x3dff319a831e0cdb"
	},
	"GetVehicleIndicatorLights()": {
	  "prefix": "GetVehicleIndicatorLights",
	  "body": [
		"GetVehicleIndicatorLights(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nGets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both"
	},
	"GetVehicleLightsState()": {
	  "prefix": "GetVehicleLightsState",
	  "body": [
		"GetVehicleLightsState(${1:Vehicle vehicle}, ${2:BOOL* lightsOn}, ${3:BOOL* highbeamsOn})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"GetVehicleNextGear()": {
	  "prefix": "GetVehicleNextGear",
	  "body": [
		"GetVehicleNextGear(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleNumberOfWheels()": {
	  "prefix": "GetVehicleNumberOfWheels",
	  "body": [
		"GetVehicleNumberOfWheels(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleOilLevel()": {
	  "prefix": "GetVehicleOilLevel",
	  "body": [
		"GetVehicleOilLevel(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehiclePetrolTankHealth()": {
	  "prefix": "GetVehiclePetrolTankHealth",
	  "body": [
		"GetVehiclePetrolTankHealth(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\n1000 is max health  \nBegins leaking gas at around 650 health  \n"
	},
	"GetVehicleRadioStationIndex()": {
	  "prefix": "GetVehicleRadioStationIndex",
	  "body": [
		"GetVehicleRadioStationIndex(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: int\n"
	},
	"GetVehicleSteeringAngle()": {
	  "prefix": "GetVehicleSteeringAngle",
	  "body": [
		"GetVehicleSteeringAngle(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleTurboPressure()": {
	  "prefix": "GetVehicleTurboPressure",
	  "body": [
		"GetVehicleTurboPressure(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleSteeringScale()": {
	  "prefix": "GetVehicleSteeringScale",
	  "body": [
		"GetVehicleSteeringScale(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleWheelSpeed()": {
	  "prefix": "GetVehicleWheelSpeed",
	  "body": [
		"GetVehicleWheelSpeed(${1:Vehicle vehicle}, ${2:int wheelIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\nGets speed of a wheel at the tyre.\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS."
	},
	"GetVehicleWheelHealth()": {
	  "prefix": "GetVehicleWheelHealth",
	  "body": [
		"GetVehicleWheelHealth(${1:Vehicle vehicle}, ${2:int wheelIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n"
	},
	"GetVehicleWheelXrot()": {
	  "prefix": "GetVehicleWheelXrot",
	  "body": "GetVehicleWheelXrot",
	  "description": "OLD NAME, PLEASE USE GetVehicleWheelYRotation INSTEAD!"
	},
	"GetVehicleWheelYRotation()": {
	  "prefix": "GetVehicleWheelYRotation",
	  "body": [
		"GetVehicleWheelYRotation(${1:Vehicle vehicle}, ${2:int wheelIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\n\nOld name: GetVehicleWheelXrot"
	},
	"GetVehicleWheelXOffset()": {
	  "prefix": "GetVehicleWheelXOffset",
	  "body": [
		"GetVehicleWheelXOffset(${1:Vehicle vehicle}, ${2:int wheelIndex})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: float\nReturns the offset of the specified wheel relative to the wheel's axle center."
	},
	"GetVehicleWheelieState()": {
	  "prefix": "GetVehicleWheelieState",
	  "body": [
		"GetVehicleWheelieState(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nList of known states:\n\n\n1: Not wheeling.\n65: Vehicle is ready to do wheelie (burnouting).\n129: Vehicle is doing wheelie.\n"
	},
	"HasMinimapOverlayLoaded()": {
	  "prefix": "HasMinimapOverlayLoaded",
	  "body": [
		"HasMinimapOverlayLoaded(${1:int id})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\nReturns whether or not the specific minimap overlay has loaded."
	},
	"HasEntityBeenMarkedAsNoLongerNeeded()": {
	  "prefix": "HasEntityBeenMarkedAsNoLongerNeeded",
	  "body": [
		"HasEntityBeenMarkedAsNoLongerNeeded(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\n"
	},
	"InvokeFunctionReference()": {
	  "prefix": "InvokeFunctionReference",
	  "body": [
		"InvokeFunctionReference(${1:char* referenceIdentity}, ${2:char* argsSerialized}, ${3:int argsLength}, ${4:int* retvalLength})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\n"
	},
	"IsAceAllowed()": {
	  "prefix": "IsAceAllowed",
	  "body": [
		"IsAceAllowed(${1:char* object})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: BOOL\n"
	},
	"HasVehicleBeenOwnedByPlayer()": {
	  "prefix": "HasVehicleBeenOwnedByPlayer",
	  "body": [
		"HasVehicleBeenOwnedByPlayer(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsBigmapActive()": {
	  "prefix": "IsBigmapActive",
	  "body": [
		"IsBigmapActive()"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n<!-- Native implemented by Disquse. 0xFFF65C63 -->\n\nReturns true if the minimap is currently expanded. False if it's the normal minimap state.\nUse [`IsBigmapFull`](#_0x66EE14B2) to check if the full map is currently revealed on the minimap."
	},
	"IsBigmapFull()": {
	  "prefix": "IsBigmapFull",
	  "body": [
		"IsBigmapFull()"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n<!-- Native implemented by Disquse. 0x66EE14B2 -->\n\nReturns true if the full map is currently revealed on the minimap. \nUse [`IsBigmapActive`](#_0xFFF65C63) to check if the minimap is currently expanded or in it's normal state."
	},
	"IsDuiAvailable()": {
	  "prefix": "IsDuiAvailable",
	  "body": [
		"IsDuiAvailable(${1:long duiObject})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\nReturns whether or not a browser is created for a specified DUI browser object."
	},
	"IsDuplicityVersion()": {
	  "prefix": "IsDuplicityVersion",
	  "body": [
		"IsDuplicityVersion()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: BOOL\nGets whether or not this is the CitizenFX server."
	},
	"IsPlayerAceAllowed()": {
	  "prefix": "IsPlayerAceAllowed",
	  "body": [
		"IsPlayerAceAllowed(${1:char* playerSrc}, ${2:char* object})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsPrincipalAceAllowed()": {
	  "prefix": "IsPrincipalAceAllowed",
	  "body": [
		"IsPrincipalAceAllowed(${1:char* principal}, ${2:char* object})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsPlayerCommerceInfoLoaded()": {
	  "prefix": "IsPlayerCommerceInfoLoaded",
	  "body": [
		"IsPlayerCommerceInfoLoaded(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\nRequests whether or not the commerce data for the specified player has loaded."
	},
	"IsStreamingFileReady()": {
	  "prefix": "IsStreamingFileReady",
	  "body": [
		"IsStreamingFileReady(${1:char* registerAs})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nReturns whether an asynchronous streaming file registration completed."
	},
	"IsVehicleEngineStarting()": {
	  "prefix": "IsVehicleEngineStarting",
	  "body": [
		"IsVehicleEngineStarting(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsVehicleNeedsToBeHotwired()": {
	  "prefix": "IsVehicleNeedsToBeHotwired",
	  "body": [
		"IsVehicleNeedsToBeHotwired(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsVehicleAlarmSet()": {
	  "prefix": "IsVehicleAlarmSet",
	  "body": [
		"IsVehicleAlarmSet(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsVehicleInteriorLightOn()": {
	  "prefix": "IsVehicleInteriorLightOn",
	  "body": [
		"IsVehicleInteriorLightOn(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsVehicleSirenOn()": {
	  "prefix": "IsVehicleSirenOn",
	  "body": [
		"IsVehicleSirenOn(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehiclePreviouslyOwnedByPlayer()": {
	  "prefix": "IsVehiclePreviouslyOwnedByPlayer",
	  "body": [
		"IsVehiclePreviouslyOwnedByPlayer(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"IsVehicleTyreBurst()": {
	  "prefix": "IsVehicleTyreBurst",
	  "body": [
		"IsVehicleTyreBurst(${1:Vehicle vehicle}, ${2:int wheelID}, ${3:BOOL completely})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nwheelID used for 4 wheelers seem to be (0, 1, 4, 5)  \ncompletely - is to check if tire completely gone from rim.  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n"
	},
	"LoadPlayerCommerceData()": {
	  "prefix": "LoadPlayerCommerceData",
	  "body": [
		"LoadPlayerCommerceData(${1:char* playerSrc})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\nRequests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded."
	},
	"IsVehicleWanted()": {
	  "prefix": "IsVehicleWanted",
	  "body": [
		"IsVehicleWanted(${1:Vehicle vehicle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"NetworkGetEntityOwner()": {
	  "prefix": "NetworkGetEntityOwner",
	  "body": [
		"NetworkGetEntityOwner(${1:Entity entity})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: int\nReturns the owner ID of the specified entity."
	},
	"LoadResourceFile()": {
	  "prefix": "LoadResourceFile",
	  "body": [
		"LoadResourceFile(${1:char* resourceName}, ${2:char* fileName})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: char*\nReads the contents of a text file in a specified resource.\nIf executed on the client, this file has to be included in `files` in the resource manifest.\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`"
	},
	"NetworkGetEntityFromNetworkId()": {
	  "prefix": "NetworkGetEntityFromNetworkId",
	  "body": [
		"NetworkGetEntityFromNetworkId(${1:int netId})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Entity\n"
	},
	"NetworkGetNetworkIdFromEntity()": {
	  "prefix": "NetworkGetNetworkIdFromEntity",
	  "body": [
		"NetworkGetNetworkIdFromEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"ProfilerEnterScope()": {
	  "prefix": "ProfilerEnterScope",
	  "body": [
		"ProfilerEnterScope(${1:char* scopeName})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\nScope entry for profiler."
	},
	"PerformHttpRequestInternal()": {
	  "prefix": "PerformHttpRequestInternal",
	  "body": [
		"PerformHttpRequestInternal(${1:char* requestData}, ${2:int requestDataLength})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: int\n"
	},
	"ProfilerIsRecording()": {
	  "prefix": "ProfilerIsRecording",
	  "body": [
		"ProfilerIsRecording()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: BOOL\nReturns true if the profiler is active."
	},
	"ProfilerExitScope()": {
	  "prefix": "ProfilerExitScope",
	  "body": [
		"ProfilerExitScope()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\nScope exit for profiler."
	},
	"RegisterArchetypes()": {
	  "prefix": "RegisterArchetypes",
	  "body": [
		"RegisterArchetypes(${1:func factory})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game."
	},
	"RegisterCommand()": {
	  "prefix": "RegisterCommand",
	  "body": [
		"RegisterCommand(${1:char* commandName}, ${2:func handler}, ${3:BOOL restricted})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\nRegistered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.\n\nCommands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#_0x561C060B).\n\nThe restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).\n\n**Example result**:\n\n![](https://i.imgur.com/TaCnG09.png)"
	},
	"RegisterEntities()": {
	  "prefix": "RegisterEntities",
	  "body": [
		"RegisterEntities(${1:func factory})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of entities with the game engine. These should match `CEntityDef` class information from the game.\nAt this time, this function **should not be used in a live environment**."
	},
	"RegisterConsoleListener()": {
	  "prefix": "RegisterConsoleListener",
	  "body": [
		"RegisterConsoleListener(${1:func listener})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\nRegisters a listener for console output messages."
	},
	"RegisterFontFile()": {
	  "prefix": "RegisterFontFile",
	  "body": [
		"RegisterFontFile(${1:char* fileName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nRegisters a specified .gfx file as GFx font library.\nThe .gfx file has to be registered with the streamer already."
	},
	"RegisterFontId()": {
	  "prefix": "RegisterFontId",
	  "body": [
		"RegisterFontId(${1:char* fontName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\nRegisters a specified font name for use with text draw commands."
	},
	"RegisterResourceAsset()": {
	  "prefix": "RegisterResourceAsset",
	  "body": [
		"RegisterResourceAsset(${1:char* resourceName}, ${2:char* fileName})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: char*\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder."
	},
	"RegisterNuiCallbackType()": {
	  "prefix": "RegisterNuiCallbackType",
	  "body": [
		"RegisterNuiCallbackType(${1:char* callbackType})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"RegisterStreamingFileFromCache()": {
	  "prefix": "RegisterStreamingFileFromCache",
	  "body": [
		"RegisterStreamingFileFromCache(${1:char* resourceName}, ${2:char* fileName}, ${3:char* cacheString})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a dynamic streaming asset from the server with the GTA streaming module system."
	},
	"RegisterResourceBuildTaskFactory()": {
	  "prefix": "RegisterResourceBuildTaskFactory",
	  "body": [
		"RegisterResourceBuildTaskFactory(${1:char* factoryId}, ${2:func factoryFn})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\nRegisters a build task factory for resources.\nThe function should return an object (msgpack map) with the following fields:\n\n\n{\n// returns whether the specific resource should be built\nshouldBuild = func(resourceName: string): bool,\n\n// asynchronously start building the specific resource.\n// call cb when completed\nbuild = func(resourceName: string, cb: func(success: bool, status: string): void): void\n}\n"
	},
	"RegisterStreamingFileFromKvs()": {
	  "prefix": "RegisterStreamingFileFromKvs",
	  "body": [
		"RegisterStreamingFileFromKvs(${1:char* kvsKey})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a KVP value as an asset with the GTA streaming module system. This function currently won't work."
	},
	"RemoveReplaceTexture()": {
	  "prefix": "RemoveReplaceTexture",
	  "body": [
		"RemoveReplaceTexture(${1:char* origTxd}, ${2:char* origTxn})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nExperimental natives, please do not use in a live environment."
	},
	"RegisterStreamingFileFromUrl()": {
	  "prefix": "RegisterStreamingFileFromUrl",
	  "body": [
		"RegisterStreamingFileFromUrl(${1:char* registerAs}, ${2:char* url})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored.\n\nUse `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully."
	},
	"SaveResourceFile()": {
	  "prefix": "SaveResourceFile",
	  "body": [
		"SaveResourceFile(${1:char* resourceName}, ${2:char* fileName}, ${3:char* data}, ${4:int dataLength})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\nWrites the specified data to a file in the specified resource.\nUsing a length of `-1` will automatically detect the length assuming the data is a C string."
	},
	"RequestPlayerCommerceSession()": {
	  "prefix": "RequestPlayerCommerceSession",
	  "body": [
		"RequestPlayerCommerceSession(${1:char* playerSrc}, ${2:int skuId})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\nRequests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance\nwill open the browser prompting further purchase details."
	},
	"ResetMapZoomDataLevel()": {
	  "prefix": "ResetMapZoomDataLevel",
	  "body": [
		"ResetMapZoomDataLevel(${1:int index})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nResets values from the zoom level data by index to defaults from mapzoomdata.meta."
	},
	"ScheduleResourceTick()": {
	  "prefix": "ScheduleResourceTick",
	  "body": [
		"ScheduleResourceTick(${1:char* resourceName})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\nSchedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate."
	},
	"SendDuiMessage()": {
	  "prefix": "SendDuiMessage",
	  "body": [
		"SendDuiMessage(${1:long duiObject}, ${2:char* jsonString})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE."
	},
	"SendDuiMouseDown()": {
	  "prefix": "SendDuiMouseDown",
	  "body": [
		"SendDuiMouseDown(${1:long duiObject}, ${2:char* button})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nInjects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE."
	},
	"SendDuiMouseMove()": {
	  "prefix": "SendDuiMouseMove",
	  "body": [
		"SendDuiMouseMove(${1:long duiObject}, ${2:int x}, ${3:int y})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nInjects a 'mouse move' event for a DUI object. Coordinates are in browser space."
	},
	"SendDuiMouseUp()": {
	  "prefix": "SendDuiMouseUp",
	  "body": [
		"SendDuiMouseUp(${1:long duiObject}, ${2:char* button})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nInjects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE."
	},
	"SendDuiMouseWheel()": {
	  "prefix": "SendDuiMouseWheel",
	  "body": [
		"SendDuiMouseWheel(${1:long duiObject}, ${2:int deltaY}, ${3:int deltaX})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nInjects a 'mouse wheel' event for a DUI object."
	},
	"SendNuiMessage()": {
	  "prefix": "SendNuiMessage",
	  "body": [
		"SendNuiMessage(${1:char* jsonString})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"SendLoadingScreenMessage()": {
	  "prefix": "SendLoadingScreenMessage",
	  "body": [
		"SendLoadingScreenMessage(${1:char* jsonString})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\nSends a message to the `loadingScreen` NUI frame, which contains the HTML page referenced in `loadscreen` resources."
	},
	"SetConvarReplicated()": {
	  "prefix": "SetConvarReplicated",
	  "body": [
		"SetConvarReplicated(${1:char* varName}, ${2:char* value})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"SetConvar()": {
	  "prefix": "SetConvar",
	  "body": [
		"SetConvar(${1:char* varName}, ${2:char* value})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"SetDiscordAppId()": {
	  "prefix": "SetDiscordAppId",
	  "body": [
		"SetDiscordAppId(${1:char* appId})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThis native sets the app id for the discord rich presence implementation."
	},
	"SetDiscordRichPresenceAssetSmall()": {
	  "prefix": "SetDiscordRichPresenceAssetSmall",
	  "body": [
		"SetDiscordRichPresenceAssetSmall(${1:char* assetName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThis native sets the small image asset for the discord rich presence implementation."
	},
	"SetConvarServerInfo()": {
	  "prefix": "SetConvarServerInfo",
	  "body": [
		"SetConvarServerInfo(${1:char* varName}, ${2:char* value})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"SetDiscordRichPresenceAsset()": {
	  "prefix": "SetDiscordRichPresenceAsset",
	  "body": [
		"SetDiscordRichPresenceAsset(${1:char* assetName})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThis native sets the image asset for the discord rich presence implementation."
	},
	"SetDuiUrl()": {
	  "prefix": "SetDuiUrl",
	  "body": [
		"SetDuiUrl(${1:long duiObject}, ${2:char* url})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nNavigates the specified DUI browser to a different URL."
	},
	"SetDiscordRichPresenceAssetSmallText()": {
	  "prefix": "SetDiscordRichPresenceAssetSmallText",
	  "body": [
		"SetDiscordRichPresenceAssetSmallText(${1:char* text})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThis native sets the hover text of the small image asset for the discord rich presence implementation."
	},
	"SetHandlingField()": {
	  "prefix": "SetHandlingField",
	  "body": [
		"SetHandlingField(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Any value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\nExample: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`"
	},
	"SetHandlingFloat()": {
	  "prefix": "SetHandlingFloat",
	  "body": [
		"SetHandlingFloat(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:float value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\nExample: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`"
	},
	"SetDiscordRichPresenceAssetText()": {
	  "prefix": "SetDiscordRichPresenceAssetText",
	  "body": [
		"SetDiscordRichPresenceAssetText(${1:char* text})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThis native sets the hover text of the image asset for the discord rich presence implementation."
	},
	"SetGameType()": {
	  "prefix": "SetGameType",
	  "body": [
		"SetGameType(${1:char* gametypeName})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"SetHandlingVector()": {
	  "prefix": "SetHandlingVector",
	  "body": [
		"SetHandlingVector(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Vector3 value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\nExample: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`"
	},
	"SetHandlingInt()": {
	  "prefix": "SetHandlingInt",
	  "body": [
		"SetHandlingInt(${1:char* vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:int value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta."
	},
	"SetInteriorPortalCornerPosition()": {
	  "prefix": "SetInteriorPortalCornerPosition",
	  "body": [
		"SetInteriorPortalCornerPosition(${1:int interiorId}, ${2:int portalIndex}, ${3:int cornerIndex}, ${4:float posX}, ${5:float posY}, ${6:float posZ})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetInteriorPortalRoomFrom()": {
	  "prefix": "SetInteriorPortalRoomFrom",
	  "body": [
		"SetInteriorPortalRoomFrom(${1:int interiorId}, ${2:int portalIndex}, ${3:int roomFrom})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetHttpHandler()": {
	  "prefix": "SetHttpHandler",
	  "body": [
		"SetHttpHandler(${1:func handler})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"SetInteriorPortalRoomTo()": {
	  "prefix": "SetInteriorPortalRoomTo",
	  "body": [
		"SetInteriorPortalRoomTo(${1:int interiorId}, ${2:int portalIndex}, ${3:int roomTo})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetInteriorPortalFlag()": {
	  "prefix": "SetInteriorPortalFlag",
	  "body": [
		"SetInteriorPortalFlag(${1:int interiorId}, ${2:int portalIndex}, ${3:int flag})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetInteriorRoomFlag()": {
	  "prefix": "SetInteriorRoomFlag",
	  "body": [
		"SetInteriorRoomFlag(${1:int interiorId}, ${2:int roomIndex}, ${3:int flag})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetInteriorRoomExtents()": {
	  "prefix": "SetInteriorRoomExtents",
	  "body": [
		"SetInteriorRoomExtents(${1:int interiorId}, ${2:int roomIndex}, ${3:float bbMinX}, ${4:float bbMinY}, ${5:float bbMinZ}, ${6:float bbMaxX}, ${7:float bbMaxY}, ${8:float bbMaxZ})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetManualShutdownLoadingScreenNui()": {
	  "prefix": "SetManualShutdownLoadingScreenNui",
	  "body": [
		"SetManualShutdownLoadingScreenNui(${1:BOOL manualShutdown})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,\nyou will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen."
	},
	"SetInteriorRoomTimecycle()": {
	  "prefix": "SetInteriorRoomTimecycle",
	  "body": [
		"SetInteriorRoomTimecycle(${1:int interiorId}, ${2:int roomIndex}, ${3:int timecycleHash})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetMapName()": {
	  "prefix": "SetMapName",
	  "body": [
		"SetMapName(${1:char* mapName})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"SetMapZoomDataLevel()": {
	  "prefix": "SetMapZoomDataLevel",
	  "body": [
		"SetMapZoomDataLevel(${1:int index}, ${2:float zoomScale}, ${3:float zoomSpeed}, ${4:float scrollSpeed}, ${5:float tilesX}, ${6:float tilesY})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets values to the zoom level data by index."
	},
	"SetMinimapOverlayDisplay()": {
	  "prefix": "SetMinimapOverlayDisplay",
	  "body": [
		"SetMinimapOverlayDisplay(${1:int miniMap}, ${2:float x}, ${3:float y}, ${4:float xScale}, ${5:float yScale}, ${6:float alpha})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets the display info for a minimap overlay."
	},
	"SetMillisecondsPerGameMinute()": {
	  "prefix": "SetMillisecondsPerGameMinute",
	  "body": [
		"SetMillisecondsPerGameMinute(${1:int value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nOverrides how many real ms are equal to one game minute.\nA setter for [`GetMillisecondsPerGameMinute`](#_0x2F8B4D1C595B11DB)."
	},
	"SetNuiFocus()": {
	  "prefix": "SetNuiFocus",
	  "body": [
		"SetNuiFocus(${1:BOOL hasFocus}, ${2:BOOL hasCursor})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetPlayerTalkingOverride()": {
	  "prefix": "SetPlayerTalkingOverride",
	  "body": [
		"SetPlayerTalkingOverride(${1:Player player}, ${2:BOOL state})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nthe status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation.\nThis function doesn't need to be called every frame, it works like a switcher."
	},
	"SetModelHeadlightConfiguration()": {
	  "prefix": "SetModelHeadlightConfiguration",
	  "body": [
		"SetModelHeadlightConfiguration(${1:Hash modelHash}, ${2:float ratePerSecond}, ${3:float headlightRotation}, ${4:BOOL invertRotation})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetResourceKvpInt()": {
	  "prefix": "SetResourceKvpInt",
	  "body": [
		"SetResourceKvpInt(${1:char* key}, ${2:int value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetRuntimeTextureArgbData()": {
	  "prefix": "SetRuntimeTextureArgbData",
	  "body": [
		"SetRuntimeTextureArgbData(${1:long tex}, ${2:char* buffer}, ${3:int length})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"SetResourceKvp()": {
	  "prefix": "SetResourceKvp",
	  "body": [
		"SetResourceKvp(${1:char* key}, ${2:char* value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetResourceKvpFloat()": {
	  "prefix": "SetResourceKvpFloat",
	  "body": [
		"SetResourceKvpFloat(${1:char* key}, ${2:float value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetRuntimeTexturePixel()": {
	  "prefix": "SetRuntimeTexturePixel",
	  "body": [
		"SetRuntimeTexturePixel(${1:long tex}, ${2:int x}, ${3:int y}, ${4:int r}, ${5:int g}, ${6:int b}, ${7:int a})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect."
	},
	"SetTextChatEnabled()": {
	  "prefix": "SetTextChatEnabled",
	  "body": [
		"SetTextChatEnabled(${1:BOOL enabled})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: BOOL\n"
	},
	"SetRichPresence()": {
	  "prefix": "SetRichPresence",
	  "body": [
		"SetRichPresence(${1:char* presenceState})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets the player's rich presence detail state for social platform providers to a specified string."
	},
	"SetVehicleAutoRepairDisabled()": {
	  "prefix": "SetVehicleAutoRepairDisabled",
	  "body": [
		"SetVehicleAutoRepairDisabled(${1:Vehicle vehicle}, ${2:BOOL value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nDisables the vehicle from being repaired when a vehicle extra is enabled."
	},
	"SetSnakeoilForEntry()": {
	  "prefix": "SetSnakeoilForEntry",
	  "body": [
		"SetSnakeoilForEntry(${1:char* name}, ${2:char* path}, ${3:char* data})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleCurrentRpm()": {
	  "prefix": "SetVehicleCurrentRpm",
	  "body": [
		"SetVehicleCurrentRpm(${1:Vehicle vehicle}, ${2:float rpm})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleAlarmTimeLeft()": {
	  "prefix": "SetVehicleAlarmTimeLeft",
	  "body": [
		"SetVehicleAlarmTimeLeft(${1:Vehicle vehicle}, ${2:int time})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleFuelLevel()": {
	  "prefix": "SetVehicleFuelLevel",
	  "body": [
		"SetVehicleFuelLevel(${1:Vehicle vehicle}, ${2:float level})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleClutch()": {
	  "prefix": "SetVehicleClutch",
	  "body": [
		"SetVehicleClutch(${1:Vehicle vehicle}, ${2:float clutch})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleEngineTemperature()": {
	  "prefix": "SetVehicleEngineTemperature",
	  "body": [
		"SetVehicleEngineTemperature(${1:Vehicle vehicle}, ${2:float temperature})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleHandlingField()": {
	  "prefix": "SetVehicleHandlingField",
	  "body": [
		"SetVehicleHandlingField(${1:Vehicle vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Any value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation.\nExample: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`"
	},
	"SetVehicleHandlingInt()": {
	  "prefix": "SetVehicleHandlingInt",
	  "body": [
		"SetVehicleHandlingInt(${1:Vehicle vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:int value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation."
	},
	"SetVehicleGravityAmount()": {
	  "prefix": "SetVehicleGravityAmount",
	  "body": [
		"SetVehicleGravityAmount(${1:Vehicle vehicle}, ${2:float gravity})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleHandlingVector()": {
	  "prefix": "SetVehicleHandlingVector",
	  "body": [
		"SetVehicleHandlingVector(${1:Vehicle vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:Vector3 value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation."
	},
	"SetVehicleHandlingFloat()": {
	  "prefix": "SetVehicleHandlingFloat",
	  "body": [
		"SetVehicleHandlingFloat(${1:Vehicle vehicle}, ${2:char* class_}, ${3:char* fieldName}, ${4:float value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nSets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation.\nExample: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`"
	},
	"SetVehicleHighGear()": {
	  "prefix": "SetVehicleHighGear",
	  "body": [
		"SetVehicleHighGear(${1:Vehicle vehicle}, ${2:int gear})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleOilLevel()": {
	  "prefix": "SetVehicleOilLevel",
	  "body": [
		"SetVehicleOilLevel(${1:Vehicle vehicle}, ${2:float level})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleSteeringAngle()": {
	  "prefix": "SetVehicleSteeringAngle",
	  "body": [
		"SetVehicleSteeringAngle(${1:Vehicle vehicle}, ${2:float angle})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleSteeringScale()": {
	  "prefix": "SetVehicleSteeringScale",
	  "body": [
		"SetVehicleSteeringScale(${1:Vehicle vehicle}, ${2:float scale})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleWheelHealth()": {
	  "prefix": "SetVehicleWheelHealth",
	  "body": [
		"SetVehicleWheelHealth(${1:Vehicle vehicle}, ${2:int wheelIndex}, ${3:float health})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleTurboPressure()": {
	  "prefix": "SetVehicleTurboPressure",
	  "body": [
		"SetVehicleTurboPressure(${1:Vehicle vehicle}, ${2:float pressure})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n"
	},
	"SetVehicleWheelXOffset()": {
	  "prefix": "SetVehicleWheelXOffset",
	  "body": [
		"SetVehicleWheelXOffset(${1:Vehicle vehicle}, ${2:int wheelIndex}, ${3:float offset})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nAdjusts the offset of the specified wheel relative to the wheel's axle center.\nNeeds to be called every frame in order to function properly, as GTA will reset the offset otherwise.\nThis function can be especially useful to set the track width of a vehicle, for example:\n\n\nfunction SetVehicleFrontTrackWidth(vehicle, width)\nSetVehicleWheelXOffset(vehicle, 0, -width/2)\nSetVehicleWheelXOffset(vehicle, 1, width/2)\nend\n"
	},
	"SetVehicleWheelXrot()": {
	  "prefix": "SetVehicleWheelXrot",
	  "body": "SetVehicleWheelXrot",
	  "description": "OLD NAME, PLEASE USE SetVehicleWheelYRotation INSTEAD!"
	},
	"SetVehicleWheelYRotation()": {
	  "prefix": "SetVehicleWheelYRotation",
	  "body": [
		"SetVehicleWheelYRotation(${1:Vehicle vehicle}, ${2:int wheelIndex}, ${3:float value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\n\nOld name: SetVehicleWheelXrot"
	},
	"SetVehicleWheelieState()": {
	  "prefix": "SetVehicleWheelieState",
	  "body": [
		"SetVehicleWheelieState(${1:Vehicle vehicle}, ${2:int state})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nExample script: <https://pastebin.com/J6XGbkCW>\n\nList of known states:\n\n\n1: Not wheeling.\n65: Vehicle is ready to do wheelie (burnouting).\n129: Vehicle is doing wheelie.\n"
	},
	"ShutdownLoadingScreenNui()": {
	  "prefix": "ShutdownLoadingScreenNui",
	  "body": [
		"ShutdownLoadingScreenNui()"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nShuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`."
	},
	"SetVisualSettingFloat()": {
	  "prefix": "SetVisualSettingFloat",
	  "body": [
		"SetVisualSettingFloat(${1:char* name}, ${2:float value})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nOverrides a floating point value from `visualsettings.dat` temporarily."
	},
	"StartResource()": {
	  "prefix": "StartResource",
	  "body": [
		"StartResource(${1:char* resourceName})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\n"
	},
	"StartFindKvp()": {
	  "prefix": "StartFindKvp",
	  "body": [
		"StartFindKvp(${1:char* prefix})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: int\n"
	},
	"TriggerClientEventInternal()": {
	  "prefix": "TriggerClientEventInternal",
	  "body": [
		"TriggerClientEventInternal(${1:char* eventName}, ${2:char* eventTarget}, ${3:char* eventPayload}, ${4:int payloadLength})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\nThe backing function for TriggerClientEvent."
	},
	"StopResource()": {
	  "prefix": "StopResource",
	  "body": [
		"StopResource(${1:char* resourceName})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\n"
	},
	"TempBanPlayer()": {
	  "prefix": "TempBanPlayer",
	  "body": [
		"TempBanPlayer(${1:char* playerSrc}, ${2:char* reason})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\n"
	},
	"TriggerEventInternal()": {
	  "prefix": "TriggerEventInternal",
	  "body": [
		"TriggerEventInternal(${1:char* eventName}, ${2:char* eventPayload}, ${3:int payloadLength})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\nThe backing function for TriggerEvent."
	},
	"TriggerLatentServerEventInternal()": {
	  "prefix": "TriggerLatentServerEventInternal",
	  "body": [
		"TriggerLatentServerEventInternal(${1:char* eventName}, ${2:char* eventPayload}, ${3:int payloadLength}, ${4:int bps})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThe backing function for TriggerLatentServerEvent."
	},
	"TriggerLatentClientEventInternal()": {
	  "prefix": "TriggerLatentClientEventInternal",
	  "body": [
		"TriggerLatentClientEventInternal(${1:char* eventName}, ${2:char* eventTarget}, ${3:char* eventPayload}, ${4:int payloadLength}, ${5:int bps})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: void\nThe backing function for TriggerLatentClientEvent."
	},
	"TriggerServerEventInternal()": {
	  "prefix": "TriggerServerEventInternal",
	  "body": [
		"TriggerServerEventInternal(${1:char* eventName}, ${2:char* eventPayload}, ${3:int payloadLength})"
	  ],
	  "description": "CFX API Set: client\nNamespace: CFX\nReturns: void\nThe backing function for TriggerServerEvent."
	},
	"WasEventCanceled()": {
	  "prefix": "WasEventCanceled",
	  "body": [
		"WasEventCanceled()"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: BOOL\nReturns whether or not the currently executing event was canceled."
	},
	"VerifyPasswordHash()": {
	  "prefix": "VerifyPasswordHash",
	  "body": [
		"VerifyPasswordHash(${1:char* password}, ${2:char* hash})"
	  ],
	  "description": "CFX API Set: server\nNamespace: CFX\nReturns: BOOL\n"
	},
	"RegisterResourceAsEventHandler()": {
	  "prefix": "RegisterResourceAsEventHandler",
	  "body": [
		"RegisterResourceAsEventHandler(${1:char* eventName})"
	  ],
	  "description": "CFX API Set: shared\nNamespace: CFX\nReturns: void\nAn internal function which allows the current resource's HLL script runtimes to receive state for the specified event."
	},
	"CanSetEnterStateForRegisteredEntity()": {
	  "prefix": "CanSetEnterStateForRegisteredEntity",
	  "body": [
		"CanSetEnterStateForRegisteredEntity(${1:char* cutsceneEntName}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n\nmodelHash (p1) was always 0 in R* scripts  \n"
	},
	"CanSetExitStateForRegisteredEntity()": {
	  "prefix": "CanSetExitStateForRegisteredEntity",
	  "body": [
		"CanSetExitStateForRegisteredEntity(${1:char* cutsceneEntName}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"CanSetExitStateForCamera()": {
	  "prefix": "CanSetExitStateForCamera",
	  "body": [
		"CanSetExitStateForCamera(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"GetCutsceneSectionPlaying()": {
	  "prefix": "GetCutsceneSectionPlaying",
	  "body": [
		"GetCutsceneSectionPlaying()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: int\n"
	},
	"DoesCutsceneEntityExist()": {
	  "prefix": "DoesCutsceneEntityExist",
	  "body": [
		"DoesCutsceneEntityExist(${1:char* cutsceneEntName}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"GetCutsceneTime()": {
	  "prefix": "GetCutsceneTime",
	  "body": [
		"GetCutsceneTime()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: int\n"
	},
	"GetCutsceneTotalDuration()": {
	  "prefix": "GetCutsceneTotalDuration",
	  "body": [
		"GetCutsceneTotalDuration()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: int\n"
	},
	"GetEntityIndexOfRegisteredEntity()": {
	  "prefix": "GetEntityIndexOfRegisteredEntity",
	  "body": [
		"GetEntityIndexOfRegisteredEntity(${1:char* cutsceneEntName}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: Entity\n"
	},
	"HasCutsceneLoaded()": {
	  "prefix": "HasCutsceneLoaded",
	  "body": [
		"HasCutsceneLoaded()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"GetEntityIndexOfCutsceneEntity()": {
	  "prefix": "GetEntityIndexOfCutsceneEntity",
	  "body": [
		"GetEntityIndexOfCutsceneEntity(${1:char* cutsceneEntName}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: Entity\n"
	},
	"IsCutsceneActive()": {
	  "prefix": "IsCutsceneActive",
	  "body": [
		"IsCutsceneActive()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"HasCutsceneFinished()": {
	  "prefix": "HasCutsceneFinished",
	  "body": [
		"HasCutsceneFinished()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"IsCutscenePlaying()": {
	  "prefix": "IsCutscenePlaying",
	  "body": [
		"IsCutscenePlaying()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"HasThisCutsceneLoaded()": {
	  "prefix": "HasThisCutsceneLoaded",
	  "body": [
		"HasThisCutsceneLoaded(${1:char* cutsceneName})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"N_0x06ee9048fd080382()": {
	  "prefix": "N_0x06ee9048fd080382",
	  "body": [
		"N_0x06ee9048fd080382(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x011883f41211432a()": {
	  "prefix": "N_0x011883f41211432a",
	  "body": [
		"N_0x011883f41211432a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x06a3524161c502ba()": {
	  "prefix": "N_0x06a3524161c502ba",
	  "body": [
		"N_0x06a3524161c502ba(${1:Any* p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x0abc54de641dc0fc()": {
	  "prefix": "N_0x0abc54de641dc0fc",
	  "body": [
		"N_0x0abc54de641dc0fc(${1:Any* p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: Any\n"
	},
	"N_0x20746f7b1032a3c7()": {
	  "prefix": "N_0x20746f7b1032a3c7",
	  "body": [
		"N_0x20746f7b1032a3c7(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x2a56c06ebef2b0d9()": {
	  "prefix": "N_0x2a56c06ebef2b0d9",
	  "body": [
		"N_0x2a56c06ebef2b0d9(${1:char* cutsceneEntName}, ${2:Ped ped}, ${3:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x2f137b508de238f2()": {
	  "prefix": "N_0x2f137b508de238f2",
	  "body": [
		"N_0x2f137b508de238f2(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x41faa8fb2ece8720()": {
	  "prefix": "N_0x41faa8fb2ece8720",
	  "body": [
		"N_0x41faa8fb2ece8720(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x4c61c75bee8184c2()": {
	  "prefix": "N_0x4c61c75bee8184c2",
	  "body": [
		"N_0x4c61c75bee8184c2(${1:char* p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x4cebc1ed31e8925e()": {
	  "prefix": "N_0x4cebc1ed31e8925e",
	  "body": [
		"N_0x4cebc1ed31e8925e(${1:char* cutsceneName})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n\nThis function is hard-coded to always return 1.  \n"
	},
	"N_0x583df8e3d4afbd98()": {
	  "prefix": "N_0x583df8e3d4afbd98",
	  "body": [
		"N_0x583df8e3d4afbd98()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: int\n"
	},
	"N_0x5edef0cf8c1dab3c()": {
	  "prefix": "N_0x5edef0cf8c1dab3c",
	  "body": [
		"N_0x5edef0cf8c1dab3c()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"N_0x708bdd8cd795b043()": {
	  "prefix": "N_0x708bdd8cd795b043",
	  "body": [
		"N_0x708bdd8cd795b043()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x8d9df6eca8768583()": {
	  "prefix": "N_0x8d9df6eca8768583",
	  "body": [
		"N_0x8d9df6eca8768583(${1:int p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\nExample of usage:  \nv_2 = SCRIPT::_30B4FA1C82DD4B9F(); // int _GET_ID_OF_NEXT_SCRIPT_IN_ENUMERATION()  \nCUTSCENE::_8D9DF6ECA8768583(v_2);  \n"
	},
	"N_0x71b74d2ae19338d0()": {
	  "prefix": "N_0x71b74d2ae19338d0",
	  "body": [
		"N_0x71b74d2ae19338d0(${1:int p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n\nIt's 100% an IS_CUTSCENE_* native.  \n"
	},
	"N_0xa1c996c2a744262e()": {
	  "prefix": "N_0xa1c996c2a744262e",
	  "body": [
		"N_0xa1c996c2a744262e(${1:Any* p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"N_0x7f96f23fa9b73327()": {
	  "prefix": "N_0x7f96f23fa9b73327",
	  "body": [
		"N_0x7f96f23fa9b73327(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0xc61b86c9f61eb404()": {
	  "prefix": "N_0xc61b86c9f61eb404",
	  "body": [
		"N_0xc61b86c9f61eb404(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\nToggles a value (bool) for cutscenes.  \n"
	},
	"N_0xe36a98d8ab3d3c66()": {
	  "prefix": "N_0xe36a98d8ab3d3c66",
	  "body": [
		"N_0xe36a98d8ab3d3c66(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0xa0fe76168a189ddb()": {
	  "prefix": "N_0xa0fe76168a189ddb",
	  "body": [
		"N_0xa0fe76168a189ddb()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: int\n"
	},
	"N_0xb56bbbcc2955d9cb()": {
	  "prefix": "N_0xb56bbbcc2955d9cb",
	  "body": [
		"N_0xb56bbbcc2955d9cb()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n\n\"Can request assets for cutscene entity\"? (found in decompiled scripts)  \n"
	},
	"RegisterEntityForCutscene()": {
	  "prefix": "RegisterEntityForCutscene",
	  "body": [
		"RegisterEntityForCutscene(${1:Ped cutscenePed}, ${2:char* cutsceneEntName}, ${3:int p2}, ${4:Hash modelHash}, ${5:int p4})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0xd00d76a7dfc9d852()": {
	  "prefix": "N_0xd00d76a7dfc9d852",
	  "body": [
		"N_0xd00d76a7dfc9d852(${1:Any* p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"RemoveCutscene()": {
	  "prefix": "RemoveCutscene",
	  "body": [
		"RemoveCutscene()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"RegisterSynchronisedScriptSpeech()": {
	  "prefix": "RegisterSynchronisedScriptSpeech",
	  "body": [
		"RegisterSynchronisedScriptSpeech()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0xc23de0e91c30b58c()": {
	  "prefix": "N_0xc23de0e91c30b58c",
	  "body": "N_0xc23de0e91c30b58c",
	  "description": "OLD NAME, PLEASE USE RequestCutsceneEx INSTEAD!"
	},
	"RequestCutsceneEx()": {
	  "prefix": "RequestCutsceneEx",
	  "body": [
		"RequestCutsceneEx(${1:char* cutsceneName}, ${2:int p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\nExample:  \nCUTSCENE::_0xC23DE0E91C30B58C(\"JOSH_1_INT_CONCAT\", 13, 8);  \nCutscene list: pastebin.com/Bbj7ANpQ  \n\nOld name: N_0xc23de0e91c30b58c"
	},
	"RequestCutscene()": {
	  "prefix": "RequestCutscene",
	  "body": [
		"RequestCutscene(${1:char* cutsceneName}, ${2:int p1})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\np1: usually 8  \nCutscene list: pastebin.com/Bbj7ANpQ  \n"
	},
	"SetCutsceneFadeValues()": {
	  "prefix": "SetCutsceneFadeValues",
	  "body": [
		"SetCutsceneFadeValues(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"SetCutsceneOrigin()": {
	  "prefix": "SetCutsceneOrigin",
	  "body": [
		"SetCutsceneOrigin(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:int p4})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\np3 could be heading. Needs more research.  \n"
	},
	"SetCutscenePedComponentVariation()": {
	  "prefix": "SetCutscenePedComponentVariation",
	  "body": [
		"SetCutscenePedComponentVariation(${1:char* cutsceneEntName}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"N_0x0546524ade2e9723()": {
	  "prefix": "N_0x0546524ade2e9723",
	  "body": "N_0x0546524ade2e9723",
	  "description": "OLD NAME, PLEASE USE SetCutscenePedPropVariation INSTEAD!"
	},
	"SetCutscenePedPropVariation()": {
	  "prefix": "SetCutscenePedPropVariation",
	  "body": [
		"SetCutscenePedPropVariation(${1:char* cutsceneEntName}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:Hash modelHash})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\nThanks R*! ;)  \nif ((l_161 == 0) || (l_161 == 2)) {  \n    sub_2ea27(\"Trying to set Jimmy prop variation\");  \n    CUTSCENE::_0546524ADE2E9723(\"Jimmy_Boston\", 1, 0, 0, 0);  \n}  \n\nOld name: N_0x0546524ade2e9723"
	},
	"SetCutsceneTriggerArea()": {
	  "prefix": "SetCutsceneTriggerArea",
	  "body": [
		"SetCutsceneTriggerArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\nOnly used twice in R* scripts  \n"
	},
	"StartCutscene()": {
	  "prefix": "StartCutscene",
	  "body": [
		"StartCutscene(${1:int p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\nsome kind of flag. Usually 0.  \n"
	},
	"StopCutscene()": {
	  "prefix": "StopCutscene",
	  "body": [
		"StopCutscene(${1:BOOL p0})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"StartCutsceneAtCoords()": {
	  "prefix": "StartCutsceneAtCoords",
	  "body": [
		"StartCutsceneAtCoords(${1:float x}, ${2:float y}, ${3:float z}, ${4:int p3})"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n\np3: some kind of flag. Usually 0.  \n"
	},
	"WasCutsceneSkipped()": {
	  "prefix": "WasCutsceneSkipped",
	  "body": [
		"WasCutsceneSkipped()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: BOOL\n"
	},
	"StopCutsceneImmediately()": {
	  "prefix": "StopCutsceneImmediately",
	  "body": [
		"StopCutsceneImmediately()"
	  ],
	  "description": "Namespace: CUTSCENE\nReturns: void\n"
	},
	"ArrayValueAddInteger()": {
	  "prefix": "ArrayValueAddInteger",
	  "body": [
		"ArrayValueAddInteger(${1:Any* arrayData}, ${2:int value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ArrayValueAddObject()": {
	  "prefix": "ArrayValueAddObject",
	  "body": [
		"ArrayValueAddObject(${1:Any* arrayData})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Any*\n"
	},
	"ArrayValueAddBoolean()": {
	  "prefix": "ArrayValueAddBoolean",
	  "body": [
		"ArrayValueAddBoolean(${1:Any* arrayData}, ${2:BOOL value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ArrayValueAddFloat()": {
	  "prefix": "ArrayValueAddFloat",
	  "body": [
		"ArrayValueAddFloat(${1:Any* arrayData}, ${2:float value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ArrayValueAddVector_3()": {
	  "prefix": "ArrayValueAddVector_3",
	  "body": [
		"ArrayValueAddVector_3(${1:Any* arrayData}, ${2:float valueX}, ${3:float valueY}, ${4:float valueZ})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ArrayValueAddString()": {
	  "prefix": "ArrayValueAddString",
	  "body": [
		"ArrayValueAddString(${1:Any* arrayData}, ${2:char* value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ArrayValueGetFloat()": {
	  "prefix": "ArrayValueGetFloat",
	  "body": [
		"ArrayValueGetFloat(${1:Any* arrayData}, ${2:int arrayIndex})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: float\n"
	},
	"ArrayValueGetObject()": {
	  "prefix": "ArrayValueGetObject",
	  "body": [
		"ArrayValueGetObject(${1:Any* arrayData}, ${2:int arrayIndex})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Any*\n"
	},
	"ArrayValueGetBoolean()": {
	  "prefix": "ArrayValueGetBoolean",
	  "body": [
		"ArrayValueGetBoolean(${1:Any* arrayData}, ${2:int arrayIndex})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"ArrayValueGetInteger()": {
	  "prefix": "ArrayValueGetInteger",
	  "body": [
		"ArrayValueGetInteger(${1:Any* arrayData}, ${2:int arrayIndex})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: int\n"
	},
	"ArrayValueGetString()": {
	  "prefix": "ArrayValueGetString",
	  "body": [
		"ArrayValueGetString(${1:Any* arrayData}, ${2:int arrayIndex})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: char*\n"
	},
	"ArrayValueGetSize()": {
	  "prefix": "ArrayValueGetSize",
	  "body": [
		"ArrayValueGetSize(${1:Any* arrayData})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: int\n"
	},
	"ArrayValueGetVector_3()": {
	  "prefix": "ArrayValueGetVector_3",
	  "body": [
		"ArrayValueGetVector_3(${1:Any* arrayData}, ${2:int arrayIndex})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Vector3\n"
	},
	"DatafileCreate()": {
	  "prefix": "DatafileCreate",
	  "body": [
		"DatafileCreate()"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ArrayValueGetType()": {
	  "prefix": "ArrayValueGetType",
	  "body": [
		"ArrayValueGetType(${1:Any* arrayData}, ${2:int arrayIndex})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: int\n\nTypes:  \n1 = Boolean  \n2 = Integer  \n3 = Float  \n4 = String  \n5 = Vector3  \n6 = Object  \n7 = Array  \n"
	},
	"N_0x906b778ca1dc72b6()": {
	  "prefix": "N_0x906b778ca1dc72b6",
	  "body": "N_0x906b778ca1dc72b6",
	  "description": "OLD NAME, PLEASE USE DatafileGetFileDict INSTEAD!"
	},
	"DatafileGetFileDict()": {
	  "prefix": "DatafileGetFileDict",
	  "body": [
		"DatafileGetFileDict()"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: char*\n\nOld name: N_0x906b778ca1dc72b6"
	},
	"DatafileDelete()": {
	  "prefix": "DatafileDelete",
	  "body": [
		"DatafileDelete()"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"LoadUgcFile()": {
	  "prefix": "LoadUgcFile",
	  "body": [
		"LoadUgcFile(${1:char* filename})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n\nLoads a User-Generated Content (UGC) file. These files can be found in \"[GTA5]\\data\\ugc\" and \"[GTA5]\\common\\patch\\ugc\". They seem to follow a naming convention, most likely of \"[name]_[part].ugc\". See example below for usage.  \nReturns whether or not the file was successfully loaded.  \nExample:  \nDATAFILE::_LOAD_UGC_FILE(\"RockstarPlaylists\") // loads \"rockstarplaylists_00.ugc\"  \n"
	},
	"N_0xbedb96a7584aa8cf()": {
	  "prefix": "N_0xbedb96a7584aa8cf",
	  "body": "N_0xbedb96a7584aa8cf",
	  "description": "OLD NAME, PLEASE USE DatafileIsSavePending INSTEAD!"
	},
	"DatafileIsSavePending()": {
	  "prefix": "DatafileIsSavePending",
	  "body": [
		"DatafileIsSavePending()"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n\nExample:  \nif (!DATAFILE::_BEDB96A7584AA8CF())  \n{  \n    if (!g_109E3)  \n\t{  \n        if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))  \n{  \n            if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())  \n\t{  \n                g_17A8B = 0;  \n            }  \n            if (!g_D52C)  \n\t{  \n                sub_730();  \n            }  \n        }  \n    }  \n}  \n\nOld name: N_0xbedb96a7584aa8cf"
	},
	"N_0x15ff52b809db2353()": {
	  "prefix": "N_0x15ff52b809db2353",
	  "body": [
		"N_0x15ff52b809db2353(${1:Any p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0x22da66936e0fff37()": {
	  "prefix": "N_0x22da66936e0fff37",
	  "body": [
		"N_0x22da66936e0fff37(${1:Any p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0x01095c95cd46b624()": {
	  "prefix": "N_0x01095c95cd46b624",
	  "body": [
		"N_0x01095c95cd46b624(${1:int p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n\nif ((NETWORK::_597F8DBA9B206FC7() > 0) && DATAFILE::_01095C95CD46B624(0)) {  \nv_10 = DATAFILE::_GET_ROOT_OBJECT();  \nv_11 = DATAFILE::_OBJECT_VALUE_GET_INTEGER(v_10, \"pt\");  \nsub_20202(2, v_11);  \na_0 += 1;  \n\t\t} else {   \na_0 += 1;  \n\t\t}  \n"
	},
	"N_0x4dfdd9eb705f8140()": {
	  "prefix": "N_0x4dfdd9eb705f8140",
	  "body": [
		"N_0x4dfdd9eb705f8140(${1:BOOL* p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0x2ed61456317b8178()": {
	  "prefix": "N_0x2ed61456317b8178",
	  "body": [
		"N_0x2ed61456317b8178()"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"N_0x648e7a5434af7969()": {
	  "prefix": "N_0x648e7a5434af7969",
	  "body": [
		"N_0x648e7a5434af7969(${1:char* p0}, ${2:Any* p1}, ${3:BOOL p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:Any* p5}, ${7:char* type})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0x4645de9980999e93()": {
	  "prefix": "N_0x4645de9980999e93",
	  "body": [
		"N_0x4645de9980999e93(${1:char* p0}, ${2:char* p1}, ${3:char* p2}, ${4:char* p3}, ${5:char* type})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n\nNOTE: 'p2' might be some kind of array.  \n"
	},
	"N_0x692d808c34a82143()": {
	  "prefix": "N_0x692d808c34a82143",
	  "body": [
		"N_0x692d808c34a82143(${1:char* p0}, ${2:float p1}, ${3:char* type})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0x52818819057f2b40()": {
	  "prefix": "N_0x52818819057f2b40",
	  "body": [
		"N_0x52818819057f2b40(${1:int p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0x8f5ea1c01d65a100()": {
	  "prefix": "N_0x8f5ea1c01d65a100",
	  "body": [
		"N_0x8f5ea1c01d65a100(${1:Any p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0x6cc86e78358d5119()": {
	  "prefix": "N_0x6cc86e78358d5119",
	  "body": [
		"N_0x6cc86e78358d5119()"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"N_0xa5efc3e847d60507()": {
	  "prefix": "N_0xa5efc3e847d60507",
	  "body": [
		"N_0xa5efc3e847d60507(${1:char* p0}, ${2:char* p1}, ${3:char* p2}, ${4:char* p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n\nNOTE: 'p1' might be some kind of array.  \n"
	},
	"N_0x83bcce3224735f05()": {
	  "prefix": "N_0x83bcce3224735f05",
	  "body": [
		"N_0x83bcce3224735f05(${1:char* filename})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n\nSaves a JSON file? It might even be saving it to the Rockstar Cloud, but I have no way of verifying this  \n\"shrinkletter.c4\", line ~378:  \nDATAFILE::DATAFILE_CREATE();  \nv_5 = DATAFILE::_GET_ROOT_OBJECT();  \nDATAFILE::_OBJECT_VALUE_ADD_INTEGER(v_5, \"in\", a_2);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"st\", &a_2._f1);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"mp\", &a_2._f2);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"ms\", &a_2._f3);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"sc\", &a_2._f5);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"pr\", &a_2._f6);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"fa\", &a_2._f7);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"sm\", &a_2._f8);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"kp\", &a_2._f9);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"sv\", &a_2._fA);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"yo\", &a_2._fB);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"fi\", &a_2._fC);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"rc\", &a_2._fD);  \nDATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, \"co\", &a_2._fE);  \nDATAFILE::_OBJECT_VALUE_ADD_INTEGER(v_5, \"su\", a_2._fF);  \nDATAFILE::_83BCCE3224735F05(\"gta5/psych/index.json\"); // saves the file?  \n"
	},
	"N_0xa69ac4ade82b57a4()": {
	  "prefix": "N_0xa69ac4ade82b57a4",
	  "body": [
		"N_0xa69ac4ade82b57a4(${1:int p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0xc55854c7d7274882()": {
	  "prefix": "N_0xc55854c7d7274882",
	  "body": [
		"N_0xc55854c7d7274882()"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"N_0x9cb0bfa7a9342c3d()": {
	  "prefix": "N_0x9cb0bfa7a9342c3d",
	  "body": [
		"N_0x9cb0bfa7a9342c3d(${1:int p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0xf8cc1ebe0b62e29f()": {
	  "prefix": "N_0xf8cc1ebe0b62e29f",
	  "body": [
		"N_0xf8cc1ebe0b62e29f(${1:Any p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"N_0xad6875bbc0fc899c()": {
	  "prefix": "N_0xad6875bbc0fc899c",
	  "body": [
		"N_0xad6875bbc0fc899c(${1:Blip x})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ObjectValueAddArray()": {
	  "prefix": "ObjectValueAddArray",
	  "body": [
		"ObjectValueAddArray(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Any*\n"
	},
	"N_0xc84527e235fca219()": {
	  "prefix": "N_0xc84527e235fca219",
	  "body": [
		"N_0xc84527e235fca219(${1:char* p0}, ${2:BOOL p1}, ${3:char* p2}, ${4:Any* p3}, ${5:Any* p4}, ${6:char* type}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"ObjectValueAddBoolean()": {
	  "prefix": "ObjectValueAddBoolean",
	  "body": [
		"ObjectValueAddBoolean(${1:Any* objectData}, ${2:char* key}, ${3:BOOL value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"N_0xfccae5b92a830878()": {
	  "prefix": "N_0xfccae5b92a830878",
	  "body": [
		"N_0xfccae5b92a830878(${1:Any p0})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"ObjectValueAddInteger()": {
	  "prefix": "ObjectValueAddInteger",
	  "body": [
		"ObjectValueAddInteger(${1:Any* objectData}, ${2:char* key}, ${3:int value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ObjectValueAddFloat()": {
	  "prefix": "ObjectValueAddFloat",
	  "body": [
		"ObjectValueAddFloat(${1:Any* objectData}, ${2:char* key}, ${3:float value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ObjectValueAddString()": {
	  "prefix": "ObjectValueAddString",
	  "body": [
		"ObjectValueAddString(${1:Any* objectData}, ${2:char* key}, ${3:char* value})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ObjectValueGetArray()": {
	  "prefix": "ObjectValueGetArray",
	  "body": [
		"ObjectValueGetArray(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Any*\n"
	},
	"ObjectValueAddObject()": {
	  "prefix": "ObjectValueAddObject",
	  "body": [
		"ObjectValueAddObject(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Any*\n"
	},
	"ObjectValueAddVector_3()": {
	  "prefix": "ObjectValueAddVector_3",
	  "body": [
		"ObjectValueAddVector_3(${1:Any* objectData}, ${2:char* key}, ${3:float valueX}, ${4:float valueY}, ${5:float valueZ})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: void\n"
	},
	"ObjectValueGetBoolean()": {
	  "prefix": "ObjectValueGetBoolean",
	  "body": [
		"ObjectValueGetBoolean(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: BOOL\n"
	},
	"ObjectValueGetFloat()": {
	  "prefix": "ObjectValueGetFloat",
	  "body": [
		"ObjectValueGetFloat(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: float\n"
	},
	"ObjectValueGetObject()": {
	  "prefix": "ObjectValueGetObject",
	  "body": [
		"ObjectValueGetObject(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Any*\n"
	},
	"ObjectValueGetInteger()": {
	  "prefix": "ObjectValueGetInteger",
	  "body": [
		"ObjectValueGetInteger(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: int\n"
	},
	"ObjectValueGetType()": {
	  "prefix": "ObjectValueGetType",
	  "body": [
		"ObjectValueGetType(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: int\n\nTypes:  \n1 = Boolean  \n2 = Integer  \n3 = Float  \n4 = String  \n5 = Vector3  \n6 = Object  \n7 = Array  \n"
	},
	"ObjectValueGetString()": {
	  "prefix": "ObjectValueGetString",
	  "body": [
		"ObjectValueGetString(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: char*\n"
	},
	"ObjectValueGetVector_3()": {
	  "prefix": "ObjectValueGetVector_3",
	  "body": [
		"ObjectValueGetVector_3(${1:Any* objectData}, ${2:char* key})"
	  ],
	  "description": "Namespace: DATAFILE\nReturns: Vector3\n"
	},
	"DecorExistOn()": {
	  "prefix": "DecorExistOn",
	  "body": [
		"DecorExistOn(${1:Entity entity}, ${2:char* propertyName})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n\nReturns whether or not the specified property is set for the entity.  \n"
	},
	"DecorGetBool()": {
	  "prefix": "DecorGetBool",
	  "body": [
		"DecorGetBool(${1:Entity entity}, ${2:char* propertyName})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n"
	},
	"DecorGetFloat()": {
	  "prefix": "DecorGetFloat",
	  "body": [
		"DecorGetFloat(${1:Entity entity}, ${2:char* propertyName})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: float\n\nConsole Hash: 0x8DE5382F  \nThe native name is correct but the db automatically prefixes \"_\" to unknown natives when changed.  \n"
	},
	"DecorGetInt()": {
	  "prefix": "DecorGetInt",
	  "body": [
		"DecorGetInt(${1:Entity entity}, ${2:char* propertyName})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: int\n"
	},
	"DecorRegister()": {
	  "prefix": "DecorRegister",
	  "body": [
		"DecorRegister(${1:char* propertyName}, ${2:int type})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: void\n\nFound this in standard_global_init.c4 line 1898  \nvoid sub_523a() {  \n    DECORATOR::DECOR_REGISTER(\"Player_Vehicle\", 3);  \n    DECORATOR::DECOR_REGISTER(\"PV_Slot\", 3);  \n    DECORATOR::DECOR_REGISTER(\"Previous_Owner\", 3);  \n    DECORATOR::DECOR_REGISTER(\"Sprayed_Vehicle_Decorator\", 2);  \n    DECORATOR::DECOR_REGISTER(\"Sprayed_Vehicle_Timer_Dec\", 5);  \n    DECORATOR::DECOR_REGISTER(\"Vehicle_Reward\", 3);  \n    DECORATOR::DECOR_REGISTER(\"Vehicle_Reward_Teams\", 3);  \n    DECORATOR::DECOR_REGISTER(\"Skill_Blocker\", 2);  \n    DECORATOR::DECOR_REGISTER(\"TargetPlayerForTeam\", 3);  \n    DECORATOR::DECOR_REGISTER(\"XP_Blocker\", 2);  \n    DECORATOR::DECOR_REGISTER(\"CrowdControlSetUp\", 3);  \n    DECORATOR::DECOR_REGISTER(\"Bought_Drugs\", 2);  \n    DECORATOR::DECOR_REGISTER(\"HeroinInPossession\", 1);  \n    DECORATOR::DECOR_REGISTER(\"CokeInPossession\", 1);  \n    DECORATOR::DECOR_REGISTER(\"WeedInPossession\", 1);  \n    DECORATOR::DECOR_REGISTER(\"MethInPossession\", 1);  \n    DECORATOR::DECOR_REGISTER(\"bombdec\", 3);  \n    DECORATOR::DECOR_REGISTER(\"bombdec1\", 3);  \n    DECORATOR::DECOR_REGISTER(\"bombowner\", 3);  \n    DECORATOR::DECOR_REGISTER(\"noPlateScan\", 2);  \n    DECORATOR::DECOR_REGISTER(\"prisonBreakBoss\", 2);  \n    DECORATOR::DECOR_REGISTER(\"cashondeadbody\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MissionType\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MatchId\", 3);  \n    DECORATOR::DECOR_REGISTER(\"TeamId\", 3);  \n    DECORATOR::DECOR_REGISTER(\"Not_Allow_As_Saved_Veh\", 3);  \n    DECORATOR::DECOR_REGISTER(\"Veh_Modded_By_Player\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MPBitset\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MC_EntityID\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MC_ChasePedID\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MC_Team0_VehDeliveredRules\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MC_Team1_VehDeliveredRules\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MC_Team2_VehDeliveredRules\", 3);  \n    DECORATOR::DECOR_REGISTER(\"MC_Team3_VehDeliveredRules\", 3);  \n    DECORATOR::DECOR_REGISTER(\"AttributeDamage\", 3);  \n    DECORATOR::DECOR_REGISTER(\"GangBackup\", 3);  \n    DECORATOR::DECOR_REGISTER(\"CreatedByPegasus\", 2);  \n    DECORATOR::DECOR_REGISTER(\"BeforeCorona_0\", 2);  \n}  \n-----------------------------------------------------------------------  \nDefines type of property for property name.  \nenum eDecorType  \n{  \n\tDECOR_TYPE_FLOAT = 1,  \n\tDECOR_TYPE_BOOL,  \n\tDECOR_TYPE_INT,  \n\tDECOR_TYPE_UNK,  \n\tDECOR_TYPE_TIME  \n};  \n"
	},
	"DecorIsRegisteredAsType()": {
	  "prefix": "DecorIsRegisteredAsType",
	  "body": [
		"DecorIsRegisteredAsType(${1:char* propertyName}, ${2:int type})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n\nIs property of that type.  \nenum eDecorType  \n{  \n\tDECOR_TYPE_FLOAT = 1,  \n\tDECOR_TYPE_BOOL,  \n\tDECOR_TYPE_INT,  \n\tDECOR_TYPE_UNK,  \n\tDECOR_TYPE_TIME  \n};  \n"
	},
	"DecorRegisterLock()": {
	  "prefix": "DecorRegisterLock",
	  "body": [
		"DecorRegisterLock()"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: void\n\nCalled after all decorator type initializations.  \n"
	},
	"DecorRemove()": {
	  "prefix": "DecorRemove",
	  "body": [
		"DecorRemove(${1:Entity entity}, ${2:char* propertyName})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n"
	},
	"DecorSetBool()": {
	  "prefix": "DecorSetBool",
	  "body": [
		"DecorSetBool(${1:Entity entity}, ${2:char* propertyName}, ${3:BOOL value})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n\nThis function sets metadata of type bool to specified entity.  \n"
	},
	"DecorSetFloat()": {
	  "prefix": "DecorSetFloat",
	  "body": [
		"DecorSetFloat(${1:Entity entity}, ${2:char* propertyName}, ${3:float value})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n\nConsole Hash: 0xBC7BD5CB  \nThe native name is correct but the db automatically prefixes \"_\" to unknown natives when changed.  \n"
	},
	"DecorSetInt()": {
	  "prefix": "DecorSetInt",
	  "body": [
		"DecorSetInt(${1:Entity entity}, ${2:char* propertyName}, ${3:int value})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n\nSets property to int.  \n"
	},
	"DecorSetTime()": {
	  "prefix": "DecorSetTime",
	  "body": [
		"DecorSetTime(${1:Entity entity}, ${2:char* propertyName}, ${3:int timestamp})"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n"
	},
	"N_0x241fca5b1aa14f75()": {
	  "prefix": "N_0x241fca5b1aa14f75",
	  "body": [
		"N_0x241fca5b1aa14f75()"
	  ],
	  "description": "Namespace: DECORATOR\nReturns: BOOL\n\n------------------------  \n| Belongs in DLC2 |  \n------------------------  \nConsole Hash: 0x0AF83036  \nOnly used once in scripts, in maintransition.  \nmaintransition.c4, line ~82432:  \nif (PED::_7350823473013C02(PLAYER::PLAYER_PED_ID()) && (DECORATOR::_241FCA5B1AA14F75() == 0)) {  \n    g_2542A5 = a_1; // 'g_2542A5' used in 'building_controller.ysc' for IPL stuff?  \n    return 1;  \n}  \nLikely used solely for the players ped. The function it's in seems to only be used for initialization/quitting. Called among natives to discard scaleforms, disable frontend, fading in/out, etc. Neighboring strings to some calls include \"HUD_JOINING\", \"HUD_QUITTING\".  \n"
	},
	"IsDlcPresent()": {
	  "prefix": "IsDlcPresent",
	  "body": [
		"IsDlcPresent(${1:Hash dlcHash})"
	  ],
	  "description": "Namespace: DLC\nReturns: BOOL\n\nExample:  \nDLC2::IS_DLC_PRESENT($\\mpbusiness2\\);  \n($ = gethashkey)  \nbruteforce these:  \n0xB119F6D  \n0x96F02EE6  \n"
	},
	"GetIsLoadingScreenActive()": {
	  "prefix": "GetIsLoadingScreenActive",
	  "body": [
		"GetIsLoadingScreenActive()"
	  ],
	  "description": "Namespace: DLC\nReturns: BOOL\n"
	},
	"LoadMpDlcMaps()": {
	  "prefix": "LoadMpDlcMaps",
	  "body": [
		"LoadMpDlcMaps()"
	  ],
	  "description": "Namespace: DLC\nReturns: void\n\nThis loads the GTA:O dlc map parts (high end garages, apartments).  \nWorks in singleplayer.  \nIn order to use GTA:O heist IPL's you have to call this native with the following params: _9BAE5AD2508DF078(1);  \nconsole hash: 0xC65586A9  \n"
	},
	"N_0x9489659372a81585()": {
	  "prefix": "N_0x9489659372a81585",
	  "body": [
		"N_0x9489659372a81585()"
	  ],
	  "description": "Namespace: DLC\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x8d30f648014a92b5()": {
	  "prefix": "N_0x8d30f648014a92b5",
	  "body": [
		"N_0x8d30f648014a92b5()"
	  ],
	  "description": "Namespace: DLC\nReturns: BOOL\n"
	},
	"N_0xa213b11dff526300()": {
	  "prefix": "N_0xa213b11dff526300",
	  "body": [
		"N_0xa213b11dff526300()"
	  ],
	  "description": "Namespace: DLC\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 1.  \n"
	},
	"LoadSpDlcMaps()": {
	  "prefix": "LoadSpDlcMaps",
	  "body": "LoadSpDlcMaps",
	  "description": "OLD NAME, PLEASE USE N_0xd7c10c4a637992c9 INSTEAD!"
	},
	"N_0xd7c10c4a637992c9()": {
	  "prefix": "N_0xd7c10c4a637992c9",
	  "body": [
		"N_0xd7c10c4a637992c9()"
	  ],
	  "description": "Namespace: DLC\nReturns: void\n\nUnloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).  \nThe original (and wrong) definition is below:  \nThis unload the GTA:O DLC map parts (like high end garages/apartments).  \nWorks in singleplayer.  \nconsole hash: 0x8BF60FC3  \n\nOld name: LoadSpDlcMaps"
	},
	"Nullify()": {
	  "prefix": "Nullify",
	  "body": [
		"Nullify(${1:Any* variable}, ${2:Any unused})"
	  ],
	  "description": "Namespace: DLC\nReturns: BOOL\n\nSets the value of the specified variable to 0.  \nAlways returns true.  \nbool _NULLIFY(void* variable, int unused)  \n{  \n    *variable = NULL;  \n    return true;  \n}  \n"
	},
	"N_0xf2e07819ef1a5289()": {
	  "prefix": "N_0xf2e07819ef1a5289",
	  "body": [
		"N_0xf2e07819ef1a5289()"
	  ],
	  "description": "Namespace: DLC\nReturns: BOOL\n\nMulleDK19: This function is hard-coded to always return 1.  \n"
	},
	"AddShockingEventAtPosition()": {
	  "prefix": "AddShockingEventAtPosition",
	  "body": [
		"AddShockingEventAtPosition(${1:int type}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float duration})"
	  ],
	  "description": "Namespace: EVENT\nReturns: ScrHandle\n\nduration is float here  \nEvent types- camx.me/gtav/tasks/shockingevents.txt  \n"
	},
	"AddShockingEventForEntity()": {
	  "prefix": "AddShockingEventForEntity",
	  "body": [
		"AddShockingEventForEntity(${1:int type}, ${2:Entity entity}, ${3:float duration})"
	  ],
	  "description": "Namespace: EVENT\nReturns: ScrHandle\n\nduration is float here  \nEvent types - camx.me/gtav/tasks/shockingevents.txt  \n"
	},
	"BlockDecisionMakerEvent()": {
	  "prefix": "BlockDecisionMakerEvent",
	  "body": [
		"BlockDecisionMakerEvent(${1:Hash name}, ${2:int type})"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"ClearDecisionMakerEventResponse()": {
	  "prefix": "ClearDecisionMakerEventResponse",
	  "body": [
		"ClearDecisionMakerEventResponse(${1:Hash name}, ${2:int type})"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"IsShockingEventInSphere()": {
	  "prefix": "IsShockingEventInSphere",
	  "body": [
		"IsShockingEventInSphere(${1:int type}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
	  ],
	  "description": "Namespace: EVENT\nReturns: BOOL\n\nSome events that i found, not sure about them, but seems to have logic based on my tests:  \n'82 - dead body  \n'86   \n'87   \n'88 - shooting, fire extinguisher in use  \n'89   \n'93 - ped using horn  \n'95 - ped receiving melee attack  \n'102 - living ped receiving shot  \n'104 - player thrown grenade, tear gas, smoke grenade, jerry can dropping gasoline  \n'105 - melee attack against veh  \n'106 - player running  \n'108 - vehicle theft  \n'112 - melee attack  \n'113 - veh rollover ped  \n'114 - dead ped receiving shot  \n'116 - aiming at ped  \n'121   \n\t\tHere is full dump of shocking event types from the exe camx.me/gtav/tasks/shockingevents.txt  \n"
	},
	"RemoveAllShockingEvents()": {
	  "prefix": "RemoveAllShockingEvents",
	  "body": [
		"RemoveAllShockingEvents(${1:BOOL p0})"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"RemoveShockingEvent()": {
	  "prefix": "RemoveShockingEvent",
	  "body": [
		"RemoveShockingEvent(${1:ScrHandle event})"
	  ],
	  "description": "Namespace: EVENT\nReturns: BOOL\n"
	},
	"RemoveShockingEventSpawnBlockingAreas()": {
	  "prefix": "RemoveShockingEventSpawnBlockingAreas",
	  "body": [
		"RemoveShockingEventSpawnBlockingAreas()"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"SetDecisionMaker()": {
	  "prefix": "SetDecisionMaker",
	  "body": [
		"SetDecisionMaker(${1:Ped ped}, ${2:Hash name})"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"SuppressAgitationEventsNextFrame()": {
	  "prefix": "SuppressAgitationEventsNextFrame",
	  "body": [
		"SuppressAgitationEventsNextFrame()"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"SuppressShockingEventTypeNextFrame()": {
	  "prefix": "SuppressShockingEventTypeNextFrame",
	  "body": [
		"SuppressShockingEventTypeNextFrame(${1:int type})"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"SuppressShockingEventsNextFrame()": {
	  "prefix": "SuppressShockingEventsNextFrame",
	  "body": [
		"SuppressShockingEventsNextFrame()"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"UnblockDecisionMakerEvent()": {
	  "prefix": "UnblockDecisionMakerEvent",
	  "body": [
		"UnblockDecisionMakerEvent(${1:Hash name}, ${2:int type})"
	  ],
	  "description": "Namespace: EVENT\nReturns: void\n"
	},
	"GetDlcVehicleData()": {
	  "prefix": "GetDlcVehicleData",
	  "body": [
		"GetDlcVehicleData(${1:int dlcVehicleIndex}, ${2:int* outData})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n\ndlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.  \noutData is a struct of 3 8-byte items.  \nThe Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.  \n"
	},
	"GetDlcVehicleFlags()": {
	  "prefix": "GetDlcVehicleFlags",
	  "body": [
		"GetDlcVehicleFlags(${1:int dlcVehicleIndex})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n"
	},
	"GetDlcVehicleModel()": {
	  "prefix": "GetDlcVehicleModel",
	  "body": [
		"GetDlcVehicleModel(${1:int dlcVehicleIndex})"
	  ],
	  "description": "Namespace: FILE\nReturns: Hash\n\ndlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS()  \n"
	},
	"GetDlcWeaponData()": {
	  "prefix": "GetDlcWeaponData",
	  "body": [
		"GetDlcWeaponData(${1:int dlcWeaponIndex}, ${2:int* outData})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n\ndlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.  \nstruct DlcWeaponData  \n{  \nint emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this  \nint padding1;  \nint weaponHash;  \nint padding2;  \nint unk;  \nint padding3;  \nint weaponCost;  \nint padding4;  \nint ammoCost;  \nint padding5;  \nint ammoType;  \nint padding6;  \nint defaultClipSize;  \nint padding7;  \nchar nameLabel[64];  \nchar descLabel[64];  \nchar desc2Label[64]; // usually \"the\" + name  \nchar upperCaseNameLabel[64];  \n};  \n"
	},
	"GetForcedComponent()": {
	  "prefix": "GetForcedComponent",
	  "body": [
		"GetForcedComponent(${1:Hash componentHash}, ${2:int componentId}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"GetDlcWeaponComponentData()": {
	  "prefix": "GetDlcWeaponComponentData",
	  "body": [
		"GetDlcWeaponComponentData(${1:int dlcWeaponIndex}, ${2:int dlcWeapCompIndex}, ${3:Any* ComponentDataPtr})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n\np0 seems to be the weapon index  \np1 seems to be the weapon component index  \nstruct DlcComponentData{  \nint attachBone;  \nint padding1;  \nint bActiveByDefault;  \nint padding2;  \nint unk;  \nint padding3;  \nint componentHash;  \nint padding4;  \nint unk2;  \nint padding5;  \nint componentCost;  \nint padding6;  \nchar nameLabel[64];  \nchar descLabel[64];  \n};  \n"
	},
	"N_0x278f76c3b0a8f109()": {
	  "prefix": "N_0x278f76c3b0a8f109",
	  "body": "N_0x278f76c3b0a8f109",
	  "description": "OLD NAME, PLEASE USE GetNumDecorations INSTEAD!"
	},
	"GetNumDecorations()": {
	  "prefix": "GetNumDecorations",
	  "body": [
		"GetNumDecorations(${1:int character})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n\nonly documented to be continued...  \n\nOld name: N_0x278f76c3b0a8f109"
	},
	"GetHashNameForComponent()": {
	  "prefix": "GetHashNameForComponent",
	  "body": [
		"GetHashNameForComponent(${1:Entity entity}, ${2:int componentId}, ${3:int drawableVariant}, ${4:int textureVariant})"
	  ],
	  "description": "Namespace: FILE\nReturns: Hash\n"
	},
	"GetNumDlcVehicles()": {
	  "prefix": "GetNumDlcVehicles",
	  "body": [
		"GetNumDlcVehicles()"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n"
	},
	"GetHashNameForProp()": {
	  "prefix": "GetHashNameForProp",
	  "body": [
		"GetHashNameForProp(${1:Entity entity}, ${2:int componentId}, ${3:int propIndex}, ${4:int propTextureIndex})"
	  ],
	  "description": "Namespace: FILE\nReturns: Hash\n"
	},
	"GetNumForcedComponents()": {
	  "prefix": "GetNumForcedComponents",
	  "body": [
		"GetNumForcedComponents(${1:Hash componentHash})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n\nReturns number of possible values of the componentId argument of GET_FORCED_COMPONENT.  \n"
	},
	"GetPropFromOutfit()": {
	  "prefix": "GetPropFromOutfit",
	  "body": [
		"GetPropFromOutfit(${1:Any outfit}, ${2:int slot}, ${3:Any* item})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n\noutfit = a structure passing though it - see GET_SHOP_PED_QUERY_OUTFIT  \nslot - outfit slot  \nitem - hold 3 ints in a struct, you can use Vector3 structure  \nGET_SHOP_PED_???  \n"
	},
	"GetNumDlcWeaponComponents()": {
	  "prefix": "GetNumDlcWeaponComponents",
	  "body": [
		"GetNumDlcWeaponComponents(${1:int dlcWeaponIndex})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n\nAllowed Values from 0 - DLC1::GET_NUM_DLC_WEAPONS()  \n"
	},
	"GetShopPedComponent()": {
	  "prefix": "GetShopPedComponent",
	  "body": [
		"GetShopPedComponent(${1:Hash p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"GetNumDlcWeapons()": {
	  "prefix": "GetNumDlcWeapons",
	  "body": [
		"GetNumDlcWeapons()"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n\nGets the total number of DLC weapons.  \n"
	},
	"GetNumPropsFromOutfit()": {
	  "prefix": "GetNumPropsFromOutfit",
	  "body": [
		"GetNumPropsFromOutfit(${1:int character}, ${2:int p1}, ${3:int p2}, ${4:BOOL p3}, ${5:int p4}, ${6:int componentId})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n\ncharacter is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.  \ncomponentId is between 0 and 11 and corresponds to the usual component slots.  \np1 could be the outfit number; unsure.  \np2 is usually -1; unknown function.  \np3 appears to be a boolean flag; unknown function.  \np4 is usually -1; unknown function.  \n"
	},
	"GetShopPedQueryComponent()": {
	  "prefix": "GetShopPedQueryComponent",
	  "body": [
		"GetShopPedQueryComponent(${1:int componentId}, ${2:int* outComponent})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"GetShopPedQueryOutfit()": {
	  "prefix": "GetShopPedQueryOutfit",
	  "body": [
		"GetShopPedQueryOutfit(${1:Any p0}, ${2:Any* outfit})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n\nstruct Outfit_s  \n{  \n\tint mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece;  \n\tint maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture,   \n\t\tarmourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture;  \n};  \n"
	},
	"N_0xff56381874f82086()": {
	  "prefix": "N_0xff56381874f82086",
	  "body": "N_0xff56381874f82086",
	  "description": "OLD NAME, PLEASE USE GetTattooCollectionData INSTEAD!"
	},
	"GetTattooCollectionData()": {
	  "prefix": "GetTattooCollectionData",
	  "body": [
		"GetTattooCollectionData(${1:int characterType}, ${2:int decorationIndex}, ${3:Any* outComponent})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\nCharacter types:\n\n\n0 = Michael, \n1 = Franklin, \n2 = Trevor, \n3 = MPMale, \n4 = MPFemale\n\n\ncsharp\nenum TattooZoneData  \n{  \n    ZONE_TORSO = 0,  \n    ZONE_HEAD = 1,  \n    ZONE_LEFT_ARM = 2,  \n    ZONE_RIGHT_ARM = 3,  \n    ZONE_LEFT_LEG = 4,  \n    ZONE_RIGHT_LEG = 5,  \n    ZONE_UNKNOWN = 6,\n    ZONE_NONE = 7,  \n};\n\nstruct outComponent\n{\n    // these vars are suffixed with 4 bytes of padding each.\n    uint unk;\n    int unk2;\n    uint tattooCollectionHash;\n    uint tattooNameHash;\n    int unk3;\n    TattooZoneData zoneId;\n    uint unk4;\n    uint unk5;\n    // maybe more, not sure exactly, decompiled scripts are very vague around this part.\n}\n\nOld name: N_0xff56381874f82086"
	},
	"GetShopPedOutfit()": {
	  "prefix": "GetShopPedOutfit",
	  "body": [
		"GetShopPedOutfit(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"InitShopPedComponent()": {
	  "prefix": "InitShopPedComponent",
	  "body": [
		"InitShopPedComponent(${1:int* outComponent})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"InitShopPedProp()": {
	  "prefix": "InitShopPedProp",
	  "body": [
		"InitShopPedProp(${1:int* outProp})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"N_0x073ca26b079f956e()": {
	  "prefix": "N_0x073ca26b079f956e",
	  "body": "N_0x073ca26b079f956e",
	  "description": "OLD NAME, PLEASE USE GetShopPedOutfitLocate INSTEAD!"
	},
	"GetShopPedOutfitLocate()": {
	  "prefix": "GetShopPedOutfitLocate",
	  "body": [
		"GetShopPedOutfitLocate(${1:Any p0})"
	  ],
	  "description": "Namespace: FILE\nReturns: Any\n\nOld name: N_0x073ca26b079f956e"
	},
	"GetShopPedQueryProp()": {
	  "prefix": "GetShopPedQueryProp",
	  "body": [
		"GetShopPedQueryProp(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"N_0x0564b9ff9631b82c()": {
	  "prefix": "N_0x0564b9ff9631b82c",
	  "body": "N_0x0564b9ff9631b82c",
	  "description": "OLD NAME, PLEASE USE IsDlcVehicleMod INSTEAD!"
	},
	"IsDlcVehicleMod()": {
	  "prefix": "IsDlcVehicleMod",
	  "body": [
		"IsDlcVehicleMod(${1:Any modData})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n\nUse _GET_VEHICLE_MOD_DATA for modData  \n\nOld name: N_0x0564b9ff9631b82c"
	},
	"N_0x341de7ed1d2a1bfd()": {
	  "prefix": "N_0x341de7ed1d2a1bfd",
	  "body": [
		"N_0x341de7ed1d2a1bfd(${1:Hash componentHash}, ${2:Hash drawableSlotHash}, ${3:int componentId})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n\n6,000+ calls from scripts, all with either 0 or 1 for p2, that's a boolean in my book  \n---  \n ^ The last one is the componentId  \niVar8 = dlc1::get_hash_name_for_component(iParam0, 8, ped::get_ped_drawable_variation(iParam0, 8), ped::get_ped_texture_variation(iParam0, 8));  \n\tif (dlc1::_0x341DE7ED1D2A1BFD(iVar8, 240476421, 8))  \n"
	},
	"GetVariantComponent()": {
	  "prefix": "GetVariantComponent",
	  "body": [
		"GetVariantComponent(${1:Hash componentHash}, ${2:int componentId}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"N_0x5d5caff661ddf6fc()": {
	  "prefix": "N_0x5d5caff661ddf6fc",
	  "body": [
		"N_0x5d5caff661ddf6fc(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"IsOutfitEmpty()": {
	  "prefix": "IsOutfitEmpty",
	  "body": "IsOutfitEmpty",
	  "description": "OLD NAME, PLEASE USE IsDlcDataEmpty INSTEAD!"
	},
	"IsDlcDataEmpty()": {
	  "prefix": "IsDlcDataEmpty",
	  "body": [
		"IsDlcDataEmpty(${1:Any* dlcData})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n\nOld name: IsOutfitEmpty"
	},
	"N_0xa9f9c2e0fde11cbb()": {
	  "prefix": "N_0xa9f9c2e0fde11cbb",
	  "body": [
		"N_0xa9f9c2e0fde11cbb(${1:Any p0}, ${2:Any p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: FILE\nReturns: BOOL\n"
	},
	"N_0xc17ad0e5752becda()": {
	  "prefix": "N_0xc17ad0e5752becda",
	  "body": [
		"N_0xc17ad0e5752becda(${1:Hash componentHash})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n"
	},
	"N_0x017568a8182d98a6()": {
	  "prefix": "N_0x017568a8182d98a6",
	  "body": [
		"N_0x017568a8182d98a6(${1:Any p0})"
	  ],
	  "description": "Namespace: FILE\nReturns: Any\n"
	},
	"N_0x50f457823ce6eb5f()": {
	  "prefix": "N_0x50f457823ce6eb5f",
	  "body": [
		"N_0x50f457823ce6eb5f(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n"
	},
	"N_0xc098810437312fff()": {
	  "prefix": "N_0xc098810437312fff",
	  "body": [
		"N_0xc098810437312fff(${1:int modData})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n\nUse _GET_VEHICLE_MOD_DATA for modData  \nAppears to be a GET_DLC_VEHICLE_MOD_* native.  \n"
	},
	"N_0xe1ca84ebf72e691d()": {
	  "prefix": "N_0xe1ca84ebf72e691d",
	  "body": [
		"N_0xe1ca84ebf72e691d(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: FILE\nReturns: void\n"
	},
	"N_0xf3fbe2d50a6a8c28()": {
	  "prefix": "N_0xf3fbe2d50a6a8c28",
	  "body": [
		"N_0xf3fbe2d50a6a8c28(${1:int character}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: FILE\nReturns: int\n\ncharacters  \n0: Michael  \n1: Franklin  \n2: Trevor  \n3: MPMale  \n4: MPFemale  \n"
	},
	"N_0xd40aac51e8e4c663()": {
	  "prefix": "N_0xd40aac51e8e4c663",
	  "body": [
		"N_0xd40aac51e8e4c663(${1:Hash propHash})"
	  ],
	  "description": "Namespace: FILES\nReturns: int\nDecompiled scripts have this listed as `FILES::_GET_NUM_DLC_PED_PROPS_UNK`, but that seems wrong.\n\nHas something to do with ped (dlc) helmet props.\n\nThis native returns 1/true when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled, 0/false if there's no alternative version with a visor for this helmet prop.\n\nSo something like `_DOES_HELMET_HASH_HAVE_A_VISOR`, anyone that knows the joaat hash?\n\nDecompiled scripts handle this as an int. But the result is always 0 or 1 (after testing every prop hash on freemode peds). So might actually be a bool?\n\n\niVar16 = PED::GET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 0);\niVar17 = PED::GET_PED_PROP_TEXTURE_INDEX(PLAYER::PLAYER_PED_ID(), 0);\niVar18 = FILES::GET_HASH_NAME_FOR_PROP(PLAYER::PLAYER_PED_ID(), 0, iVar16, iVar17);\nif (FILES::_GET_NUM_DLC_PED_PROPS_UNK(iVar18) > 0) // _0xD40AAC51E8E4C663\n{\n    HUD::BEGIN_TEXT_COMMAND_DISPLAY_HELP(\"VISOR_TOGGLE\");\n    HUD::END_TEXT_COMMAND_DISPLAY_HELP(0, 0, true, 6000);\n    iVar15++;\n    func_12660(7668, iVar15, -1, 1);\n    MISC::SET_BIT(&(Global_2512581.f_1710), 24);\n}\n"
	},
	"N_0xd81b7f27bc773e66()": {
	  "prefix": "N_0xd81b7f27bc773e66",
	  "body": [
		"N_0xd81b7f27bc773e66(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: FILES\nReturns: void\n"
	},
	"AddExplosion()": {
	  "prefix": "AddExplosion",
	  "body": [
		"AddExplosion(${1:float x}, ${2:float y}, ${3:float z}, ${4:int explosionType}, ${5:float damageScale}, ${6:BOOL isAudible}, ${7:BOOL isInvisible}, ${8:float cameraShake})"
	  ],
	  "description": "Namespace: FIRE\nReturns: void\n\nBOOL isAudible = If explosion makes a sound.  \nBOOL isInvisible = If the explosion is invisible or not.  \nthis native is missing a new argument: noDamage  \nnodamage = false: damage || nodamage = true: no damage  \nenum ExplosionTypes  \n{  \n\tEXPLOSION_GRENADE,  \n\tEXPLOSION_GRENADELAUNCHER,  \n\tEXPLOSION_STICKYBOMB,  \n\tEXPLOSION_MOLOTOV,  \n\tEXPLOSION_ROCKET,  \n\tEXPLOSION_TANKSHELL,  \n\tEXPLOSION_HI_OCTANE,  \n\tEXPLOSION_CAR,  \n\tEXPLOSION_PLANE,  \n\tEXPLOSION_PETROL_PUMP,  \n\tEXPLOSION_BIKE,  \n\tEXPLOSION_DIR_STEAM,  \n\tEXPLOSION_DIR_FLAME,  \n\tEXPLOSION_DIR_WATER_HYDRANT,  \n\tEXPLOSION_DIR_GAS_CANISTER,  \n\tEXPLOSION_BOAT,  \n\tEXPLOSION_SHIP_DESTROY,  \n\tEXPLOSION_TRUCK,  \n\tEXPLOSION_BULLET,  \n\tEXPLOSION_SMOKEGRENADELAUNCHER,  \n\tEXPLOSION_SMOKEGRENADE,  \n\tEXPLOSION_BZGAS,  \n\tEXPLOSION_FLARE,  \n\tEXPLOSION_GAS_CANISTER,  \n\tEXPLOSION_EXTINGUISHER,  \n\tEXPLOSION_PROGRAMMABLEAR,  \n\tEXPLOSION_TRAIN,  \n\tEXPLOSION_BARREL,  \n\tEXPLOSION_PROPANE,  \n\tEXPLOSION_BLIMP,  \n\tEXPLOSION_DIR_FLAME_EXPLODE,  \n\tEXPLOSION_TANKER,  \n\tEXPLOSION_PLANE_ROCKET,  \n\tEXPLOSION_VEHICLE_BULLET,  \n\tEXPLOSION_GAS_TANK,  \n\tEXPLOSION_BIRD_CRAP  \n};  \n"
	},
	"AddOwnedExplosion()": {
	  "prefix": "AddOwnedExplosion",
	  "body": [
		"AddOwnedExplosion(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int explosionType}, ${6:float damageScale}, ${7:BOOL isAudible}, ${8:BOOL isInvisible}, ${9:float cameraShake})"
	  ],
	  "description": "Namespace: FIRE\nReturns: void\n\nenum ExplosionTypes  \n{  \n\tEXPLOSION_GRENADE,  \n\tEXPLOSION_GRENADELAUNCHER,  \n\tEXPLOSION_STICKYBOMB,  \n\tEXPLOSION_MOLOTOV,  \n\tEXPLOSION_ROCKET,  \n\tEXPLOSION_TANKSHELL,  \n\tEXPLOSION_HI_OCTANE,  \n\tEXPLOSION_CAR,  \n\tEXPLOSION_PLANE,  \n\tEXPLOSION_PETROL_PUMP,  \n\tEXPLOSION_BIKE,  \n\tEXPLOSION_DIR_STEAM,  \n\tEXPLOSION_DIR_FLAME,  \n\tEXPLOSION_DIR_WATER_HYDRANT,  \n\tEXPLOSION_DIR_GAS_CANISTER,  \n\tEXPLOSION_BOAT,  \n\tEXPLOSION_SHIP_DESTROY,  \n\tEXPLOSION_TRUCK,  \n\tEXPLOSION_BULLET,  \n\tEXPLOSION_SMOKEGRENADELAUNCHER,  \n\tEXPLOSION_SMOKEGRENADE,  \n\tEXPLOSION_BZGAS,  \n\tEXPLOSION_FLARE,  \n\tEXPLOSION_GAS_CANISTER,  \n\tEXPLOSION_EXTINGUISHER,  \n\tEXPLOSION_PROGRAMMABLEAR,  \n\tEXPLOSION_TRAIN,  \n\tEXPLOSION_BARREL,  \n\tEXPLOSION_PROPANE,  \n\tEXPLOSION_BLIMP,  \n\tEXPLOSION_DIR_FLAME_EXPLODE,  \n\tEXPLOSION_TANKER,  \n\tEXPLOSION_PLANE_ROCKET,  \n\tEXPLOSION_VEHICLE_BULLET,  \n\tEXPLOSION_GAS_TANK,  \n\tEXPLOSION_BIRD_CRAP  \n};  \nBOOL isAudible = If explosion makes a sound.  \nBOOL isInvisible = If the explosion is invisible or not.  \n"
	},
	"GetClosestFirePos()": {
	  "prefix": "GetClosestFirePos",
	  "body": [
		"GetClosestFirePos(${1:Vector3* outPosition}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: FIRE\nReturns: BOOL\n\nReturns TRUE if it found something. FALSE if not.  \n"
	},
	"AddSpecfxExplosion()": {
	  "prefix": "AddSpecfxExplosion",
	  "body": "AddSpecfxExplosion",
	  "description": "OLD NAME, PLEASE USE AddExplosionWithUserVfx INSTEAD!"
	},
	"AddExplosionWithUserVfx()": {
	  "prefix": "AddExplosionWithUserVfx",
	  "body": [
		"AddExplosionWithUserVfx(${1:float x}, ${2:float y}, ${3:float z}, ${4:int explosionType}, ${5:Hash explosionFx}, ${6:float damageScale}, ${7:BOOL isAudible}, ${8:BOOL isInvisible}, ${9:float cameraShake})"
	  ],
	  "description": "Namespace: FIRE\nReturns: void\n\n\n\nOld name: AddSpecfxExplosion"
	},
	"IsEntityOnFire()": {
	  "prefix": "IsEntityOnFire",
	  "body": [
		"IsEntityOnFire(${1:Entity entity})"
	  ],
	  "description": "Namespace: FIRE\nReturns: BOOL\n"
	},
	"GetNumberOfFiresInRange()": {
	  "prefix": "GetNumberOfFiresInRange",
	  "body": [
		"GetNumberOfFiresInRange(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
	  ],
	  "description": "Namespace: FIRE\nReturns: int\n"
	},
	"IsExplosionInAngledArea()": {
	  "prefix": "IsExplosionInAngledArea",
	  "body": [
		"IsExplosionInAngledArea(${1:int explosionType}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float angle})"
	  ],
	  "description": "Namespace: FIRE\nReturns: BOOL\n"
	},
	"GetPedInsideExplosionArea()": {
	  "prefix": "GetPedInsideExplosionArea",
	  "body": [
		"GetPedInsideExplosionArea(${1:int explosionType}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float radius})"
	  ],
	  "description": "Namespace: FIRE\nReturns: Entity\n\nReturns a handle to the first entity within the a circle spawned inside the 2 points from a radius. It could return a ped or an entity, but the scripts expect a ped, but still check if it's a ped.  \n"
	},
	"IsExplosionInSphere()": {
	  "prefix": "IsExplosionInSphere",
	  "body": [
		"IsExplosionInSphere(${1:int explosionType}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
	  ],
	  "description": "Namespace: FIRE\nReturns: BOOL\n"
	},
	"IsExplosionInArea()": {
	  "prefix": "IsExplosionInArea",
	  "body": [
		"IsExplosionInArea(${1:int explosionType}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2})"
	  ],
	  "description": "Namespace: FIRE\nReturns: BOOL\n"
	},
	"RemoveScriptFire()": {
	  "prefix": "RemoveScriptFire",
	  "body": [
		"RemoveScriptFire(${1:int fireHandle})"
	  ],
	  "description": "Namespace: FIRE\nReturns: void\n"
	},
	"N_0x6070104b699b2ef4()": {
	  "prefix": "N_0x6070104b699b2ef4",
	  "body": [
		"N_0x6070104b699b2ef4(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: FIRE\nReturns: Any\n\nConsole Hash: 0x37C388DB  \n"
	},
	"StartEntityFire()": {
	  "prefix": "StartEntityFire",
	  "body": [
		"StartEntityFire(${1:Entity entity})"
	  ],
	  "description": "Namespace: FIRE\nReturns: Any\n"
	},
	"StartScriptFire()": {
	  "prefix": "StartScriptFire",
	  "body": [
		"StartScriptFire(${1:float X}, ${2:float Y}, ${3:float Z}, ${4:int maxChildren}, ${5:BOOL isGasFire})"
	  ],
	  "description": "Namespace: FIRE\nReturns: int\n\nStarts a fire:  \nxyz: Location of fire  \nmaxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.  \nisGasFire: Whether or not the fire is powered by gasoline.  \n"
	},
	"StopEntityFire()": {
	  "prefix": "StopEntityFire",
	  "body": [
		"StopEntityFire(${1:Entity entity})"
	  ],
	  "description": "Namespace: FIRE\nReturns: void\n"
	},
	"StopFireInRange()": {
	  "prefix": "StopFireInRange",
	  "body": [
		"StopFireInRange(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
	  ],
	  "description": "Namespace: FIRE\nReturns: void\n\nThis doesn't stop fire nor the fire propagation in a loop... for some reasons.  \n"
	},
	"AddClanDecalToVehicle()": {
	  "prefix": "AddClanDecalToVehicle",
	  "body": [
		"AddClanDecalToVehicle(${1:Vehicle vehicle}, ${2:Ped ped}, ${3:int boneIndex}, ${4:float x1}, ${5:float x2}, ${6:float x3}, ${7:float y1}, ${8:float y2}, ${9:float y3}, ${10:float z1}, ${11:float z2}, ${12:float z3}, ${13:float scale}, ${14:Any p13}, ${15:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nNow has 15 parameters, previous declaration:  \nBOOL _0x428BDCB9DA58DA53(Any p0, Any p1, Any p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, Any p13)  \nboneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone. They are usually rotations and measurements. Haven't reversed which are what yet.  \nScale is how big the decal will be.  \np13 is always 0.  \nFor alpha, 200 seems to match what the game is doing, I think. I don't have access to the new scripts to see what this parameter is, but based on guessing this seems (kind of) accurate.  \n"
	},
	"AddDecal()": {
	  "prefix": "AddDecal",
	  "body": [
		"AddDecal(${1:int decalType}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float width}, ${12:float height}, ${13:float rCoef}, ${14:float gCoef}, ${15:float bCoef}, ${16:float opacity}, ${17:float timeout}, ${18:BOOL p17}, ${19:BOOL p18}, ${20:BOOL p19})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Object\n\ndecal types:  \npublic enum DecalTypes  \n{  \n    splatters_blood = 1010,  \n    splatters_blood_dir = 1015,  \n    splatters_blood_mist = 1017,  \n    splatters_mud = 1020,  \n    splatters_paint = 1030,  \n    splatters_water = 1040,  \n    splatters_water_hydrant = 1050,  \n    splatters_blood2 = 1110,  \n    weapImpact_metal = 4010,  \n    weapImpact_concrete = 4020,  \n    weapImpact_mattress = 4030,  \n    weapImpact_mud = 4032,  \n    weapImpact_wood = 4050,  \n    weapImpact_sand = 4053,  \n    weapImpact_cardboard = 4040,  \n    weapImpact_melee_glass = 4100,  \n    weapImpact_glass_blood = 4102,  \n    weapImpact_glass_blood2 = 4104,  \n    weapImpact_shotgun_paper = 4200,  \n    weapImpact_shotgun_mattress,  \n    weapImpact_shotgun_metal,  \n    weapImpact_shotgun_wood,  \n    weapImpact_shotgun_dirt,  \n    weapImpact_shotgun_tvscreen,  \n    weapImpact_shotgun_tvscreen2,  \n    weapImpact_shotgun_tvscreen3,  \n    weapImpact_melee_concrete = 4310,  \n    weapImpact_melee_wood = 4312,  \n    weapImpact_melee_metal = 4314,  \n    burn1 = 4421,  \n    burn2,  \n    burn3,  \n    burn4,  \n    burn5,  \n    bang_concrete_bang = 5000,  \n    bang_concrete_bang2,  \n    bang_bullet_bang,  \n    bang_bullet_bang2 = 5004,  \n    bang_glass = 5031,  \n    bang_glass2,  \n    solidPool_water = 9000,  \n    solidPool_blood,  \n    solidPool_oil,  \n    solidPool_petrol,  \n    solidPool_mud,  \n    porousPool_water,  \n    porousPool_blood,  \n    porousPool_oil,  \n    porousPool_petrol,  \n    porousPool_mud,  \n    porousPool_water_ped_drip,  \n    liquidTrail_water = 9050  \n}  \n"
	},
	"N_0x8a35c742130c6080()": {
	  "prefix": "N_0x8a35c742130c6080",
	  "body": "N_0x8a35c742130c6080",
	  "description": "OLD NAME, PLEASE USE AddDecalToMarker INSTEAD!"
	},
	"AddDecalToMarker()": {
	  "prefix": "AddDecalToMarker",
	  "body": [
		"AddDecalToMarker(${1:int decalType}, ${2:char* textureDict}, ${3:char* textureName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nREQUEST_STREAMED_TEXTURE_DICT(\"MPOnMissMarkers\", false);  \n*uParam0.f_809 = add_decal(9120, vParam1, vVar4, vVar7, 2f, 2f, to_float(iVar0) / 255f, to_float(iVar1) / 255f, to_float(iVar2) / 255f, 1f, -1f, 1, 0, 0);  \n_0x8A35C742130C6080(9120, \"MPOnMissMarkers\", \"Capture_The_Flag_Base_Icon\");  \n\nOld name: N_0x8a35c742130c6080"
	},
	"AddEntityIcon()": {
	  "prefix": "AddEntityIcon",
	  "body": [
		"AddEntityIcon(${1:Entity entity}, ${2:char* icon})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n\nExample:  \nGRAPHICS::ADD_ENTITY_ICON(a_0, \"MP_Arrow\");  \nI tried this and nothing happened...  \n"
	},
	"AttachTvAudioToEntity()": {
	  "prefix": "AttachTvAudioToEntity",
	  "body": [
		"AttachTvAudioToEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nMight be more appropriate in AUDIO?  \n"
	},
	"PushScaleformMovieFunction()": {
	  "prefix": "PushScaleformMovieFunction",
	  "body": "PushScaleformMovieFunction",
	  "description": "OLD NAME, PLEASE USE BeginScaleformMovieMethod INSTEAD!"
	},
	"BeginScaleformMovieMethod()": {
	  "prefix": "BeginScaleformMovieMethod",
	  "body": [
		"BeginScaleformMovieMethod(${1:int scaleform}, ${2:char* functionName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nPush a function from the Scaleform onto the stack  \n\nOld name: PushScaleformMovieFunction"
	},
	"AddPetrolDecal()": {
	  "prefix": "AddPetrolDecal",
	  "body": [
		"AddPetrolDecal(${1:float x}, ${2:float y}, ${3:float z}, ${4:float groundLvl}, ${5:float width}, ${6:float transparency})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0xab58c27c2e6123c6()": {
	  "prefix": "N_0xab58c27c2e6123c6",
	  "body": "N_0xab58c27c2e6123c6",
	  "description": "OLD NAME, PLEASE USE BeginScaleformMovieMethodOnFrontend INSTEAD!"
	},
	"PushScaleformMovieFunctionN()": {
	  "prefix": "PushScaleformMovieFunctionN",
	  "body": "PushScaleformMovieFunctionN",
	  "description": "OLD NAME, PLEASE USE BeginScaleformMovieMethodOnFrontend INSTEAD!"
	},
	"BeginScaleformMovieMethodN()": {
	  "prefix": "BeginScaleformMovieMethodN",
	  "body": "BeginScaleformMovieMethodN",
	  "description": "OLD NAME, PLEASE USE BeginScaleformMovieMethodOnFrontend INSTEAD!"
	},
	"BeginScaleformMovieMethodOnFrontend()": {
	  "prefix": "BeginScaleformMovieMethodOnFrontend",
	  "body": [
		"BeginScaleformMovieMethodOnFrontend(${1:char* functionName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\nStarts frontend (pause menu) scaleform movie methods.\nThis can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.\n\nUse [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER`](#_0xB9449845F73F5E9C) for header scaleform functions.\nOld name: N_0xab58c27c2e6123c6\nOld name: PushScaleformMovieFunctionN\nOld name: BeginScaleformMovieMethodN"
	},
	"BeginTextComponent()": {
	  "prefix": "BeginTextComponent",
	  "body": "BeginTextComponent",
	  "description": "OLD NAME, PLEASE USE BeginTextCommandScaleformString INSTEAD!"
	},
	"BeginTextCommandScaleformString()": {
	  "prefix": "BeginTextCommandScaleformString",
	  "body": [
		"BeginTextCommandScaleformString(${1:char* componentType})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nPreviously called _BEGIN_TEXT_COMPONENT  \nCalled prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.  \nExamples:  \nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"NUMBER\");  \nUI::ADD_TEXT_COMPONENT_INTEGER(GAMEPLAY::ABSI(a_1));  \nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();  \nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRING\");  \nUI::_ADD_TEXT_COMPONENT_STRING(a_2);  \nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();  \nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRTNM2\");  \nUI::_0x17299B63C7683A2B(v_3);  \nUI::_0x17299B63C7683A2B(v_4);  \nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();  \nGRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING(\"STRTNM1\");  \nUI::_0x17299B63C7683A2B(v_3);  \nGRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();  \n\nOld name: BeginTextComponent"
	},
	"PushScaleformMovieFunctionFromHudComponent()": {
	  "prefix": "PushScaleformMovieFunctionFromHudComponent",
	  "body": "PushScaleformMovieFunctionFromHudComponent",
	  "description": "OLD NAME, PLEASE USE BeginScaleformMovieMethodHudComponent INSTEAD!"
	},
	"BeginScaleformMovieMethodHudComponent()": {
	  "prefix": "BeginScaleformMovieMethodHudComponent",
	  "body": [
		"BeginScaleformMovieMethodHudComponent(${1:int hudComponent}, ${2:char* functionName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nPushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION, just a hud component id instead of a Scaleform.  \nKnown components:  \n19   \n20   \nThis native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under \"scripts\\__Packages\\com\\rockstargames\\gtav\\hud\\hudComponents\" and \"scripts\\__Packages\\com\\rockstargames\\gtav\\Multiplayer\".  \n\nOld name: PushScaleformMovieFunctionFromHudComponent"
	},
	"N_0xb9449845f73f5e9c()": {
	  "prefix": "N_0xb9449845f73f5e9c",
	  "body": "N_0xb9449845f73f5e9c",
	  "description": "OLD NAME, PLEASE USE BeginScaleformMovieMethodOnFrontendHeader INSTEAD!"
	},
	"BeginScaleformMovieMethodV()": {
	  "prefix": "BeginScaleformMovieMethodV",
	  "body": "BeginScaleformMovieMethodV",
	  "description": "OLD NAME, PLEASE USE BeginScaleformMovieMethodOnFrontendHeader INSTEAD!"
	},
	"BeginScaleformMovieMethodOnFrontendHeader()": {
	  "prefix": "BeginScaleformMovieMethodOnFrontendHeader",
	  "body": [
		"BeginScaleformMovieMethodOnFrontendHeader(${1:char* functionName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\nStarts frontend (pause menu) scaleform movie methods for header options.\n\nUse [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND`](#_0xAB58C27C2E6123C6) to customize the content inside the frontend menus.\nOld name: N_0xb9449845f73f5e9c\nOld name: BeginScaleformMovieMethodV"
	},
	"CallScaleformMovieFunctionMixedParams()": {
	  "prefix": "CallScaleformMovieFunctionMixedParams",
	  "body": [
		"CallScaleformMovieFunctionMixedParams(${1:int scaleform}, ${2:char* functionName}, ${3:float floatParam1}, ${4:float floatParam2}, ${5:float floatParam3}, ${6:float floatParam4}, ${7:float floatParam5}, ${8:char* stringParam1}, ${9:char* stringParam2}, ${10:char* stringParam3}, ${11:char* stringParam4}, ${12:char* stringParam5})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nCalls the Scaleform function and passes both float and string parameters (in their respective order).  \nThe number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).  \nNOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.  \nExamples:  \n// function MY_FUNCTION(floatParam1, floatParam2, stringParam)  \nGRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, \"MY_FUNCTION\", 10.0, 20.0, -1.0, -1.0, -1.0, \"String param\", 0, 0, 0, 0);  \n// function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)  \nGRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, \"MY_FUNCTION_2\", 10.0, -1.0, -1.0, -1.0, -1.0, \"String param #1\", \"String param #2\", 0, 0, 0);  \n"
	},
	"CallScaleformMovieFunctionFloatParams()": {
	  "prefix": "CallScaleformMovieFunctionFloatParams",
	  "body": [
		"CallScaleformMovieFunctionFloatParams(${1:int scaleform}, ${2:char* functionName}, ${3:float param1}, ${4:float param2}, ${5:float param3}, ${6:float param4}, ${7:float param5})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nCalls the Scaleform function and passes the parameters as floats.  \nThe number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.  \n"
	},
	"CallScaleformMovieFunctionVoid()": {
	  "prefix": "CallScaleformMovieFunctionVoid",
	  "body": "CallScaleformMovieFunctionVoid",
	  "description": "OLD NAME, PLEASE USE CallScaleformMovieMethod INSTEAD!"
	},
	"CallScaleformMovieMethod()": {
	  "prefix": "CallScaleformMovieMethod",
	  "body": [
		"CallScaleformMovieMethod(${1:int scaleform}, ${2:char* method})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nCalls the Scaleform function.  \n\nOld name: CallScaleformMovieFunctionVoid"
	},
	"CallScaleformMovieFunctionStringParams()": {
	  "prefix": "CallScaleformMovieFunctionStringParams",
	  "body": [
		"CallScaleformMovieFunctionStringParams(${1:int scaleform}, ${2:char* functionName}, ${3:char* param1}, ${4:char* param2}, ${5:char* param3}, ${6:char* param4}, ${7:char* param5})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nCalls the Scaleform function and passes the parameters as strings.  \nThe number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).  \n"
	},
	"N_0x92ccc17a7a2285da()": {
	  "prefix": "N_0x92ccc17a7a2285da",
	  "body": "N_0x92ccc17a7a2285da",
	  "description": "OLD NAME, PLEASE USE ClearExtraTimecycleModifier INSTEAD!"
	},
	"ClearExtraTimecycleModifier()": {
	  "prefix": "ClearExtraTimecycleModifier",
	  "body": [
		"ClearExtraTimecycleModifier()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nClears the secondary timecycle modifier usually set with [`SetExtraTimecycleModifier`](#_0x5096FD9CCB49056D)\nOld name: N_0x92ccc17a7a2285da"
	},
	"ClearDrawOrigin()": {
	  "prefix": "ClearDrawOrigin",
	  "body": [
		"ClearDrawOrigin()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nResets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.  \nSee GRAPHICS::SET_DRAW_ORIGIN(...) for further information.  \n"
	},
	"CreateTrackedPoint()": {
	  "prefix": "CreateTrackedPoint",
	  "body": [
		"CreateTrackedPoint()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nCreates a tracked point, useful for checking the visibility of a 3D point on screen.  \n"
	},
	"ClearTimecycleModifier()": {
	  "prefix": "ClearTimecycleModifier",
	  "body": [
		"ClearTimecycleModifier()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"DeleteCheckpoint()": {
	  "prefix": "DeleteCheckpoint",
	  "body": [
		"DeleteCheckpoint(${1:int checkpoint})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"DisableVehicleDistantlights()": {
	  "prefix": "DisableVehicleDistantlights",
	  "body": [
		"DisableVehicleDistantlights(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"CreateCheckpoint()": {
	  "prefix": "CreateCheckpoint",
	  "body": [
		"CreateCheckpoint(${1:int type}, ${2:float posX1}, ${3:float posY1}, ${4:float posZ1}, ${5:float posX2}, ${6:float posY2}, ${7:float posZ2}, ${8:float radius}, ${9:int red}, ${10:int green}, ${11:int blue}, ${12:int alpha}, ${13:int reserved})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nCreates a checkpoint. Returns the handle of the checkpoint.  \n20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.  \nParameters:  \n* type - The type of checkpoint to create. See below for a list of checkpoint types.  \n* pos1 - The position of the checkpoint.  \n* pos2 - The position of the next checkpoint to point to.  \n* radius - The radius of the checkpoint.  \n* color - The color of the checkpoint.  \n* reserved - Special parameter, see below for details. Usually set to 0 in the scripts.  \nCheckpoint types:  \n0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker  \n15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker        \n20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker   \n25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      \n30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker   \n35-38-------Ring: Airplane Up, Left, Right, UpsideDown  \n39----------?  \n40----------Ring: just a ring  \n41----------?  \n42-44-------Cylinder w/ number (uses 'reserved' parameter)  \n45-47-------Cylinder no arrow or number  \nIf using type 42-44, reserved sets number / number and shape to display  \n0-99------------Just numbers (0-99)  \n100-109-----------------Arrow (0-9)  \n110-119------------Two arrows (0-9)  \n120-129----------Three arrows (0-9)  \n130-139----------------Circle (0-9)  \n140-149------------CycleArrow (0-9)  \n150-159----------------Circle (0-9)  \n160-169----Circle  w/ pointer (0-9)  \n170-179-------Perforated ring (0-9)  \n180-189----------------Sphere (0-9)  \n"
	},
	"HasVehicleGotDecal()": {
	  "prefix": "HasVehicleGotDecal",
	  "body": "HasVehicleGotDecal",
	  "description": "OLD NAME, PLEASE USE DoesVehicleHaveDecal INSTEAD!"
	},
	"DoesVehicleHaveDecal()": {
	  "prefix": "DoesVehicleHaveDecal",
	  "body": [
		"DoesVehicleHaveDecal(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nThis function is called before ADD_CLAN_DECAL_TO_VEHICLE to see if it needs to run. IDK if it's for clan decal or not, but the 2nd parameter might be decal index? It's always passed 0. Not sure what this function really does. But it does return 0 if the clan tag is not on, and 1 if it is.  \n\nOld name: HasVehicleGotDecal"
	},
	"DestroyTrackedPoint()": {
	  "prefix": "DestroyTrackedPoint",
	  "body": [
		"DestroyTrackedPoint(${1:int point})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"DrawBox()": {
	  "prefix": "DrawBox",
	  "body": [
		"DrawBox(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int red}, ${8:int green}, ${9:int blue}, ${10:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nx,y,z = start pos  \nx2,y2,z2 = end pos  \nDraw's a 3D Box between the two x,y,z coords.  \n--------------  \nKeep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.  \nI recommend using a predefined function to call this.  \n[VB.NET]  \nPublic Sub DrawBox(a As Vector3, b As Vector3, col As Color)  \n    [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)  \nEnd Sub  \n[C#]  \npublic void DrawBox(Vector3 a, Vector3 b, Color col)  \n{  \n    Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);  \n}  \n"
	},
	"DoesParticleFxLoopedExist()": {
	  "prefix": "DoesParticleFxLoopedExist",
	  "body": [
		"DoesParticleFxLoopedExist(${1:int ptfxHandle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"DrawDebugCross()": {
	  "prefix": "DrawDebugCross",
	  "body": [
		"DrawDebugCross(${1:float x}, ${2:float y}, ${3:float z}, ${4:float size}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"DrawDebugBox()": {
	  "prefix": "DrawDebugBox",
	  "body": [
		"DrawDebugBox(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int red}, ${8:int green}, ${9:int blue}, ${10:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"DrawDebugLine()": {
	  "prefix": "DrawDebugLine",
	  "body": [
		"DrawDebugLine(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int red}, ${8:int green}, ${9:int blue}, ${10:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"DrawDebugText()": {
	  "prefix": "DrawDebugText",
	  "body": [
		"DrawDebugText(${1:char* text}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"DrawDebugLineWithTwoColours()": {
	  "prefix": "DrawDebugLineWithTwoColours",
	  "body": [
		"DrawDebugLineWithTwoColours(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int r1}, ${8:int g1}, ${9:int b1}, ${10:int r2}, ${11:int g2}, ${12:int b2}, ${13:int alpha1}, ${14:int alpha2})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"N_0x2bc54a8188768488()": {
	  "prefix": "N_0x2bc54a8188768488",
	  "body": "N_0x2bc54a8188768488",
	  "description": "OLD NAME, PLEASE USE DrawInteractiveSprite INSTEAD!"
	},
	"DrawInteractiveSprite()": {
	  "prefix": "DrawInteractiveSprite",
	  "body": [
		"DrawInteractiveSprite(${1:char* textureDict}, ${2:char* textureName}, ${3:float screenX}, ${4:float screenY}, ${5:float width}, ${6:float height}, ${7:float heading}, ${8:int red}, ${9:int green}, ${10:int blue}, ${11:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nSimilar to [\\_DRAW_SPRITE](#_0xE7FFAE5EBF23D890), but seems to be some kind of \"interactive\" sprite, at least used by render targets.\nThese seem to be the only dicts ever requested by this native:\n\n\nprop_screen_biker_laptop\nProp_Screen_GR_Disruption\nProp_Screen_TaleOfUs\nprop_screen_nightclub\nProp_Screen_IE_Adhawk\nprop_screen_sm_free_trade_shipping\nprop_screen_hacker_truck\nMPDesktop\nProp_Screen_Nightclub\nAnd a few others\n\nOld name: N_0x2bc54a8188768488"
	},
	"DrawDebugSphere()": {
	  "prefix": "DrawDebugSphere",
	  "body": [
		"DrawDebugSphere(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"DrawLightWithRangeWithShadow()": {
	  "prefix": "DrawLightWithRangeWithShadow",
	  "body": "DrawLightWithRangeWithShadow",
	  "description": "OLD NAME, PLEASE USE DrawLightWithRangeAndShadow INSTEAD!"
	},
	"DrawLightWithRangeAndShadow()": {
	  "prefix": "DrawLightWithRangeAndShadow",
	  "body": [
		"DrawLightWithRangeAndShadow(${1:float x}, ${2:float y}, ${3:float z}, ${4:int r}, ${5:int g}, ${6:int b}, ${7:float range}, ${8:float intensity}, ${9:float shadow})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: DrawLightWithRangeWithShadow"
	},
	"DrawDebugText_2d()": {
	  "prefix": "DrawDebugText_2d",
	  "body": [
		"DrawDebugText_2d(${1:char* text}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"DrawLightWithRange()": {
	  "prefix": "DrawLightWithRange",
	  "body": [
		"DrawLightWithRange(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:int colorR}, ${5:int colorG}, ${6:int colorB}, ${7:float range}, ${8:float intensity})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"DrawMarker()": {
	  "prefix": "DrawMarker",
	  "body": [
		"DrawMarker(${1:int type}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float dirX}, ${6:float dirY}, ${7:float dirZ}, ${8:float rotX}, ${9:float rotY}, ${10:float rotZ}, ${11:float scaleX}, ${12:float scaleY}, ${13:float scaleZ}, ${14:int red}, ${15:int green}, ${16:int blue}, ${17:int alpha}, ${18:BOOL bobUpAndDown}, ${19:BOOL faceCamera}, ${20:int p19}, ${21:BOOL rotate}, ${22:char* textureDict}, ${23:char* textureName}, ${24:BOOL drawOnEnts})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nDraws a marker with the specified appearance at the target location. This has to be called every frame, e.g. in a `Wait(0)` loop.\n\nThere's a [list of markers](https://docs.fivem.net/game-references/markers/) on the FiveM documentation site."
	},
	"DrawRect()": {
	  "prefix": "DrawRect",
	  "body": [
		"DrawRect(${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:int r}, ${6:int g}, ${7:int b}, ${8:int a})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nDraws a rectangle on the screen.  \n-x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)  \n-y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)  \n-width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)  \n-height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)  \n-R: Red part of the color. (0-255)  \n-G: Green part of the color. (0-255)  \n-B: Blue part of the color. (0-255)  \n-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)  \nThe total number of rectangles to be drawn in one frame is apparently limited to 399.  \n"
	},
	"DrawLine()": {
	  "prefix": "DrawLine",
	  "body": [
		"DrawLine(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int red}, ${8:int green}, ${9:int blue}, ${10:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nDraws a depth-tested line from one point to another.  \n----------------  \nx1, y1, z1 : Coordinates for the first point  \nx2, y2, z2 : Coordinates for the second point  \nr, g, b, alpha : Color with RGBA-Values  \nI recommend using a predefined function to call this.  \n[VB.NET]  \nPublic Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)  \n    [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)  \nEnd Sub  \n[C#]  \npublic void DrawLine(Vector3 from, Vector3 to, Color col)  \n{  \n    Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);  \n}  \n"
	},
	"DrawScaleformMovie()": {
	  "prefix": "DrawScaleformMovie",
	  "body": [
		"DrawScaleformMovie(${1:int scaleformHandle}, ${2:float x}, ${3:float y}, ${4:float width}, ${5:float height}, ${6:int red}, ${7:int green}, ${8:int blue}, ${9:int alpha}, ${10:int unk})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nGTA V Scaleforms Decompiled  \npastebin.com/mmNdjX2k  \n"
	},
	"DrawPoly()": {
	  "prefix": "DrawPoly",
	  "body": [
		"DrawPoly(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:int red}, ${11:int green}, ${12:int blue}, ${13:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nx/y/z - Location of a vertex (in world coords), presumably.  \n----------------  \nx1, y1, z1     : Coordinates for the first point  \nx2, y2, z2     : Coordinates for the second point  \nx3, y3, z3     : Coordinates for the third point  \nr, g, b, alpha : Color with RGBA-Values  \nKeep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).  \nBut be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.  \nI recommend using a predefined function to call this.  \n[VB.NET]  \nPublic Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)  \n    [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)  \nEnd Sub  \n[C#]  \npublic void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)  \n{  \n    Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);  \n}  \nBTW: Intersecting triangles are not supported: They overlap in the order they were called.  \n"
	},
	"DrawScaleformMovieFullscreenMasked()": {
	  "prefix": "DrawScaleformMovieFullscreenMasked",
	  "body": [
		"DrawScaleformMovieFullscreenMasked(${1:int scaleform1}, ${2:int scaleform2}, ${3:int red}, ${4:int green}, ${5:int blue}, ${6:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"DrawScaleformMovieFullscreen()": {
	  "prefix": "DrawScaleformMovieFullscreen",
	  "body": [
		"DrawScaleformMovieFullscreen(${1:int scaleform}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha}, ${6:int unk})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nunk is not used so no need  \n"
	},
	"N_0x1ce592fdc749d6f5()": {
	  "prefix": "N_0x1ce592fdc749d6f5",
	  "body": "N_0x1ce592fdc749d6f5",
	  "description": "OLD NAME, PLEASE USE DrawScaleformMovie_3dNonAdditive INSTEAD!"
	},
	"DrawScaleformMovie_3dNonAdditive()": {
	  "prefix": "DrawScaleformMovie_3dNonAdditive",
	  "body": [
		"DrawScaleformMovie_3dNonAdditive(${1:int scaleform}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float scaleX}, ${12:float scaleY}, ${13:float scaleZ}, ${14:Any p13})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nwhat the heck does this one do differently from the one above?  \n\nOld name: N_0x1ce592fdc749d6f5"
	},
	"DrawSpotLight()": {
	  "prefix": "DrawSpotLight",
	  "body": [
		"DrawSpotLight(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, ${7:int colorR}, ${8:int colorG}, ${9:int colorB}, ${10:float distance}, ${11:float brightness}, ${12:float hardness}, ${13:float radius}, ${14:float falloff})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nParameters:  \n* pos - coordinate where the spotlight is located  \n* dir - the direction vector the spotlight should aim at from its current position  \n* r,g,b - color of the spotlight  \n* distance - the maximum distance the light can reach  \n* brightness - the brightness of the light  \n* roundness - \"smoothness\" of the circle edge  \n* radius - the radius size of the spotlight  \n* falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)  \nExample in C# (spotlight aims at the closest vehicle):  \nVector3 myPos = Game.Player.Character.Position;  \nVehicle nearest = World.GetClosestVehicle(myPos , 1000f);  \nVector3 destinationCoords = nearest.Position;  \nVector3 dirVector = destinationCoords - myPos;  \ndirVector.Normalize();  \nFunction.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);  \n"
	},
	"N_0x87d51d72255d4e78()": {
	  "prefix": "N_0x87d51d72255d4e78",
	  "body": "N_0x87d51d72255d4e78",
	  "description": "OLD NAME, PLEASE USE DrawScaleformMovie_3d INSTEAD!"
	},
	"DrawScaleformMovie_3d()": {
	  "prefix": "DrawScaleformMovie_3d",
	  "body": [
		"DrawScaleformMovie_3d(${1:int scaleform}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float p7}, ${9:float sharpness}, ${10:float p9}, ${11:float scaleX}, ${12:float scaleY}, ${13:float scaleZ}, ${14:Any p13})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nsharpness goes from 0.0 to 1.0  \n\nOld name: N_0x87d51d72255d4e78"
	},
	"N_0x98c4fe6ec34154ca()": {
	  "prefix": "N_0x98c4fe6ec34154ca",
	  "body": "N_0x98c4fe6ec34154ca",
	  "description": "OLD NAME, PLEASE USE DrawShowroom INSTEAD!"
	},
	"DrawShowroom()": {
	  "prefix": "DrawShowroom",
	  "body": [
		"DrawShowroom(${1:char* p0}, ${2:Ped ped}, ${3:int p2}, ${4:float posX}, ${5:float posY}, ${6:float posZ})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nIt's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A  \np0 was always \"CELEBRATION_WINNER\"  \n\nOld name: N_0x98c4fe6ec34154ca"
	},
	"DrawSprite()": {
	  "prefix": "DrawSprite",
	  "body": [
		"DrawSprite(${1:char* textureDict}, ${2:char* textureName}, ${3:float screenX}, ${4:float screenY}, ${5:float width}, ${6:float height}, ${7:float heading}, ${8:int red}, ${9:int green}, ${10:int blue}, ${11:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nDraws a 2D sprite on the screen.  \nParameters:  \ntextureDict - Name of texture dictionary to load texture from (e.g. \"CommonMenu\", \"MPWeaponsCommon\", etc.)  \ntextureName - Name of texture to load from texture dictionary (e.g. \"last_team_standing_icon\", \"tennis_icon\", etc.)  \nscreenX/Y - Screen offset (0.5 = center)  \nscaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)  \nheading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees  \nred,green,blue - Sprite color (default = 255/255/255)  \nalpha - opacity level  \n"
	},
	"DrawTvChannel()": {
	  "prefix": "DrawTvChannel",
	  "body": [
		"DrawTvChannel(${1:float xPos}, ${2:float yPos}, ${3:float xScale}, ${4:float yScale}, ${5:float rotation}, ${6:int red}, ${7:int green}, ${8:int blue}, ${9:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nAll calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.  \n\"act_cinema.ysc\", line 1483:  \nUI::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);  \nUI::SET_TEXT_RENDER_ID(l_AE);  \nGRAPHICS::_0x61BB1D9B3A95D802(4);  \nGRAPHICS::_0xC6372ECD45D73BCD(1);  \nif (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {  \n    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);  \n} else {   \n    GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);  \n}  \n\"am_mp_property_int.ysc\", line 102545:  \nif (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {  \n    if (UI::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {  \n        UI::SET_TEXT_RENDER_ID(a_2._f1);  \n        GRAPHICS::_0x61BB1D9B3A95D802(4);  \n        GRAPHICS::_0xC6372ECD45D73BCD(1);  \n        GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);  \n        if (GRAPHICS::GET_TV_CHANNEL() == -1) {  \n            sub_a8fa5(a_2, 1);  \n        } else {   \n            sub_a8fa5(a_2, 1);  \n            GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);  \n        }  \n        UI::SET_TEXT_RENDER_ID(UI::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());  \n    }  \n}  \n"
	},
	"SetCameraEndtime()": {
	  "prefix": "SetCameraEndtime",
	  "body": "SetCameraEndtime",
	  "description": "OLD NAME, PLEASE USE EnableClownBloodVfx INSTEAD!"
	},
	"EnableClownBloodVfx()": {
	  "prefix": "EnableClownBloodVfx",
	  "body": [
		"EnableClownBloodVfx(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nCreates cartoon effect when Michel smokes the weed  \n\nOld name: SetCameraEndtime"
	},
	"DrawSpotLightWithShadow()": {
	  "prefix": "DrawSpotLightWithShadow",
	  "body": [
		"DrawSpotLightWithShadow(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, ${7:int colorR}, ${8:int colorG}, ${9:int colorB}, ${10:float distance}, ${11:float brightness}, ${12:float roundness}, ${13:float radius}, ${14:float falloff}, ${15:int shadowId})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nshadowId: each call to this native in the same tick should have a different value passed to this parameter, if two or more calls have the same values, only the first one will render its shadow properly  \n"
	},
	"PopScaleformMovieFunctionVoid()": {
	  "prefix": "PopScaleformMovieFunctionVoid",
	  "body": "PopScaleformMovieFunctionVoid",
	  "description": "OLD NAME, PLEASE USE EndScaleformMovieMethod INSTEAD!"
	},
	"EndScaleformMovieMethod()": {
	  "prefix": "EndScaleformMovieMethod",
	  "body": [
		"EndScaleformMovieMethod()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nPops and calls the Scaleform function on the stack  \n\nOld name: PopScaleformMovieFunctionVoid"
	},
	"N_0x9dce1f0f78260875()": {
	  "prefix": "N_0x9dce1f0f78260875",
	  "body": "N_0x9dce1f0f78260875",
	  "description": "OLD NAME, PLEASE USE EnableAlienBloodVfx INSTEAD!"
	},
	"EnableAlienBloodVfx()": {
	  "prefix": "EnableAlienBloodVfx",
	  "body": [
		"EnableAlienBloodVfx(${1:BOOL Toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nCreates a motion-blur sort of effect, this native does not seem to work, however by using the [`START_SCREEN_EFFECT`](#_0x2206BF9A37B7F724) native with `\"DrugsMichaelAliensFight\"` as the effect parameter, you should be able to get the effect.\n\nThis native does not seem to work, however by using the [START_SCREEN_EFFECT](https://runtime.fivem.net/doc/natives/#_0x2206BF9A37B7F724) native with \"DrugsMichaelAliensFight\" as the effect parameter, you should be able to get the effect.\nOld name: N_0x9dce1f0f78260875"
	},
	"N_0xae4e8157d9ecf087()": {
	  "prefix": "N_0xae4e8157d9ecf087",
	  "body": "N_0xae4e8157d9ecf087",
	  "description": "OLD NAME, PLEASE USE EndTextCommandScaleformString_2 INSTEAD!"
	},
	"EndTextCommandScaleformString_2()": {
	  "prefix": "EndTextCommandScaleformString_2",
	  "body": [
		"EndTextCommandScaleformString_2()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0xae4e8157d9ecf087"
	},
	"N_0xdeadc0dedeadc0de()": {
	  "prefix": "N_0xdeadc0dedeadc0de",
	  "body": "N_0xdeadc0dedeadc0de",
	  "description": "OLD NAME, PLEASE USE EntityDescriptionText INSTEAD!"
	},
	"EntityDescriptionText()": {
	  "prefix": "EntityDescriptionText",
	  "body": [
		"EntityDescriptionText(${1:Entity entity})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOnly found twice in decompiled scripts. Something to do with an entity/object?  \nOn a side note, it's very interesting how the hash for this native is \"DEADC0DE\" - this is usually used as padding for initializing a buffer of some sort. I wonder if this native is actually \"dead\"?  \n\"carmod_shop.ysc\", line 9520:  \nif (ENTITY::DOES_ENTITY_EXIST(l_324._f6)) {  \n    GRAPHICS::_0xDEADC0DEDEADC0DE(l_324._f6);  \n}  \n\"fm_mission_controller.ysc\", line 189641:  \nif (GAMEPLAY::IS_BIT_SET(g_1870E1._f7B64[a_0/*104*/]._f25, 28)) {  \n    GRAPHICS::_0xDEADC0DEDEADC0DE(NETWORK::NET_TO_OBJ(l_4064._f26A._f87[a_0/*1*/]));  \n    if (!GAMEPLAY::IS_BIT_SET(g_1870E1._f7B64[a_0/*104*/]._f25, 31)) {  \n        if (!ENTITY::IS_ENTITY_DEAD(v_7)) {  \n            AUDIO::PLAY_SOUND_FROM_ENTITY(-1, \"EMP_Vehicle_Hum\", v_7, \"DLC_HEIST_BIOLAB_DELIVER_EMP_SOUNDS\", 0, 0);  \n            GAMEPLAY::SET_BIT(&g_1870E1._f7B64[a_0/*104*/]._f25, 31);  \n        }  \n    }  \n}  \nConsole Hash: 0xC12AC47A  \n----------  \nIt's most likely named UPDATE_* (like UPDATE_ENTITY_SHIT_OR_SOMETHING).  \n\nOld name: N_0xdeadc0dedeadc0de"
	},
	"EnableMovieSubtitles()": {
	  "prefix": "EnableMovieSubtitles",
	  "body": [
		"EnableMovieSubtitles(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"GetScreenActiveResolution()": {
	  "prefix": "GetScreenActiveResolution",
	  "body": "GetScreenActiveResolution",
	  "description": "OLD NAME, PLEASE USE GetActiveScreenResolution INSTEAD!"
	},
	"GetActiveScreenResolution()": {
	  "prefix": "GetActiveScreenResolution",
	  "body": [
		"GetActiveScreenResolution(${1:int* x}, ${2:int* y})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nReturns current screen resolution.  \n\nOld name: GetScreenActiveResolution"
	},
	"PopScaleformMovieFunction()": {
	  "prefix": "PopScaleformMovieFunction",
	  "body": "PopScaleformMovieFunction",
	  "description": "OLD NAME, PLEASE USE EndScaleformMovieMethodReturn INSTEAD!"
	},
	"EndScaleformMovieMethodReturn()": {
	  "prefix": "EndScaleformMovieMethodReturn",
	  "body": [
		"EndScaleformMovieMethodReturn()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nPops and calls the Scaleform movie on the stack. Returns data from the function (not sure if this is a string).  \n\nOld name: PopScaleformMovieFunction"
	},
	"GetDecalWashLevel()": {
	  "prefix": "GetDecalWashLevel",
	  "body": [
		"GetDecalWashLevel(${1:int decal})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: float\n"
	},
	"GetIsHidef()": {
	  "prefix": "GetIsHidef",
	  "body": [
		"GetIsHidef()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nfalse = Any resolution < 1280x720  \ntrue = Any resolution >= 1280x720  \n"
	},
	"EndTextComponent()": {
	  "prefix": "EndTextComponent",
	  "body": "EndTextComponent",
	  "description": "OLD NAME, PLEASE USE EndTextCommandScaleformString INSTEAD!"
	},
	"EndTextCommandScaleformString()": {
	  "prefix": "EndTextCommandScaleformString",
	  "body": [
		"EndTextCommandScaleformString()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nPreviously called _END_TEXT_COMPONENT  \n\nOld name: EndTextComponent"
	},
	"GetIsWidescreen()": {
	  "prefix": "GetIsWidescreen",
	  "body": [
		"GetIsWidescreen()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nSetting Aspect Ratio Manually in game will return:  \nfalse - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )  \ntrue - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )  \nSetting Aspect Ratio to \"Auto\" in game will return \"false\" or \"true\" based on the actual set Resolution Ratio.  \n"
	},
	"FadeDecalsInRange()": {
	  "prefix": "FadeDecalsInRange",
	  "body": [
		"FadeDecalsInRange(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nFades nearby decals within the range specified  \n"
	},
	"N_0x473151ebc762c6da()": {
	  "prefix": "N_0x473151ebc762c6da",
	  "body": "N_0x473151ebc762c6da",
	  "description": "OLD NAME, PLEASE USE GetNumberOfPhotos INSTEAD!"
	},
	"GetNumberOfPhotos()": {
	  "prefix": "GetNumberOfPhotos",
	  "body": [
		"GetNumberOfPhotos()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nOld name: N_0x473151ebc762c6da"
	},
	"GetSafeZoneSize()": {
	  "prefix": "GetSafeZoneSize",
	  "body": [
		"GetSafeZoneSize()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: float\n\nGets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.  \n"
	},
	"GetScreenAspectRatio()": {
	  "prefix": "GetScreenAspectRatio",
	  "body": "GetScreenAspectRatio",
	  "description": "OLD NAME, PLEASE USE GetAspectRatio INSTEAD!"
	},
	"GetAspectRatio()": {
	  "prefix": "GetAspectRatio",
	  "body": [
		"GetAspectRatio(${1:BOOL b})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: float\n\nOld name: GetScreenAspectRatio"
	},
	"N_0x2de7efa66b906036()": {
	  "prefix": "N_0x2de7efa66b906036",
	  "body": "N_0x2de7efa66b906036",
	  "description": "OLD NAME, PLEASE USE GetScaleformMovieMethodReturnValueInt INSTEAD!"
	},
	"GetScaleformMovieFunctionReturnInt()": {
	  "prefix": "GetScaleformMovieFunctionReturnInt",
	  "body": "GetScaleformMovieFunctionReturnInt",
	  "description": "OLD NAME, PLEASE USE GetScaleformMovieMethodReturnValueInt INSTEAD!"
	},
	"GetScaleformMovieMethodReturnValueInt()": {
	  "prefix": "GetScaleformMovieMethodReturnValueInt",
	  "body": [
		"GetScaleformMovieMethodReturnValueInt(${1:int method_return})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\nUsed to get a return value from a scaleform function.\nReturns an int in the same way `GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING` returns a string.\n\nOld description:\n\n\nNeeds a bit more research, but it seems to return an int.  \nTesting with the scaleform \"HACKING_PC\" it seems to return an int depending on the clicked App/Program ID  \n\"agency_heist3b.ysc\", line 71836:  \nif (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 201) || CONTROLS::IS_CONTROL_JUST_PRESSED(2, 237)) {  \n    GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(l_46, \"SET_INPUT_EVENT_SELECT\");  \n    l_45 = GRAPHICS::_END_SCALEFORM_MOVIE_METHOD_RETURN();  \n}  \nif (GRAPHICS::IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(l_45)) {  \n    v_13 = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(l_45);  \n    if (v_13 == 6) {  \n        sub_73269(a_0);  \n    }  \n}  \n\nOld name: N_0x2de7efa66b906036\nOld name: GetScaleformMovieFunctionReturnInt"
	},
	"World_3dToScreen_2d()": {
	  "prefix": "World_3dToScreen_2d",
	  "body": "World_3dToScreen_2d",
	  "description": "OLD NAME, PLEASE USE GetScreenCoordFromWorldCoord INSTEAD!"
	},
	"GetScreenCoordFromWorldCoord()": {
	  "prefix": "GetScreenCoordFromWorldCoord",
	  "body": [
		"GetScreenCoordFromWorldCoord(${1:float worldX}, ${2:float worldY}, ${3:float worldZ}, ${4:float* screenX}, ${5:float* screenY})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nConvert a world coordinate into its relative screen coordinate.  (WorldToScreen)  \nReturns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.  \nFor .NET users...  \nVB:  \nPublic Shared Function World3DToScreen2d(pos as vector3) As Vector2  \n        Dim x2dp, y2dp As New Native.OutputArgument  \n        Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)  \n        Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))  \n    End Function  \nC#:  \nVector2 World3DToScreen2d(Vector3 pos)  \n    {  \n        var x2dp = new OutputArgument();  \n        var y2dp = new OutputArgument();  \n        Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);  \n        return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());  \n    }  \n//USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.  \nUsed to be called _WORLD3D_TO_SCREEN2D  \nI thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.  \n\nOld name: World_3dToScreen_2d"
	},
	"GetExtraTimecycleModifierIndex()": {
	  "prefix": "GetExtraTimecycleModifierIndex",
	  "body": [
		"GetExtraTimecycleModifierIndex()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\nSee [`GetTimecycleModifierIndex`](#_0xFDF3D97C674AFB66) for use, works the same just for the secondary timecycle modifier."
	},
	"GetScreenResolution()": {
	  "prefix": "GetScreenResolution",
	  "body": [
		"GetScreenResolution(${1:int* x}, ${2:int* y})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nint screenresx,screenresy;  \nGET_SCREEN_RESOLUTION(&screenresx,&screenresy);  \nHardcoded to always return 1280 x 720  \n"
	},
	"GetMaximumNumberOfPhotos()": {
	  "prefix": "GetMaximumNumberOfPhotos",
	  "body": [
		"GetMaximumNumberOfPhotos()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nThis function is hard-coded to always return 0.  \nLimit is 96, see _GET_MAXIMUM_NUMBER_OF_PHOTOS_2 (0xDC54A7AF8B3A14EF).  \n"
	},
	"N_0x6dd8f5aa635eb4b2()": {
	  "prefix": "N_0x6dd8f5aa635eb4b2",
	  "body": "N_0x6dd8f5aa635eb4b2",
	  "description": "OLD NAME, PLEASE USE GetScriptGfxPosition INSTEAD!"
	},
	"GetScriptGfxPosition()": {
	  "prefix": "GetScriptGfxPosition",
	  "body": [
		"GetScriptGfxPosition(${1:float x}, ${2:float y}, ${3:float* calculatedX}, ${4:float* calculatedY})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nCalculates the effective X/Y fractions when applying the values set by `SET_SCRIPT_GFX_ALIGN` and\n`SET_SCRIPT_GFX_ALIGN_PARAMS`.\nOld name: N_0x6dd8f5aa635eb4b2"
	},
	"N_0xdc54a7af8b3a14ef()": {
	  "prefix": "N_0xdc54a7af8b3a14ef",
	  "body": "N_0xdc54a7af8b3a14ef",
	  "description": "OLD NAME, PLEASE USE GetMaximumNumberOfPhotos_2 INSTEAD!"
	},
	"GetMaximumNumberOfPhotos_2()": {
	  "prefix": "GetMaximumNumberOfPhotos_2",
	  "body": [
		"GetMaximumNumberOfPhotos_2()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nThis is the \"actual\" GET_MAXIMUM_NUMBER_OF_PHOTOS native. Always returns 96.  \n\nOld name: N_0xdc54a7af8b3a14ef"
	},
	"GetTimecycleModifierIndex()": {
	  "prefix": "GetTimecycleModifierIndex",
	  "body": [
		"GetTimecycleModifierIndex()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nOnly use for this in the PC scripts is:  \nif (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)  \nFor a full list, see here: pastebin.com/cnk7FTF2  \ncan someone update this pastebin???  \n"
	},
	"SittingTv()": {
	  "prefix": "SittingTv",
	  "body": "SittingTv",
	  "description": "OLD NAME, PLEASE USE GetScaleformMovieMethodReturnValueString INSTEAD!"
	},
	"GetScaleformMovieFunctionReturnString()": {
	  "prefix": "GetScaleformMovieFunctionReturnString",
	  "body": "GetScaleformMovieFunctionReturnString",
	  "description": "OLD NAME, PLEASE USE GetScaleformMovieMethodReturnValueString INSTEAD!"
	},
	"GetScaleformMovieMethodReturnValueString()": {
	  "prefix": "GetScaleformMovieMethodReturnValueString",
	  "body": [
		"GetScaleformMovieMethodReturnValueString(${1:int method_return})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: char*\nUsed to get a return value from a scaleform function.\nReturns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.\nOld name: SittingTv\nOld name: GetScaleformMovieFunctionReturnString"
	},
	"GetTvVolume()": {
	  "prefix": "GetTvVolume",
	  "body": [
		"GetTvVolume()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: float\n"
	},
	"HasHudScaleformLoaded()": {
	  "prefix": "HasHudScaleformLoaded",
	  "body": [
		"HasHudScaleformLoaded(${1:int hudComponent})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nCheck to see if hud component Scaleform has loaded?  \n"
	},
	"GetScreenEffectIsActive()": {
	  "prefix": "GetScreenEffectIsActive",
	  "body": [
		"GetScreenEffectIsActive(${1:char* effectName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nReturns whether the specified screen effect is active.  \nSee the effects list in _START_SCREEN_EFFECT  \nExample and list of screen FX: www.pastebin.com/dafBAjs0  \n"
	},
	"HasScaleformContainerMovieLoadedIntoParent()": {
	  "prefix": "HasScaleformContainerMovieLoadedIntoParent",
	  "body": [
		"HasScaleformContainerMovieLoadedIntoParent(${1:int scaleformHandle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"GetTextureResolution()": {
	  "prefix": "GetTextureResolution",
	  "body": [
		"GetTextureResolution(${1:char* textureDict}, ${2:char* textureName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Vector3\n\nReturns the texture resolution of the passed texture dict+name.  \nNote: Most texture resolutions are doubled compared to the console version of the game.  \n"
	},
	"HasStreamedTextureDictLoaded()": {
	  "prefix": "HasStreamedTextureDictLoaded",
	  "body": [
		"HasStreamedTextureDictLoaded(${1:char* textureDict})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"GetTvChannel()": {
	  "prefix": "GetTvChannel",
	  "body": [
		"GetTvChannel()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n"
	},
	"IsDecalAlive()": {
	  "prefix": "IsDecalAlive",
	  "body": [
		"IsDecalAlive(${1:Object decal})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"IsParticleFxDelayedBlink()": {
	  "prefix": "IsParticleFxDelayedBlink",
	  "body": [
		"IsParticleFxDelayedBlink()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: float\n"
	},
	"N_0x768ff8961ba904d6()": {
	  "prefix": "N_0x768ff8961ba904d6",
	  "body": "N_0x768ff8961ba904d6",
	  "description": "OLD NAME, PLEASE USE IsScaleformMovieMethodReturnValueReady INSTEAD!"
	},
	"GetScaleformMovieFunctionReturnBool()": {
	  "prefix": "GetScaleformMovieFunctionReturnBool",
	  "body": "GetScaleformMovieFunctionReturnBool",
	  "description": "OLD NAME, PLEASE USE IsScaleformMovieMethodReturnValueReady INSTEAD!"
	},
	"IsScaleformMovieMethodReturnValueReady()": {
	  "prefix": "IsScaleformMovieMethodReturnValueReady",
	  "body": [
		"IsScaleformMovieMethodReturnValueReady(${1:int method_return})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\nReturns true if the return value of a scaleform function is ready to be collected (using `GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING` or `GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT`).\n\nOld description/example:\n\n\nSeems to take data that is returned from \"_POP_SCALEFORM_MOVIE_FUNCTION\" and checks to see if it's not null/empty.  \n\"agency_heist3b.ysc\", line 71836:  \nif (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 201) || CONTROLS::IS_CONTROL_JUST_PRESSED(2, 237)) {  \n    GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(l_46, \"SET_INPUT_EVENT_SELECT\");  \n    l_45 = GRAPHICS::_END_SCALEFORM_MOVIE_METHOD_RETURN();  \n}  \nif (GRAPHICS::IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(l_45)) {  \n    v_13 = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(l_45);  \n    if (v_13 == 6) {  \n        sub_73269(a_0);  \n    }  \n}  \n\nOld name: N_0x768ff8961ba904d6\nOld name: GetScaleformMovieFunctionReturnBool"
	},
	"N_0x0c1c5d756fb5f337()": {
	  "prefix": "N_0x0c1c5d756fb5f337",
	  "body": "N_0x0c1c5d756fb5f337",
	  "description": "OLD NAME, PLEASE USE HasNamedScaleformMovieLoaded INSTEAD!"
	},
	"HasNamedScaleformMovieLoaded()": {
	  "prefix": "HasNamedScaleformMovieLoaded",
	  "body": [
		"HasNamedScaleformMovieLoaded(${1:char* scaleformName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nPretty sure it's the real name (not 100% sure so I added the _ prefix); can someone else confirm it?  \nOnly values used in the scripts are:  \n\"heist_mp\"  \n\"heistmap_mp\"  \n\"instructional_buttons\"  \n\"heist_pre\"  \n\nOld name: N_0x0c1c5d756fb5f337"
	},
	"HasScaleformMovieLoaded()": {
	  "prefix": "HasScaleformMovieLoaded",
	  "body": [
		"HasScaleformMovieLoaded(${1:int scaleformHandle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"IsNightvisionInactive()": {
	  "prefix": "IsNightvisionInactive",
	  "body": "IsNightvisionInactive",
	  "description": "OLD NAME, PLEASE USE IsNightvisionActive INSTEAD!"
	},
	"IsNightvisionActive()": {
	  "prefix": "IsNightvisionActive",
	  "body": [
		"IsNightvisionActive()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nGets whether or not NIGHTVISION is Active.  \nNote:  When nightvision is actually active, this native will return TRUE!  \n\nOld name: IsNightvisionInactive"
	},
	"IsTrackedPointVisible()": {
	  "prefix": "IsTrackedPointVisible",
	  "body": [
		"IsTrackedPointVisible(${1:int point})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"IsSeethroughActive()": {
	  "prefix": "IsSeethroughActive",
	  "body": [
		"IsSeethroughActive()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nReturns whether or not SEETHROUGH is active.  \n"
	},
	"N_0x0ad973ca1e077b60()": {
	  "prefix": "N_0x0ad973ca1e077b60",
	  "body": "N_0x0ad973ca1e077b60",
	  "description": "OLD NAME, PLEASE USE LoadTvChannel INSTEAD!"
	},
	"LoadTvChannel()": {
	  "prefix": "LoadTvChannel",
	  "body": [
		"LoadTvChannel(${1:Hash tvChannel})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nOld name: N_0x0ad973ca1e077b60"
	},
	"LoadMovieMeshSet()": {
	  "prefix": "LoadMovieMeshSet",
	  "body": [
		"LoadMovieMeshSet(${1:char* movieMeshSetName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n"
	},
	"MoveVehicleDecals()": {
	  "prefix": "MoveVehicleDecals",
	  "body": [
		"MoveVehicleDecals(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xf7b38b8305f1fe8b()": {
	  "prefix": "N_0xf7b38b8305f1fe8b",
	  "body": "N_0xf7b38b8305f1fe8b",
	  "description": "OLD NAME, PLEASE USE LoadTvChannelSequence INSTEAD!"
	},
	"LoadTvChannelSequence()": {
	  "prefix": "LoadTvChannelSequence",
	  "body": [
		"LoadTvChannelSequence(${1:int TV_Channel}, ${2:char* VideoSequence}, ${3:BOOL Restart})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nLoads specified video sequence into the TV Channel  \nTV_Channel ranges from 0-2  \nVideoSequence can be any of the following:  \n\"PL_STD_CNT\" CNT Standard Channel  \n\"PL_STD_WZL\" Weazel Standard Channel  \n\"PL_LO_CNT\"   \n\"PL_LO_WZL\"   \n\"PL_SP_WORKOUT\"  \n\"PL_SP_INV\" - Jay Norris Assassination Mission Fail   \n\"PL_SP_INV_EXP\" - Jay Norris Assassination Mission Success  \n\"PL_LO_RS\" - Righteous Slaughter Ad  \n\"PL_LO_RS_CUTSCENE\" - Righteous Slaughter Cut-scene  \n\"PL_SP_PLSH1_INTRO\"   \n\"PL_LES1_FAME_OR_SHAME\"  \n\"PL_STD_WZL_FOS_EP2\"  \n\"PL_MP_WEAZEL\" - Weazel Logo on loop  \n\"PL_MP_CCTV\" - Generic CCTV loop  \nRestart   \n0=video sequence continues as normal  \n1=sequence restarts from beginning every time that channel is selected  \n\nOld name: N_0xf7b38b8305f1fe8b"
	},
	"N_0x0218ba067d249dea()": {
	  "prefix": "N_0x0218ba067d249dea",
	  "body": [
		"N_0x0218ba067d249dea()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x02369d5c8a51fdcf()": {
	  "prefix": "N_0x02369d5c8a51fdcf",
	  "body": [
		"N_0x02369d5c8a51fdcf(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x03300b57fcac6ddb()": {
	  "prefix": "N_0x03300b57fcac6ddb",
	  "body": [
		"N_0x03300b57fcac6ddb(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x02ac28f3a01fa04a()": {
	  "prefix": "N_0x02ac28f3a01fa04a",
	  "body": [
		"N_0x02ac28f3a01fa04a(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x06f761ea47c1d3ed()": {
	  "prefix": "N_0x06f761ea47c1d3ed",
	  "body": [
		"N_0x06f761ea47c1d3ed(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x0a46af8a78dc5e0a()": {
	  "prefix": "N_0x0a46af8a78dc5e0a",
	  "body": [
		"N_0x0a46af8a78dc5e0a()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x03fc694ae06c5a20()": {
	  "prefix": "N_0x03fc694ae06c5a20",
	  "body": [
		"N_0x03fc694ae06c5a20()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x0e4299c549f0d1f1()": {
	  "prefix": "N_0x0e4299c549f0d1f1",
	  "body": [
		"N_0x0e4299c549f0d1f1(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x0a123435a26c36cd()": {
	  "prefix": "N_0x0a123435a26c36cd",
	  "body": [
		"N_0x0a123435a26c36cd()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x1072f115dab0717e()": {
	  "prefix": "N_0x1072f115dab0717e",
	  "body": [
		"N_0x1072f115dab0717e(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x108be26959a9d9bb()": {
	  "prefix": "N_0x108be26959a9d9bb",
	  "body": [
		"N_0x108be26959a9d9bb(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x0ae73d8df3a762b2()": {
	  "prefix": "N_0x0ae73d8df3a762b2",
	  "body": [
		"N_0x0ae73d8df3a762b2(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x14fc5833464340a8()": {
	  "prefix": "N_0x14fc5833464340a8",
	  "body": [
		"N_0x14fc5833464340a8()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x1600fd8cf72ebc12()": {
	  "prefix": "N_0x1600fd8cf72ebc12",
	  "body": [
		"N_0x1600fd8cf72ebc12(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x0c0c4e81e1ac60a0()": {
	  "prefix": "N_0x0c0c4e81e1ac60a0",
	  "body": [
		"N_0x0c0c4e81e1ac60a0()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nDr. Underscore (1/6/18):  \nSeems to return a value 0-2.  \n"
	},
	"N_0x1670f8d05056f257()": {
	  "prefix": "N_0x1670f8d05056f257",
	  "body": [
		"N_0x1670f8d05056f257(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nDr. Underscore (1/6/18):  \nSeems to return a value 0-2.  \n"
	},
	"N_0x0d6ca79eeebd8ca3()": {
	  "prefix": "N_0x0d6ca79eeebd8ca3",
	  "body": [
		"N_0x0d6ca79eeebd8ca3()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nDr. Underscore (1/6/18):  \nSeems to return a value 0-2.  \n"
	},
	"N_0x1a8e2c8b9cf4549c()": {
	  "prefix": "N_0x1a8e2c8b9cf4549c",
	  "body": [
		"N_0x1a8e2c8b9cf4549c(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x12995f2e53ffa601()": {
	  "prefix": "N_0x12995f2e53ffa601",
	  "body": [
		"N_0x12995f2e53ffa601(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:int p4}, ${6:int p5}, ${7:int p6}, ${8:int p7}, ${9:int p8}, ${10:int p9}, ${11:int p10}, ${12:int p11})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOnly used in the golf and golf_mp script  \n"
	},
	"N_0x1c4fc5752bcd8e48()": {
	  "prefix": "N_0x1c4fc5752bcd8e48",
	  "body": [
		"N_0x1c4fc5752bcd8e48(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:float rotation}, ${6:float p5}, ${7:float width}, ${8:float height}, ${9:float p8}, ${10:float scale}, ${11:float glowIntensity}, ${12:float normalHeight}, ${13:float heightDiff})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nThis native is used along with these two natives: [`0xa356990e161c9e65`](https://runtime.fivem.net/doc/reference.html#_0xA356990E161C9E65) and [`0x5ce62918f8d703c7`](https://runtime.fivem.net/doc/reference.html#_0x5CE62918F8D703C7). \n\nThis native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.\n\nAll those natives combined they will output something like this: <https://i.imgur.com/TC6cku6.png>"
	},
	"N_0x15e33297c3e8dc60()": {
	  "prefix": "N_0x15e33297c3e8dc60",
	  "body": [
		"N_0x15e33297c3e8dc60(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x1dd2139a9a20dce8()": {
	  "prefix": "N_0x1dd2139a9a20dce8",
	  "body": [
		"N_0x1dd2139a9a20dce8()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0x1612c45f9e3e0d44()": {
	  "prefix": "N_0x1612c45f9e3e0d44",
	  "body": [
		"N_0x1612c45f9e3e0d44()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x2201c576facaebe8()": {
	  "prefix": "N_0x2201c576facaebe8",
	  "body": [
		"N_0x2201c576facaebe8(${1:Any p0}, ${2:char* p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSET_TV_???  \n"
	},
	"N_0x23ba6b0c2ad7b0d3()": {
	  "prefix": "N_0x23ba6b0c2ad7b0d3",
	  "body": [
		"N_0x23ba6b0c2ad7b0d3(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nDr. Underscore (1/6/18):  \nFound only in all creator scripts. (fm_capture_creator, fm_deathmatch_creator, fm_lts_creator, fm_mission_controller, fm_race_creator)  \nUsed in-between DRAW_* calls (DRAW_POLY specifically).  \n"
	},
	"N_0x1bbc135a4d25edde()": {
	  "prefix": "N_0x1bbc135a4d25edde",
	  "body": [
		"N_0x1bbc135a4d25edde(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nDr. Underscore (1/6/18):  \nOnly one instance across all scripts. (maintransition)  \nMay not be a bool, it could be one of these 0-2 values that are returned just about 500 god damn times.  \n"
	},
	"N_0x259ba6d4e6f808f1()": {
	  "prefix": "N_0x259ba6d4e6f808f1",
	  "body": [
		"N_0x259ba6d4e6f808f1(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x1cba05ae7bd7ee05()": {
	  "prefix": "N_0x1cba05ae7bd7ee05",
	  "body": [
		"N_0x1cba05ae7bd7ee05(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x25fc3e33a31ad0c9()": {
	  "prefix": "N_0x25fc3e33a31ad0c9",
	  "body": [
		"N_0x25fc3e33a31ad0c9(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x27cfb1b1e078cb2d()": {
	  "prefix": "N_0x27cfb1b1e078cb2d",
	  "body": [
		"N_0x27cfb1b1e078cb2d()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x22a249a53034450a()": {
	  "prefix": "N_0x22a249a53034450a",
	  "body": [
		"N_0x22a249a53034450a(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x27e32866e9a5c416()": {
	  "prefix": "N_0x27e32866e9a5c416",
	  "body": [
		"N_0x27e32866e9a5c416(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x2485d34e50a22e84()": {
	  "prefix": "N_0x2485d34e50a22e84",
	  "body": [
		"N_0x2485d34e50a22e84(${1:float p0}, ${2:float p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x29280002282f1928()": {
	  "prefix": "N_0x29280002282f1928",
	  "body": [
		"N_0x29280002282f1928(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11}, ${13:Any p12}, ${14:Any p13}, ${15:Any p14}, ${16:Any p15}, ${17:Any p16}, ${18:Any p17}, ${19:Any p18}, ${20:Any p19}, ${21:Any p20}, ${22:Any p21}, ${23:Any p22}, ${24:Any p23})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x27cb772218215325()": {
	  "prefix": "N_0x27cb772218215325",
	  "body": [
		"N_0x27cb772218215325()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x2a893980e96b659a()": {
	  "prefix": "N_0x2a893980e96b659a",
	  "body": [
		"N_0x2a893980e96b659a(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\n2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.  \nDr. Underscore (1/6/18):  \nI've found a reference in maintransition with 1, plus in appcamera and appmedia.  \nTakes and returns a bool.  \n"
	},
	"N_0x27feb5254759cde3()": {
	  "prefix": "N_0x27feb5254759cde3",
	  "body": [
		"N_0x27feb5254759cde3(${1:char* textureDict}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0x2c42340f916c5930()": {
	  "prefix": "N_0x2c42340f916c5930",
	  "body": [
		"N_0x2c42340f916c5930(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x2a2a52824db96700()": {
	  "prefix": "N_0x2a2a52824db96700",
	  "body": [
		"N_0x2a2a52824db96700(${1:Any* p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x302c91ab2d477f7e()": {
	  "prefix": "N_0x302c91ab2d477f7e",
	  "body": [
		"N_0x302c91ab2d477f7e()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x32f34ff7f617643b()": {
	  "prefix": "N_0x32f34ff7f617643b",
	  "body": [
		"N_0x32f34ff7f617643b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x2b40a97646381508()": {
	  "prefix": "N_0x2b40a97646381508",
	  "body": [
		"N_0x2b40a97646381508(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x2f09f7976c512404()": {
	  "prefix": "N_0x2f09f7976c512404",
	  "body": [
		"N_0x2f09f7976c512404(${1:float xCoord}, ${2:float yCoord}, ${3:float zCoord}, ${4:float p3})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nonly documented. to be continued...  \n"
	},
	"N_0x346ef3ecaaab149e()": {
	  "prefix": "N_0x346ef3ecaaab149e",
	  "body": [
		"N_0x346ef3ecaaab149e()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x312342e1a4874f3f()": {
	  "prefix": "N_0x312342e1a4874f3f",
	  "body": [
		"N_0x312342e1a4874f3f(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\np8 seems to always be false.  \n"
	},
	"N_0x3669f1b198dcaa4f()": {
	  "prefix": "N_0x3669f1b198dcaa4f",
	  "body": [
		"N_0x3669f1b198dcaa4f()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x35fb78dc42b7bd21()": {
	  "prefix": "N_0x35fb78dc42b7bd21",
	  "body": [
		"N_0x35fb78dc42b7bd21()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x393bd2275ceb7793()": {
	  "prefix": "N_0x393bd2275ceb7793",
	  "body": [
		"N_0x393bd2275ceb7793()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x36f6626459d91457()": {
	  "prefix": "N_0x36f6626459d91457",
	  "body": [
		"N_0x36f6626459d91457(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x3dec726c25a11bac()": {
	  "prefix": "N_0x3dec726c25a11bac",
	  "body": [
		"N_0x3dec726c25a11bac(${1:int p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\n1 match in 1 script. cellphone_controller.  \np0 is -1 in scripts.  \nDr. Underscore (1/6/18):  \nI have two uses in two scripts; and it's called with -1 in maintransition, not cellphone_controller. Are you using x360 scripts, or an older version of PC scripts?  \nAlso returns bool.  \n"
	},
	"N_0x459fd2c8d0ab78bc()": {
	  "prefix": "N_0x459fd2c8d0ab78bc",
	  "body": [
		"N_0x459fd2c8d0ab78bc()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x44621483ff966526()": {
	  "prefix": "N_0x44621483ff966526",
	  "body": [
		"N_0x44621483ff966526(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x46d1a61a21f566fc()": {
	  "prefix": "N_0x46d1a61a21f566fc",
	  "body": [
		"N_0x46d1a61a21f566fc(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x4862437a486f91b0()": {
	  "prefix": "N_0x4862437a486f91b0",
	  "body": [
		"N_0x4862437a486f91b0(${1:char* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nDr. Underscore (1/6/18):  \nPossibly some unknown structures.  \n"
	},
	"N_0x4b5cfc83122df602()": {
	  "prefix": "N_0x4b5cfc83122df602",
	  "body": [
		"N_0x4b5cfc83122df602()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x4af92acd3141d96c()": {
	  "prefix": "N_0x4af92acd3141d96c",
	  "body": [
		"N_0x4af92acd3141d96c()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x54e22ea2c1956a8d()": {
	  "prefix": "N_0x54e22ea2c1956a8d",
	  "body": [
		"N_0x54e22ea2c1956a8d(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x5b0316762afd4a64()": {
	  "prefix": "N_0x5b0316762afd4a64",
	  "body": [
		"N_0x5b0316762afd4a64()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nDr. Underscore (1/6/18):  \nSeems to return a value 0-2.  \n"
	},
	"N_0x5dbf05db5926d089()": {
	  "prefix": "N_0x5dbf05db5926d089",
	  "body": [
		"N_0x5dbf05db5926d089(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x5ce62918f8d703c7()": {
	  "prefix": "N_0x5ce62918f8d703c7",
	  "body": [
		"N_0x5ce62918f8d703c7(${1:int lowR}, ${2:int lowG}, ${3:int lowB}, ${4:int lowAlpha}, ${5:int R}, ${6:int G}, ${7:int B}, ${8:int Alpha}, ${9:int highR}, ${10:int highG}, ${11:int highB}, ${12:int highAlpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nThis native is used along with these two natives: [`0xa356990e161c9e65`](https://runtime.fivem.net/doc/reference.html#_0xA356990E161C9E65) and [`0x1c4fc5752bcd8e48`](https://runtime.fivem.net/doc/reference.html#_0x1C4FC5752BCD8E48). \nThis native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.\nAll those natives combined they will output something like this: <https://i.imgur.com/TC6cku6.png>\n\nOld description:\nOnly called in golf and golf_mp  \nparameters used are  \nGRAPHICS::\\_0x5CE62918F8D703C7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);"
	},
	"N_0x5debd9c4dc995692()": {
	  "prefix": "N_0x5debd9c4dc995692",
	  "body": [
		"N_0x5debd9c4dc995692()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x5f0f3f56635809ef()": {
	  "prefix": "N_0x5f0f3f56635809ef",
	  "body": [
		"N_0x5f0f3f56635809ef(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x5e657ef1099edd65()": {
	  "prefix": "N_0x5e657ef1099edd65",
	  "body": [
		"N_0x5e657ef1099edd65(${1:int p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0x61f95e5bb3e0a8c6()": {
	  "prefix": "N_0x61f95e5bb3e0a8c6",
	  "body": [
		"N_0x61f95e5bb3e0a8c6(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x5e9daf5a20f15908()": {
	  "prefix": "N_0x5e9daf5a20f15908",
	  "body": [
		"N_0x5e9daf5a20f15908(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x615d3925e87a3b26()": {
	  "prefix": "N_0x615d3925e87a3b26",
	  "body": [
		"N_0x615d3925e87a3b26(${1:int checkpoint})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nUnknown. Called after creating a checkpoint (type: 51) in the creators.  \n"
	},
	"N_0x65e7e78842e74cdb()": {
	  "prefix": "N_0x65e7e78842e74cdb",
	  "body": [
		"N_0x65e7e78842e74cdb(${1:char* scaleformName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\nAnother [REQUEST_SCALEFORM_MOVIE](#_0x11FE353CF9733E6F) equivalent."
	},
	"N_0x6a51f78772175a51()": {
	  "prefix": "N_0x6a51f78772175a51",
	  "body": [
		"N_0x6a51f78772175a51(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x649c97d52332341a()": {
	  "prefix": "N_0x649c97d52332341a",
	  "body": [
		"N_0x649c97d52332341a(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x6a12d88881435dca()": {
	  "prefix": "N_0x6a12d88881435dca",
	  "body": [
		"N_0x6a12d88881435dca()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x6d955f6a9e0295b1()": {
	  "prefix": "N_0x6d955f6a9e0295b1",
	  "body": [
		"N_0x6d955f6a9e0295b1(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x74c180030fde4b69()": {
	  "prefix": "N_0x74c180030fde4b69",
	  "body": [
		"N_0x74c180030fde4b69(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x6ddbf9dffc4ac080()": {
	  "prefix": "N_0x6ddbf9dffc4ac080",
	  "body": [
		"N_0x6ddbf9dffc4ac080(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x759650634f07b6b4()": {
	  "prefix": "N_0x759650634f07b6b4",
	  "body": [
		"N_0x759650634f07b6b4(${1:int p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0x736d7aa1b750856b()": {
	  "prefix": "N_0x736d7aa1b750856b",
	  "body": [
		"N_0x736d7aa1b750856b(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11}, ${13:Any p12}, ${14:Any p13}, ${15:Any p14}, ${16:Any p15}, ${17:Any p16}, ${18:Any p17}, ${19:Any p18}, ${20:Any p19}, ${21:Any p20}, ${22:Any p21}, ${23:Any p22}, ${24:Any p23}, ${25:Any p24}, ${26:Any p25}, ${27:Any p26}, ${28:Any p27}, ${29:Any p28}, ${30:Any p29}, ${31:Any p30}, ${32:Any p31})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x7ac24eab6d74118d()": {
	  "prefix": "N_0x7ac24eab6d74118d",
	  "body": [
		"N_0x7ac24eab6d74118d(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0x7b226c785a52a0a9()": {
	  "prefix": "N_0x7b226c785a52a0a9",
	  "body": [
		"N_0x7b226c785a52a0a9()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x799017f9e3b10112()": {
	  "prefix": "N_0x799017f9e3b10112",
	  "body": [
		"N_0x799017f9e3b10112(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int r}, ${6:int g}, ${7:int b}, ${8:float opacity})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nDraws the sphere typically seen in the GTA:O freemode event, Penned In. Example: [Image](https://images.illusivetea.me/6654p9.png)"
	},
	"N_0x814af7dcaacc597b()": {
	  "prefix": "N_0x814af7dcaacc597b",
	  "body": [
		"N_0x814af7dcaacc597b(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x7a42b2e236e71415()": {
	  "prefix": "N_0x7a42b2e236e71415",
	  "body": [
		"N_0x7a42b2e236e71415()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x82acc484ffa3b05f()": {
	  "prefix": "N_0x82acc484ffa3b05f",
	  "body": [
		"N_0x82acc484ffa3b05f(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x7fa5d82b8f58ec06()": {
	  "prefix": "N_0x7fa5d82b8f58ec06",
	  "body": [
		"N_0x7fa5d82b8f58ec06()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0x8cde909a0370bb3a()": {
	  "prefix": "N_0x8cde909a0370bb3a",
	  "body": [
		"N_0x8cde909a0370bb3a(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nconsole hash: 0x19EC0001  \n"
	},
	"N_0x851cd923176eba7c()": {
	  "prefix": "N_0x851cd923176eba7c",
	  "body": [
		"N_0x851cd923176eba7c()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x95eb5e34f821babe()": {
	  "prefix": "N_0x95eb5e34f821babe",
	  "body": [
		"N_0x95eb5e34f821babe(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x90a78ecaa4e78453()": {
	  "prefix": "N_0x90a78ecaa4e78453",
	  "body": [
		"N_0x90a78ecaa4e78453()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nDr. Underscore (1/6/18):  \nSeems to return a value 0-2.  \n"
	},
	"N_0x9641588dab93b4b5()": {
	  "prefix": "N_0x9641588dab93b4b5",
	  "body": [
		"N_0x9641588dab93b4b5(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x949f397a288b28b3()": {
	  "prefix": "N_0x949f397a288b28b3",
	  "body": [
		"N_0x949f397a288b28b3(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x99ac7f0d8b9c893d()": {
	  "prefix": "N_0x99ac7f0d8b9c893d",
	  "body": [
		"N_0x99ac7f0d8b9c893d(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x967278682cb6967a()": {
	  "prefix": "N_0x967278682cb6967a",
	  "body": [
		"N_0x967278682cb6967a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x9b079e5221d984d3()": {
	  "prefix": "N_0x9b079e5221d984d3",
	  "body": [
		"N_0x9b079e5221d984d3(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x98edf76a7271e4f2()": {
	  "prefix": "N_0x98edf76a7271e4f2",
	  "body": [
		"N_0x98edf76a7271e4f2()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x9cfdd90b2b844bf7()": {
	  "prefix": "N_0x9cfdd90b2b844bf7",
	  "body": [
		"N_0x9cfdd90b2b844bf7(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOnly appeared in Golf & Golf_mp. Parameters were all ptrs  \n"
	},
	"N_0x9b6e70c5ceef4eeb()": {
	  "prefix": "N_0x9b6e70c5ceef4eeb",
	  "body": [
		"N_0x9b6e70c5ceef4eeb(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0x9d75795b9dc6ebbf()": {
	  "prefix": "N_0x9d75795b9dc6ebbf",
	  "body": [
		"N_0x9d75795b9dc6ebbf(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xa44ff770dfbc5dae()": {
	  "prefix": "N_0xa44ff770dfbc5dae",
	  "body": [
		"N_0xa44ff770dfbc5dae()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xa46b73faa3460ae1()": {
	  "prefix": "N_0xa46b73faa3460ae1",
	  "body": [
		"N_0xa46b73faa3460ae1(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xa4664972a9b8f8ba()": {
	  "prefix": "N_0xa4664972a9b8f8ba",
	  "body": [
		"N_0xa4664972a9b8f8ba(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n"
	},
	"N_0xa51c4b86b71652ae()": {
	  "prefix": "N_0xa51c4b86b71652ae",
	  "body": [
		"N_0xa51c4b86b71652ae(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xa4819f5e23e2ffad()": {
	  "prefix": "N_0xa4819f5e23e2ffad",
	  "body": [
		"N_0xa4819f5e23e2ffad()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0xa78de25577300ba1()": {
	  "prefix": "N_0xa78de25577300ba1",
	  "body": [
		"N_0xa78de25577300ba1(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xa67c35c56eb1bd9d()": {
	  "prefix": "N_0xa67c35c56eb1bd9d",
	  "body": [
		"N_0xa67c35c56eb1bd9d()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nDr. Underscore (1/6/18):  \nOnly one instances in two scripts. (cellphone_controller, maintransition)  \n"
	},
	"N_0xb11d94bc55f41932()": {
	  "prefix": "N_0xb11d94bc55f41932",
	  "body": [
		"N_0xb11d94bc55f41932(${1:char* p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nHas something to do with player switch.  \nOnly possible values:  \n- \"CSM_ST_BOX3x3\"  \n"
	},
	"N_0xae51bc858f32ba66()": {
	  "prefix": "N_0xae51bc858f32ba66",
	  "body": [
		"N_0xae51bc858f32ba66(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xb2ebe8cbc58b90e9()": {
	  "prefix": "N_0xb2ebe8cbc58b90e9",
	  "body": [
		"N_0xb2ebe8cbc58b90e9()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0xb569f41f3e7e83a4()": {
	  "prefix": "N_0xb569f41f3e7e83a4",
	  "body": [
		"N_0xb569f41f3e7e83a4(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xb1bb03742917a5d6()": {
	  "prefix": "N_0xb1bb03742917a5d6",
	  "body": [
		"N_0xb1bb03742917a5d6(${1:int type}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float p4}, ${6:int red}, ${7:int green}, ${8:int blue}, ${9:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\n12 matches across 4 scripts. All 4 scripts were job creators.  \ntype ranged from 0 - 2.  \np4 was always 0.2f. Likely scale.  \nassuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).  \nTested but noticed nothing.  \n"
	},
	"N_0xb3c641f3630bf6da()": {
	  "prefix": "N_0xb3c641f3630bf6da",
	  "body": [
		"N_0xb3c641f3630bf6da(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xba0127da25fd54c9()": {
	  "prefix": "N_0xba0127da25fd54c9",
	  "body": [
		"N_0xba0127da25fd54c9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xba3d65906822bed5()": {
	  "prefix": "N_0xba3d65906822bed5",
	  "body": [
		"N_0xba3d65906822bed5(${1:BOOL p0}, ${2:BOOL p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nEvery p2 - p5 occurrence was 0f.  \n"
	},
	"N_0xb7ed70c49521a61d()": {
	  "prefix": "N_0xb7ed70c49521a61d",
	  "body": [
		"N_0xb7ed70c49521a61d(${1:int decalType})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nGRAPHICS::_0xB7ED70C49521A61D(9123);  \nGRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(\"MPMissMarkers256\");  \n"
	},
	"N_0xba3d194057c79a7b()": {
	  "prefix": "N_0xba3d194057c79a7b",
	  "body": [
		"N_0xba3d194057c79a7b(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xbbf327ded94e4deb()": {
	  "prefix": "N_0xbbf327ded94e4deb",
	  "body": [
		"N_0xbbf327ded94e4deb(${1:char* p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xbcedb009461da156()": {
	  "prefix": "N_0xbcedb009461da156",
	  "body": [
		"N_0xbcedb009461da156()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0xbb90e12cac1dab25()": {
	  "prefix": "N_0xbb90e12cac1dab25",
	  "body": [
		"N_0xbb90e12cac1dab25(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xbe197eaa669238f4()": {
	  "prefix": "N_0xbe197eaa669238f4",
	  "body": [
		"N_0xbe197eaa669238f4(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n\nThis function is hard-coded to always return 0.  \n"
	},
	"N_0xbdeb86f4d5809204()": {
	  "prefix": "N_0xbdeb86f4d5809204",
	  "body": [
		"N_0xbdeb86f4d5809204(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xbf59707b3e5ed531()": {
	  "prefix": "N_0xbf59707b3e5ed531",
	  "body": [
		"N_0xbf59707b3e5ed531(${1:char* p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSomething to do with timecycles.  \n"
	},
	"N_0xc35a6d07c93802b2()": {
	  "prefix": "N_0xc35a6d07c93802b2",
	  "body": [
		"N_0xc35a6d07c93802b2()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xbeb3d46bb7f043c0()": {
	  "prefix": "N_0xbeb3d46bb7f043c0",
	  "body": [
		"N_0xbeb3d46bb7f043c0(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xc0416b061f2b7e5e()": {
	  "prefix": "N_0xc0416b061f2b7e5e",
	  "body": [
		"N_0xc0416b061f2b7e5e(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xc9b18b4619f48f7b()": {
	  "prefix": "N_0xc9b18b4619f48f7b",
	  "body": [
		"N_0xc9b18b4619f48f7b(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xca4ae345a153d573()": {
	  "prefix": "N_0xca4ae345a153d573",
	  "body": [
		"N_0xca4ae345a153d573(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xc5c8f970d4edff71()": {
	  "prefix": "N_0xc5c8f970d4edff71",
	  "body": [
		"N_0xc5c8f970d4edff71(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xcb82a0bf0e3e3265()": {
	  "prefix": "N_0xcb82a0bf0e3e3265",
	  "body": [
		"N_0xcb82a0bf0e3e3265(${1:int p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n"
	},
	"N_0xca465d9cc0d231ba()": {
	  "prefix": "N_0xca465d9cc0d231ba",
	  "body": [
		"N_0xca465d9cc0d231ba(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xd2209be128b5418c()": {
	  "prefix": "N_0xd2209be128b5418c",
	  "body": [
		"N_0xd2209be128b5418c(${1:char* graphicsName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\n\"SwitchHUDFranklinOut\",  \n\"SwitchHUDMichaelOut\",  \n\"SwitchHUDOut\",  \n\"SwitchHUDTrevorOut\",  \n\"SwitchOpenFranklinOut\",  \n\"SwitchOpenMichaelIn\",  \n\"SwitchOpenNeutral\"  \n"
	},
	"N_0xd1c55b110e4df534()": {
	  "prefix": "N_0xd1c55b110e4df534",
	  "body": [
		"N_0xd1c55b110e4df534(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSET_TV_???  \n"
	},
	"N_0xd2300034310557e4()": {
	  "prefix": "N_0xd2300034310557e4",
	  "body": [
		"N_0xd2300034310557e4(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xd1c7cb175e012964()": {
	  "prefix": "N_0xd1c7cb175e012964",
	  "body": [
		"N_0xd1c7cb175e012964(${1:int scaleformHandle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0xd3a10fc7fd8d98cd()": {
	  "prefix": "N_0xd3a10fc7fd8d98cd",
	  "body": [
		"N_0xd3a10fc7fd8d98cd()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0xd7021272eb0a451e()": {
	  "prefix": "N_0xd7021272eb0a451e",
	  "body": [
		"N_0xd7021272eb0a451e(${1:char* p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOnly one match in the scripts:  \nGRAPHICS::_D7021272EB0A451E(\"int_carrier_hanger\");  \n"
	},
	"N_0xd2936cab8b58fcbd()": {
	  "prefix": "N_0xd2936cab8b58fcbd",
	  "body": [
		"N_0xd2936cab8b58fcbd(${1:Any p0}, ${2:BOOL p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:float p7})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xd39d13c9febf0511()": {
	  "prefix": "N_0xd39d13c9febf0511",
	  "body": [
		"N_0xd39d13c9febf0511(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xd80a80346a45d761()": {
	  "prefix": "N_0xd80a80346a45d761",
	  "body": [
		"N_0xd80a80346a45d761(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0xdbaa5ec848ba2d46()": {
	  "prefix": "N_0xdbaa5ec848ba2d46",
	  "body": [
		"N_0xdbaa5ec848ba2d46(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xd801cc02177fa3f1()": {
	  "prefix": "N_0xd801cc02177fa3f1",
	  "body": [
		"N_0xd801cc02177fa3f1()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\n4 matches across 2 scripts.  \nappcamera:  \ncalled after UI::HIDE_HUD_AND_RADAR_THIS_FRAME() and before GRAPHICS::0x108F36CC();  \ncellphone_controller:  \ncalled after GRAPHICS::0xE9F2B68F(0, 0) and before GRAPHICS::0x108F36CC();  \n"
	},
	"N_0xdc459cfa0cce245b()": {
	  "prefix": "N_0xdc459cfa0cce245b",
	  "body": [
		"N_0xdc459cfa0cce245b(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xd9454b5752c857dc()": {
	  "prefix": "N_0xd9454b5752c857dc",
	  "body": [
		"N_0xd9454b5752c857dc()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xde81239437e8c5a8()": {
	  "prefix": "N_0xde81239437e8c5a8",
	  "body": [
		"N_0xde81239437e8c5a8()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xe2892e7e55d7073a()": {
	  "prefix": "N_0xe2892e7e55d7073a",
	  "body": [
		"N_0xe2892e7e55d7073a(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xe1c8709406f2c41c()": {
	  "prefix": "N_0xe1c8709406f2c41c",
	  "body": [
		"N_0xe1c8709406f2c41c()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xe35b38a27e8e7179()": {
	  "prefix": "N_0xe35b38a27e8e7179",
	  "body": [
		"N_0xe35b38a27e8e7179(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0xe59343e9e96529e7()": {
	  "prefix": "N_0xe59343e9e96529e7",
	  "body": [
		"N_0xe59343e9e96529e7()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n"
	},
	"N_0xe3e2c1b4c59dbc77()": {
	  "prefix": "N_0xe3e2c1b4c59dbc77",
	  "body": [
		"N_0xe3e2c1b4c59dbc77(${1:int unk})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSets an unknown value related to timecycles.  \n"
	},
	"N_0xe63d7c6eececb66b()": {
	  "prefix": "N_0xe63d7c6eececb66b",
	  "body": [
		"N_0xe63d7c6eececb66b(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xe6a9f00d4240b519()": {
	  "prefix": "N_0xe6a9f00d4240b519",
	  "body": [
		"N_0xe6a9f00d4240b519(${1:int scaleform}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nThis native is used in some casino scripts to fit the scaleform in the rendertarget."
	},
	"N_0xe82728f0de75d13a()": {
	  "prefix": "N_0xe82728f0de75d13a",
	  "body": [
		"N_0xe82728f0de75d13a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11}, ${13:Any p12}, ${14:Any p13}, ${15:Any p14}, ${16:Any p15}, ${17:Any p16}, ${18:Any p17}, ${19:Any p18}, ${20:Any p19}, ${21:Any p20}, ${22:Any p21}, ${23:Any p22}, ${24:Any p23}, ${25:Any p24})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xe791df1f73ed2c8b()": {
	  "prefix": "N_0xe791df1f73ed2c8b",
	  "body": [
		"N_0xe791df1f73ed2c8b(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n\nThis function is hard-coded to always return 0.  \n"
	},
	"N_0xeb3dac2c86001e5e()": {
	  "prefix": "N_0xeb3dac2c86001e5e",
	  "body": [
		"N_0xeb3dac2c86001e5e()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0xec52c631a1831c03()": {
	  "prefix": "N_0xec52c631a1831c03",
	  "body": [
		"N_0xec52c631a1831c03(${1:int p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\n_push_scaleform_movie_function(iLocal_117, \"SET_TEXT\");  \nif (bParam0)  \n{  \n\t_0xEC52C631A1831C03(2);  \n}  \nelse  \n{  \n\t_0xEC52C631A1831C03(1);  \n}  \n_pop_scaleform_movie_function_void();  \n"
	},
	"N_0xef398beee4ef45f9()": {
	  "prefix": "N_0xef398beee4ef45f9",
	  "body": [
		"N_0xef398beee4ef45f9(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xec72c258667be5ea()": {
	  "prefix": "N_0xec72c258667be5ea",
	  "body": [
		"N_0xec72c258667be5ea(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: Any\n\nThis function is hard-coded to always return 0.  \n"
	},
	"N_0xefabc7722293da7c()": {
	  "prefix": "N_0xefabc7722293da7c",
	  "body": [
		"N_0xefabc7722293da7c()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xefb55e7c25d3b3be()": {
	  "prefix": "N_0xefb55e7c25d3b3be",
	  "body": [
		"N_0xefb55e7c25d3b3be()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xf1cea8a4198d8e9a()": {
	  "prefix": "N_0xf1cea8a4198d8e9a",
	  "body": [
		"N_0xf1cea8a4198d8e9a(${1:char* p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n"
	},
	"N_0xefd97ff47b745b8d()": {
	  "prefix": "N_0xefd97ff47b745b8d",
	  "body": [
		"N_0xefd97ff47b745b8d(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xf51d36185993515d()": {
	  "prefix": "N_0xf51d36185993515d",
	  "body": [
		"N_0xf51d36185993515d(${1:int checkpoint}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float unkX}, ${6:float unkY}, ${7:float unkZ})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nThis does not move an existing checkpoint... so wtf.  \n"
	},
	"N_0xf44a5456ac3f4f97()": {
	  "prefix": "N_0xf44a5456ac3f4f97",
	  "body": [
		"N_0xf44a5456ac3f4f97(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nAnother function related to \"HUD scaleforms\"  \n"
	},
	"N_0xf5bed327cea362b1()": {
	  "prefix": "N_0xf5bed327cea362b1",
	  "body": [
		"N_0xf5bed327cea362b1(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\n3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.  \nappcamera, appmedia, and cellphone_controller.  \n"
	},
	"N_0xf78b803082d4386f()": {
	  "prefix": "N_0xf78b803082d4386f",
	  "body": [
		"N_0xf78b803082d4386f(${1:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xfe26117a5841b2ff()": {
	  "prefix": "N_0xfe26117a5841b2ff",
	  "body": [
		"N_0xfe26117a5841b2ff(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n"
	},
	"PopTimecycleModifier()": {
	  "prefix": "PopTimecycleModifier",
	  "body": [
		"PopTimecycleModifier()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xe83a3e3557a56640()": {
	  "prefix": "N_0xe83a3e3557a56640",
	  "body": "N_0xe83a3e3557a56640",
	  "description": "OLD NAME, PLEASE USE PushScaleformMovieMethodParameterButtonName INSTEAD!"
	},
	"PushScaleformMovieMethodParameterButtonName()": {
	  "prefix": "PushScaleformMovieMethodParameterButtonName",
	  "body": [
		"PushScaleformMovieMethodParameterButtonName(${1:char* button})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nThis method is the equivalent to PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING when using it to add a new button (like \"INSTRUCTIONAL_BUTTONS\").  \nWhen switching with a controller, the icons update and become the controller's icons.  \n\nOld name: N_0xe83a3e3557a56640"
	},
	"PushScaleformMovieFunctionParameterString()": {
	  "prefix": "PushScaleformMovieFunctionParameterString",
	  "body": "PushScaleformMovieFunctionParameterString",
	  "description": "OLD NAME, PLEASE USE PushScaleformMovieMethodParameterString INSTEAD!"
	},
	"PushScaleformMovieMethodParameterString()": {
	  "prefix": "PushScaleformMovieMethodParameterString",
	  "body": [
		"PushScaleformMovieMethodParameterString(${1:char* value})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: PushScaleformMovieFunctionParameterString"
	},
	"N_0x77fe3402004cd1b0()": {
	  "prefix": "N_0x77fe3402004cd1b0",
	  "body": "N_0x77fe3402004cd1b0",
	  "description": "OLD NAME, PLEASE USE PushScaleformMovieMethodParameterString_2 INSTEAD!"
	},
	"PushScaleformMovieMethodParameterString_2()": {
	  "prefix": "PushScaleformMovieMethodParameterString_2",
	  "body": [
		"PushScaleformMovieMethodParameterString_2(${1:char* value})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nGRAPHICS::\\_0x77FE3402004CD1B0(HUD::\\_GET_LABEL_TEXT(\"YACHT_GSY\"));\nGRAPHICS::\\_0x77FE3402004CD1B0(PLAYER::GET_PLAYER_NAME(PLAYER::PLAYER_ID()));\n\nBoth \\_0xBA7148484BD90365 / \\_0x77FE3402004CD1B0 works, but \\_0x77FE3402004CD1B0 is usually used for \"name\" (organisation, players..).\nOld name: N_0x77fe3402004cd1b0"
	},
	"PushTimecycleModifier()": {
	  "prefix": "PushTimecycleModifier",
	  "body": [
		"PushTimecycleModifier()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"ReleaseMovieMeshSet()": {
	  "prefix": "ReleaseMovieMeshSet",
	  "body": [
		"ReleaseMovieMeshSet(${1:int movieMeshSet})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"RemoveDecal()": {
	  "prefix": "RemoveDecal",
	  "body": [
		"RemoveDecal(${1:Object decal})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"RemoveDecalsFromObjectFacing()": {
	  "prefix": "RemoveDecalsFromObjectFacing",
	  "body": [
		"RemoveDecalsFromObjectFacing(${1:Object obj}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"RemoveDecalsFromObject()": {
	  "prefix": "RemoveDecalsFromObject",
	  "body": [
		"RemoveDecalsFromObject(${1:Object obj})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"RemoveDecalsInRange()": {
	  "prefix": "RemoveDecalsInRange",
	  "body": [
		"RemoveDecalsInRange(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nRemoves all decals in range from a position, it includes the bullet holes, blood pools, petrol...  \n"
	},
	"RemoveDecalsFromVehicle()": {
	  "prefix": "RemoveDecalsFromVehicle",
	  "body": [
		"RemoveDecalsFromVehicle(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"RemoveParticleFxFromEntity()": {
	  "prefix": "RemoveParticleFxFromEntity",
	  "body": [
		"RemoveParticleFxFromEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"RemoveParticleFx()": {
	  "prefix": "RemoveParticleFx",
	  "body": [
		"RemoveParticleFx(${1:int ptfxHandle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x9304881d6f6537ea()": {
	  "prefix": "N_0x9304881d6f6537ea",
	  "body": "N_0x9304881d6f6537ea",
	  "description": "OLD NAME, PLEASE USE RequestHudScaleform INSTEAD!"
	},
	"RequestHudScaleform()": {
	  "prefix": "RequestHudScaleform",
	  "body": [
		"RequestHudScaleform(${1:int hudComponent})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nhttp://gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/?p=1068285912  \n\nOld name: N_0x9304881d6f6537ea"
	},
	"RemoveParticleFxInRange()": {
	  "prefix": "RemoveParticleFxInRange",
	  "body": [
		"RemoveParticleFxInRange(${1:float X}, ${2:float Y}, ${3:float Z}, ${4:float radius})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"RequestScaleformMovieInstance()": {
	  "prefix": "RequestScaleformMovieInstance",
	  "body": [
		"RequestScaleformMovieInstance(${1:char* scaleformName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nAlso used by 0x67D02A194A2FC2BD  \n"
	},
	"RequestScaleformMovie()": {
	  "prefix": "RequestScaleformMovie",
	  "body": [
		"RequestScaleformMovie(${1:char* scaleformName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nGTA V Scaleforms Decompiled  \npastebin.com/mmNdjX2k  \nGets a new native after almost every update.  \nUpdate 1.0.393.2  \n0x67D02A194A2FC2BD  \nUpdate 1.0.463.1  \n0xC97D787CE7726A2F  \nUpdate 1.0.505.2  \n0x36ECDA4DD9A3F08D  \nUpdate 1.0.573.1  \n0xE3C796DC28BC3254  \nUpdate 1.0.678.1  \n0x2F14983962462691  \n"
	},
	"RequestStreamedTextureDict()": {
	  "prefix": "RequestStreamedTextureDict",
	  "body": [
		"RequestStreamedTextureDict(${1:char* textureDict}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nlast param seems to be unused in disassembly  \n"
	},
	"RequestScaleformMovie_3()": {
	  "prefix": "RequestScaleformMovie_3",
	  "body": "RequestScaleformMovie_3",
	  "description": "OLD NAME, PLEASE USE RequestScaleformMovieInteractive INSTEAD!"
	},
	"RequestScaleformMovieInteractive()": {
	  "prefix": "RequestScaleformMovieInteractive",
	  "body": [
		"RequestScaleformMovieInteractive(${1:char* scaleformName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nSimilar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of \"interactive\" scaleform movie?  \nThese seem to be the only scaleforms ever requested by this native:  \n\"breaking_news\"  \n\"desktop_pc\"  \n\"ECG_MONITOR\"  \n\"Hacking_PC\"  \n\"TEETH_PULLING\"  \nNote: Unless this hash is out-of-order, this native is next-gen only.  \n\nOld name: RequestScaleformMovie_3"
	},
	"N_0x2bf72ad5b41aa739()": {
	  "prefix": "N_0x2bf72ad5b41aa739",
	  "body": "N_0x2bf72ad5b41aa739",
	  "description": "OLD NAME, PLEASE USE ResetExtraTimecycleModifierStrength INSTEAD!"
	},
	"ResetExtraTimecycleModifierStrength()": {
	  "prefix": "ResetExtraTimecycleModifierStrength",
	  "body": [
		"ResetExtraTimecycleModifierStrength()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nResets the extra timecycle modifier strength normally set with [`SetExtraTimecycleModifierStrength`](#_0x2C328AF17210F009)\nOld name: N_0x2bf72ad5b41aa739"
	},
	"N_0x89c8553dd3274aae()": {
	  "prefix": "N_0x89c8553dd3274aae",
	  "body": "N_0x89c8553dd3274aae",
	  "description": "OLD NAME, PLEASE USE ResetParticleFxAssetOldToNew INSTEAD!"
	},
	"ResetParticleFxAssetOldToNew()": {
	  "prefix": "ResetParticleFxAssetOldToNew",
	  "body": [
		"ResetParticleFxAssetOldToNew(${1:char* name})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nconsole hash: 0x9E8D8B72  \nResets the effect of _SET_PARTICLE_FX_ASSET_OLD_TO_NEW  \n\nOld name: N_0x89c8553dd3274aae"
	},
	"N_0x40afb081f8add4ee()": {
	  "prefix": "N_0x40afb081f8add4ee",
	  "body": "N_0x40afb081f8add4ee",
	  "description": "OLD NAME, PLEASE USE ReturnTwo INSTEAD!"
	},
	"ReturnTwo()": {
	  "prefix": "ReturnTwo",
	  "body": [
		"ReturnTwo(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nIt returns two lol  \nli r3, 2  \nblr  \nthats all it does.  \nmov dword ptr [rax], 2  \nЗаебись функционал  \n\nOld name: N_0x40afb081f8add4ee"
	},
	"N_0xe3a3db414a373dab()": {
	  "prefix": "N_0xe3a3db414a373dab",
	  "body": "N_0xe3a3db414a373dab",
	  "description": "OLD NAME, PLEASE USE ResetScriptGfxAlign INSTEAD!"
	},
	"ScreenDrawPositionEnd()": {
	  "prefix": "ScreenDrawPositionEnd",
	  "body": "ScreenDrawPositionEnd",
	  "description": "OLD NAME, PLEASE USE ResetScriptGfxAlign INSTEAD!"
	},
	"ResetScriptGfxAlign()": {
	  "prefix": "ResetScriptGfxAlign",
	  "body": [
		"ResetScriptGfxAlign()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nThis function resets the alignment set using `SET_SCRIPT_GFX_ALIGN` and `SET_SCRIPT_GFX_ALIGN_PARAMS` to the default\nvalues ('I', 'I'; 0, 0, 0, 0). This should be used after having used the aforementioned functions in order to not affect\nany other scripts attempting to draw.\nOld name: N_0xe3a3db414a373dab\nOld name: ScreenDrawPositionEnd"
	},
	"PushScaleformMovieFunctionParameterBool()": {
	  "prefix": "PushScaleformMovieFunctionParameterBool",
	  "body": "PushScaleformMovieFunctionParameterBool",
	  "description": "OLD NAME, PLEASE USE ScaleformMovieMethodAddParamBool INSTEAD!"
	},
	"PushScaleformMovieMethodParameterBool()": {
	  "prefix": "PushScaleformMovieMethodParameterBool",
	  "body": "PushScaleformMovieMethodParameterBool",
	  "description": "OLD NAME, PLEASE USE ScaleformMovieMethodAddParamBool INSTEAD!"
	},
	"ScaleformMovieMethodAddParamBool()": {
	  "prefix": "ScaleformMovieMethodAddParamBool",
	  "body": [
		"ScaleformMovieMethodAddParamBool(${1:BOOL value})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nPushes a boolean for the Scaleform function onto the stack.  \n\nOld name: PushScaleformMovieFunctionParameterBool\nOld name: PushScaleformMovieMethodParameterBool"
	},
	"PushScaleformMovieFunctionParameterFloat()": {
	  "prefix": "PushScaleformMovieFunctionParameterFloat",
	  "body": "PushScaleformMovieFunctionParameterFloat",
	  "description": "OLD NAME, PLEASE USE ScaleformMovieMethodAddParamFloat INSTEAD!"
	},
	"PushScaleformMovieMethodParameterFloat()": {
	  "prefix": "PushScaleformMovieMethodParameterFloat",
	  "body": "PushScaleformMovieMethodParameterFloat",
	  "description": "OLD NAME, PLEASE USE ScaleformMovieMethodAddParamFloat INSTEAD!"
	},
	"ScaleformMovieMethodAddParamFloat()": {
	  "prefix": "ScaleformMovieMethodAddParamFloat",
	  "body": [
		"ScaleformMovieMethodAddParamFloat(${1:float value})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nPushes a float for the Scaleform function onto the stack.  \n\nOld name: PushScaleformMovieFunctionParameterFloat\nOld name: PushScaleformMovieMethodParameterFloat"
	},
	"N_0x1086127b3a63505e()": {
	  "prefix": "N_0x1086127b3a63505e",
	  "body": "N_0x1086127b3a63505e",
	  "description": "OLD NAME, PLEASE USE SeethroughSetColorNear INSTEAD!"
	},
	"SeethroughSetColorNear()": {
	  "prefix": "SeethroughSetColorNear",
	  "body": [
		"SeethroughSetColorNear(${1:int red}, ${2:int green}, ${3:int blue})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0x1086127b3a63505e"
	},
	"PushScaleformMovieFunctionParameterInt()": {
	  "prefix": "PushScaleformMovieFunctionParameterInt",
	  "body": "PushScaleformMovieFunctionParameterInt",
	  "description": "OLD NAME, PLEASE USE ScaleformMovieMethodAddParamInt INSTEAD!"
	},
	"PushScaleformMovieMethodParameterInt()": {
	  "prefix": "PushScaleformMovieMethodParameterInt",
	  "body": "PushScaleformMovieMethodParameterInt",
	  "description": "OLD NAME, PLEASE USE ScaleformMovieMethodAddParamInt INSTEAD!"
	},
	"ScaleformMovieMethodAddParamInt()": {
	  "prefix": "ScaleformMovieMethodAddParamInt",
	  "body": [
		"ScaleformMovieMethodAddParamInt(${1:int value})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nPushes an integer for the Scaleform function onto the stack.  \n\nOld name: PushScaleformMovieFunctionParameterInt\nOld name: PushScaleformMovieMethodParameterInt"
	},
	"N_0x19e50eb6e33e1d28()": {
	  "prefix": "N_0x19e50eb6e33e1d28",
	  "body": "N_0x19e50eb6e33e1d28",
	  "description": "OLD NAME, PLEASE USE SeethroughSetHiLightIntensity INSTEAD!"
	},
	"SeethroughSetHiLightIntensity()": {
	  "prefix": "SeethroughSetHiLightIntensity",
	  "body": [
		"SeethroughSetHiLightIntensity(${1:float intensity})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0x19e50eb6e33e1d28"
	},
	"N_0xd7d0b00177485411()": {
	  "prefix": "N_0xd7d0b00177485411",
	  "body": "N_0xd7d0b00177485411",
	  "description": "OLD NAME, PLEASE USE SeethroughSetHeatscale INSTEAD!"
	},
	"SeethroughSetHeatscale()": {
	  "prefix": "SeethroughSetHeatscale",
	  "body": [
		"SeethroughSetHeatscale(${1:int index}, ${2:float heatScale})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0xd7d0b00177485411"
	},
	"N_0x0c8fac83902a62df()": {
	  "prefix": "N_0x0c8fac83902a62df",
	  "body": "N_0x0c8fac83902a62df",
	  "description": "OLD NAME, PLEASE USE SeethroughSetMaxThickness INSTEAD!"
	},
	"SeethroughSetMaxThickness()": {
	  "prefix": "SeethroughSetMaxThickness",
	  "body": [
		"SeethroughSetMaxThickness(${1:float thickness})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0x0c8fac83902a62df"
	},
	"N_0x1636d7fc127b10d2()": {
	  "prefix": "N_0x1636d7fc127b10d2",
	  "body": "N_0x1636d7fc127b10d2",
	  "description": "OLD NAME, PLEASE USE SeethroughSetHiLightNoise INSTEAD!"
	},
	"SeethroughSetHiLightNoise()": {
	  "prefix": "SeethroughSetHiLightNoise",
	  "body": [
		"SeethroughSetHiLightNoise(${1:float noise})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0x1636d7fc127b10d2"
	},
	"N_0xff5992e1c9e65d05()": {
	  "prefix": "N_0xff5992e1c9e65d05",
	  "body": "N_0xff5992e1c9e65d05",
	  "description": "OLD NAME, PLEASE USE SeethroughSetNoiseAmountMin INSTEAD!"
	},
	"SeethroughSetNoiseAmountMin()": {
	  "prefix": "SeethroughSetNoiseAmountMin",
	  "body": [
		"SeethroughSetNoiseAmountMin(${1:float amount})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0xff5992e1c9e65d05"
	},
	"N_0xfebfbfdfb66039de()": {
	  "prefix": "N_0xfebfbfdfb66039de",
	  "body": "N_0xfebfbfdfb66039de",
	  "description": "OLD NAME, PLEASE USE SeethroughSetNoiseAmountMax INSTEAD!"
	},
	"SeethroughSetNoiseAmountMax()": {
	  "prefix": "SeethroughSetNoiseAmountMax",
	  "body": [
		"SeethroughSetNoiseAmountMax(${1:float amount})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: N_0xfebfbfdfb66039de"
	},
	"SetCheckpointCylinderHeight()": {
	  "prefix": "SetCheckpointCylinderHeight",
	  "body": [
		"SetCheckpointCylinderHeight(${1:int checkpoint}, ${2:float nearHeight}, ${3:float farHeight}, ${4:float radius})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSets the cylinder height of the checkpoint.  \nParameters:  \n* nearHeight - The height of the checkpoint when inside of the radius.  \n* farHeight - The height of the checkpoint when outside of the radius.  \n* radius - The radius of the checkpoint.  \n"
	},
	"SetBlackout()": {
	  "prefix": "SetBlackout",
	  "body": "SetBlackout",
	  "description": "OLD NAME, PLEASE USE SetArtificialLightsState INSTEAD!"
	},
	"SetArtificialLightsState()": {
	  "prefix": "SetArtificialLightsState",
	  "body": [
		"SetArtificialLightsState(${1:BOOL state})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nDoes not affect weapons, particles, fire/explosions, flashlights or the sun.\n\nWhen set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.\n\nUsed in Humane Labs Heist for EMP.\nOld name: SetBlackout"
	},
	"SetCheckpointIconRgba()": {
	  "prefix": "SetCheckpointIconRgba",
	  "body": [
		"SetCheckpointIconRgba(${1:int checkpoint}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSets the checkpoint icon color.  \n"
	},
	"SetCheckpointRgba()": {
	  "prefix": "SetCheckpointRgba",
	  "body": [
		"SetCheckpointRgba(${1:int checkpoint}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSets the checkpoint color.  \n"
	},
	"SetDebugLinesAndSpheresDrawingActive()": {
	  "prefix": "SetDebugLinesAndSpheresDrawingActive",
	  "body": [
		"SetDebugLinesAndSpheresDrawingActive(${1:BOOL enabled})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"N_0x4b5b4da5d79f1943()": {
	  "prefix": "N_0x4b5b4da5d79f1943",
	  "body": "N_0x4b5b4da5d79f1943",
	  "description": "OLD NAME, PLEASE USE SetCheckpointScale INSTEAD!"
	},
	"SetCheckpointScale()": {
	  "prefix": "SetCheckpointScale",
	  "body": [
		"SetCheckpointScale(${1:int checkpoint}, ${2:float p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\np0 - Scale? Looks to be a normalized value (0.0 - 1.0)  \noffroad_races.c4, line ~67407:  \na_3._f7 = GRAPHICS::CREATE_CHECKPOINT(v_D, v_A, a_4, a_7, v_E, v_F, v_10, sub_62b2(v_A, 220, 255), 0);  \nUI::GET_HUD_COLOUR(134, &v_E, &v_F, &v_10, &v_11);  \nGRAPHICS::_SET_CHECKPOINT_ICON_RGBA(a_3._f7, v_E, v_F, v_10, sub_62b2(v_A, 70, 210));  \nGRAPHICS::_4B5B4DA5D79F1943(a_3._f7, 0.95);  \nGRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(a_3._f7, 4.0, 4.0, 100.0);  \n\nOld name: N_0x4b5b4da5d79f1943"
	},
	"SetDrawOrigin()": {
	  "prefix": "SetDrawOrigin",
	  "body": [
		"SetDrawOrigin(${1:float x}, ${2:float y}, ${3:float z}, ${4:Any p3})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nSets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.  \nFrom now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.  \nExample in C#:  \nVector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);  \nFunction.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);  \nFunction.Call(Hash.DRAW_SPRITE, \"helicopterhud\", \"hud_corner\", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);  \nFunction.Call(Hash.CLEAR_DRAW_ORIGIN);  \nResult: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg  \nIf the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.  \nThis function also effects the drawing of texts and other UI-elements.  \nThe effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().  \n"
	},
	"SetEntityIconColor()": {
	  "prefix": "SetEntityIconColor",
	  "body": [
		"SetEntityIconColor(${1:Entity entity}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetEntityIconVisibility()": {
	  "prefix": "SetEntityIconVisibility",
	  "body": [
		"SetEntityIconVisibility(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetExtraTimecycleModifier()": {
	  "prefix": "SetExtraTimecycleModifier",
	  "body": [
		"SetExtraTimecycleModifier(${1:char* modifierName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nSets a secondary timecycle modifier."
	},
	"N_0x2c328af17210f009()": {
	  "prefix": "N_0x2c328af17210f009",
	  "body": "N_0x2c328af17210f009",
	  "description": "OLD NAME, PLEASE USE SetExtraTimecycleModifierStrength INSTEAD!"
	},
	"SetExtraTimecycleModifierStrength()": {
	  "prefix": "SetExtraTimecycleModifierStrength",
	  "body": [
		"SetExtraTimecycleModifierStrength(${1:float strength})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nThe same as [`SetTimecycleModifierStrength`](#_0x82E7FFCD5B2326B3) but for the secondary tiemcycle modifier.\nOld name: N_0x2c328af17210f009"
	},
	"SetFarShadowsSuppressed()": {
	  "prefix": "SetFarShadowsSuppressed",
	  "body": [
		"SetFarShadowsSuppressed(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nWhen this is set to ON, shadows only draw as you get nearer.  \nWhen OFF, they draw from a further distance. (((BUT))) f*ck up nearer shadows quality.  \n"
	},
	"SetFlash()": {
	  "prefix": "SetFlash",
	  "body": [
		"SetFlash(${1:float p0}, ${2:float p1}, ${3:float fadeIn}, ${4:float duration}, ${5:float fadeOut})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nPurpose of p0 and p1 unknown.  \n"
	},
	"SetForcePedFootstepsTracks()": {
	  "prefix": "SetForcePedFootstepsTracks",
	  "body": [
		"SetForcePedFootstepsTracks(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nForces footstep tracks on all surfaces.  \n"
	},
	"SetForceVehicleTrails()": {
	  "prefix": "SetForceVehicleTrails",
	  "body": [
		"SetForceVehicleTrails(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nForces vehicle trails on all surfaces.  \n"
	},
	"EnableGameplayCam()": {
	  "prefix": "EnableGameplayCam",
	  "body": "EnableGameplayCam",
	  "description": "OLD NAME, PLEASE USE SetFrozenRenderingDisabled INSTEAD!"
	},
	"SetFrozenRenderingDisabled()": {
	  "prefix": "SetFrozenRenderingDisabled",
	  "body": [
		"SetFrozenRenderingDisabled(${1:BOOL enabled})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nOld name: EnableGameplayCam"
	},
	"SetNoiseoveride()": {
	  "prefix": "SetNoiseoveride",
	  "body": [
		"SetNoiseoveride(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetNightvision()": {
	  "prefix": "SetNightvision",
	  "body": [
		"SetNightvision(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nEnables Night Vision.  \nExample:  \nC#: Function.Call(Hash.SET_NIGHTVISION, true);  \nC++: GRAPHICS::SET_NIGHTVISION(true);  \nBOOL toggle:  \ntrue = turns night vision on for your player.  \nfalse = turns night vision off for your player.  \n"
	},
	"SetNoisinessoveride()": {
	  "prefix": "SetNoisinessoveride",
	  "body": [
		"SetNoisinessoveride(${1:float value})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetPtfxAssetOld_2New()": {
	  "prefix": "SetPtfxAssetOld_2New",
	  "body": "SetPtfxAssetOld_2New",
	  "description": "OLD NAME, PLEASE USE SetParticleFxAssetOldToNew INSTEAD!"
	},
	"SetParticleFxAssetOldToNew()": {
	  "prefix": "SetParticleFxAssetOldToNew",
	  "body": [
		"SetParticleFxAssetOldToNew(${1:char* oldAsset}, ${2:char* newAsset})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nconsole hash: 0xC92719A7  \n\nOld name: SetPtfxAssetOld_2New"
	},
	"SetParticleFxBloodScale()": {
	  "prefix": "SetParticleFxBloodScale",
	  "body": [
		"SetParticleFxBloodScale(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nhash collision  \n"
	},
	"SetParticleFxCamInsideNonplayerVehicle()": {
	  "prefix": "SetParticleFxCamInsideNonplayerVehicle",
	  "body": [
		"SetParticleFxCamInsideNonplayerVehicle(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetParticleFxCamInsideVehicle()": {
	  "prefix": "SetParticleFxCamInsideVehicle",
	  "body": [
		"SetParticleFxCamInsideVehicle(${1:BOOL p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetParticleFxLoopedAlpha()": {
	  "prefix": "SetParticleFxLoopedAlpha",
	  "body": [
		"SetParticleFxLoopedAlpha(${1:int ptfxHandle}, ${2:float alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetParticleFxLoopedColour()": {
	  "prefix": "SetParticleFxLoopedColour",
	  "body": [
		"SetParticleFxLoopedColour(${1:int ptfxHandle}, ${2:float r}, ${3:float g}, ${4:float b}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nonly works on some fx's  \np4 = 0  \n"
	},
	"SetParticleFxLoopedEvolution()": {
	  "prefix": "SetParticleFxLoopedEvolution",
	  "body": [
		"SetParticleFxLoopedEvolution(${1:int ptfxHandle}, ${2:char* propertyName}, ${3:float amount}, ${4:BOOL Id})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nShould be named SET_PARTICLE_FX_LOOPED_PROPERTY. \"Evolution\" doesn't make much sense...  \n--------  \np4 seems to be always 0.  \nUsage:  \nif (!GRAPHICS::DOES_PARTICLE_FX_LOOPED_EXIST(l_25C7)) {  \n      l_25C7 = GRAPHICS::_DDE23F30CC5A0F03(\"scr_veh_plane_gen_damage\", l_8B9, l_25C4, 0.0, 0.0, 0.0, ENTITY::_GET_ENTITY_BONE_INDEX(l_8B9, \"exhaust\"), 1.0, 0, 0, 0);  \n      GRAPHICS::SET_PARTICLE_FX_LOOPED_EVOLUTION(l_25C7, \"damage_smoke\", 0.5, 0);  \n      GRAPHICS::SET_PARTICLE_FX_LOOPED_EVOLUTION(l_25C7, \"damage_fire\", 0.2, 0);  \n      }  \n"
	},
	"SetParticleFxLoopedOffsets()": {
	  "prefix": "SetParticleFxLoopedOffsets",
	  "body": [
		"SetParticleFxLoopedOffsets(${1:int ptfxHandle}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetParticleFxLoopedRange()": {
	  "prefix": "SetParticleFxLoopedRange",
	  "body": [
		"SetParticleFxLoopedRange(${1:int ptfxHandle}, ${2:float range})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetParticleFxNonLoopedAlpha()": {
	  "prefix": "SetParticleFxNonLoopedAlpha",
	  "body": [
		"SetParticleFxNonLoopedAlpha(${1:float alpha})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nUsage example for C#:  \nFunction.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });  \n\t\tNote: the argument alpha ranges from 0.0f-1.0f !  \n"
	},
	"SetParticleFxLoopedScale()": {
	  "prefix": "SetParticleFxLoopedScale",
	  "body": [
		"SetParticleFxLoopedScale(${1:int ptfxHandle}, ${2:float scale})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetParticleFxShootoutBoat()": {
	  "prefix": "SetParticleFxShootoutBoat",
	  "body": [
		"SetParticleFxShootoutBoat(${1:Any p0})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetParticleFxNonLoopedColour()": {
	  "prefix": "SetParticleFxNonLoopedColour",
	  "body": [
		"SetParticleFxNonLoopedColour(${1:float r}, ${2:float g}, ${3:float b})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nonly works on some fx's  \n"
	},
	"SetScaleformMovieToUseSystemTime()": {
	  "prefix": "SetScaleformMovieToUseSystemTime",
	  "body": [
		"SetScaleformMovieToUseSystemTime(${1:int scaleform}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetScaleformMovieAsNoLongerNeeded()": {
	  "prefix": "SetScaleformMovieAsNoLongerNeeded",
	  "body": [
		"SetScaleformMovieAsNoLongerNeeded(${1:int* scaleformHandle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0xf5a2c681787e579d()": {
	  "prefix": "N_0xf5a2c681787e579d",
	  "body": "N_0xf5a2c681787e579d",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxAlignParams INSTEAD!"
	},
	"ScreenDrawPositionRatio()": {
	  "prefix": "ScreenDrawPositionRatio",
	  "body": "ScreenDrawPositionRatio",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxAlignParams INSTEAD!"
	},
	"SetScriptGfxAlignParams()": {
	  "prefix": "SetScriptGfxAlignParams",
	  "body": [
		"SetScriptGfxAlignParams(${1:float x}, ${2:float y}, ${3:float w}, ${4:float h})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nSets the draw offset/calculated size for `SET_SCRIPT_GFX_ALIGN`. If using any alignment other than left/top, the game\nexpects the width/height to be configured using this native in order to get a proper starting position for the draw\ncommand.\nOld name: N_0xf5a2c681787e579d\nOld name: ScreenDrawPositionRatio"
	},
	"N_0xc6372ecd45d73bcd()": {
	  "prefix": "N_0xc6372ecd45d73bcd",
	  "body": "N_0xc6372ecd45d73bcd",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxDrawBehindPausemenu INSTEAD!"
	},
	"SetScriptGfxDrawBehindPausemenu()": {
	  "prefix": "SetScriptGfxDrawBehindPausemenu",
	  "body": [
		"SetScriptGfxDrawBehindPausemenu(${1:BOOL flag})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nSets a flag defining whether or not script draw commands should continue being drawn behind the pause\nmenu. This is usually used for TV channels and other draw commands that are used with a world render target.\nOld name: N_0xc6372ecd45d73bcd"
	},
	"SetScreenDrawPosition()": {
	  "prefix": "SetScreenDrawPosition",
	  "body": "SetScreenDrawPosition",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxAlign INSTEAD!"
	},
	"ScreenDrawPositionBegin()": {
	  "prefix": "ScreenDrawPositionBegin",
	  "body": "ScreenDrawPositionBegin",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxAlign INSTEAD!"
	},
	"SetScriptGfxAlign()": {
	  "prefix": "SetScriptGfxAlign",
	  "body": [
		"SetScriptGfxAlign(${1:int horizontalAlign}, ${2:int verticalAlign})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nThis function anchors script draws to a side of the safe zone. This needs to be called to make the interface\nindependent of the player's safe zone configuration.\n\nThese values are equivalent to `alignX` and `alignY` in `common:/data/ui/frontend.xml`, which can be used as a baseline\nfor default alignment.\n\nValid values for `horizontalAlign`, from original documentation:\n\n-   **C (67)** - Center: DRAW_TEXT starts in the middle of the screen, while DRAW_RECT starts on the right; both move with\n    the right side of the screen.\n-   **L (76)** - Left: Anchors to the left side, DRAW_RECT starts on the left side of the screen, same as DRAW_TEXT when\n    centered.\n-   **R (82)** - Right: DRAW_TEXT starts on the left side (normal 0,0), while DRAW_RECT starts some short distance away\n    from the right side of the screen, both move with the right side of the screen.\n\nValid values for `verticalAlign`, from original documentation:\n\n-   **B (66)** - Bottom: DRAW_RECT starts about as far as the middle of the map from the bottom, while DRAW_TEXT is about\n    rather centered.\n-   **C (67)** - Center: It starts at a certain distance from the bottom, but the distance is fixed, the distance is\n    different from 66.\n-   **T (84)** - Top: Anchors to the top, DRAW_RECT starts on the top of the screen, DRAW_TEXT just below it.\n\nUsing any other value (including 0) will result in the safe zone not being taken into account for this draw. The\ncanonical value for this is 'I' (73).\n\nFor example, you can use `SET_SCRIPT_GFX_ALIGN(0, 84)` to only scale on the Y axis (to the top), but not change the X\naxis.\n\nTo reset the value, use `RESET_SCRIPT_GFX_ALIGN`.\nOld name: SetScreenDrawPosition\nOld name: ScreenDrawPositionBegin"
	},
	"SetStreamedTextureDictAsNoLongerNeeded()": {
	  "prefix": "SetStreamedTextureDictAsNoLongerNeeded",
	  "body": [
		"SetStreamedTextureDictAsNoLongerNeeded(${1:char* textureDict})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetTimecycleModifierStrength()": {
	  "prefix": "SetTimecycleModifierStrength",
	  "body": [
		"SetTimecycleModifierStrength(${1:float strength})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x61bb1d9b3a95d802()": {
	  "prefix": "N_0x61bb1d9b3a95d802",
	  "body": "N_0x61bb1d9b3a95d802",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxDrawOrder INSTEAD!"
	},
	"Set_2dLayer()": {
	  "prefix": "Set_2dLayer",
	  "body": "Set_2dLayer",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxDrawOrder INSTEAD!"
	},
	"SetUiLayer()": {
	  "prefix": "SetUiLayer",
	  "body": "SetUiLayer",
	  "description": "OLD NAME, PLEASE USE SetScriptGfxDrawOrder INSTEAD!"
	},
	"SetScriptGfxDrawOrder()": {
	  "prefix": "SetScriptGfxDrawOrder",
	  "body": [
		"SetScriptGfxDrawOrder(${1:int order})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nSets the draw order for script draw commands.\n\nExamples from decompiled scripts:  \n\ncpp\nGRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);  \nGRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);  \nGRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);  \nGRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);  \n\nOld name: N_0x61bb1d9b3a95d802\nOld name: Set_2dLayer\nOld name: SetUiLayer"
	},
	"SetSeethrough()": {
	  "prefix": "SetSeethrough",
	  "body": [
		"SetSeethrough(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nToggles Heatvision on/off.  \n"
	},
	"SetTrackedPointInfo()": {
	  "prefix": "SetTrackedPointInfo",
	  "body": [
		"SetTrackedPointInfo(${1:int point}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetTimecycleModifier()": {
	  "prefix": "SetTimecycleModifier",
	  "body": [
		"SetTimecycleModifier(${1:char* modifierName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nLoads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. \"timecycle_mods_1.xml\")  \nParameters:  \nmodifierName - The modifier to load (e.g. \"V_FIB_IT3\", \"scanline_cam\", etc.)  \nFor a full list, see here: pastebin.com/kVPwMemE  \n"
	},
	"SetTvChannel()": {
	  "prefix": "SetTvChannel",
	  "body": [
		"SetTvChannel(${1:int channel})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"N_0x6f60e89a7b64ee1d()": {
	  "prefix": "N_0x6f60e89a7b64ee1d",
	  "body": "N_0x6f60e89a7b64ee1d",
	  "description": "OLD NAME, PLEASE USE StartNetworkedParticleFxLoopedOnEntity INSTEAD!"
	},
	"StartParticleFxLoopedOnEntity_2()": {
	  "prefix": "StartParticleFxLoopedOnEntity_2",
	  "body": "StartParticleFxLoopedOnEntity_2",
	  "description": "OLD NAME, PLEASE USE StartNetworkedParticleFxLoopedOnEntity INSTEAD!"
	},
	"StartNetworkedParticleFxLoopedOnEntity()": {
	  "prefix": "StartNetworkedParticleFxLoopedOnEntity",
	  "body": [
		"StartNetworkedParticleFxLoopedOnEntity(${1:char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float scale}, ${10:BOOL xAxis}, ${11:BOOL yAxis}, ${12:BOOL zAxis})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nnetwork fx  \n\nOld name: N_0x6f60e89a7b64ee1d\nOld name: StartParticleFxLoopedOnEntity_2"
	},
	"SetTransitionTimecycleModifier()": {
	  "prefix": "SetTransitionTimecycleModifier",
	  "body": [
		"SetTransitionTimecycleModifier(${1:char* modifierName}, ${2:float transition})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nFor a full list, see here: pastebin.com/kVPwMemE  \n"
	},
	"SetTvAudioFrontend()": {
	  "prefix": "SetTvAudioFrontend",
	  "body": [
		"SetTvAudioFrontend(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nMight be more appropriate in AUDIO?  \nRockstar made it like this.  \nProbably changes tvs from being a 3d audio to being \"global\" audio  \n"
	},
	"N_0xdde23f30cc5a0f03()": {
	  "prefix": "N_0xdde23f30cc5a0f03",
	  "body": "N_0xdde23f30cc5a0f03",
	  "description": "OLD NAME, PLEASE USE StartNetworkedParticleFxLoopedOnEntityBone INSTEAD!"
	},
	"StartParticleFxLoopedOnEntityBone_2()": {
	  "prefix": "StartParticleFxLoopedOnEntityBone_2",
	  "body": "StartParticleFxLoopedOnEntityBone_2",
	  "description": "OLD NAME, PLEASE USE StartNetworkedParticleFxLoopedOnEntityBone INSTEAD!"
	},
	"StartNetworkedParticleFxLoopedOnEntityBone()": {
	  "prefix": "StartNetworkedParticleFxLoopedOnEntityBone",
	  "body": [
		"StartNetworkedParticleFxLoopedOnEntityBone(${1:char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL xAxis}, ${12:BOOL yAxis}, ${13:BOOL zAxis})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nConsole Hash: 0xF478EFCF  \nnetwork fx  \n\nOld name: N_0xdde23f30cc5a0f03\nOld name: StartParticleFxLoopedOnEntityBone_2"
	},
	"SetTvVolume()": {
	  "prefix": "SetTvVolume",
	  "body": [
		"SetTvVolume(${1:float volume})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"StartParticleFxNonLoopedOnEntity_2()": {
	  "prefix": "StartParticleFxNonLoopedOnEntity_2",
	  "body": "StartParticleFxNonLoopedOnEntity_2",
	  "description": "OLD NAME, PLEASE USE StartNetworkedParticleFxNonLoopedOnEntity INSTEAD!"
	},
	"StartNetworkedParticleFxNonLoopedOnEntity()": {
	  "prefix": "StartNetworkedParticleFxNonLoopedOnEntity",
	  "body": [
		"StartNetworkedParticleFxNonLoopedOnEntity(${1:char* effectName}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:float scale}, ${10:BOOL axisX}, ${11:BOOL axisY}, ${12:BOOL axisZ})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nnetwork fx  \n\nOld name: StartParticleFxNonLoopedOnEntity_2"
	},
	"StartParticleFxNonLoopedAtCoord_2()": {
	  "prefix": "StartParticleFxNonLoopedAtCoord_2",
	  "body": "StartParticleFxNonLoopedAtCoord_2",
	  "description": "OLD NAME, PLEASE USE StartNetworkedParticleFxNonLoopedAtCoord INSTEAD!"
	},
	"StartNetworkedParticleFxNonLoopedAtCoord()": {
	  "prefix": "StartNetworkedParticleFxNonLoopedAtCoord",
	  "body": [
		"StartNetworkedParticleFxNonLoopedAtCoord(${1:char* effectName}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:float scale}, ${9:BOOL xAxis}, ${10:BOOL yAxis}, ${11:BOOL zAxis})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nnetwork fx  \n\nOld name: StartParticleFxNonLoopedAtCoord_2"
	},
	"StartParticleFxLoopedAtCoord()": {
	  "prefix": "StartParticleFxLoopedAtCoord",
	  "body": [
		"StartParticleFxLoopedAtCoord(${1:char* effectName}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:float scale}, ${9:BOOL xAxis}, ${10:BOOL yAxis}, ${11:BOOL zAxis}, ${12:BOOL p11})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nGRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD(\"scr_fbi_falling_debris\", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)  \np11 seems to be always 0  \n"
	},
	"StartParticleFxNonLoopedOnPedBone_2()": {
	  "prefix": "StartParticleFxNonLoopedOnPedBone_2",
	  "body": "StartParticleFxNonLoopedOnPedBone_2",
	  "description": "OLD NAME, PLEASE USE StartNetworkedParticleFxNonLoopedOnPedBone INSTEAD!"
	},
	"StartNetworkedParticleFxNonLoopedOnPedBone()": {
	  "prefix": "StartNetworkedParticleFxNonLoopedOnPedBone",
	  "body": [
		"StartNetworkedParticleFxNonLoopedOnPedBone(${1:char* effectName}, ${2:Ped ped}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL axisX}, ${12:BOOL axisY}, ${13:BOOL axisZ})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nnetwork fx  \n\nOld name: StartParticleFxNonLoopedOnPedBone_2"
	},
	"StartParticleFxLoopedOnEntityBone()": {
	  "prefix": "StartParticleFxLoopedOnEntityBone",
	  "body": [
		"StartParticleFxLoopedOnEntityBone(${1:char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL xAxis}, ${12:BOOL yAxis}, ${13:BOOL zAxis})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n"
	},
	"StartParticleFxLoopedOnPedBone()": {
	  "prefix": "StartParticleFxLoopedOnPedBone",
	  "body": [
		"StartParticleFxLoopedOnPedBone(${1:char* effectName}, ${2:Ped ped}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL xAxis}, ${12:BOOL yAxis}, ${13:BOOL zAxis})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n"
	},
	"StartParticleFxLoopedOnEntity()": {
	  "prefix": "StartParticleFxLoopedOnEntity",
	  "body": [
		"StartParticleFxLoopedOnEntity(${1:char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float scale}, ${10:BOOL xAxis}, ${11:BOOL yAxis}, ${12:BOOL zAxis})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nlist: pastebin.com/N9unUFWY  \n"
	},
	"StartParticleFxNonLoopedOnEntity()": {
	  "prefix": "StartParticleFxNonLoopedOnEntity",
	  "body": [
		"StartParticleFxNonLoopedOnEntity(${1:char* effectName}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:float scale}, ${10:BOOL axisX}, ${11:BOOL axisY}, ${12:BOOL axisZ})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nStarts a particle effect on an entity for example your player.  \nList: pastebin.com/N9unUFWY  \nExample:  \nC#:  \nFunction.Call(Hash.REQUEST_NAMED_PTFX_ASSET, \"scr_rcbarry2\");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, \"scr_rcbarry2\");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, \"scr_clown_appears\", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);  \nInternally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE  \nhowever it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native  \n"
	},
	"StartParticleFxNonLoopedAtCoord()": {
	  "prefix": "StartParticleFxNonLoopedAtCoord",
	  "body": [
		"StartParticleFxNonLoopedAtCoord(${1:char* effectName}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:float scale}, ${9:BOOL xAxis}, ${10:BOOL yAxis}, ${11:BOOL zAxis})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: int\n\nGRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD(\"scr_paleto_roof_impact\", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);  \nAxis - Invert Axis Flags  \nlist: pastebin.com/N9unUFWY  \n-------------------------------------------------------------------  \nC#  \nFunction.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.  \nchar *effectname = This is an in-game effect name, for e.g. \"scr_fbi4_trucks_crash\" is used to give the effects when truck crashes etc  \nfloat x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates  \nfloat xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.  \nfloat scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f  \nbool xaxis, yaxis, zaxis = To bool the axis values.  \nexample:  \nFunction.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, \"scr_fbi4_trucks_crash\", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);  \n"
	},
	"StartParticleFxNonLoopedOnPedBone()": {
	  "prefix": "StartParticleFxNonLoopedOnPedBone",
	  "body": [
		"StartParticleFxNonLoopedOnPedBone(${1:char* effectName}, ${2:Ped ped}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL axisX}, ${12:BOOL axisY}, ${13:BOOL axisZ})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\nGRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(\"scr_sh_bong_smoke\", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);  \nAxis - Invert Axis Flags  \nlist: pastebin.com/N9unUFWY  \n"
	},
	"StartScreenEffect()": {
	  "prefix": "StartScreenEffect",
	  "body": [
		"StartScreenEffect(${1:char* effectName}, ${2:int duration}, ${3:BOOL looped})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nplayLength - is how long to play the effect for in milliseconds. If 0, it plays the default length  \nif loop is true, the effect wont stop until you call _STOP_SCREEN_EFFECT on it. (only loopable effects)  \nExample and list of screen FX: www.pastebin.com/dafBAjs0  \n"
	},
	"StopParticleFxLooped()": {
	  "prefix": "StopParticleFxLooped",
	  "body": [
		"StopParticleFxLooped(${1:int ptfxHandle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\np1 is always 0 in the native scripts  \n"
	},
	"StopAllScreenEffects()": {
	  "prefix": "StopAllScreenEffects",
	  "body": [
		"StopAllScreenEffects()"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"StopScreenEffect()": {
	  "prefix": "StopScreenEffect",
	  "body": [
		"StopScreenEffect(${1:char* effectName})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nExample and list of screen FX: www.pastebin.com/dafBAjs0  \n"
	},
	"N_0xa356990e161c9e65()": {
	  "prefix": "N_0xa356990e161c9e65",
	  "body": "N_0xa356990e161c9e65",
	  "description": "OLD NAME, PLEASE USE TerraingridActivate INSTEAD!"
	},
	"TerraingridActivate()": {
	  "prefix": "TerraingridActivate",
	  "body": [
		"TerraingridActivate(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\nThis native enables/disables the gold putting grid display (<https://i.imgur.com/TC6cku6.png>).\nThis requires these two natives to be called as well to configure the grid: [`0x1c4fc5752bcd8e48`](https://runtime.fivem.net/doc/reference.html#_0x1C4FC5752BCD8E48) and [`0x5ce62918f8d703c7`](https://runtime.fivem.net/doc/reference.html#_0x5CE62918F8D703C7).\nOld name: N_0xa356990e161c9e65"
	},
	"TransitionFromBlurred()": {
	  "prefix": "TransitionFromBlurred",
	  "body": [
		"TransitionFromBlurred(${1:float transitionTime})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\ntime in ms to transition from fully blurred to normal  \n"
	},
	"TransitionToBlurred()": {
	  "prefix": "TransitionToBlurred",
	  "body": [
		"TransitionToBlurred(${1:float transitionTime})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: BOOL\n\ntime in ms to transition to fully blurred screen  \n"
	},
	"WashDecalsFromVehicle()": {
	  "prefix": "WashDecalsFromVehicle",
	  "body": [
		"WashDecalsFromVehicle(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"SetPtfxAssetNextCall()": {
	  "prefix": "SetPtfxAssetNextCall",
	  "body": "SetPtfxAssetNextCall",
	  "description": "OLD NAME, PLEASE USE UseParticleFxAssetNextCall INSTEAD!"
	},
	"UseParticleFxAssetNextCall()": {
	  "prefix": "UseParticleFxAssetNextCall",
	  "body": [
		"UseParticleFxAssetNextCall(${1:char* name})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n\nFrom the b678d decompiled scripts:  \nGRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"FM_Mission_Controler\");  \nGRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_apartment_mp\");  \nGRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_indep_fireworks\");  \nGRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_mp_cig_plane\");  \nGRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_mp_creator\");  \nGRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_ornate_heist\");  \nGRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(\"scr_prison_break_heist_station\");  \n\nOld name: SetPtfxAssetNextCall"
	},
	"WashDecalsInRange()": {
	  "prefix": "WashDecalsInRange",
	  "body": [
		"WashDecalsInRange(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: GRAPHICS\nReturns: void\n"
	},
	"AddPickupToInteriorRoomByName()": {
	  "prefix": "AddPickupToInteriorRoomByName",
	  "body": [
		"AddPickupToInteriorRoomByName(${1:Pickup pickup}, ${2:char* roomName})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"CapInterior()": {
	  "prefix": "CapInterior",
	  "body": [
		"CapInterior(${1:int interiorID}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nDoes something similar to INTERIOR::DISABLE_INTERIOR  \n"
	},
	"DisableInterior()": {
	  "prefix": "DisableInterior",
	  "body": [
		"DisableInterior(${1:int interiorID}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nExample:   \nThis removes the interior from the strip club and when trying to walk inside the player just falls:  \nINTERIOR::DISABLE_INTERIOR(118018, true);  \n"
	},
	"N_0xeea5ac2eda7c33e8()": {
	  "prefix": "N_0xeea5ac2eda7c33e8",
	  "body": "N_0xeea5ac2eda7c33e8",
	  "description": "OLD NAME, PLEASE USE AreCoordsCollidingWithExterior INSTEAD!"
	},
	"AreCoordsCollidingWithExterior()": {
	  "prefix": "AreCoordsCollidingWithExterior",
	  "body": [
		"AreCoordsCollidingWithExterior(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: BOOL\n\nReturns true if the coords are colliding with the outdoors, and false if they collide with an interior.  \n\nOld name: N_0xeea5ac2eda7c33e8"
	},
	"N_0x55e86af2712b36a1()": {
	  "prefix": "N_0x55e86af2712b36a1",
	  "body": "N_0x55e86af2712b36a1",
	  "description": "OLD NAME, PLEASE USE EnableInteriorProp INSTEAD!"
	},
	"EnableInteriorProp()": {
	  "prefix": "EnableInteriorProp",
	  "body": [
		"EnableInteriorProp(${1:int interiorID}, ${2:char* propName})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nMore info: http://gtaforums.com/topic/836367-adding-props-to-interiors/  \n\nOld name: N_0x55e86af2712b36a1"
	},
	"ClearRoomForEntity()": {
	  "prefix": "ClearRoomForEntity",
	  "body": [
		"ClearRoomForEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0x420bd37289eee162()": {
	  "prefix": "N_0x420bd37289eee162",
	  "body": "N_0x420bd37289eee162",
	  "description": "OLD NAME, PLEASE USE DisableInteriorProp INSTEAD!"
	},
	"DisableInteriorProp()": {
	  "prefix": "DisableInteriorProp",
	  "body": [
		"DisableInteriorProp(${1:int interiorID}, ${2:char* propName})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nOld name: N_0x420bd37289eee162"
	},
	"N_0x05b7a89bd78797fc()": {
	  "prefix": "N_0x05b7a89bd78797fc",
	  "body": "N_0x05b7a89bd78797fc",
	  "description": "OLD NAME, PLEASE USE GetInteriorAtCoordsWithType INSTEAD!"
	},
	"GetInteriorAtCoordsWithType()": {
	  "prefix": "GetInteriorAtCoordsWithType",
	  "body": [
		"GetInteriorAtCoordsWithType(${1:float x}, ${2:float y}, ${3:float z}, ${4:char* interiorType})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: int\n\nReturns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.  \nUse: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))  \nInterior types include: \"V_Michael\", \"V_Franklins\", \"V_Franklinshouse\", etc.. you can find them in the scripts.  \nNot a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.  \n\nOld name: N_0x05b7a89bd78797fc"
	},
	"ForceRoomForEntity()": {
	  "prefix": "ForceRoomForEntity",
	  "body": [
		"ForceRoomForEntity(${1:Entity entity}, ${2:int interiorID}, ${3:Hash roomHashKey})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nForces the particular room in an interior to load incase not teleporting into the portal.\n"
	},
	"GetInteriorFromEntity()": {
	  "prefix": "GetInteriorFromEntity",
	  "body": [
		"GetInteriorFromEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: int\n\nReturns the handle of the interior that the entity is in. Returns 0 if outside.  \n"
	},
	"GetInteriorAtCoords()": {
	  "prefix": "GetInteriorAtCoords",
	  "body": [
		"GetInteriorAtCoords(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: int\n\nReturns interior ID from specified coordinates. If coordinates are outside, then it returns 0.  \nExample for VB.NET  \nDim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)  \n"
	},
	"GetInteriorGroupId()": {
	  "prefix": "GetInteriorGroupId",
	  "body": [
		"GetInteriorGroupId(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: int\n\nReturns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.  \n"
	},
	"GetInteriorFromCollision()": {
	  "prefix": "GetInteriorFromCollision",
	  "body": [
		"GetInteriorFromCollision(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: int\n"
	},
	"GetOffsetFromInteriorInWorldCoords()": {
	  "prefix": "GetOffsetFromInteriorInWorldCoords",
	  "body": [
		"GetOffsetFromInteriorInWorldCoords(${1:int interiorID}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: Vector3\n"
	},
	"GetKeyForEntityInRoom()": {
	  "prefix": "GetKeyForEntityInRoom",
	  "body": [
		"GetKeyForEntityInRoom(${1:Entity entity})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: Hash\n\nSeems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY  \n"
	},
	"GetRoomKeyFromEntity()": {
	  "prefix": "GetRoomKeyFromEntity",
	  "body": [
		"GetRoomKeyFromEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: Hash\n\nGets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.  \n"
	},
	"N_0xa6575914d2a0b450()": {
	  "prefix": "N_0xa6575914d2a0b450",
	  "body": "N_0xa6575914d2a0b450",
	  "description": "OLD NAME, PLEASE USE GetRoomKeyFromGameplayCam INSTEAD!"
	},
	"GetRoomKeyFromGameplayCam()": {
	  "prefix": "GetRoomKeyFromGameplayCam",
	  "body": [
		"GetRoomKeyFromGameplayCam()"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: Hash\n\nReturns the room hash key from the current gameplay cam.  \n\nOld name: N_0xa6575914d2a0b450"
	},
	"IsInteriorCapped()": {
	  "prefix": "IsInteriorCapped",
	  "body": [
		"IsInteriorCapped(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: BOOL\n"
	},
	"IsInteriorDisabled()": {
	  "prefix": "IsInteriorDisabled",
	  "body": [
		"IsInteriorDisabled(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: BOOL\n"
	},
	"N_0xa97f257d0151a6ab()": {
	  "prefix": "N_0xa97f257d0151a6ab",
	  "body": "N_0xa97f257d0151a6ab",
	  "description": "OLD NAME, PLEASE USE HideMapObjectThisFrame INSTEAD!"
	},
	"HideMapObjectThisFrame()": {
	  "prefix": "HideMapObjectThisFrame",
	  "body": [
		"HideMapObjectThisFrame(${1:Hash mapObjectHash})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nThis is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.  \nMore info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/  \n\nOld name: N_0xa97f257d0151a6ab"
	},
	"IsInteriorReady()": {
	  "prefix": "IsInteriorReady",
	  "body": [
		"IsInteriorReady(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: BOOL\n"
	},
	"N_0x35f7dd45e8c0a16d()": {
	  "prefix": "N_0x35f7dd45e8c0a16d",
	  "body": "N_0x35f7dd45e8c0a16d",
	  "description": "OLD NAME, PLEASE USE IsInteriorPropEnabled INSTEAD!"
	},
	"IsInteriorPropEnabled()": {
	  "prefix": "IsInteriorPropEnabled",
	  "body": [
		"IsInteriorPropEnabled(${1:int interiorID}, ${2:char* propName})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: BOOL\n\nOld name: N_0x35f7dd45e8c0a16d"
	},
	"IsValidInterior()": {
	  "prefix": "IsValidInterior",
	  "body": [
		"IsValidInterior(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: BOOL\n\nReturn if interior is valid.  \n"
	},
	"IsInteriorScene()": {
	  "prefix": "IsInteriorScene",
	  "body": [
		"IsInteriorScene()"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: BOOL\n"
	},
	"N_0x23b59d8912f94246()": {
	  "prefix": "N_0x23b59d8912f94246",
	  "body": [
		"N_0x23b59d8912f94246()"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0x2ca429c029ccf247()": {
	  "prefix": "N_0x2ca429c029ccf247",
	  "body": "N_0x2ca429c029ccf247",
	  "description": "OLD NAME, PLEASE USE LoadInterior INSTEAD!"
	},
	"LoadInterior()": {
	  "prefix": "LoadInterior",
	  "body": [
		"LoadInterior(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nLoad interior  \n\nOld name: N_0x2ca429c029ccf247"
	},
	"N_0x405dc2aef6af95b9()": {
	  "prefix": "N_0x405dc2aef6af95b9",
	  "body": [
		"N_0x405dc2aef6af95b9(${1:Hash roomHashKey})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nUsage: INTERIOR::_0x405DC2AEF6AF95B9(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));  \n"
	},
	"N_0x483aca1176ca93f1()": {
	  "prefix": "N_0x483aca1176ca93f1",
	  "body": [
		"N_0x483aca1176ca93f1()"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0x4c2330e61d3deb56()": {
	  "prefix": "N_0x4c2330e61d3deb56",
	  "body": [
		"N_0x4c2330e61d3deb56(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: Any\n\nOnly used once in the entire game scripts, probably useless. Always returns 0.  \n"
	},
	"N_0x50c375537449f369()": {
	  "prefix": "N_0x50c375537449f369",
	  "body": [
		"N_0x50c375537449f369(${1:Any p0})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0x7241ccb7d020db69()": {
	  "prefix": "N_0x7241ccb7d020db69",
	  "body": [
		"N_0x7241ccb7d020db69(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0x82ebb79e258fa2b7()": {
	  "prefix": "N_0x82ebb79e258fa2b7",
	  "body": [
		"N_0x82ebb79e258fa2b7(${1:Entity entity}, ${2:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0x920d853f3e17f1da()": {
	  "prefix": "N_0x920d853f3e17f1da",
	  "body": [
		"N_0x920d853f3e17f1da(${1:int interiorID}, ${2:Hash roomHashKey})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0x9e6542f0ce8e70a3()": {
	  "prefix": "N_0x9e6542f0ce8e70a3",
	  "body": [
		"N_0x9e6542f0ce8e70a3(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nOnly found 4 times in Rockstar scripts.  \nClearly has something to do with Cutscenes.  \n"
	},
	"N_0xaf348afcb575a441()": {
	  "prefix": "N_0xaf348afcb575a441",
	  "body": [
		"N_0xaf348afcb575a441(${1:char* roomName})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nExemple of use(carmod_shop.c4)  \nINTERIOR::_AF348AFCB575A441(\"V_CarModRoom\");  \n"
	},
	"RefreshInterior()": {
	  "prefix": "RefreshInterior",
	  "body": [
		"RefreshInterior(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"SetInteriorPropColor()": {
	  "prefix": "SetInteriorPropColor",
	  "body": [
		"SetInteriorPropColor(${1:int interiorID}, ${2:char* propName}, ${3:int color})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n"
	},
	"N_0xf0f77adb9f67e79d()": {
	  "prefix": "N_0xf0f77adb9f67e79d",
	  "body": "N_0xf0f77adb9f67e79d",
	  "description": "OLD NAME, PLEASE USE UnkGetInteriorAtCoords INSTEAD!"
	},
	"UnkGetInteriorAtCoords()": {
	  "prefix": "UnkGetInteriorAtCoords",
	  "body": [
		"UnkGetInteriorAtCoords(${1:float x}, ${2:float y}, ${3:float z}, ${4:int unk})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: int\n\nReturns the interior ID at the given coords, but only if the unknown variable is set to 0, otherwise it will return 0.  \n\nOld name: N_0xf0f77adb9f67e79d"
	},
	"UnpinInterior()": {
	  "prefix": "UnpinInterior",
	  "body": [
		"UnpinInterior(${1:int interiorID})"
	  ],
	  "description": "Namespace: INTERIOR\nReturns: void\n\nDoes something similar to INTERIOR::DISABLE_INTERIOR.  \nYou don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.  \n"
	},
	"AddToItemset()": {
	  "prefix": "AddToItemset",
	  "body": [
		"AddToItemset(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: BOOL\n"
	},
	"CleanItemset()": {
	  "prefix": "CleanItemset",
	  "body": [
		"CleanItemset(${1:Any p0})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: void\n"
	},
	"CreateItemset()": {
	  "prefix": "CreateItemset",
	  "body": [
		"CreateItemset(${1:Vehicle distri})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: Vehicle\n"
	},
	"DestroyItemset()": {
	  "prefix": "DestroyItemset",
	  "body": [
		"DestroyItemset(${1:Any p0})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: void\n"
	},
	"GetIndexedItemInItemset()": {
	  "prefix": "GetIndexedItemInItemset",
	  "body": [
		"GetIndexedItemInItemset(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: Any\n"
	},
	"IsInItemset()": {
	  "prefix": "IsInItemset",
	  "body": [
		"IsInItemset(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: BOOL\n"
	},
	"GetItemsetSize()": {
	  "prefix": "GetItemsetSize",
	  "body": [
		"GetItemsetSize(${1:ScrHandle x})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: Any\n"
	},
	"IsItemsetValid()": {
	  "prefix": "IsItemsetValid",
	  "body": [
		"IsItemsetValid(${1:Any p0})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: BOOL\n"
	},
	"RemoveFromItemset()": {
	  "prefix": "RemoveFromItemset",
	  "body": [
		"RemoveFromItemset(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ITEMSET\nReturns: void\n"
	},
	"Absf()": {
	  "prefix": "Absf",
	  "body": [
		"Absf(${1:float value})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n"
	},
	"Acos()": {
	  "prefix": "Acos",
	  "body": [
		"Acos(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\nReturns arccos value of p0.  \n"
	},
	"Absi()": {
	  "prefix": "Absi",
	  "body": [
		"Absi(${1:int value})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"AddPoliceRestart()": {
	  "prefix": "AddPoliceRestart",
	  "body": [
		"AddPoliceRestart(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"AddHospitalRestart()": {
	  "prefix": "AddHospitalRestart",
	  "body": [
		"AddHospitalRestart(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n\nReturns the index of the newly created hospital spawn point.  \np3 might be radius?  \n"
	},
	"AddStuntJump()": {
	  "prefix": "AddStuntJump",
	  "body": [
		"AddStuntJump(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:float x4}, ${11:float y4}, ${12:float z4}, ${13:float camX}, ${14:float camY}, ${15:float camZ}, ${16:int unk1}, ${17:int unk2}, ${18:int unk3})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\nSee description of [`ADD_STUNT_JUMP_ANGLED`](#_0xBBE5D803A5360CBF) for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones."
	},
	"AddStuntJumpAngled()": {
	  "prefix": "AddStuntJumpAngled",
	  "body": [
		"AddStuntJumpAngled(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float radius1}, ${8:float x3}, ${9:float y3}, ${10:float z3}, ${11:float x4}, ${12:float y4}, ${13:float z4}, ${14:float radius2}, ${15:float camX}, ${16:float camY}, ${17:float camZ}, ${18:int unk1}, ${19:int unk2}, ${20:int unk3})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\nCreates a new stunt jump. \n\nThe radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP\\_**ANGLED**.\n\nInfo about the specific 'parameter sections':\n\n**x1, y1, z1, x2, y2, z2 and radius1:**\n\nFirst coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.\n\n**x3, y3, z3, x4, y4, z4 and radius2:**\n\nNext part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).\n\n**camX, camY and camZ:**\n\nThe final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.\n\n**unk1, unk2 and unk3:**\n\nNot sure what these are for, but they're always `150, 0, 0` in decompiled scripts.\n\nVisualized example in-game:\n\n![](https://d.fivem.dev/2019-03-15_18-24_c7802_846.png)\n\nHere is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): <https://pastebin.com/EW1jBPkY>"
	},
	"Asin()": {
	  "prefix": "Asin",
	  "body": [
		"Asin(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\nReturns arcsin value of p0.  \n"
	},
	"AreStringsEqual()": {
	  "prefix": "AreStringsEqual",
	  "body": [
		"AreStringsEqual(${1:char* string1}, ${2:char* string2})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nis this like strcmp??  \n"
	},
	"Atan()": {
	  "prefix": "Atan",
	  "body": [
		"Atan(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\nReturns arctan value of p0.  \n"
	},
	"N_0x58a39be597ce99cd()": {
	  "prefix": "N_0x58a39be597ce99cd",
	  "body": "N_0x58a39be597ce99cd",
	  "description": "OLD NAME, PLEASE USE CancelOnscreenKeyboard INSTEAD!"
	},
	"CancelOnscreenKeyboard()": {
	  "prefix": "CancelOnscreenKeyboard",
	  "body": [
		"CancelOnscreenKeyboard()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nCancels an onscreen keyboard, if available.\n\nOld name: N_0x58a39be597ce99cd"
	},
	"Atan_2()": {
	  "prefix": "Atan_2",
	  "body": [
		"Atan_2(${1:float p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n"
	},
	"ClearAngledAreaOfVehicles()": {
	  "prefix": "ClearAngledAreaOfVehicles",
	  "body": [
		"ClearAngledAreaOfVehicles(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9}, ${11:BOOL p10}, ${12:BOOL p11})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"BeginReplayStats()": {
	  "prefix": "BeginReplayStats",
	  "body": [
		"BeginReplayStats(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ClearArea()": {
	  "prefix": "ClearArea",
	  "body": [
		"ClearArea(${1:float X}, ${2:float Y}, ${3:float Z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL ignoreCopCars}, ${7:BOOL ignoreObjects}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nExample: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);  \n"
	},
	"CancelStuntJump()": {
	  "prefix": "CancelStuntJump",
	  "body": [
		"CancelStuntJump()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ClearAreaOfObjects()": {
	  "prefix": "ClearAreaOfObjects",
	  "body": [
		"ClearAreaOfObjects(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int flags})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nI looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.  \n"
	},
	"ClearAreaOfCops()": {
	  "prefix": "ClearAreaOfCops",
	  "body": [
		"ClearAreaOfCops(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int flags})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ClearAreaOfPeds()": {
	  "prefix": "ClearAreaOfPeds",
	  "body": [
		"ClearAreaOfPeds(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int flags})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nExample: \t\tCLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);  \n"
	},
	"N_0x957838aaf91bd12d()": {
	  "prefix": "N_0x957838aaf91bd12d",
	  "body": "N_0x957838aaf91bd12d",
	  "description": "OLD NAME, PLEASE USE ClearAreaOfEverything INSTEAD!"
	},
	"ClearAreaOfEverything()": {
	  "prefix": "ClearAreaOfEverything",
	  "body": [
		"ClearAreaOfEverything(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nGAMEPLAY::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.  \n\nOld name: N_0x957838aaf91bd12d"
	},
	"ClearAreaOfProjectiles()": {
	  "prefix": "ClearAreaOfProjectiles",
	  "body": [
		"ClearAreaOfProjectiles(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL isNetworkGame})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ClearCloudHat()": {
	  "prefix": "ClearCloudHat",
	  "body": [
		"ClearCloudHat()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ClearAreaOfVehicles()": {
	  "prefix": "ClearAreaOfVehicles",
	  "body": [
		"ClearAreaOfVehicles(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nExample: \t\tCLEAR_AREA_OF_VEHICLES(0, 0, 0, 10000, false, false, false, false, false);  \n"
	},
	"ClearWeatherTypePersist()": {
	  "prefix": "ClearWeatherTypePersist",
	  "body": [
		"ClearWeatherTypePersist()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ClearBit()": {
	  "prefix": "ClearBit",
	  "body": [
		"ClearBit(${1:int* address}, ${2:int offset})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThis sets bit [offset] of [address] to off.  \nExample:  \nGAMEPLAY::CLEAR_BIT(&bitAddress, 1);  \nTo check if this bit has been enabled:  \nGAMEPLAY::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards  \n"
	},
	"CompareStrings()": {
	  "prefix": "CompareStrings",
	  "body": [
		"CompareStrings(${1:char* str1}, ${2:char* str2}, ${3:BOOL matchCase}, ${4:int maxLength})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n\nCompares two strings up to a specified number of characters.  \nParameters:  \nstr1 - String to be compared.  \nstr2 - String to be compared.  \nmatchCase - Comparison will be case-sensitive.  \nmaxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.  \nReturns:  \nA value indicating the relationship between the strings:  \n<0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)  \n0 - The contents of both strings are equal.  \n>0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)  \nExamples:  \nGAMEPLAY::COMPARE_STRINGS(\"STRING\", \"string\", false, -1); // 0; equal  \nGAMEPLAY::COMPARE_STRINGS(\"TESTING\", \"test\", false, 4); // 0; equal  \nGAMEPLAY::COMPARE_STRINGS(\"R2D2\", \"R2xx\", false, 2); // 0; equal  \nGAMEPLAY::COMPARE_STRINGS(\"foo\", \"bar\", false, -1); // 4; 'f' > 'b'  \nGAMEPLAY::COMPARE_STRINGS(\"A\", \"A\", true, 1); // 0; equal  \nWhen comparing case-sensitive strings, lower-case characters are greater than upper-case characters:  \nGAMEPLAY::COMPARE_STRINGS(\"A\", \"a\", true, 1); // -1; 'A' < 'a'  \nGAMEPLAY::COMPARE_STRINGS(\"a\", \"A\", true, 1); // 1; 'a' > 'A'  \n"
	},
	"ClearOverrideWeather()": {
	  "prefix": "ClearOverrideWeather",
	  "body": [
		"ClearOverrideWeather()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"CreateIncidentWithEntity()": {
	  "prefix": "CreateIncidentWithEntity",
	  "body": [
		"CreateIncidentWithEntity(${1:int incidentType}, ${2:Ped ped}, ${3:int amountOfPeople}, ${4:float radius}, ${5:int* outIncidentID})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\np0 could be type (valueused in scripts: 14, 7, 5, 3, 11)  \np1 is a return from get_player_ped() in am_gang_call.c, but player_ped_id() in other (non am) scripts.  \np3 is usually 0f or 3f  \n=====================================================  \nenum IncidentTypes  \n{  \n    FireDepartment = 3,  \n    Paramedics = 5,  \n    Police = 7,  \n    PedsInCavalcades = 11,   \n    Merryweather = 14  \n};  \nAs for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.   \nSide Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).  \nSide Note 2: I say it breaks as if you call this proper,  \nif(CREATE_INCIDENT) etc it will return false if you do as I said above.  \n=====================================================  \n"
	},
	"ClearReplayStats()": {
	  "prefix": "ClearReplayStats",
	  "body": [
		"ClearReplayStats()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"CreateLightningThunder()": {
	  "prefix": "CreateLightningThunder",
	  "body": [
		"CreateLightningThunder()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\ncreates single lightning+thunder at random position  \n"
	},
	"DeleteStuntJump()": {
	  "prefix": "DeleteStuntJump",
	  "body": [
		"DeleteStuntJump(${1:int p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"CreateIncident()": {
	  "prefix": "CreateIncident",
	  "body": [
		"CreateIncident(${1:int incidentType}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int p5}, ${6:float radius}, ${7:int* outIncidentID})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nenum IncidentTypes  \n{  \n    FireDepartment = 3,  \n    Paramedics = 5,  \n    Police = 7,  \n    PedsInCavalcades = 11,   \n    Merryweather = 14  \n};  \nAs for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.   \nSide Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).  \nSide Note 2: I say it breaks as if you call this proper,  \nif(CREATE_INCIDENT) etc it will return false if you do as I said above.  \n=====================================================  \n"
	},
	"DisableHospitalRestart()": {
	  "prefix": "DisableHospitalRestart",
	  "body": [
		"DisableHospitalRestart(${1:int hospitalIndex}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThe game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.  \nDoesn't work....  \n"
	},
	"DeleteIncident()": {
	  "prefix": "DeleteIncident",
	  "body": [
		"DeleteIncident(${1:int incidentId})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nDelete an incident with a given id.  \n=======================================================  \nCorrection, I have change this to int, instead of int*  \nas it doesn't use a pointer to the createdIncident.  \nIf you try it you will crash (or) freeze.  \n=======================================================  \n"
	},
	"DisableStuntJumpSet()": {
	  "prefix": "DisableStuntJumpSet",
	  "body": [
		"DisableStuntJumpSet(${1:int p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xca78cfa0366592fe()": {
	  "prefix": "N_0xca78cfa0366592fe",
	  "body": "N_0xca78cfa0366592fe",
	  "description": "OLD NAME, PLEASE USE DisplayOnscreenKeyboard_2 INSTEAD!"
	},
	"DisplayOnscreenKeyboard_2()": {
	  "prefix": "DisplayOnscreenKeyboard_2",
	  "body": [
		"DisplayOnscreenKeyboard_2(${1:int p0}, ${2:char* windowTitle}, ${3:Any* p2}, ${4:char* defaultText}, ${5:char* defaultConcat1}, ${6:char* defaultConcat2}, ${7:char* defaultConcat3}, ${8:char* defaultConcat4}, ${9:char* defaultConcat5}, ${10:char* defaultConcat6}, ${11:char* defaultConcat7}, ${12:int maxInputLength})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nonly documented to be continued...  \n\nOld name: N_0xca78cfa0366592fe"
	},
	"DisableAutomaticRespawn()": {
	  "prefix": "DisableAutomaticRespawn",
	  "body": [
		"DisableAutomaticRespawn(${1:BOOL disableRespawn})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xdc0f817884cdd856()": {
	  "prefix": "N_0xdc0f817884cdd856",
	  "body": "N_0xdc0f817884cdd856",
	  "description": "OLD NAME, PLEASE USE EnableDispatchService INSTEAD!"
	},
	"EnableDispatchService()": {
	  "prefix": "EnableDispatchService",
	  "body": [
		"EnableDispatchService(${1:int dispatchService}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nDirectly from R*:  \nenum eDispatchType : UINT16  \n{  \n    DT_PoliceAutomobile = 1,  \n    DT_PoliceHelicopter = 2,  \n    DT_FireDepartment = 3,  \n    DT_SwatAutomobile = 4,  \n    DT_AmbulanceDepartment = 5,  \n    DT_PoliceRiders = 6,  \n    DT_PoliceVehicleRequest = 7,  \n    DT_PoliceRoadBlock = 8,  \n    DT_PoliceAutomobileWaitPulledOver = 9,  \n    DT_PoliceAutomobileWaitCruising = 10,  \n    DT_Gangs = 11,  \n    DT_SwatHelicopter = 12,  \n    DT_PoliceBoat = 13,  \n    DT_ArmyVehicle = 14,  \n    DT_BikerBackup = 15  \n};  \nBy making toggle false it disables the dispatch.  \ncurious if this is what they used when you toggled on and off cops in a GTA IV freemode you hosted. Sad they got rid of the option to make a private session without cops.  \nAlso on x360 seems with or without neverWanted on, setting these to all false in SP of course doesn't seem to work. I would understand getting stars, but cops are still dispatched and combat you.  \n\nOld name: N_0xdc0f817884cdd856"
	},
	"DisablePoliceRestart()": {
	  "prefix": "DisablePoliceRestart",
	  "body": [
		"DisablePoliceRestart(${1:int policeIndex}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nDisables the spawn point at the police house on the specified index.  \npoliceIndex: The police house index.  \ntoggle: true to enable the spawn point, false to disable.  \n"
	},
	"EnableStuntJumpSet()": {
	  "prefix": "EnableStuntJumpSet",
	  "body": [
		"EnableStuntJumpSet(${1:int p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"DisplayOnscreenKeyboard()": {
	  "prefix": "DisplayOnscreenKeyboard",
	  "body": [
		"DisplayOnscreenKeyboard(${1:int p0}, ${2:char* windowTitle}, ${3:char* p2}, ${4:char* defaultText}, ${5:char* defaultConcat1}, ${6:char* defaultConcat2}, ${7:char* defaultConcat3}, ${8:int maxInputLength})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nnote, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.  \nNOTE: windowTitle uses text labels, and an invalid value will display nothing.  \nDr. Underscore: `UNK::_GET_UI_LANGUAGE_ID()` is now `UNK::_GET_CURRENT_LANGUAGE_ID()`  \nwww.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474  \nwindowTitle's  \n-----------------  \nCELL_EMAIL_BOD\t=\t\"Enter your Eyefind message\"  \nCELL_EMAIL_BODE\t=\t\"Message too long. Try again\"  \nCELL_EMAIL_BODF\t=\t\"Forbidden message. Try again\"  \nCELL_EMAIL_SOD\t=\t\"Enter your Eyefind subject\"  \nCELL_EMAIL_SODE\t=\t\"Subject too long. Try again\"  \nCELL_EMAIL_SODF\t=\t\"Forbidden text. Try again\"  \nCELL_EMASH_BOD\t=\t\"Enter your Eyefind message\"  \nCELL_EMASH_BODE\t=\t\"Message too long. Try again\"  \nCELL_EMASH_BODF\t=\t\"Forbidden message. Try again\"  \nCELL_EMASH_SOD\t=\t\"Enter your Eyefind subject\"  \nCELL_EMASH_SODE\t=\t\"Subject too long. Try again\"  \nCELL_EMASH_SODF\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP10\t=\t\"Enter Synopsis\"  \nFMMC_KEY_TIP12\t=\t\"Enter Custom Team Name\"  \nFMMC_KEY_TIP12F\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP12N\t=\t\"Custom Team Name\"  \nFMMC_KEY_TIP8\t=\t\"Enter Message\"  \nFMMC_KEY_TIP8F\t=\t\"Forbidden Text. Try again\"  \nFMMC_KEY_TIP8FS\t=\t\"Invalid Message. Try again\"  \nFMMC_KEY_TIP8S\t=\t\"Enter Message\"  \nFMMC_KEY_TIP9\t=\t\"Enter Outfit Name\"  \nFMMC_KEY_TIP9F\t=\t\"Invalid Outfit Name. Try again\"  \nFMMC_KEY_TIP9N\t=\t\"Outfit Name\"  \nPM_NAME_CHALL\t=\t\"Enter Challenge Name\"  \n"
	},
	"EndReplayStats()": {
	  "prefix": "EndReplayStats",
	  "body": [
		"EndReplayStats()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ForceSocialClubUpdate()": {
	  "prefix": "ForceSocialClubUpdate",
	  "body": [
		"ForceSocialClubUpdate()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nExits the game and downloads a fresh social club update on next restart.  \n"
	},
	"DoAutoSave()": {
	  "prefix": "DoAutoSave",
	  "body": [
		"DoAutoSave()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"GetAngleBetween_2dVectors()": {
	  "prefix": "GetAngleBetween_2dVectors",
	  "body": [
		"GetAngleBetween_2dVectors(${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\nReturns the degree of angle between (x1, y1) and (x2, y2) lines in 2D coordinate system.  \n"
	},
	"EnableTennisMode()": {
	  "prefix": "EnableTennisMode",
	  "body": [
		"EnableTennisMode(${1:Ped ped}, ${2:BOOL toggle}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nMakes the ped jump around like they're in a tennis match  \n"
	},
	"GetBitsInRange()": {
	  "prefix": "GetBitsInRange",
	  "body": [
		"GetBitsInRange(${1:int var}, ${2:int rangeStart}, ${3:int rangeEnd})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"FindSpawnPointInDirection()": {
	  "prefix": "FindSpawnPointInDirection",
	  "body": [
		"FindSpawnPointInDirection(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float distance}, ${8:Vector3* spawnPoint})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nFinds a position ahead of the player by predicting the players next actions.  \nThe positions match path finding node positions.  \nWhen roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.  \n=======================================================  \nI may sort this with alter research, but if someone  \nalready knows please tell what the difference in   \nX2, Y2, Z2 is. I doubt it's rotation. Is it like   \ncheckpoints where X1, Y1, Z1 is your/a position and  \nX2, Y2, Z2 is a given position ahead of that position?  \n=======================================================  \n"
	},
	"N_0x20ac25e781ae4a84()": {
	  "prefix": "N_0x20ac25e781ae4a84",
	  "body": "N_0x20ac25e781ae4a84",
	  "description": "OLD NAME, PLEASE USE GetCloudHatOpacity INSTEAD!"
	},
	"GetCloudHatOpacity()": {
	  "prefix": "GetCloudHatOpacity",
	  "body": [
		"GetCloudHatOpacity()"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\nOld name: N_0x20ac25e781ae4a84"
	},
	"N_0x4c9296cbcd1b971e()": {
	  "prefix": "N_0x4c9296cbcd1b971e",
	  "body": "N_0x4c9296cbcd1b971e",
	  "description": "OLD NAME, PLEASE USE GetFakeWantedLevel INSTEAD!"
	},
	"GetFakeWantedLevel()": {
	  "prefix": "GetFakeWantedLevel",
	  "body": [
		"GetFakeWantedLevel()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n\nOld name: N_0x4c9296cbcd1b971e"
	},
	"GetAllocatedStackSize()": {
	  "prefix": "GetAllocatedStackSize",
	  "body": [
		"GetAllocatedStackSize()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"N_0xe599a503b3837e1b()": {
	  "prefix": "N_0xe599a503b3837e1b",
	  "body": "N_0xe599a503b3837e1b",
	  "description": "OLD NAME, PLEASE USE GetBenchmarkTime INSTEAD!"
	},
	"GetBenchmarkTime()": {
	  "prefix": "GetBenchmarkTime",
	  "body": [
		"GetBenchmarkTime()"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\nOld name: N_0xe599a503b3837e1b"
	},
	"GetFrameTime()": {
	  "prefix": "GetFrameTime",
	  "body": [
		"GetFrameTime()"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n"
	},
	"GetDistanceBetweenCoords()": {
	  "prefix": "GetDistanceBetweenCoords",
	  "body": [
		"GetDistanceBetweenCoords(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL useZ})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\nReturns the distance between two three-dimensional points, optionally ignoring the Z values.\n\nYou'll most likely want to use your language's native vector functionality instead."
	},
	"GetFreeStackSlotsCount()": {
	  "prefix": "GetFreeStackSlotsCount",
	  "body": [
		"GetFreeStackSlotsCount(${1:int threadId})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"N_0x24da7d7667fd7b09()": {
	  "prefix": "N_0x24da7d7667fd7b09",
	  "body": "N_0x24da7d7667fd7b09",
	  "description": "OLD NAME, PLEASE USE GetGlobalCharBuffer INSTEAD!"
	},
	"GetGlobalCharBuffer()": {
	  "prefix": "GetGlobalCharBuffer",
	  "body": [
		"GetGlobalCharBuffer()"
	  ],
	  "description": "Namespace: MISC\nReturns: char*\n\nit returns a reference to an empty string, the same empty string that's used by 1687 internal gta functions.   if it was used in a script (and i cannot find an instance of it being used), it would be as the source for a StringCopy or somesuch.  \n\nOld name: N_0x24da7d7667fd7b09"
	},
	"GetFrameCount()": {
	  "prefix": "GetFrameCount",
	  "body": [
		"GetFrameCount()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"GetGroundZFor_3dCoord()": {
	  "prefix": "GetGroundZFor_3dCoord",
	  "body": [
		"GetGroundZFor_3dCoord(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* groundZ}, ${5:BOOL unk})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nGets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!  \nx: Position on the X-axis to get ground elevation at.  \ny: Position on the Y-axis to get ground elevation at.  \nz: Position on the Z-axis to get ground elevation at.  \ngroundZ: The ground elevation at the specified position.  \nunk: Nearly always 0, very rarely 1 in the scripts.  \n"
	},
	"N_0x8bdc7bfc57a81e76()": {
	  "prefix": "N_0x8bdc7bfc57a81e76",
	  "body": "N_0x8bdc7bfc57a81e76",
	  "description": "OLD NAME, PLEASE USE GetGroundZCoordWithOffsets INSTEAD!"
	},
	"GetGroundZCoordWithOffsets()": {
	  "prefix": "GetGroundZCoordWithOffsets",
	  "body": [
		"GetGroundZCoordWithOffsets(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* groundZ}, ${5:Vector3* offsets})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nonly documented to be continued...  \n\nOld name: N_0x8bdc7bfc57a81e76"
	},
	"GetHeadingFromVector_2d()": {
	  "prefix": "GetHeadingFromVector_2d",
	  "body": [
		"GetHeadingFromVector_2d(${1:float dx}, ${2:float dy})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\ndx = x1   \ndy = y1  \n"
	},
	"GetIndexOfCurrentLevel()": {
	  "prefix": "GetIndexOfCurrentLevel",
	  "body": [
		"GetIndexOfCurrentLevel()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"GetMissionFlag()": {
	  "prefix": "GetMissionFlag",
	  "body": [
		"GetMissionFlag()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0x8d7a43ec6a5fea45()": {
	  "prefix": "N_0x8d7a43ec6a5fea45",
	  "body": "N_0x8d7a43ec6a5fea45",
	  "description": "OLD NAME, PLEASE USE GetIsProjectileTypeInArea INSTEAD!"
	},
	"GetIsProjectileTypeInArea()": {
	  "prefix": "GetIsProjectileTypeInArea",
	  "body": [
		"GetIsProjectileTypeInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:Hash projHash}, ${8:Vector3* projPos}, ${9:BOOL ownedByPlayer})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nDr. Underscore (1/6/18):  \nWorks exactly like IS_PROJECTILE_TYPE_IN_AREA, but it puts the position of the projectile in the vector.  \np8 is probably ownedByPlayer, but not known for sure. (see IS_PROJECTILE_IN_AREA for info)  \nUnsure of the hash name, could someone confirm this?  \n\nOld name: N_0x8d7a43ec6a5fea45"
	},
	"GetNextWeatherType()": {
	  "prefix": "GetNextWeatherType",
	  "body": "GetNextWeatherType",
	  "description": "OLD NAME, PLEASE USE GetNextWeatherTypeHashName INSTEAD!"
	},
	"GetNextWeatherTypeHashName()": {
	  "prefix": "GetNextWeatherTypeHashName",
	  "body": [
		"GetNextWeatherTypeHashName()"
	  ],
	  "description": "Namespace: MISC\nReturns: Hash\n\nReturns weather name hash  \n\nOld name: GetNextWeatherType"
	},
	"GetModelDimensions()": {
	  "prefix": "GetModelDimensions",
	  "body": [
		"GetModelDimensions(${1:Hash modelHash}, ${2:Vector3* minimum}, ${3:Vector3* maximum})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nGets the dimensions of a model.  \nCalculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.  \nVector3 GetDimensions(Hash model)  \n{  \n\tVector3 right, left;  \n\tGET_MODEL_DIMENSIONS(model, &right, &left);  \n\treturn Vector3::Subtract(left, right);  \n}  \nExample from the scripts: GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);  \n"
	},
	"GetOnscreenKeyboardResult()": {
	  "prefix": "GetOnscreenKeyboardResult",
	  "body": [
		"GetOnscreenKeyboardResult()"
	  ],
	  "description": "Namespace: MISC\nReturns: char*\n\nReturns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.  \n"
	},
	"N_0xeb4a0c2d56441717()": {
	  "prefix": "N_0xeb4a0c2d56441717",
	  "body": "N_0xeb4a0c2d56441717",
	  "description": "OLD NAME, PLEASE USE GetNumberOfDispatchedUnitsForPlayer INSTEAD!"
	},
	"GetNumberOfDispatchedUnitsForPlayer()": {
	  "prefix": "GetNumberOfDispatchedUnitsForPlayer",
	  "body": [
		"GetNumberOfDispatchedUnitsForPlayer(${1:int dispatchService})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n\nOld name: N_0xeb4a0c2d56441717"
	},
	"GetPrevWeatherType()": {
	  "prefix": "GetPrevWeatherType",
	  "body": "GetPrevWeatherType",
	  "description": "OLD NAME, PLEASE USE GetPrevWeatherTypeHashName INSTEAD!"
	},
	"GetPrevWeatherTypeHashName()": {
	  "prefix": "GetPrevWeatherTypeHashName",
	  "body": [
		"GetPrevWeatherTypeHashName()"
	  ],
	  "description": "Namespace: MISC\nReturns: Hash\n\nReturns current weather name hash  \n\nOld name: GetPrevWeatherType"
	},
	"GetProfileSetting()": {
	  "prefix": "GetProfileSetting",
	  "body": [
		"GetProfileSetting(${1:int profileSetting})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n\ngtaforums.com/topic/799843-stats-profile-settings/  \n"
	},
	"N_0xdfb4138eefed7b81()": {
	  "prefix": "N_0xdfb4138eefed7b81",
	  "body": "N_0xdfb4138eefed7b81",
	  "description": "OLD NAME, PLEASE USE GetProjectileNearPedCoords INSTEAD!"
	},
	"GetProjectileNearPedCoords()": {
	  "prefix": "GetProjectileNearPedCoords",
	  "body": [
		"GetProjectileNearPedCoords(${1:Ped ped}, ${2:Hash projHash}, ${3:float radius}, ${4:Vector3* projPos}, ${5:BOOL ownedByPlayer})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nFrom a quick disassembly I can say that this has something to do with weapons.  \nAdded params according to what I could see in IDA.  \nDr. Underscore (1/6/18):  \nReturns if any projectiles of projHash type are in a radius around this ped. If true, projPos is filled with the position of that entity.  \nThis native was only ever used with projectiles, but may not be limited to.  \np4 isn't an Entity*, it's actually a Vector3*, which outputs the position of the found entity.  \np5 is (most likely) ownedByPlayer. (see IS_PROJECTILE_IN_AREA for info)  \n\nOld name: N_0xdfb4138eefed7b81"
	},
	"N_0x82fde6a57ee4ee44()": {
	  "prefix": "N_0x82fde6a57ee4ee44",
	  "body": "N_0x82fde6a57ee4ee44",
	  "description": "OLD NAME, PLEASE USE GetProjectileNearPed INSTEAD!"
	},
	"GetProjectileNearPed()": {
	  "prefix": "GetProjectileNearPed",
	  "body": [
		"GetProjectileNearPed(${1:Ped ped}, ${2:Hash projHash}, ${3:float radius}, ${4:Vector3* projPos}, ${5:Entity* projEnt}, ${6:BOOL ownedByPlayer})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nonly documented to be continued...  \nDr. Underscore (1/6/18):  \nExactly like _GET_PROJECTILE_NEAR_PED_COORDS (_0xDFB4138EEFED7B81), but it gives us the Entity that was found aswell.  \np6 is (most likely) ownedByPlayer. (see IS_PROJECTILE_IN_AREA for info)  \n\nOld name: N_0x82fde6a57ee4ee44"
	},
	"GetRandomEventFlag()": {
	  "prefix": "GetRandomEventFlag",
	  "body": [
		"GetRandomEventFlag()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"GetRainLevel()": {
	  "prefix": "GetRainLevel",
	  "body": [
		"GetRainLevel()"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n"
	},
	"GetRandomFloatInRange()": {
	  "prefix": "GetRandomFloatInRange",
	  "body": [
		"GetRandomFloatInRange(${1:float startRange}, ${2:float endRange})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n"
	},
	"GetRandomIntInRange()": {
	  "prefix": "GetRandomIntInRange",
	  "body": [
		"GetRandomIntInRange(${1:int startRange}, ${2:int endRange})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n\nAnother extremely useful native.  \nYou can use it simply like:  \nif (GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2))  \n"
	},
	"GetWeatherTypeTransition()": {
	  "prefix": "GetWeatherTypeTransition",
	  "body": [
		"GetWeatherTypeTransition(${1:Hash* weatherType1}, ${2:Hash* weatherType2}, ${3:float* percentWeather2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nchanged any --> hash  \nprogress_or_time --> percentWeather2, is not time but percent of the 2nd weather (0-1).  \nweatherType1 is same as GAMEPLAY::GET_PREV_WEATHER_TYPE_HASH_NAME()  \nand weatherType 2 GAMEPLAY::GET_NEXT_WEATHER_TYPE_HASH_NAME()  \n-QuantFC  \n"
	},
	"GetSnowLevel()": {
	  "prefix": "GetSnowLevel",
	  "body": [
		"GetSnowLevel()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"GetWindSpeed()": {
	  "prefix": "GetWindSpeed",
	  "body": [
		"GetWindSpeed()"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n"
	},
	"GetWindDirection()": {
	  "prefix": "GetWindDirection",
	  "body": [
		"GetWindDirection()"
	  ],
	  "description": "Namespace: MISC\nReturns: Vector3\n"
	},
	"HasBulletImpactedInBox()": {
	  "prefix": "HasBulletImpactedInBox",
	  "body": [
		"HasBulletImpactedInBox(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"HasBulletImpactedInArea()": {
	  "prefix": "HasBulletImpactedInArea",
	  "body": [
		"HasBulletImpactedInArea(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:BOOL p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\np3 - possibly radius?  \n"
	},
	"N_0x071e2a839de82d90()": {
	  "prefix": "N_0x071e2a839de82d90",
	  "body": "N_0x071e2a839de82d90",
	  "description": "OLD NAME, PLEASE USE HasButtonCombinationJustBeenEntered INSTEAD!"
	},
	"HasButtonCombinationJustBeenEntered()": {
	  "prefix": "HasButtonCombinationJustBeenEntered",
	  "body": [
		"HasButtonCombinationJustBeenEntered(${1:Hash hash}, ${2:int amount})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nThis native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the \"amount\" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/  \nINT_SCORES_SCORTED was a hash collision  \n\nOld name: N_0x071e2a839de82d90"
	},
	"N_0x557e43c447e700a8()": {
	  "prefix": "N_0x557e43c447e700a8",
	  "body": "N_0x557e43c447e700a8",
	  "description": "OLD NAME, PLEASE USE HasCheatStringJustBeenEntered INSTEAD!"
	},
	"HasCheatStringJustBeenEntered()": {
	  "prefix": "HasCheatStringJustBeenEntered",
	  "body": [
		"HasCheatStringJustBeenEntered(${1:Hash hash})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nGet inputted \"Cheat code\", for example:  \nwhile (TRUE)  \n{  \n    if (GAMEPLAY::_557E43C447E700A8(${fugitive}))  \n    {  \n       // Do something.  \n    }  \n    SYSTEM::WAIT(0);  \n}  \nCalling this will also set the last saved string hash to zero.  \n\nOld name: N_0x557e43c447e700a8"
	},
	"IgnoreNextRestart()": {
	  "prefix": "IgnoreNextRestart",
	  "body": [
		"IgnoreNextRestart(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"IsAreaOccupied()": {
	  "prefix": "IsAreaOccupied",
	  "body": [
		"IsAreaOccupied(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9}, ${11:BOOL p10}, ${12:Any p11}, ${13:BOOL p12})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsAussieVersion()": {
	  "prefix": "IsAussieVersion",
	  "body": [
		"IsAussieVersion()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nif (GAMEPLAY::IS_AUSSIE_VERSION()) {  \nsub_127a9(&l_31, 1024); // l_31 |= 1024  \nl_129 = 3;  \nsub_129d2(\"AUSSIE VERSION IS TRUE!?!?!\"); // DEBUG  \n\t\t}  \n\t\tUsed to block some of the prostitute stuff due to laws in Australia.  \n"
	},
	"IsAutoSaveInProgress()": {
	  "prefix": "IsAutoSaveInProgress",
	  "body": [
		"IsAutoSaveInProgress()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsBitSet()": {
	  "prefix": "IsBitSet",
	  "body": [
		"IsBitSet(${1:int address}, ${2:int offset})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nReturns bit's boolean state from [offset] of [address].  \nExample:  \nGAMEPLAY::IS_BIT_SET(bitAddress, 1);  \nTo enable and disable bits, see:  \nGAMEPLAY::SET_BIT(&bitAddress, 1);   // enable  \nGAMEPLAY::CLEAR_BIT(&bitAddress, 1); // disable  \n"
	},
	"IsBulletInAngledArea()": {
	  "prefix": "IsBulletInAngledArea",
	  "body": [
		"IsBulletInAngledArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsBulletInArea()": {
	  "prefix": "IsBulletInArea",
	  "body": [
		"IsBulletInArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsBulletInBox()": {
	  "prefix": "IsBulletInBox",
	  "body": [
		"IsBulletInBox(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsDurangoVersion()": {
	  "prefix": "IsDurangoVersion",
	  "body": [
		"IsDurangoVersion()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nXBOX ONE  \nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"IsFrontendFading()": {
	  "prefix": "IsFrontendFading",
	  "body": [
		"IsFrontendFading()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nThis function is hard-coded to always return 0.  \n"
	},
	"IsIncidentValid()": {
	  "prefix": "IsIncidentValid",
	  "body": [
		"IsIncidentValid(${1:int incidentId})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\n=======================================================  \nCorrection, I have change this to int, instead of int*  \nas it doesn't use a pointer to the createdIncident.  \nIf you try it you will crash (or) freeze.  \n=======================================================  \n"
	},
	"IsMemoryCardInUse()": {
	  "prefix": "IsMemoryCardInUse",
	  "body": [
		"IsMemoryCardInUse()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsMinigameInProgress()": {
	  "prefix": "IsMinigameInProgress",
	  "body": [
		"IsMinigameInProgress()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsNextWeatherType()": {
	  "prefix": "IsNextWeatherType",
	  "body": [
		"IsNextWeatherType(${1:char* weatherType})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsOrbisVersion()": {
	  "prefix": "IsOrbisVersion",
	  "body": [
		"IsOrbisVersion()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nPS4  \nMulleDK19: This function is hard-coded to always return 0.  \nForce67: I patched return result and got this : i.imgur.com/hUn7zSj.jpg  \ntranslate please?  \n"
	},
	"IsPcVersion()": {
	  "prefix": "IsPcVersion",
	  "body": [
		"IsPcVersion()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nMulleDK19: This function is hard-coded to always return 1.  \n"
	},
	"IsPointObscuredByAMissionEntity()": {
	  "prefix": "IsPointObscuredByAMissionEntity",
	  "body": [
		"IsPointObscuredByAMissionEntity(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsPositionOccupied()": {
	  "prefix": "IsPositionOccupied",
	  "body": [
		"IsPositionOccupied(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:Any p9}, ${11:BOOL p10})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsPrevWeatherType()": {
	  "prefix": "IsPrevWeatherType",
	  "body": [
		"IsPrevWeatherType(${1:char* weatherType})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsProjectileInArea()": {
	  "prefix": "IsProjectileInArea",
	  "body": [
		"IsProjectileInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL ownedByPlayer})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nDetermines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.  \nownedByPlayer = only projectiles fired by the player will be detected.  \n"
	},
	"IsProjectileTypeInAngledArea()": {
	  "prefix": "IsProjectileTypeInAngledArea",
	  "body": [
		"IsProjectileTypeInAngledArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:Any p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsProjectileTypeInArea()": {
	  "prefix": "IsProjectileTypeInArea",
	  "body": [
		"IsProjectileTypeInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int type}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nDetermines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.  \nNote: This native hasn't been tested yet.  \n"
	},
	"N_0x34318593248c8fb2()": {
	  "prefix": "N_0x34318593248c8fb2",
	  "body": "N_0x34318593248c8fb2",
	  "description": "OLD NAME, PLEASE USE IsProjectileTypeInRadius INSTEAD!"
	},
	"IsProjectileTypeInRadius()": {
	  "prefix": "IsProjectileTypeInRadius",
	  "body": [
		"IsProjectileTypeInRadius(${1:float x}, ${2:float y}, ${3:float z}, ${4:Hash projHash}, ${5:float radius}, ${6:BOOL ownedByPlayer})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nDr. Underscore (1/6/18):  \nChecks if the projectile is in the radius around that point.  \np6 is (most likely) ownedByPlayer. (see IS_PROJECTILE_IN_AREA for info)  \n\nOld name: N_0x34318593248c8fb2"
	},
	"IsPs_3Version()": {
	  "prefix": "IsPs_3Version",
	  "body": [
		"IsPs_3Version()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"IsSniperInverted()": {
	  "prefix": "IsSniperInverted",
	  "body": [
		"IsSniperInverted()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nThis function is hard-coded to always return 0.  \n"
	},
	"IsSniperBulletInArea()": {
	  "prefix": "IsSniperBulletInArea",
	  "body": [
		"IsSniperBulletInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nDetermines whether there is a sniper bullet within the specified coordinates. The coordinates form a rectangle.  \n"
	},
	"IsStringNullOrEmpty()": {
	  "prefix": "IsStringNullOrEmpty",
	  "body": [
		"IsStringNullOrEmpty(${1:char* string})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0x2272b0a1343129f4()": {
	  "prefix": "N_0x2272b0a1343129f4",
	  "body": "N_0x2272b0a1343129f4",
	  "description": "OLD NAME, PLEASE USE IsStuntJumpMessageShowing INSTEAD!"
	},
	"IsStuntJumpMessageShowing()": {
	  "prefix": "IsStuntJumpMessageShowing",
	  "body": [
		"IsStuntJumpMessageShowing()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nOld name: N_0x2272b0a1343129f4"
	},
	"IsStringNull()": {
	  "prefix": "IsStringNull",
	  "body": [
		"IsStringNull(${1:char* string})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsStuntJumpInProgress()": {
	  "prefix": "IsStuntJumpInProgress",
	  "body": [
		"IsStuntJumpInProgress()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsThisAMinigameScript()": {
	  "prefix": "IsThisAMinigameScript",
	  "body": [
		"IsThisAMinigameScript()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"IsTennisMode()": {
	  "prefix": "IsTennisMode",
	  "body": [
		"IsTennisMode(${1:Ped ped})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nReturn whether tennis mode is active or not.  \n"
	},
	"N_0x02deaac8f8ea7fe7()": {
	  "prefix": "N_0x02deaac8f8ea7fe7",
	  "body": [
		"N_0x02deaac8f8ea7fe7(${1:char* p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nFound in the scripts:  \nGAMEPLAY::_02DEAAC8F8EA7FE7(\"\");  \n"
	},
	"N_0x075f1d57402c93ba()": {
	  "prefix": "N_0x075f1d57402c93ba",
	  "body": [
		"N_0x075f1d57402c93ba()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"IsXbox_3_6_0Version()": {
	  "prefix": "IsXbox_3_6_0Version",
	  "body": [
		"IsXbox_3_6_0Version()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x06462a961e94b67c()": {
	  "prefix": "N_0x06462a961e94b67c",
	  "body": [
		"N_0x06462a961e94b67c()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x0cf97f497fe7d048()": {
	  "prefix": "N_0x0cf97f497fe7d048",
	  "body": [
		"N_0x0cf97f497fe7d048(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x1327e2fe9746baee()": {
	  "prefix": "N_0x1327e2fe9746baee",
	  "body": [
		"N_0x1327e2fe9746baee(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0x0a60017f841a54f2()": {
	  "prefix": "N_0x0a60017f841a54f2",
	  "body": [
		"N_0x0a60017f841a54f2(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x171bafb3c60389f4()": {
	  "prefix": "N_0x171bafb3c60389f4",
	  "body": [
		"N_0x171bafb3c60389f4(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x11b56fbbf7224868()": {
	  "prefix": "N_0x11b56fbbf7224868",
	  "body": [
		"N_0x11b56fbbf7224868(${1:char* p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nFound in the scripts:  \nGAMEPLAY::_11B56FBBF7224868(\"CONTRAILS\");  \n"
	},
	"N_0x19bfed045c647c49()": {
	  "prefix": "N_0x19bfed045c647c49",
	  "body": [
		"N_0x19bfed045c647c49(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0x1b2366c3f2a5c8df()": {
	  "prefix": "N_0x1b2366c3f2a5c8df",
	  "body": [
		"N_0x1b2366c3f2a5c8df()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x14832bf2aba53fc5()": {
	  "prefix": "N_0x14832bf2aba53fc5",
	  "body": [
		"N_0x14832bf2aba53fc5()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x1eae0a6e978894a2()": {
	  "prefix": "N_0x1eae0a6e978894a2",
	  "body": [
		"N_0x1eae0a6e978894a2(${1:int p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nUnsure about the use of this native but here's an example:  \nvoid sub_8709() {  \n    GAMEPLAY::_1EAE0A6E978894A2(0, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(1, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(2, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(3, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(4, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(5, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(6, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(7, 1);  \n    GAMEPLAY::_1EAE0A6E978894A2(8, 1);  \n}  \nSo it appears that p0 ranges from 0 to 8.  \nENABLE_DISPATCH_SERVICE, seems to have a similar layout.  \n"
	},
	"N_0x17df68d720aa77f8()": {
	  "prefix": "N_0x17df68d720aa77f8",
	  "body": [
		"N_0x17df68d720aa77f8(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0x1ff6bf9a63e5757f()": {
	  "prefix": "N_0x1ff6bf9a63e5757f",
	  "body": [
		"N_0x1ff6bf9a63e5757f()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x1bb299305c3e8c13()": {
	  "prefix": "N_0x1bb299305c3e8c13",
	  "body": [
		"N_0x1bb299305c3e8c13(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x21c235bc64831e5a()": {
	  "prefix": "N_0x21c235bc64831e5a",
	  "body": [
		"N_0x21c235bc64831e5a(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:BOOL p9})"
	  ],
	  "description": "Namespace: MISC\nReturns: Vector3\n"
	},
	"N_0x2107a3773771186d()": {
	  "prefix": "N_0x2107a3773771186d",
	  "body": [
		"N_0x2107a3773771186d()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x2587a48bc88dfadf()": {
	  "prefix": "N_0x2587a48bc88dfadf",
	  "body": [
		"N_0x2587a48bc88dfadf(${1:BOOL p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x2b5e102e4a42f2bf()": {
	  "prefix": "N_0x2b5e102e4a42f2bf",
	  "body": [
		"N_0x2b5e102e4a42f2bf()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x213aeb2b90cba7ac()": {
	  "prefix": "N_0x213aeb2b90cba7ac",
	  "body": [
		"N_0x213aeb2b90cba7ac(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x23227df0b2115469()": {
	  "prefix": "N_0x23227df0b2115469",
	  "body": [
		"N_0x23227df0b2115469()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x31125fd509d9043f()": {
	  "prefix": "N_0x31125fd509d9043f",
	  "body": [
		"N_0x31125fd509d9043f(${1:Any* p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x31727907b2c43c55()": {
	  "prefix": "N_0x31727907b2c43c55",
	  "body": [
		"N_0x31727907b2c43c55(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x2b626a0150e4d449()": {
	  "prefix": "N_0x2b626a0150e4d449",
	  "body": [
		"N_0x2b626a0150e4d449()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x37deb0aa183fb6d8()": {
	  "prefix": "N_0x37deb0aa183fb6d8",
	  "body": [
		"N_0x37deb0aa183fb6d8()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x2d4259f1feb81da9()": {
	  "prefix": "N_0x2d4259f1feb81da9",
	  "body": [
		"N_0x2d4259f1feb81da9(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x3bbbd13e5041a79e()": {
	  "prefix": "N_0x3bbbd13e5041a79e",
	  "body": [
		"N_0x3bbbd13e5041a79e()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x32c7a7e8c43a1f80()": {
	  "prefix": "N_0x32c7a7e8c43a1f80",
	  "body": [
		"N_0x32c7a7e8c43a1f80(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x3ed1438c1f5c6612()": {
	  "prefix": "N_0x3ed1438c1f5c6612",
	  "body": [
		"N_0x3ed1438c1f5c6612(${1:int p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\np0 was always 2 in R* scripts.  \nCalled before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.  \n"
	},
	"N_0x397baa01068baa96()": {
	  "prefix": "N_0x397baa01068baa96",
	  "body": [
		"N_0x397baa01068baa96()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"N_0x437138b6a830166a()": {
	  "prefix": "N_0x437138b6a830166a",
	  "body": [
		"N_0x437138b6a830166a()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x405591ec8fd9096d()": {
	  "prefix": "N_0x405591ec8fd9096d",
	  "body": [
		"N_0x405591ec8fd9096d(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x44a0bdc559b35f6e()": {
	  "prefix": "N_0x44a0bdc559b35f6e",
	  "body": [
		"N_0x44a0bdc559b35f6e()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x438822c279b73b93()": {
	  "prefix": "N_0x438822c279b73b93",
	  "body": [
		"N_0x438822c279b73b93(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x4750fc27570311ec()": {
	  "prefix": "N_0x4750fc27570311ec",
	  "body": [
		"N_0x4750fc27570311ec()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x48f069265a0e4bec()": {
	  "prefix": "N_0x48f069265a0e4bec",
	  "body": [
		"N_0x48f069265a0e4bec(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nOnly found 3 times in decompiled scripts. Not a whole lot to go off of.  \nGAMEPLAY::_48F069265A0E4BEC(a_0, \"Movie_Name_For_This_Player\");  \nGAMEPLAY::_48F069265A0E4BEC(&a_0._fB, \"Ringtone_For_This_Player\");  \nGAMEPLAY::_48F069265A0E4BEC(&a_0._f1EC4._f12[v_A/*6*/], &v_13); // where v_13 is \"MPATMLOGSCRS0\" thru \"MPATMLOGSCRS15\"  \n"
	},
	"N_0x54f157e0336a3822()": {
	  "prefix": "N_0x54f157e0336a3822",
	  "body": [
		"N_0x54f157e0336a3822(${1:Any p0}, ${2:char* p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nFrom the scripts:  \nGAMEPLAY::_54F157E0336A3822(sub_aa49(a_0), \"ForcedStopDirection\", v_E);  \n"
	},
	"N_0x5aa3befa29f03ad4()": {
	  "prefix": "N_0x5aa3befa29f03ad4",
	  "body": [
		"N_0x5aa3befa29f03ad4()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x4dcdf92bf64236cd()": {
	  "prefix": "N_0x4dcdf92bf64236cd",
	  "body": [
		"N_0x4dcdf92bf64236cd(${1:char* p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x5b1f2e327b6b6fe1()": {
	  "prefix": "N_0x5b1f2e327b6b6fe1",
	  "body": [
		"N_0x5b1f2e327b6b6fe1()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x65d2ebb47e1cec21()": {
	  "prefix": "N_0x65d2ebb47e1cec21",
	  "body": [
		"N_0x65d2ebb47e1cec21(${1:BOOL p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x6216b116083a7cb4()": {
	  "prefix": "N_0x6216b116083a7cb4",
	  "body": [
		"N_0x6216b116083a7cb4(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x67f6413d3220e18d()": {
	  "prefix": "N_0x67f6413d3220e18d",
	  "body": [
		"N_0x67f6413d3220e18d(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x684a41975f077262()": {
	  "prefix": "N_0x684a41975f077262",
	  "body": [
		"N_0x684a41975f077262()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nexample:  \nif (GAMEPLAY::_684A41975F077262()) {  \n       (a_0) = GAMEPLAY::_ABB2FA71C83A1B72();  \n   } else {   \n       (a_0) = -1;  \n   }  \n"
	},
	"N_0x6856ec3d35c81ea4()": {
	  "prefix": "N_0x6856ec3d35c81ea4",
	  "body": [
		"N_0x6856ec3d35c81ea4()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"N_0x693478acbd7f18e7()": {
	  "prefix": "N_0x693478acbd7f18e7",
	  "body": [
		"N_0x693478acbd7f18e7()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x69fe6dc87bd2a5e9()": {
	  "prefix": "N_0x69fe6dc87bd2a5e9",
	  "body": [
		"N_0x69fe6dc87bd2a5e9(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x6f2135b6129620c1()": {
	  "prefix": "N_0x6f2135b6129620c1",
	  "body": [
		"N_0x6f2135b6129620c1(${1:BOOL p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x6e04f06094c87047()": {
	  "prefix": "N_0x6e04f06094c87047",
	  "body": [
		"N_0x6e04f06094c87047()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x6fddf453c0c756ec()": {
	  "prefix": "N_0x6fddf453c0c756ec",
	  "body": [
		"N_0x6fddf453c0c756ec()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\n- if (GAMEPLAY::_6FDDF453C0C756EC() || GAMEPLAY::IS_PC_VERSION()) {  \n"
	},
	"N_0x6f7794f28c6b2535()": {
	  "prefix": "N_0x6f7794f28c6b2535",
	  "body": [
		"N_0x6f7794f28c6b2535(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSeems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?  \nGAMEPLAY::_6F7794F28C6B2535(&a_0._f1, \"tlPlateText\");  \nGAMEPLAY::_6F7794F28C6B2535(&a_0._f1C, \"tlPlateText_pending\");  \nGAMEPLAY::_6F7794F28C6B2535(&a_0._f10B, \"tlCarAppPlateText\");  \n\"tl\" prefix sounds like \"Text Label\"  \n"
	},
	"N_0x72de52178c291cb5()": {
	  "prefix": "N_0x72de52178c291cb5",
	  "body": [
		"N_0x72de52178c291cb5()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x703cc7f60cbb2b57()": {
	  "prefix": "N_0x703cc7f60cbb2b57",
	  "body": [
		"N_0x703cc7f60cbb2b57(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x7c9c0b1eeb1f9072()": {
	  "prefix": "N_0x7c9c0b1eeb1f9072",
	  "body": [
		"N_0x7c9c0b1eeb1f9072(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x7f8f6405f4777af6()": {
	  "prefix": "N_0x7f8f6405f4777af6",
	  "body": [
		"N_0x7f8f6405f4777af6(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:BOOL p9})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n"
	},
	"N_0x7ec6f9a478a6a512()": {
	  "prefix": "N_0x7ec6f9a478a6a512",
	  "body": [
		"N_0x7ec6f9a478a6a512()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x8098c8d6597aae18()": {
	  "prefix": "N_0x8098c8d6597aae18",
	  "body": [
		"N_0x8098c8d6597aae18(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x8269816f6cfd40f8()": {
	  "prefix": "N_0x8269816f6cfd40f8",
	  "body": [
		"N_0x8269816f6cfd40f8(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nOnly found 2 times in decompiled scripts. Not a whole lot to go off of.  \nGAMEPLAY::_8269816F6CFD40F8(&a_0._f1F5A._f6[0/*8*/], \"TEMPSTAT_LABEL\"); // gets saved in a struct called \"g_SaveData_STRING_ScriptSaves\"  \nGAMEPLAY::_8269816F6CFD40F8(&a_0._f4B4[v_1A/*8*/], &v_5); // where v_5 is \"Name0\" thru \"Name9\", gets saved in a struct called \"OUTFIT_Name\"  \n"
	},
	"N_0x8951eb9c6906d3c8()": {
	  "prefix": "N_0x8951eb9c6906d3c8",
	  "body": [
		"N_0x8951eb9c6906d3c8()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x8ef5573a1f801a5c()": {
	  "prefix": "N_0x8ef5573a1f801a5c",
	  "body": [
		"N_0x8ef5573a1f801a5c(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0x8d74e26f54b4e5c3()": {
	  "prefix": "N_0x8d74e26f54b4e5c3",
	  "body": [
		"N_0x8d74e26f54b4e5c3(${1:char* p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nGAMEPLAY::_8D74E26F54B4E5C3(\"\");  \n"
	},
	"N_0x918c7b2d2ff3928b()": {
	  "prefix": "N_0x918c7b2d2ff3928b",
	  "body": [
		"N_0x918c7b2d2ff3928b(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x8fa9c42fc5d7c64b()": {
	  "prefix": "N_0x8fa9c42fc5d7c64b",
	  "body": [
		"N_0x8fa9c42fc5d7c64b(${1:Any p0}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x9689123e3f213aa5()": {
	  "prefix": "N_0x9689123e3f213aa5",
	  "body": [
		"N_0x9689123e3f213aa5()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0x996dd1e1e02f1008()": {
	  "prefix": "N_0x996dd1e1e02f1008",
	  "body": [
		"N_0x996dd1e1e02f1008()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"N_0x92790862e36c2ada()": {
	  "prefix": "N_0x92790862e36c2ada",
	  "body": [
		"N_0x92790862e36c2ada()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nI can 100% confirm this is some kind of START_* native.  \nNext character in the name is either C, D or E.  \nUsed only once in the scripts (benchmark.ysc).  \n"
	},
	"N_0x97e7e2c04245115b()": {
	  "prefix": "N_0x97e7e2c04245115b",
	  "body": [
		"N_0x97e7e2c04245115b(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x9b2bd3773123ea2f()": {
	  "prefix": "N_0x9b2bd3773123ea2f",
	  "body": [
		"N_0x9b2bd3773123ea2f(${1:int type}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x9e82f0f362881b29()": {
	  "prefix": "N_0x9e82f0f362881b29",
	  "body": [
		"N_0x9e82f0f362881b29(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0x9d8d44adbba61ef2()": {
	  "prefix": "N_0x9d8d44adbba61ef2",
	  "body": [
		"N_0x9d8d44adbba61ef2(${1:BOOL p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x9f5e6bb6b34540da()": {
	  "prefix": "N_0x9f5e6bb6b34540da",
	  "body": [
		"N_0x9f5e6bb6b34540da(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xa049a5be0f04f2f8()": {
	  "prefix": "N_0xa049a5be0f04f2f8",
	  "body": [
		"N_0xa049a5be0f04f2f8()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0xa09f896ce912481f()": {
	  "prefix": "N_0xa09f896ce912481f",
	  "body": [
		"N_0xa09f896ce912481f(${1:BOOL p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"N_0xa735353c77334ea0()": {
	  "prefix": "N_0xa735353c77334ea0",
	  "body": [
		"N_0xa735353c77334ea0(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xa7a1127490312c36()": {
	  "prefix": "N_0xa7a1127490312c36",
	  "body": [
		"N_0xa7a1127490312c36(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xa4a0065e39c9f25c()": {
	  "prefix": "N_0xa4a0065e39c9f25c",
	  "body": [
		"N_0xa4a0065e39c9f25c(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xa8434f1dff41d6e7()": {
	  "prefix": "N_0xa8434f1dff41d6e7",
	  "body": [
		"N_0xa8434f1dff41d6e7(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xa74802fb8d0b7814()": {
	  "prefix": "N_0xa74802fb8d0b7814",
	  "body": [
		"N_0xa74802fb8d0b7814(${1:char* p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nCalled 4 times in the b617d scripts:  \nGAMEPLAY::_A74802FB8D0B7814(\"CONTRAILS\", 0);  \n"
	},
	"N_0xb08b85d860e7ba3c()": {
	  "prefix": "N_0xb08b85d860e7ba3c",
	  "body": [
		"N_0xb08b85d860e7ba3c(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xb335f761606db47c()": {
	  "prefix": "N_0xb335f761606db47c",
	  "body": [
		"N_0xb335f761606db47c(${1:Any* p1}, ${2:Any* p2}, ${3:Any p3}, ${4:BOOL p4})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nThis line found 48 times in the scripts:  \nGAMEPLAY::_B335F761606DB47C(&v_4, &v_7, a_0, v_A);  \n"
	},
	"N_0xabb2fa71c83a1b72()": {
	  "prefix": "N_0xabb2fa71c83a1b72",
	  "body": [
		"N_0xabb2fa71c83a1b72()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xb3e6360dde733e82()": {
	  "prefix": "N_0xb3e6360dde733e82",
	  "body": [
		"N_0xb3e6360dde733e82(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xb129e447a2eda4bf()": {
	  "prefix": "N_0xb129e447a2eda4bf",
	  "body": [
		"N_0xb129e447a2eda4bf(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xb51b9ab9ef81868c()": {
	  "prefix": "N_0xb51b9ab9ef81868c",
	  "body": [
		"N_0xb51b9ab9ef81868c(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xb3cd58cca6cda852()": {
	  "prefix": "N_0xb3cd58cca6cda852",
	  "body": [
		"N_0xb3cd58cca6cda852()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xb9854dfde0d833d6()": {
	  "prefix": "N_0xb9854dfde0d833d6",
	  "body": [
		"N_0xb9854dfde0d833d6(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xb8721407ee9c3ff6()": {
	  "prefix": "N_0xb8721407ee9c3ff6",
	  "body": [
		"N_0xb8721407ee9c3ff6(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xba4b8d83bdc75551()": {
	  "prefix": "N_0xba4b8d83bdc75551",
	  "body": [
		"N_0xba4b8d83bdc75551(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0xb8f87ead7533b176()": {
	  "prefix": "N_0xb8f87ead7533b176",
	  "body": [
		"N_0xb8f87ead7533b176(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xc54a08c85ae4d410()": {
	  "prefix": "N_0xc54a08c85ae4d410",
	  "body": [
		"N_0xc54a08c85ae4d410(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThis seems to edit the water wave, intensity around your current location.  \n0.0f = Normal  \n1.0f = So Calm and Smooth, a boat will stay still.  \n3.0f = Really Intense.  \n"
	},
	"N_0xc3c221addde31a11()": {
	  "prefix": "N_0xc3c221addde31a11",
	  "body": [
		"N_0xc3c221addde31a11(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xc7db36c24634f52b()": {
	  "prefix": "N_0xc7db36c24634f52b",
	  "body": [
		"N_0xc7db36c24634f52b()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xd10282b6e3751ba0()": {
	  "prefix": "N_0xd10282b6e3751ba0",
	  "body": [
		"N_0xd10282b6e3751ba0()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xc3ead29ab273ece8()": {
	  "prefix": "N_0xc3ead29ab273ece8",
	  "body": [
		"N_0xc3ead29ab273ece8(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xd261ba3e7e998072()": {
	  "prefix": "N_0xd261ba3e7e998072",
	  "body": [
		"N_0xd261ba3e7e998072(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xc79ae21974b01fb2()": {
	  "prefix": "N_0xc79ae21974b01fb2",
	  "body": [
		"N_0xc79ae21974b01fb2()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xd79185689f8fd5df()": {
	  "prefix": "N_0xd79185689f8fd5df",
	  "body": [
		"N_0xd79185689f8fd5df(${1:BOOL p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xd10f442036302d50()": {
	  "prefix": "N_0xd10f442036302d50",
	  "body": [
		"N_0xd10f442036302d50(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xd9f692d349249528()": {
	  "prefix": "N_0xd9f692d349249528",
	  "body": [
		"N_0xd9f692d349249528()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xd642319c54aadeb6()": {
	  "prefix": "N_0xd642319c54aadeb6",
	  "body": [
		"N_0xd642319c54aadeb6()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xdea36202fc3382df()": {
	  "prefix": "N_0xdea36202fc3382df",
	  "body": [
		"N_0xdea36202fc3382df(${1:BOOL p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nDr. Underscore (1/6/18):  \nMost references of this native come from the creator scripts. (creator, fm_capture_creator, fm_deathmatch_creator, fm_lts_creator, fm_race_creator).  \nSeems to have something to do with initializing/destroying creator shit.  \n"
	},
	"N_0xe3d969d2785ffb5e()": {
	  "prefix": "N_0xe3d969d2785ffb5e",
	  "body": [
		"N_0xe3d969d2785ffb5e()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nsets something to 1  \n"
	},
	"N_0xe6869becdd8f2403()": {
	  "prefix": "N_0xe6869becdd8f2403",
	  "body": [
		"N_0xe6869becdd8f2403(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xdc9274a7ef6b2867()": {
	  "prefix": "N_0xdc9274a7ef6b2867",
	  "body": [
		"N_0xdc9274a7ef6b2867()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xe95b0c7d5ba3b96b()": {
	  "prefix": "N_0xe95b0c7d5ba3b96b",
	  "body": [
		"N_0xe95b0c7d5ba3b96b(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0xe266ed23311f24d4()": {
	  "prefix": "N_0xe266ed23311f24d4",
	  "body": [
		"N_0xe266ed23311f24d4(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xeb078ca2b5e82add()": {
	  "prefix": "N_0xeb078ca2b5e82add",
	  "body": [
		"N_0xeb078ca2b5e82add(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0xe532ec1a63231b4f()": {
	  "prefix": "N_0xe532ec1a63231b4f",
	  "body": [
		"N_0xe532ec1a63231b4f(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xebd3205a207939ed()": {
	  "prefix": "N_0xebd3205a207939ed",
	  "body": [
		"N_0xebd3205a207939ed(${1:Any* p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0xe8b9c0ec9e183f35()": {
	  "prefix": "N_0xe8b9c0ec9e183f35",
	  "body": [
		"N_0xe8b9c0ec9e183f35()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"N_0xf2f6a2fa49278625()": {
	  "prefix": "N_0xf2f6a2fa49278625",
	  "body": [
		"N_0xf2f6a2fa49278625(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:Any* p9}, ${11:Any* p10}, ${12:Any* p11}, ${13:Any* p12})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xea2f2061875eed90()": {
	  "prefix": "N_0xea2f2061875eed90",
	  "body": [
		"N_0xea2f2061875eed90()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xf751b16fb32abc1d()": {
	  "prefix": "N_0xf751b16fb32abc1d",
	  "body": [
		"N_0xf751b16fb32abc1d(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xeb2104e905c6f2e9()": {
	  "prefix": "N_0xeb2104e905c6f2e9",
	  "body": [
		"N_0xeb2104e905c6f2e9()"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xfb00ca71da386228()": {
	  "prefix": "N_0xfb00ca71da386228",
	  "body": [
		"N_0xfb00ca71da386228()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"NetworkSetScriptIsSafeForNetworkGame()": {
	  "prefix": "NetworkSetScriptIsSafeForNetworkGame",
	  "body": [
		"NetworkSetScriptIsSafeForNetworkGame()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xf56dfb7b61be7276()": {
	  "prefix": "N_0xf56dfb7b61be7276",
	  "body": [
		"N_0xf56dfb7b61be7276(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float p11}, ${13:Any* p12})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"PopulateNow()": {
	  "prefix": "PopulateNow",
	  "body": [
		"PopulateNow()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nspawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called  \n"
	},
	"N_0xfaa457ef263e8763()": {
	  "prefix": "N_0xfaa457ef263e8763",
	  "body": [
		"N_0xfaa457ef263e8763(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nAnother unknown label type...  \nGAMEPLAY::_FAA457EF263E8763(a_0, \"Thumb_label\");  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f10, \"Photo_label\");  \nGAMEPLAY::_FAA457EF263E8763(a_0, \"GXTlabel\");  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f21, \"StringComp\");  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f43, \"SecondStringComp\");  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f53, \"ThirdStringComp\");  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f32, \"SenderStringComp\");  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f726[v_1A/*16*/], &v_20); // where v_20 is \"LastJobTL_0_1\" thru \"LastJobTL_2_1\", gets saved in a struct called \"LAST_JobGamer_TL\"  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f4B, \"PAID_PLAYER\");  \nGAMEPLAY::_FAA457EF263E8763(&a_0._f5B, \"RADIO_STATION\");  \n"
	},
	"RegisterBoolToSave()": {
	  "prefix": "RegisterBoolToSave",
	  "body": [
		"RegisterBoolToSave(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xfb80ab299d2ee1bd()": {
	  "prefix": "N_0xfb80ab299d2ee1bd",
	  "body": [
		"N_0xfb80ab299d2ee1bd(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"RegisterEnumToSave()": {
	  "prefix": "RegisterEnumToSave",
	  "body": [
		"RegisterEnumToSave(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"OverrideSaveHouse()": {
	  "prefix": "OverrideSaveHouse",
	  "body": [
		"OverrideSaveHouse(${1:BOOL p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5}, ${7:float p6}, ${8:float p7})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n"
	},
	"RegisterIntToSave()": {
	  "prefix": "RegisterIntToSave",
	  "body": [
		"RegisterIntToSave(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"RegisterTextLabelToSave()": {
	  "prefix": "RegisterTextLabelToSave",
	  "body": [
		"RegisterTextLabelToSave(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"RegisterFloatToSave()": {
	  "prefix": "RegisterFloatToSave",
	  "body": [
		"RegisterFloatToSave(${1:Any* p0}, ${2:char* name})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"RegisterSaveHouse()": {
	  "prefix": "RegisterSaveHouse",
	  "body": [
		"RegisterSaveHouse(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Any* p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"N_0xa6a12939f16d85be()": {
	  "prefix": "N_0xa6a12939f16d85be",
	  "body": "N_0xa6a12939f16d85be",
	  "description": "OLD NAME, PLEASE USE RemoveStealthKill INSTEAD!"
	},
	"RemoveStealthKill()": {
	  "prefix": "RemoveStealthKill",
	  "body": [
		"RemoveStealthKill(${1:Hash hash}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nAppears to remove stealth kill action from memory.  \n------------------------------------  \nI agree with the above statement.  \np1 is unknown, my best guess would be if false it marks the stealth kill for immediate deletion, or if true marks it for deletion later.  \n\nOld name: N_0xa6a12939f16d85be"
	},
	"RemoveDispatchSpawnBlockingArea()": {
	  "prefix": "RemoveDispatchSpawnBlockingArea",
	  "body": [
		"RemoveDispatchSpawnBlockingArea(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ResetDispatchSpawnBlockingAreas()": {
	  "prefix": "ResetDispatchSpawnBlockingAreas",
	  "body": [
		"ResetDispatchSpawnBlockingAreas()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0xe574a662acaefbb1()": {
	  "prefix": "N_0xe574a662acaefbb1",
	  "body": "N_0xe574a662acaefbb1",
	  "description": "OLD NAME, PLEASE USE RestartGame INSTEAD!"
	},
	"RestartGame()": {
	  "prefix": "RestartGame",
	  "body": [
		"RestartGame()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\nShows `Disconnecting from GTA Online` HUD and then quits the game. Better name `_QUIT_GAME`?\nOld name: N_0xe574a662acaefbb1"
	},
	"ResetDispatchIdealSpawnDistance()": {
	  "prefix": "ResetDispatchIdealSpawnDistance",
	  "body": [
		"ResetDispatchIdealSpawnDistance()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"ResetLocalplayerState()": {
	  "prefix": "ResetLocalplayerState",
	  "body": [
		"ResetLocalplayerState()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets the localplayer playerinfo state back to playing (State 0)  \nStates are:  \n-1: \"Invalid\"  \n0: \"Playing\"  \n1: \"Died\"  \n2: \"Arrested\"  \n3: \"Failed Mission\"  \n4: \"Left Game\"  \n5: \"Respawn\"  \n6: \"In MP Cutscene\"  \n"
	},
	"SetBitsInRange()": {
	  "prefix": "SetBitsInRange",
	  "body": [
		"SetBitsInRange(${1:int* var}, ${2:int rangeStart}, ${3:int rangeEnd}, ${4:int p3})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetBit()": {
	  "prefix": "SetBit",
	  "body": [
		"SetBit(${1:int* address}, ${2:int offset})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThis sets bit [offset] of [address] to on.  \nThe offsets used are different bits to be toggled on and off, typically there is only one address used in a script.  \nExample:  \nGAMEPLAY::SET_BIT(&bitAddress, 1);  \nTo check if this bit has been enabled:  \nGAMEPLAY::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards  \nPlease note, this method may assign a value to [address] when used.  \n"
	},
	"N_0xf36199225d6d8c86()": {
	  "prefix": "N_0xf36199225d6d8c86",
	  "body": "N_0xf36199225d6d8c86",
	  "description": "OLD NAME, PLEASE USE SetCloudHatOpacity INSTEAD!"
	},
	"SetCloudHatOpacity()": {
	  "prefix": "SetCloudHatOpacity",
	  "body": [
		"SetCloudHatOpacity(${1:float opacity})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nOld name: N_0xf36199225d6d8c86"
	},
	"SetCloudHatTransition()": {
	  "prefix": "SetCloudHatTransition",
	  "body": [
		"SetCloudHatTransition(${1:char* type}, ${2:float transitionTime})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetCreditsActive()": {
	  "prefix": "SetCreditsActive",
	  "body": [
		"SetCreditsActive(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"N_0x706b5edcaa7fa663()": {
	  "prefix": "N_0x706b5edcaa7fa663",
	  "body": "N_0x706b5edcaa7fa663",
	  "description": "OLD NAME, PLEASE USE SetCustomRespawnPosition INSTEAD!"
	},
	"SetCustomRespawnPosition()": {
	  "prefix": "SetCustomRespawnPosition",
	  "body": [
		"SetCustomRespawnPosition(${1:float x}, ${2:float y}, ${3:float z}, ${4:float heading})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSpecifies a custom respawn position to be used in conjunction with _SET_NEXT_RESPAWN_TO_CUSTOM  \n\nOld name: N_0x706b5edcaa7fa663"
	},
	"SetDispatchIdealSpawnDistance()": {
	  "prefix": "SetDispatchIdealSpawnDistance",
	  "body": [
		"SetDispatchIdealSpawnDistance(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetDispatchTimeBetweenSpawnAttempts()": {
	  "prefix": "SetDispatchTimeBetweenSpawnAttempts",
	  "body": [
		"SetDispatchTimeBetweenSpawnAttempts(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetDispatchTimeBetweenSpawnAttemptsMultiplier()": {
	  "prefix": "SetDispatchTimeBetweenSpawnAttemptsMultiplier",
	  "body": [
		"SetDispatchTimeBetweenSpawnAttemptsMultiplier(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetExplosiveAmmoThisFrame()": {
	  "prefix": "SetExplosiveAmmoThisFrame",
	  "body": [
		"SetExplosiveAmmoThisFrame(${1:Player player})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetExplosiveMeleeThisFrame()": {
	  "prefix": "SetExplosiveMeleeThisFrame",
	  "body": [
		"SetExplosiveMeleeThisFrame(${1:Player player})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"SetFadeInAfterLoad()": {
	  "prefix": "SetFadeInAfterLoad",
	  "body": [
		"SetFadeInAfterLoad(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetFadeInAfterDeathArrest()": {
	  "prefix": "SetFadeInAfterDeathArrest",
	  "body": [
		"SetFadeInAfterDeathArrest(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets whether the game should fade in after the player dies or is arrested.  \n"
	},
	"SetFadeOutAfterArrest()": {
	  "prefix": "SetFadeOutAfterArrest",
	  "body": [
		"SetFadeOutAfterArrest(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets whether the game should fade out after the player is arrested.  \n"
	},
	"SetFakeWantedLevel()": {
	  "prefix": "SetFakeWantedLevel",
	  "body": [
		"SetFakeWantedLevel(${1:int fakeWantedLevel})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets a visually fake wanted level on the user interface. Used by Rockstar's scripts to \"override\" regular wanted levels and make custom ones while the real wanted level and multipliers are ignored.  \nMax is 6. Also the mini-map gets the red & blue flashing effect.  \n"
	},
	"SetFadeOutAfterDeath()": {
	  "prefix": "SetFadeOutAfterDeath",
	  "body": [
		"SetFadeOutAfterDeath(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets whether the game should fade out after the player dies.  \n"
	},
	"SetGravityLevel()": {
	  "prefix": "SetGravityLevel",
	  "body": [
		"SetGravityLevel(${1:int level})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nlevel can be from 0 to 3  \n0: 9.8   \n1: 2.4   \n2: 0.1 - very low  \n3: 0.0  \n"
	},
	"SetFireAmmoThisFrame()": {
	  "prefix": "SetFireAmmoThisFrame",
	  "body": [
		"SetFireAmmoThisFrame(${1:Player player})"
	  ],
	  "description": "Namespace: MISC\nReturns: Any\n"
	},
	"SetMinigameInProgress()": {
	  "prefix": "SetMinigameInProgress",
	  "body": [
		"SetMinigameInProgress(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetGamePaused()": {
	  "prefix": "SetGamePaused",
	  "body": [
		"SetGamePaused(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nMake sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe  \n"
	},
	"N_0xa2716d40842eaf79()": {
	  "prefix": "N_0xa2716d40842eaf79",
	  "body": "N_0xa2716d40842eaf79",
	  "description": "OLD NAME, PLEASE USE SetNextRespawnToCustom INSTEAD!"
	},
	"SetNextRespawnToCustom()": {
	  "prefix": "SetNextRespawnToCustom",
	  "body": [
		"SetNextRespawnToCustom()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets the next spawn location to the position supplied to _SET_CUSTOM_RESPAWN_POSITION.  \n\nOld name: N_0xa2716d40842eaf79"
	},
	"SetRainFxIntensity()": {
	  "prefix": "SetRainFxIntensity",
	  "body": [
		"SetRainFxIntensity(${1:float intensity})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\nControls rain, rain sounds and the creation of puddles.\n\nWith an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.\n\nWith an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.\n\nTo use the rain intensity of the current weather, call this native with `-1f` as `intensity`."
	},
	"SetMissionFlag()": {
	  "prefix": "SetMissionFlag",
	  "body": [
		"SetMissionFlag(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nIf true, the player can't save the game.   \nIf the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.  \n^ also, if the mission flag is already set, the function does nothing at all  \n"
	},
	"SetOverrideWeather()": {
	  "prefix": "SetOverrideWeather",
	  "body": [
		"SetOverrideWeather(${1:char* weatherType})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nAppears to have an optional bool parameter that is unused in the scripts.  \nIf you pass true, something will be set to zero.  \n"
	},
	"SetRandomSeed()": {
	  "prefix": "SetRandomSeed",
	  "body": [
		"SetRandomSeed(${1:int time})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetSaveHouse()": {
	  "prefix": "SetSaveHouse",
	  "body": [
		"SetSaveHouse(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetRandomEventFlag()": {
	  "prefix": "SetRandomEventFlag",
	  "body": [
		"SetRandomEventFlag(${1:Any p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nIf the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.  \nDoes nothing if the mission flag is set.  \n"
	},
	"SetSuperJumpThisFrame()": {
	  "prefix": "SetSuperJumpThisFrame",
	  "body": [
		"SetSuperJumpThisFrame(${1:Player player})"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n"
	},
	"SetRandomWeatherType()": {
	  "prefix": "SetRandomWeatherType",
	  "body": [
		"SetRandomWeatherType()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetThisScriptCanRemoveBlipsCreatedByAnyScript()": {
	  "prefix": "SetThisScriptCanRemoveBlipsCreatedByAnyScript",
	  "body": [
		"SetThisScriptCanRemoveBlipsCreatedByAnyScript(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetSaveMenuActive()": {
	  "prefix": "SetSaveMenuActive",
	  "body": [
		"SetSaveMenuActive(${1:BOOL unk})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThe bool is not a toggle!!!  \n"
	},
	"SetUnkMapFlag()": {
	  "prefix": "SetUnkMapFlag",
	  "body": [
		"SetUnkMapFlag(${1:int flag})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to 9BAE5AD2508DF078.  \nDocumented by NTAuthority (http://fivem.net/).  \n"
	},
	"SetThisScriptCanBePaused()": {
	  "prefix": "SetThisScriptCanBePaused",
	  "body": [
		"SetThisScriptCanBePaused(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetWeatherTypeNow()": {
	  "prefix": "SetWeatherTypeNow",
	  "body": [
		"SetWeatherTypeNow(${1:char* weatherType})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThe following weatherTypes are used in the scripts:  \n\"CLEAR\"  \n\"EXTRASUNNY\"  \n\"CLOUDS\"  \n\"OVERCAST\"  \n\"RAIN\"  \n\"CLEARING\"  \n\"THUNDER\"  \n\"SMOG\"  \n\"FOGGY\"  \n\"XMAS\"  \n\"SNOWLIGHT\"  \n\"BLIZZARD\"  \n"
	},
	"SetTimeScale()": {
	  "prefix": "SetTimeScale",
	  "body": [
		"SetTimeScale(${1:float time})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nMaximum value is 1.  \nAt a value of 0 the game will still run at a minimum time scale.  \nSlow Motion 1: 0.6  \nSlow Motion 2: 0.4  \nSlow Motion 3: 0.2  \n"
	},
	"SetWeatherTypeOverTime()": {
	  "prefix": "SetWeatherTypeOverTime",
	  "body": [
		"SetWeatherTypeOverTime(${1:char* weatherType}, ${2:float time})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"SetWeatherTypeTransition()": {
	  "prefix": "SetWeatherTypeTransition",
	  "body": [
		"SetWeatherTypeTransition(${1:Hash weatherType1}, ${2:Hash weatherType2}, ${3:float percentWeather2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nMixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:  \nexecute \"NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(\"\"RAIN\"\"), Game.GetHashKey(\"\"SMOG\"\"), 0.50f);  \nNote that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:  \nCLEAR\t0x36A83D84  \nEXTRASUNNY\t0x97AA0A79  \nCLOUDS\t0x30FDAF5C  \nOVERCAST\t0xBB898D2D  \nRAIN\t0x54A69840  \nCLEARING\t0x6DB1A50D  \nTHUNDER\t0xB677829F  \nSMOG\t0x10DCF4B5  \nFOGGY\t0xAE737644  \nXMAS\t0xAAC9C895  \nSNOWLIGHT\t0x23FB812B  \nBLIZZARD\t0x27EA2814  \n/* OLD INVALID INFO BELOW */  \nNot tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.  \nIf an invalid hash is specified for sourceWeather, the current weather type will be used.  \nIf an invalid hash is specified for targetWeather, the next weather type will be used.  \nIf an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.  \n"
	},
	"SetWeatherTypeNowPersist()": {
	  "prefix": "SetWeatherTypeNowPersist",
	  "body": [
		"SetWeatherTypeNowPersist(${1:char* weatherType})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThe following weatherTypes are used in the scripts:  \n\"CLEAR\"  \n\"EXTRASUNNY\"  \n\"CLOUDS\"  \n\"OVERCAST\"  \n\"RAIN\"  \n\"CLEARING\"  \n\"THUNDER\"  \n\"SMOG\"  \n\"FOGGY\"  \n\"XMAS\"  \n\"SNOWLIGHT\"  \n\"BLIZZARD\"  \n"
	},
	"SetWeatherTypePersist()": {
	  "prefix": "SetWeatherTypePersist",
	  "body": [
		"SetWeatherTypePersist(${1:char* weatherType})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThe following weatherTypes are used in the scripts:  \n\"CLEAR\"  \n\"EXTRASUNNY\"  \n\"CLOUDS\"  \n\"OVERCAST\"  \n\"RAIN\"  \n\"CLEARING\"  \n\"THUNDER\"  \n\"SMOG\"  \n\"FOGGY\"  \n\"XMAS\"  \n\"SNOWLIGHT\"  \n\"BLIZZARD\"  \n"
	},
	"SetWindDirection()": {
	  "prefix": "SetWindDirection",
	  "body": [
		"SetWindDirection(${1:float direction})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nThis is NOT a heading. It's a FLOAT value from 0.0-7.0. Look at this image:  \ni.imgur.com/FwVpGS6.png  \n----------------------------  \nThis appears to be a heading, in radians (0-2*pi) -PNWParksFan  \n"
	},
	"SetWind()": {
	  "prefix": "SetWind",
	  "body": [
		"SetWind(${1:float speed})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSets the the raw wind speed value.  \n"
	},
	"SetWindSpeed()": {
	  "prefix": "SetWindSpeed",
	  "body": [
		"SetWindSpeed(${1:float speed})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nUsing this native will clamp the wind speed value to a range of 0.0- 12.0. Using SET_WIND sets the same value but without the restriction.  \n"
	},
	"ShootSingleBulletBetweenCoords()": {
	  "prefix": "ShootSingleBulletBetweenCoords",
	  "body": [
		"ShootSingleBulletBetweenCoords(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int damage}, ${8:BOOL p7}, ${9:Hash weaponHash}, ${10:Ped ownerPed}, ${11:BOOL isAudible}, ${12:BOOL isInvisible}, ${13:float speed})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nthis is what p7 does in disassembly  \n__int8 var = 32;  \nif (isInvisible)  \n{  \n   var = 16;  \n}  \nint v110 = var | 2 * p7;  \n"
	},
	"N_0xbfe5756e7407064a()": {
	  "prefix": "N_0xbfe5756e7407064a",
	  "body": "N_0xbfe5756e7407064a",
	  "description": "OLD NAME, PLEASE USE ShootSingleBulletBetweenCoordsWithExtraParams INSTEAD!"
	},
	"ShootSingleBulletBetweenCoordsWithExtraParams()": {
	  "prefix": "ShootSingleBulletBetweenCoordsWithExtraParams",
	  "body": [
		"ShootSingleBulletBetweenCoordsWithExtraParams(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int damage}, ${8:BOOL p7}, ${9:Hash weaponHash}, ${10:Ped ownerPed}, ${11:BOOL isAudible}, ${12:BOOL isInvisible}, ${13:float speed}, ${14:Entity entity}, ${15:BOOL p14}, ${16:BOOL p15}, ${17:BOOL p16}, ${18:BOOL p17})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSince latest patches has 18 parameters.  \nConsole Hash: 0xCCDC33CC  \nentity - entity to ignore  \n\nOld name: N_0xbfe5756e7407064a"
	},
	"N_0xd3d15555431ab793()": {
	  "prefix": "N_0xd3d15555431ab793",
	  "body": "N_0xd3d15555431ab793",
	  "description": "OLD NAME, PLEASE USE ShouldUseMetricMeasurements INSTEAD!"
	},
	"IsGameUsingMetricMeasurementSystem()": {
	  "prefix": "IsGameUsingMetricMeasurementSystem",
	  "body": "IsGameUsingMetricMeasurementSystem",
	  "description": "OLD NAME, PLEASE USE ShouldUseMetricMeasurements INSTEAD!"
	},
	"ShouldUseMetricMeasurements()": {
	  "prefix": "ShouldUseMetricMeasurements",
	  "body": [
		"ShouldUseMetricMeasurements()"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\nReturns true if the game is using the metric measurement system, false if imperial is used.\nThis is what r\\* uses for the different label types (either ones with miles in them or with km, as well as some other measurement related labels).\nOld name: N_0xd3d15555431ab793\nOld name: IsGameUsingMetricMeasurementSystem"
	},
	"N_0xe3a7742e0b7a2f8b()": {
	  "prefix": "N_0xe3a7742e0b7a2f8b",
	  "body": "N_0xe3a7742e0b7a2f8b",
	  "description": "OLD NAME, PLEASE USE ShootSingleBulletBetweenCoordsPresetParams INSTEAD!"
	},
	"ShootSingleBulletBetweenCoordsPresetParams()": {
	  "prefix": "ShootSingleBulletBetweenCoordsPresetParams",
	  "body": [
		"ShootSingleBulletBetweenCoordsPresetParams(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int damage}, ${8:BOOL p7}, ${9:Hash weaponHash}, ${10:Ped ownerPed}, ${11:BOOL isAudible}, ${12:BOOL isInvisible}, ${13:float speed}, ${14:Entity entity})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nentity - entity to ignore  \n\nOld name: N_0xe3a7742e0b7a2f8b"
	},
	"StartSaveArray()": {
	  "prefix": "StartSaveArray",
	  "body": [
		"StartSaveArray(${1:Any* p0}, ${2:int p1}, ${3:char* arrayName})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSecond parameter might be length.  \n"
	},
	"N_0x4ebb7e87aa0dbed4()": {
	  "prefix": "N_0x4ebb7e87aa0dbed4",
	  "body": "N_0x4ebb7e87aa0dbed4",
	  "description": "OLD NAME, PLEASE USE ShowPedInPauseMenu INSTEAD!"
	},
	"ShowPedInPauseMenu()": {
	  "prefix": "ShowPedInPauseMenu",
	  "body": [
		"ShowPedInPauseMenu(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nIf toggle is true, the ped's head is shown in the pause menu  \nIf toggle is false, the ped's head is not shown in the pause menu  \n\nOld name: N_0x4ebb7e87aa0dbed4"
	},
	"StartSaveData()": {
	  "prefix": "StartSaveData",
	  "body": [
		"StartSaveData(${1:Any* p0}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"StartSaveStruct()": {
	  "prefix": "StartSaveStruct",
	  "body": [
		"StartSaveStruct(${1:Any* p0}, ${2:int p1}, ${3:char* structName})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nSecond parameter might be length.  \n"
	},
	"StopSaveData()": {
	  "prefix": "StopSaveData",
	  "body": [
		"StopSaveData()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"StopSaveArray()": {
	  "prefix": "StopSaveArray",
	  "body": [
		"StopSaveArray()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"StringToInt()": {
	  "prefix": "StringToInt",
	  "body": [
		"StringToInt(${1:char* string}, ${2:int* outInteger})"
	  ],
	  "description": "Namespace: MISC\nReturns: BOOL\n\nReturns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.  \nIf all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.  \n"
	},
	"StopSaveStruct()": {
	  "prefix": "StopSaveStruct",
	  "body": [
		"StopSaveStruct()"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n"
	},
	"TerminateAllScriptsWithThisName()": {
	  "prefix": "TerminateAllScriptsWithThisName",
	  "body": [
		"TerminateAllScriptsWithThisName(${1:char* scriptName})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nFor a full list, see here: pastebin.com/yLNWicUi  \n"
	},
	"UpdateOnscreenKeyboard()": {
	  "prefix": "UpdateOnscreenKeyboard",
	  "body": [
		"UpdateOnscreenKeyboard()"
	  ],
	  "description": "Namespace: MISC\nReturns: int\n\nReturns the current status of the onscreen keyboard, and updates the output.  \nStatus Codes:  \n0 - User still editing  \n1 - User has finished editing  \n2 - User has canceled editing  \n3 - Keyboard isn't active  \n"
	},
	"Tan()": {
	  "prefix": "Tan",
	  "body": [
		"Tan(${1:float p0})"
	  ],
	  "description": "Namespace: MISC\nReturns: float\n\nReturns tangent value of p0.  \n"
	},
	"EnableMpDlcMaps()": {
	  "prefix": "EnableMpDlcMaps",
	  "body": "EnableMpDlcMaps",
	  "description": "OLD NAME, PLEASE USE UseFreemodeMapBehavior INSTEAD!"
	},
	"UseFreemodeMapBehavior()": {
	  "prefix": "UseFreemodeMapBehavior",
	  "body": [
		"UseFreemodeMapBehavior(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nFormerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.  \nSets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.  \nIn fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.  \n------------------------  \nWhile you're going on your rant about other \"idiots\" can you please supply the name of the \"other native\" for us \"idiots\" who'd like to actually learn about loading IPL's? Thank, you.  \n\nOld name: EnableMpDlcMaps"
	},
	"UsingMissionCreator()": {
	  "prefix": "UsingMissionCreator",
	  "body": [
		"UsingMissionCreator(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MISC\nReturns: void\n\nHash collision  \nIf this is a hash collision, it's a very lucky one. It does seem strangely named but it is used to toggle the mission creator mode.  \n"
	},
	"N_0x497420e022796b3f()": {
	  "prefix": "N_0x497420e022796b3f",
	  "body": [
		"N_0x497420e022796b3f()"
	  ],
	  "description": "Namespace: LOCALE\nReturns: Any\n"
	},
	"CanPhoneBeSeenOnScreen()": {
	  "prefix": "CanPhoneBeSeenOnScreen",
	  "body": [
		"CanPhoneBeSeenOnScreen()"
	  ],
	  "description": "Namespace: MOBILE\nReturns: BOOL\n\nThis one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.  \nI can confirm the above. This function is hard-coded to always return 1.  \n"
	},
	"CellCamIsCharVisibleNoFaceCheck()": {
	  "prefix": "CellCamIsCharVisibleNoFaceCheck",
	  "body": [
		"CellCamIsCharVisibleNoFaceCheck(${1:Entity entity})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: BOOL\n\nhash collision???  \n"
	},
	"DestroyMobilePhone()": {
	  "prefix": "DestroyMobilePhone",
	  "body": [
		"DestroyMobilePhone()"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nDestroys the currently active mobile phone.  \n"
	},
	"N_0x015c49a93e3e086e()": {
	  "prefix": "N_0x015c49a93e3e086e",
	  "body": "N_0x015c49a93e3e086e",
	  "description": "OLD NAME, PLEASE USE DisablePhoneThisFrame INSTEAD!"
	},
	"DisablePhoneThisFrame()": {
	  "prefix": "DisablePhoneThisFrame",
	  "body": [
		"DisablePhoneThisFrame(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nDisables the phone up-button, oddly enough.   \ni.e.: When the phone is out, and this method is called with false as it's parameter, the phone will not be able to scroll up. However, when you use the down arrow key, it's functionality still, works on the phone.   \nWhen the phone is not out, and this method is called with false as it's parameter, you will not be able to bring up the phone. Although the up arrow key still works for whatever functionality it's used for, just not for the phone.  \nThis can be used for creating menu's when trying to disable the phone from being used.   \nYou do not have to call the function again with false as a parameter, as soon as the function stops being called, the phone will again be usable.  \n\nOld name: N_0x015c49a93e3e086e"
	},
	"CellCamActivate()": {
	  "prefix": "CellCamActivate",
	  "body": [
		"CellCamActivate(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"GetMobilePhoneRenderId()": {
	  "prefix": "GetMobilePhoneRenderId",
	  "body": [
		"GetMobilePhoneRenderId(${1:int* renderId})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"CreateMobilePhone()": {
	  "prefix": "CreateMobilePhone",
	  "body": [
		"CreateMobilePhone(${1:int p3})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nCreates a mobile phone of the specified type.  \nPossible phone types:  \n0 - Default phone / Michael's phone  \n1 - Trevor's phone  \n2 - Franklin's phone  \n4 - Prologue phone  \nThese values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.  \n"
	},
	"GetMobilePhonePosition()": {
	  "prefix": "GetMobilePhonePosition",
	  "body": [
		"GetMobilePhonePosition(${1:Vector3* position})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0x15e69e2802c24b8d()": {
	  "prefix": "N_0x15e69e2802c24b8d",
	  "body": [
		"N_0x15e69e2802c24b8d(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0x1b0b4aeed5b9b41c()": {
	  "prefix": "N_0x1b0b4aeed5b9b41c",
	  "body": [
		"N_0x1b0b4aeed5b9b41c(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"GetMobilePhoneRotation()": {
	  "prefix": "GetMobilePhoneRotation",
	  "body": [
		"GetMobilePhoneRotation(${1:Vector3* rotation}, ${2:Vehicle p1})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0x375a706a5c2fd084()": {
	  "prefix": "N_0x375a706a5c2fd084",
	  "body": [
		"N_0x375a706a5c2fd084(${1:Any p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"MoveFinger()": {
	  "prefix": "MoveFinger",
	  "body": [
		"MoveFinger(${1:int direction})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nFor move the finger of player, the value of int goes 1 at 5.  \n"
	},
	"N_0x3117d84efa60f77b()": {
	  "prefix": "N_0x3117d84efa60f77b",
	  "body": [
		"N_0x3117d84efa60f77b(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0x53f4892d18ec90a4()": {
	  "prefix": "N_0x53f4892d18ec90a4",
	  "body": [
		"N_0x53f4892d18ec90a4(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0x466da42c89865553()": {
	  "prefix": "N_0x466da42c89865553",
	  "body": [
		"N_0x466da42c89865553(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0xa2ccbe62cd4c91a4()": {
	  "prefix": "N_0xa2ccbe62cd4c91a4",
	  "body": [
		"N_0xa2ccbe62cd4c91a4(${1:int* toggle})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nNeeds more research. If the \"phone_cam12\" filter is applied, this function is called with \"TRUE\"; otherwise, \"FALSE\".  \nExample (XBOX 360):  \n// check current filter selection  \nif (GAMEPLAY::ARE_STRINGS_EQUAL(getElem(g_2471024, &l_17, 4), \"phone_cam12\") != 0)  \n{  \n    MOBILE::_0xC273BB4D(0); // FALSE  \n}  \nelse  \n{  \n    MOBILE::_0xC273BB4D(1); // TRUE  \n}  \n"
	},
	"N_0xac2890471901861c()": {
	  "prefix": "N_0xac2890471901861c",
	  "body": [
		"N_0xac2890471901861c(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0xd6ade981781fca09()": {
	  "prefix": "N_0xd6ade981781fca09",
	  "body": [
		"N_0xd6ade981781fca09(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0xf1e22dc13f5eebad()": {
	  "prefix": "N_0xf1e22dc13f5eebad",
	  "body": [
		"N_0xf1e22dc13f5eebad(${1:float p0})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"N_0xbd4d7eaf8a30f637()": {
	  "prefix": "N_0xbd4d7eaf8a30f637",
	  "body": "N_0xbd4d7eaf8a30f637",
	  "description": "OLD NAME, PLEASE USE NetworkShopDoesItemExist INSTEAD!"
	},
	"NetworkShopIsItemUnlocked()": {
	  "prefix": "NetworkShopIsItemUnlocked",
	  "body": "NetworkShopIsItemUnlocked",
	  "description": "OLD NAME, PLEASE USE NetworkShopDoesItemExist INSTEAD!"
	},
	"NetworkShopDoesItemExist()": {
	  "prefix": "NetworkShopDoesItemExist",
	  "body": [
		"NetworkShopDoesItemExist(${1:char* name})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: BOOL\n\nBelongs in UNK3, non-hashed version of 0x247F0F73A182EA0B  \n\nOld name: N_0xbd4d7eaf8a30f637\nOld name: NetworkShopIsItemUnlocked"
	},
	"N_0x247f0f73a182ea0b()": {
	  "prefix": "N_0x247f0f73a182ea0b",
	  "body": "N_0x247f0f73a182ea0b",
	  "description": "OLD NAME, PLEASE USE NetworkShopDoesItemExistHash INSTEAD!"
	},
	"NetworkShopIsItemUnlockedHash()": {
	  "prefix": "NetworkShopIsItemUnlockedHash",
	  "body": "NetworkShopIsItemUnlockedHash",
	  "description": "OLD NAME, PLEASE USE NetworkShopDoesItemExistHash INSTEAD!"
	},
	"NetworkShopDoesItemExistHash()": {
	  "prefix": "NetworkShopDoesItemExistHash",
	  "body": [
		"NetworkShopDoesItemExistHash(${1:Hash hash})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: BOOL\n\nex.:  \nv_15 = sub_10cc8(VEHICLE::GET_VEHICLE_WHEEL_TYPE(a_2));  \nif (!MOBILE::_247F0F73A182EA0B(v_15)) {  \n    return 1;  \n}  \nBelongs in UNK3, hashed version of 0xBD4D7EAF8A30F637  \n\nOld name: N_0x247f0f73a182ea0b\nOld name: NetworkShopIsItemUnlockedHash"
	},
	"ScriptIsMovingMobilePhoneOffscreen()": {
	  "prefix": "ScriptIsMovingMobilePhoneOffscreen",
	  "body": [
		"ScriptIsMovingMobilePhoneOffscreen(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nIf bool Toggle = true so the mobile is hide to screen.  \nIf bool Toggle = false so the mobile is show to screen.  \n"
	},
	"SetMobilePhoneRotation()": {
	  "prefix": "SetMobilePhoneRotation",
	  "body": [
		"SetMobilePhoneRotation(${1:float rotX}, ${2:float rotY}, ${3:float rotZ}, ${4:Any p3})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nLast parameter is unknown and always zero.  \n"
	},
	"SetMobilePhonePosition()": {
	  "prefix": "SetMobilePhonePosition",
	  "body": [
		"SetMobilePhonePosition(${1:float posX}, ${2:float posY}, ${3:float posZ})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n"
	},
	"SetPhoneLean()": {
	  "prefix": "SetPhoneLean",
	  "body": [
		"SetPhoneLean(${1:BOOL Toggle})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nif the bool \"Toggle\" is \"true\" so the phone is lean.  \nif the bool \"Toggle\" is \"false\" so the phone is not lean.  \n"
	},
	"SetMobilePhoneScale()": {
	  "prefix": "SetMobilePhoneScale",
	  "body": [
		"SetMobilePhoneScale(${1:float scale})"
	  ],
	  "description": "Namespace: MOBILE\nReturns: void\n\nThe minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.  \n"
	},
	"N_0x0035bb914316f1e3()": {
	  "prefix": "N_0x0035bb914316f1e3",
	  "body": [
		"N_0x0035bb914316f1e3(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x05f04155a226fbbf()": {
	  "prefix": "N_0x05f04155a226fbbf",
	  "body": [
		"N_0x05f04155a226fbbf(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x08b0ca7a6ab3ac32()": {
	  "prefix": "N_0x08b0ca7a6ab3ac32",
	  "body": [
		"N_0x08b0ca7a6ab3ac32(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x08a1b82b91900682()": {
	  "prefix": "N_0x08a1b82b91900682",
	  "body": [
		"N_0x08a1b82b91900682(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x0cb1be0633c024a8()": {
	  "prefix": "N_0x0cb1be0633c024a8",
	  "body": [
		"N_0x0cb1be0633c024a8(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x0c82d21a77c22d49()": {
	  "prefix": "N_0x0c82d21a77c22d49",
	  "body": [
		"N_0x0c82d21a77c22d49(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x0d30eb83668e63c5()": {
	  "prefix": "N_0x0d30eb83668e63c5",
	  "body": [
		"N_0x0d30eb83668e63c5(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x0fe8e1fcd2b86b33()": {
	  "prefix": "N_0x0fe8e1fcd2b86b33",
	  "body": [
		"N_0x0fe8e1fcd2b86b33(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x112209ce0290c03a()": {
	  "prefix": "N_0x112209ce0290c03a",
	  "body": [
		"N_0x112209ce0290c03a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x12d148d26538d0f9()": {
	  "prefix": "N_0x12d148d26538d0f9",
	  "body": [
		"N_0x12d148d26538d0f9(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x2afc2d19b50797f2()": {
	  "prefix": "N_0x2afc2d19b50797f2",
	  "body": [
		"N_0x2afc2d19b50797f2(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x2fab6614ce22e196()": {
	  "prefix": "N_0x2fab6614ce22e196",
	  "body": [
		"N_0x2fab6614ce22e196(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x30fd873ece50e9f6()": {
	  "prefix": "N_0x30fd873ece50e9f6",
	  "body": [
		"N_0x30fd873ece50e9f6(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x33981d6804e62f49()": {
	  "prefix": "N_0x33981d6804e62f49",
	  "body": [
		"N_0x33981d6804e62f49(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x365e877c61d6988b()": {
	  "prefix": "N_0x365e877c61d6988b",
	  "body": [
		"N_0x365e877c61d6988b(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x3e4adaff1830f146()": {
	  "prefix": "N_0x3e4adaff1830f146",
	  "body": [
		"N_0x3e4adaff1830f146()"
	  ],
	  "description": "Namespace: NETCASH\nReturns: Any\n"
	},
	"N_0x4128464231e3ca0b()": {
	  "prefix": "N_0x4128464231e3ca0b",
	  "body": [
		"N_0x4128464231e3ca0b(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x55a1e095db052fa5()": {
	  "prefix": "N_0x55a1e095db052fa5",
	  "body": [
		"N_0x55a1e095db052fa5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x5182a339a3474510()": {
	  "prefix": "N_0x5182a339a3474510",
	  "body": [
		"N_0x5182a339a3474510(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x5d97630a8a0ef123()": {
	  "prefix": "N_0x5d97630a8a0ef123",
	  "body": [
		"N_0x5d97630a8a0ef123(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x5bcde0f640c773d2()": {
	  "prefix": "N_0x5bcde0f640c773d2",
	  "body": [
		"N_0x5bcde0f640c773d2(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x675d19c6067cae08()": {
	  "prefix": "N_0x675d19c6067cae08",
	  "body": [
		"N_0x675d19c6067cae08(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x6fd97159fe3c971a()": {
	  "prefix": "N_0x6fd97159fe3c971a",
	  "body": [
		"N_0x6fd97159fe3c971a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x5f456788b05faeac()": {
	  "prefix": "N_0x5f456788b05faeac",
	  "body": [
		"N_0x5f456788b05faeac(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x84c0116d012e8fc2()": {
	  "prefix": "N_0x84c0116d012e8fc2",
	  "body": [
		"N_0x84c0116d012e8fc2(${1:Any p0})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x69ef772b192614c1()": {
	  "prefix": "N_0x69ef772b192614c1",
	  "body": [
		"N_0x69ef772b192614c1(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x821418c727fcacd7()": {
	  "prefix": "N_0x821418c727fcacd7",
	  "body": [
		"N_0x821418c727fcacd7(${1:Any p0})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x8e243837643d9583()": {
	  "prefix": "N_0x8e243837643d9583",
	  "body": [
		"N_0x8e243837643d9583(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x8586789730b10caf()": {
	  "prefix": "N_0x8586789730b10caf",
	  "body": [
		"N_0x8586789730b10caf(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x9777734dad16992f()": {
	  "prefix": "N_0x9777734dad16992f",
	  "body": [
		"N_0x9777734dad16992f()"
	  ],
	  "description": "Namespace: NETCASH\nReturns: Any\n"
	},
	"N_0x9251b6abf2d0a5b4()": {
	  "prefix": "N_0x9251b6abf2d0a5b4",
	  "body": [
		"N_0x9251b6abf2d0a5b4(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0x998e18ceb44487fc()": {
	  "prefix": "N_0x998e18ceb44487fc",
	  "body": [
		"N_0x998e18ceb44487fc(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xa75ccf58a60a5fd1()": {
	  "prefix": "N_0xa75ccf58a60a5fd1",
	  "body": [
		"N_0xa75ccf58a60a5fd1(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xa51b086b0b2c0f7a()": {
	  "prefix": "N_0xa51b086b0b2c0f7a",
	  "body": [
		"N_0xa51b086b0b2c0f7a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xa95f667a755725da()": {
	  "prefix": "N_0xa95f667a755725da",
	  "body": [
		"N_0xa95f667a755725da(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xac272c0ae01b4bd8()": {
	  "prefix": "N_0xac272c0ae01b4bd8",
	  "body": [
		"N_0xac272c0ae01b4bd8(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xb49eca122467d05f()": {
	  "prefix": "N_0xb49eca122467d05f",
	  "body": [
		"N_0xb49eca122467d05f(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xbd0efb25cca8f97a()": {
	  "prefix": "N_0xbd0efb25cca8f97a",
	  "body": [
		"N_0xbd0efb25cca8f97a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xc8407624cef2354b()": {
	  "prefix": "N_0xc8407624cef2354b",
	  "body": [
		"N_0xc8407624cef2354b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xb4c2ec463672474e()": {
	  "prefix": "N_0xb4c2ec463672474e",
	  "body": [
		"N_0xb4c2ec463672474e(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xc1952f3773ba18fe()": {
	  "prefix": "N_0xc1952f3773ba18fe",
	  "body": [
		"N_0xc1952f3773ba18fe(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xd99db210089617fe()": {
	  "prefix": "N_0xd99db210089617fe",
	  "body": [
		"N_0xd99db210089617fe(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xe23adc6fcb1f29ae()": {
	  "prefix": "N_0xe23adc6fcb1f29ae",
	  "body": [
		"N_0xe23adc6fcb1f29ae(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xcda1c62be2777802()": {
	  "prefix": "N_0xcda1c62be2777802",
	  "body": [
		"N_0xcda1c62be2777802(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xe7df4e0545dfb56e()": {
	  "prefix": "N_0xe7df4e0545dfb56e",
	  "body": [
		"N_0xe7df4e0545dfb56e(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xd7cccba28c4ecaf0()": {
	  "prefix": "N_0xd7cccba28c4ecaf0",
	  "body": [
		"N_0xd7cccba28c4ecaf0(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xdbc966a01c02bca7()": {
	  "prefix": "N_0xdbc966a01c02bca7",
	  "body": [
		"N_0xdbc966a01c02bca7(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xeca658ce2a4e5a72()": {
	  "prefix": "N_0xeca658ce2a4e5a72",
	  "body": [
		"N_0xeca658ce2a4e5a72(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xe8b0b270b6e7c76e()": {
	  "prefix": "N_0xe8b0b270b6e7c76e",
	  "body": [
		"N_0xe8b0b270b6e7c76e(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xedead9a91ec768b3()": {
	  "prefix": "N_0xedead9a91ec768b3",
	  "body": [
		"N_0xedead9a91ec768b3(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xed5fd7af10f5e262()": {
	  "prefix": "N_0xed5fd7af10f5e262",
	  "body": [
		"N_0xed5fd7af10f5e262(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xfa07759e6fddd7cf()": {
	  "prefix": "N_0xfa07759e6fddd7cf",
	  "body": [
		"N_0xfa07759e6fddd7cf(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"N_0xffbe02cd385356bd()": {
	  "prefix": "N_0xffbe02cd385356bd",
	  "body": [
		"N_0xffbe02cd385356bd()"
	  ],
	  "description": "Namespace: NETCASH\nReturns: Any\n"
	},
	"N_0xfc4ee00a7b3bfb76()": {
	  "prefix": "N_0xfc4ee00a7b3bfb76",
	  "body": [
		"N_0xfc4ee00a7b3bfb76(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETCASH\nReturns: void\n"
	},
	"GetGameVersion()": {
	  "prefix": "GetGameVersion",
	  "body": "GetGameVersion",
	  "description": "OLD NAME, PLEASE USE GetOnlineVersion INSTEAD!"
	},
	"GetOnlineVersion()": {
	  "prefix": "GetOnlineVersion",
	  "body": [
		"GetOnlineVersion()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: char*\n\nOnline version is defined here: update\\update.rpf\\common\\data\\version.txt  \nExample:  \n[ONLINE_VERSION_NUMBER]  \n1.33  \n_GET_ONLINE_VERSION() will return \"1.33\"  \nBelongs in NETWORK  \n\nOld name: GetGameVersion"
	},
	"N_0x0395cb47b022e62c()": {
	  "prefix": "N_0x0395cb47b022e62c",
	  "body": [
		"N_0x0395cb47b022e62c(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0x0a6d923dffc9bd89()": {
	  "prefix": "N_0x0a6d923dffc9bd89",
	  "body": [
		"N_0x0a6d923dffc9bd89()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0x170910093218c8b9()": {
	  "prefix": "N_0x170910093218c8b9",
	  "body": [
		"N_0x170910093218c8b9(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0x2b949a1e6aec8f6a()": {
	  "prefix": "N_0x2b949a1e6aec8f6a",
	  "body": [
		"N_0x2b949a1e6aec8f6a()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0x23789e777d14ce44()": {
	  "prefix": "N_0x23789e777d14ce44",
	  "body": [
		"N_0x23789e777d14ce44()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0x350aa5ebc03d3bd2()": {
	  "prefix": "N_0x350aa5ebc03d3bd2",
	  "body": [
		"N_0x350aa5ebc03d3bd2()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0x3c4487461e9b0dcb()": {
	  "prefix": "N_0x3c4487461e9b0dcb",
	  "body": [
		"N_0x3c4487461e9b0dcb()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0x357b152ef96c30b6()": {
	  "prefix": "N_0x357b152ef96c30b6",
	  "body": [
		"N_0x357b152ef96c30b6()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0x613f125ba3bd2eb9()": {
	  "prefix": "N_0x613f125ba3bd2eb9",
	  "body": [
		"N_0x613f125ba3bd2eb9()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0x35a1b3e1d1315cfa()": {
	  "prefix": "N_0x35a1b3e1d1315cfa",
	  "body": [
		"N_0x35a1b3e1d1315cfa(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0x72eb7ba9b69bf6ab()": {
	  "prefix": "N_0x72eb7ba9b69bf6ab",
	  "body": [
		"N_0x72eb7ba9b69bf6ab()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0x51f1a8e48c3d2f6d()": {
	  "prefix": "N_0x51f1a8e48c3d2f6d",
	  "body": [
		"N_0x51f1a8e48c3d2f6d(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0x85f6c9aba1de2bcf()": {
	  "prefix": "N_0x85f6c9aba1de2bcf",
	  "body": [
		"N_0x85f6c9aba1de2bcf()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0xc13c38e47ea5df31()": {
	  "prefix": "N_0xc13c38e47ea5df31",
	  "body": [
		"N_0xc13c38e47ea5df31(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0x74a0fd0688f1ee45()": {
	  "prefix": "N_0x74a0fd0688f1ee45",
	  "body": [
		"N_0x74a0fd0688f1ee45(${1:int p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: int\n"
	},
	"N_0x897433d292b44130()": {
	  "prefix": "N_0x897433d292b44130",
	  "body": [
		"N_0x897433d292b44130(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0xe547e9114277098f()": {
	  "prefix": "N_0xe547e9114277098f",
	  "body": [
		"N_0xe547e9114277098f()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"N_0xf30980718c8ed876()": {
	  "prefix": "N_0xf30980718c8ed876",
	  "body": "N_0xf30980718c8ed876",
	  "description": "OLD NAME, PLEASE USE NetworkShopBasketAddItem INSTEAD!"
	},
	"NetworkShopBasketAddItem()": {
	  "prefix": "NetworkShopBasketAddItem",
	  "body": [
		"NetworkShopBasketAddItem(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\np0 is pointer to a script array  \n\nOld name: N_0xf30980718c8ed876"
	},
	"N_0xcf38dafbb49ede5e()": {
	  "prefix": "N_0xcf38dafbb49ede5e",
	  "body": [
		"N_0xcf38dafbb49ede5e(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0xa65568121df2ea26()": {
	  "prefix": "N_0xa65568121df2ea26",
	  "body": "N_0xa65568121df2ea26",
	  "description": "OLD NAME, PLEASE USE NetworkShopBasketEnd INSTEAD!"
	},
	"NetworkShopBasketEnd()": {
	  "prefix": "NetworkShopBasketEnd",
	  "body": [
		"NetworkShopBasketEnd()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0xa65568121df2ea26"
	},
	"N_0xe3e5a7c64ca2c6ed()": {
	  "prefix": "N_0xe3e5a7c64ca2c6ed",
	  "body": [
		"N_0xe3e5a7c64ca2c6ed()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n"
	},
	"NetworkShopBasketStart()": {
	  "prefix": "NetworkShopBasketStart",
	  "body": [
		"NetworkShopBasketStart(${1:Any* p0}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n"
	},
	"N_0xe1a0450ed46a7812()": {
	  "prefix": "N_0xe1a0450ed46a7812",
	  "body": "N_0xe1a0450ed46a7812",
	  "description": "OLD NAME, PLEASE USE NetworkShopBasketApplyServerData INSTEAD!"
	},
	"NetworkShopBasketApplyServerData()": {
	  "prefix": "NetworkShopBasketApplyServerData",
	  "body": [
		"NetworkShopBasketApplyServerData(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\np0 => unk3::_network_shop_basket_apply_server_data(Global_2590199[iParam0 /*76*/], &uVar6); => script array  \n\nOld name: N_0xe1a0450ed46a7812"
	},
	"N_0x498c1e05ce5f7877()": {
	  "prefix": "N_0x498c1e05ce5f7877",
	  "body": "N_0x498c1e05ce5f7877",
	  "description": "OLD NAME, PLEASE USE NetworkShopCashTransferSetTelemetryNonceSeed INSTEAD!"
	},
	"NetworkShopCashTransferSetTelemetryNonceSeed()": {
	  "prefix": "NetworkShopCashTransferSetTelemetryNonceSeed",
	  "body": [
		"NetworkShopCashTransferSetTelemetryNonceSeed()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0x498c1e05ce5f7877"
	},
	"N_0x27f76cc6c55ad30e()": {
	  "prefix": "N_0x27f76cc6c55ad30e",
	  "body": "N_0x27f76cc6c55ad30e",
	  "description": "OLD NAME, PLEASE USE NetworkShopBasketIsFull INSTEAD!"
	},
	"NetworkShopBasketIsFull()": {
	  "prefix": "NetworkShopBasketIsFull",
	  "body": [
		"NetworkShopBasketIsFull()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n\nOld name: N_0x27f76cc6c55ad30e"
	},
	"N_0x39be7cea8d9cc8e6()": {
	  "prefix": "N_0x39be7cea8d9cc8e6",
	  "body": "N_0x39be7cea8d9cc8e6",
	  "description": "OLD NAME, PLEASE USE NetworkShopCheckoutStart INSTEAD!"
	},
	"NetworkShopCheckoutStart()": {
	  "prefix": "NetworkShopCheckoutStart",
	  "body": [
		"NetworkShopCheckoutStart(${1:int transactionID})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0x39be7cea8d9cc8e6"
	},
	"N_0x3c5fd37b5499582e()": {
	  "prefix": "N_0x3c5fd37b5499582e",
	  "body": "N_0x3c5fd37b5499582e",
	  "description": "OLD NAME, PLEASE USE NetworkShopBeginService INSTEAD!"
	},
	"NetworkShopBeginService()": {
	  "prefix": "NetworkShopBeginService",
	  "body": [
		"NetworkShopBeginService(${1:int* transactionID}, ${2:Hash p1}, ${3:Hash transactionHash}, ${4:int amount}, ${5:Hash p4}, ${6:int mode})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nNo longer works if you hook it as a stealth money method  \nModes------------------  \n1: Wallet  \n2: Bank  \n4: Bank  \n8: Wallet  \nOnly difference I noticed.  \n\nOld name: N_0x3c5fd37b5499582e"
	},
	"NetworkShopGetPrice()": {
	  "prefix": "NetworkShopGetPrice",
	  "body": [
		"NetworkShopGetPrice(${1:Hash itemHash}, ${2:Hash hash2}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: int\n\nbool is always true in game scripts  \n"
	},
	"N_0x112cef1615a1139f()": {
	  "prefix": "N_0x112cef1615a1139f",
	  "body": "N_0x112cef1615a1139f",
	  "description": "OLD NAME, PLEASE USE NetworkShopDeleteSetTelemetryNonceSeed INSTEAD!"
	},
	"NetworkShopDeleteSetTelemetryNonceSeed()": {
	  "prefix": "NetworkShopDeleteSetTelemetryNonceSeed",
	  "body": [
		"NetworkShopDeleteSetTelemetryNonceSeed()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: Any\n\nOld name: N_0x112cef1615a1139f"
	},
	"N_0xb24f0944da203d9e()": {
	  "prefix": "N_0xb24f0944da203d9e",
	  "body": "N_0xb24f0944da203d9e",
	  "description": "OLD NAME, PLEASE USE NetworkShopGetTransactionsEnabledForCharacter INSTEAD!"
	},
	"NetworkShopGetTransactionsEnabledForCharacter()": {
	  "prefix": "NetworkShopGetTransactionsEnabledForCharacter",
	  "body": [
		"NetworkShopGetTransactionsEnabledForCharacter(${1:int mpChar})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0xb24f0944da203d9e"
	},
	"N_0x810e8431c0614bf9()": {
	  "prefix": "N_0x810e8431c0614bf9",
	  "body": "N_0x810e8431c0614bf9",
	  "description": "OLD NAME, PLEASE USE NetworkShopGetTransactionsDisabled INSTEAD!"
	},
	"NetworkShopGetTransactionsDisabled()": {
	  "prefix": "NetworkShopGetTransactionsDisabled",
	  "body": [
		"NetworkShopGetTransactionsDisabled()"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0x810e8431c0614bf9"
	},
	"N_0x9507d4271988e1ae()": {
	  "prefix": "N_0x9507d4271988e1ae",
	  "body": "N_0x9507d4271988e1ae",
	  "description": "OLD NAME, PLEASE USE NetworkShopSetTelemetryNonceSeed INSTEAD!"
	},
	"NetworkShopSetTelemetryNonceSeed()": {
	  "prefix": "NetworkShopSetTelemetryNonceSeed",
	  "body": [
		"NetworkShopSetTelemetryNonceSeed(${1:Any p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0x9507d4271988e1ae"
	},
	"N_0x2f41d51ba3bcd1f1()": {
	  "prefix": "N_0x2f41d51ba3bcd1f1",
	  "body": "N_0x2f41d51ba3bcd1f1",
	  "description": "OLD NAME, PLEASE USE NetworkShopSessionApplyReceivedData INSTEAD!"
	},
	"NetworkShopSessionApplyReceivedData()": {
	  "prefix": "NetworkShopSessionApplyReceivedData",
	  "body": [
		"NetworkShopSessionApplyReceivedData(${1:Any p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0x2f41d51ba3bcd1f1"
	},
	"N_0xa135ac892a58fc07()": {
	  "prefix": "N_0xa135ac892a58fc07",
	  "body": "N_0xa135ac892a58fc07",
	  "description": "OLD NAME, PLEASE USE NetworkShopStartSession INSTEAD!"
	},
	"NetworkShopStartSession()": {
	  "prefix": "NetworkShopStartSession",
	  "body": [
		"NetworkShopStartSession(${1:Any p0})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nOld name: N_0xa135ac892a58fc07"
	},
	"N_0xe2a99a9b524befff()": {
	  "prefix": "N_0xe2a99a9b524befff",
	  "body": "N_0xe2a99a9b524befff",
	  "description": "OLD NAME, PLEASE USE NetworkShopTerminateService INSTEAD!"
	},
	"NetworkShopEndService()": {
	  "prefix": "NetworkShopEndService",
	  "body": "NetworkShopEndService",
	  "description": "OLD NAME, PLEASE USE NetworkShopTerminateService INSTEAD!"
	},
	"NetworkShopTerminateService()": {
	  "prefix": "NetworkShopTerminateService",
	  "body": [
		"NetworkShopTerminateService(${1:int transactionID})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nWill cancel the transaction  \n\nOld name: N_0xe2a99a9b524befff\nOld name: NetworkShopEndService"
	},
	"N_0xd47a2c1ba117471d()": {
	  "prefix": "N_0xd47a2c1ba117471d",
	  "body": "N_0xd47a2c1ba117471d",
	  "description": "OLD NAME, PLEASE USE NetworkTransferBankToWallet INSTEAD!"
	},
	"NetworkTransferBankToWallet()": {
	  "prefix": "NetworkTransferBankToWallet",
	  "body": [
		"NetworkTransferBankToWallet(${1:int charStatInt}, ${2:int amount})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nused in atm_trigger script.  \nusage:  \nint iVar0;STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY(\"mpply_last_mp_char\"), &iVar0, -1);  \nUNK3::_NETWORK_TRANSFER_WALLET_TO_BANK(iVar0, amount);  \nused to deposit money into bank from wallet, shows up in transaction log.  \n\nOld name: N_0xd47a2c1ba117471d"
	},
	"N_0xc2f7fe5309181c7d()": {
	  "prefix": "N_0xc2f7fe5309181c7d",
	  "body": "N_0xc2f7fe5309181c7d",
	  "description": "OLD NAME, PLEASE USE NetworkTransferWalletToBank INSTEAD!"
	},
	"NetworkTransferWalletToBank()": {
	  "prefix": "NetworkTransferWalletToBank",
	  "body": [
		"NetworkTransferWalletToBank(${1:int charStatInt}, ${2:int amount})"
	  ],
	  "description": "Namespace: NETSHOP\nReturns: BOOL\n\nused in atm_trigger script.  \nusage:  \nint iVar0; STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY(\"mpply_last_mp_char\"), &iVar0, -1);  \nUNK3::_NETWORK_TRANSFER_BANK_TO_WALLET(iVar0, amount);  \nused to withdraw money from bank into wallet, shows up in transaction log.  \n\nOld name: N_0xc2f7fe5309181c7d"
	},
	"ActivateDamageTrackerOnNetworkId()": {
	  "prefix": "ActivateDamageTrackerOnNetworkId",
	  "body": [
		"ActivateDamageTrackerOnNetworkId(${1:int netID}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xec5e3af5289dca81()": {
	  "prefix": "N_0xec5e3af5289dca81",
	  "body": "N_0xec5e3af5289dca81",
	  "description": "OLD NAME, PLEASE USE BadSportPlayerLeftDetected INSTEAD!"
	},
	"BadSportPlayerLeftDetected()": {
	  "prefix": "BadSportPlayerLeftDetected",
	  "body": [
		"BadSportPlayerLeftDetected(${1:int* networkHandle}, ${2:int event}, ${3:int amountReceived})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xec5e3af5289dca81"
	},
	"IsPlayerBanned()": {
	  "prefix": "IsPlayerBanned",
	  "body": "IsPlayerBanned",
	  "description": "OLD NAME, PLEASE USE CanPlayOnline INSTEAD!"
	},
	"CanPlayOnline()": {
	  "prefix": "CanPlayOnline",
	  "body": [
		"CanPlayOnline()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nif(_CAN_PLAY_ONLINE() == 0) means the player is banned(Social Club or Rockstar)  \n\nOld name: IsPlayerBanned"
	},
	"CanRegisterMissionEntities()": {
	  "prefix": "CanRegisterMissionEntities",
	  "body": [
		"CanRegisterMissionEntities(${1:int ped_amt}, ${2:int vehicle_amt}, ${3:int object_amt}, ${4:int pickup_amt})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nif (CAN_REGISTER_MISSION_ENTITIES(20, 20, 20, 10))  \n{  \n}  \n"
	},
	"CanRegisterMissionObjects()": {
	  "prefix": "CanRegisterMissionObjects",
	  "body": [
		"CanRegisterMissionObjects(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"CanRegisterMissionPeds()": {
	  "prefix": "CanRegisterMissionPeds",
	  "body": [
		"CanRegisterMissionPeds(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"CanRegisterMissionVehicles()": {
	  "prefix": "CanRegisterMissionVehicles",
	  "body": [
		"CanRegisterMissionVehicles(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"CanRegisterMissionPickups()": {
	  "prefix": "CanRegisterMissionPickups",
	  "body": [
		"CanRegisterMissionPickups(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xa75e2b6733da5142()": {
	  "prefix": "N_0xa75e2b6733da5142",
	  "body": "N_0xa75e2b6733da5142",
	  "description": "OLD NAME, PLEASE USE FacebookDoUnkCheck INSTEAD!"
	},
	"FacebookDoUnkCheck()": {
	  "prefix": "FacebookDoUnkCheck",
	  "body": [
		"FacebookDoUnkCheck()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xa75e2b6733da5142"
	},
	"N_0x4f18196c8d38768d()": {
	  "prefix": "N_0x4f18196c8d38768d",
	  "body": "N_0x4f18196c8d38768d",
	  "description": "OLD NAME, PLEASE USE DownloadCheck INSTEAD!"
	},
	"DownloadCheck()": {
	  "prefix": "DownloadCheck",
	  "body": [
		"DownloadCheck()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nDownloads prod.cloud.rockstargames.com/titles/gta5/<platform>/check.json  \n\nOld name: N_0x4f18196c8d38768d"
	},
	"N_0x43865688ae10f0d7()": {
	  "prefix": "N_0x43865688ae10f0d7",
	  "body": "N_0x43865688ae10f0d7",
	  "description": "OLD NAME, PLEASE USE FacebookIsAvailable INSTEAD!"
	},
	"FacebookIsAvailable()": {
	  "prefix": "FacebookIsAvailable",
	  "body": [
		"FacebookIsAvailable()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x43865688ae10f0d7"
	},
	"N_0x62b9fec9a11f10ef()": {
	  "prefix": "N_0x62b9fec9a11f10ef",
	  "body": "N_0x62b9fec9a11f10ef",
	  "description": "OLD NAME, PLEASE USE FacebookIsSendingData INSTEAD!"
	},
	"FacebookIsSendingData()": {
	  "prefix": "FacebookIsSendingData",
	  "body": [
		"FacebookIsSendingData()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x62b9fec9a11f10ef"
	},
	"N_0x098ab65b9ed9a9ec()": {
	  "prefix": "N_0x098ab65b9ed9a9ec",
	  "body": "N_0x098ab65b9ed9a9ec",
	  "description": "OLD NAME, PLEASE USE FacebookSetHeistComplete INSTEAD!"
	},
	"FacebookSetHeistComplete()": {
	  "prefix": "FacebookSetHeistComplete",
	  "body": [
		"FacebookSetHeistComplete(${1:char* heistName}, ${2:int cashEarned}, ${3:int xpEarned})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x098ab65b9ed9a9ec"
	},
	"N_0xdc48473142545431()": {
	  "prefix": "N_0xdc48473142545431",
	  "body": "N_0xdc48473142545431",
	  "description": "OLD NAME, PLEASE USE FacebookSetCreateCharacterComplete INSTEAD!"
	},
	"FacebookSetCreateCharacterComplete()": {
	  "prefix": "FacebookSetCreateCharacterComplete",
	  "body": [
		"FacebookSetCreateCharacterComplete()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nGTA Online character creation  \n\nOld name: N_0xdc48473142545431"
	},
	"FadeOutLocalPlayer()": {
	  "prefix": "FadeOutLocalPlayer",
	  "body": [
		"FadeOutLocalPlayer(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nHardcoded to not work in SP.  \n"
	},
	"N_0x0ae1f1653b554ab9()": {
	  "prefix": "N_0x0ae1f1653b554ab9",
	  "body": "N_0x0ae1f1653b554ab9",
	  "description": "OLD NAME, PLEASE USE FacebookSetMilestoneComplete INSTEAD!"
	},
	"FacebookSetMilestoneComplete()": {
	  "prefix": "FacebookSetMilestoneComplete",
	  "body": [
		"FacebookSetMilestoneComplete(${1:int milestoneId})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nmilestoneId:  \n0 = \"percentcomplete\"  \n1 = \"storycomplete\"  \n2 = \"vehicles\"  \n3 = \"properties\"  \n4 = \"psych\"  \n5 = \"mapreveal\"  \n6 = \"prologue\"  \n\nOld name: N_0x0ae1f1653b554ab9"
	},
	"FilloutPmPlayerListWithNames()": {
	  "prefix": "FilloutPmPlayerListWithNames",
	  "body": [
		"FilloutPmPlayerListWithNames(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"FilloutPmPlayerList()": {
	  "prefix": "FilloutPmPlayerList",
	  "body": [
		"FilloutPmPlayerList(${1:int* networkHandle}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x9a73240b49945c76()": {
	  "prefix": "N_0x9a73240b49945c76",
	  "body": "N_0x9a73240b49945c76",
	  "description": "OLD NAME, PLEASE USE GetCloudTimeAsInt INSTEAD!"
	},
	"GetCloudTimeAsInt()": {
	  "prefix": "GetCloudTimeAsInt",
	  "body": [
		"GetCloudTimeAsInt()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\nReturns POSIX timestamp.\n\nRenamed from `_GET_POSIX_TIME` to `GET_CLOUD_TIME_AS_INT` because of conflicting native names ([`0xDA488F299A5B164E`](#_0xDA488F299A5B164E))\nOld name: N_0x9a73240b49945c76"
	},
	"N_0x37025b27d9b658b1()": {
	  "prefix": "N_0x37025b27d9b658b1",
	  "body": "N_0x37025b27d9b658b1",
	  "description": "OLD NAME, PLEASE USE GetContentFileVersion INSTEAD!"
	},
	"GetContentFileVersion()": {
	  "prefix": "GetContentFileVersion",
	  "body": [
		"GetContentFileVersion(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0x37025b27d9b658b1"
	},
	"N_0xa7bab11e7c9c6c5a()": {
	  "prefix": "N_0xa7bab11e7c9c6c5a",
	  "body": "N_0xa7bab11e7c9c6c5a",
	  "description": "OLD NAME, PLEASE USE GetContentCategory INSTEAD!"
	},
	"GetContentCategory()": {
	  "prefix": "GetContentCategory",
	  "body": [
		"GetContentCategory(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOld name: N_0xa7bab11e7c9c6c5a"
	},
	"GetDateAndTimeFromUnixEpoch()": {
	  "prefix": "GetDateAndTimeFromUnixEpoch",
	  "body": [
		"GetDateAndTimeFromUnixEpoch(${1:int unixEpoch}, ${2:Any* timeStructure})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nTakes the specified time and writes it to the structure specified in the second argument.  \nstruct date_time  \n{  \n    alignas(8) int year;  \n    alignas(8) int month;  \n    alignas(8) int day;  \n    alignas(8) int hour;  \n    alignas(8) int minute;  \n    alignas(8) int second;  \n};  \n"
	},
	"N_0x7cf0448787b23758()": {
	  "prefix": "N_0x7cf0448787b23758",
	  "body": "N_0x7cf0448787b23758",
	  "description": "OLD NAME, PLEASE USE GetContentDescriptionHash INSTEAD!"
	},
	"GetContentDescriptionHash()": {
	  "prefix": "GetContentDescriptionHash",
	  "body": [
		"GetContentDescriptionHash(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOld name: N_0x7cf0448787b23758"
	},
	"N_0x89023fbbf9200e9f()": {
	  "prefix": "N_0x89023fbbf9200e9f",
	  "body": "N_0x89023fbbf9200e9f",
	  "description": "OLD NAME, PLEASE USE GetNetworkTimeAccurate INSTEAD!"
	},
	"GetNetworkTimeAccurate()": {
	  "prefix": "GetNetworkTimeAccurate",
	  "body": [
		"GetNetworkTimeAccurate()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nreturns the same value as NETWORK::GET_NETWORK_TIME in freemode.  \n\nOld name: N_0x89023fbbf9200e9f"
	},
	"N_0x55aa95f481d694d2()": {
	  "prefix": "N_0x55aa95f481d694d2",
	  "body": "N_0x55aa95f481d694d2",
	  "description": "OLD NAME, PLEASE USE GetContentId INSTEAD!"
	},
	"GetContentId()": {
	  "prefix": "GetContentId",
	  "body": [
		"GetContentId(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n\nReturn the mission id of a job.  \n\nOld name: N_0x55aa95f481d694d2"
	},
	"N_0x1f471b79acc90bef()": {
	  "prefix": "N_0x1f471b79acc90bef",
	  "body": "N_0x1f471b79acc90bef",
	  "description": "OLD NAME, PLEASE USE GetNumMembershipDesc INSTEAD!"
	},
	"GetNumMembershipDesc()": {
	  "prefix": "GetNumMembershipDesc",
	  "body": [
		"GetNumMembershipDesc()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOld name: N_0x1f471b79acc90bef"
	},
	"GetNetworkTime()": {
	  "prefix": "GetNetworkTime",
	  "body": [
		"GetNetworkTime()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"GetNumReservedMissionPeds()": {
	  "prefix": "GetNumReservedMissionPeds",
	  "body": [
		"GetNumReservedMissionPeds(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\np0 appears to be for MP  \n"
	},
	"GetNumReservedMissionObjects()": {
	  "prefix": "GetNumReservedMissionObjects",
	  "body": [
		"GetNumReservedMissionObjects(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\np0 appears to be for MP  \n"
	},
	"N_0xc0173d6bff4e0348()": {
	  "prefix": "N_0xc0173d6bff4e0348",
	  "body": "N_0xc0173d6bff4e0348",
	  "description": "OLD NAME, PLEASE USE GetRootContentId INSTEAD!"
	},
	"GetRootContentId()": {
	  "prefix": "GetRootContentId",
	  "body": [
		"GetRootContentId(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n\nReturn the root content id of a job.  \n\nOld name: N_0xc0173d6bff4e0348"
	},
	"GetNumReservedMissionVehicles()": {
	  "prefix": "GetNumReservedMissionVehicles",
	  "body": [
		"GetNumReservedMissionVehicles(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\np0 appears to be for MP  \n"
	},
	"FormatTime()": {
	  "prefix": "FormatTime",
	  "body": "FormatTime",
	  "description": "OLD NAME, PLEASE USE GetTimeAsString INSTEAD!"
	},
	"GetTimeAsString()": {
	  "prefix": "GetTimeAsString",
	  "body": [
		"GetTimeAsString(${1:int time})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n\nPreviously named, '_FORMAT_TIME' for people who can't find it's uses in decompiled scripts.  \n\nOld name: FormatTime"
	},
	"N_0xcd67ad041a394c9c()": {
	  "prefix": "N_0xcd67ad041a394c9c",
	  "body": "N_0xcd67ad041a394c9c",
	  "description": "OLD NAME, PLEASE USE GetPlayerAdvancedModifierPrivileges INSTEAD!"
	},
	"GetContentUserId()": {
	  "prefix": "GetContentUserId",
	  "body": "GetContentUserId",
	  "description": "OLD NAME, PLEASE USE GetPlayerAdvancedModifierPrivileges INSTEAD!"
	},
	"GetPlayerAdvancedModifierPrivileges()": {
	  "prefix": "GetPlayerAdvancedModifierPrivileges",
	  "body": [
		"GetPlayerAdvancedModifierPrivileges(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n\nOld name: N_0xcd67ad041a394c9c\nOld name: GetContentUserId"
	},
	"GetTimeOffset()": {
	  "prefix": "GetTimeOffset",
	  "body": [
		"GetTimeOffset(${1:int timeA}, ${2:int timeB})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nAdds the first argument to the second.  \n"
	},
	"GetTimeDifference()": {
	  "prefix": "GetTimeDifference",
	  "body": [
		"GetTimeDifference(${1:int timeA}, ${2:int timeB})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nSubtracts the second argument from the first.  \n"
	},
	"N_0x8132c0eb8b2b3293()": {
	  "prefix": "N_0x8132c0eb8b2b3293",
	  "body": "N_0x8132c0eb8b2b3293",
	  "description": "OLD NAME, PLEASE USE HasBgScriptBeenDownloaded INSTEAD!"
	},
	"HasBgScriptBeenDownloaded()": {
	  "prefix": "HasBgScriptBeenDownloaded",
	  "body": [
		"HasBgScriptBeenDownloaded()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nConsole Hash  \n\nOld name: N_0x8132c0eb8b2b3293"
	},
	"N_0x0467c11ed88b7d28()": {
	  "prefix": "N_0x0467c11ed88b7d28",
	  "body": "N_0x0467c11ed88b7d28",
	  "description": "OLD NAME, PLEASE USE HasTunablesBeenDownloaded INSTEAD!"
	},
	"HasTunablesBeenDownloaded()": {
	  "prefix": "HasTunablesBeenDownloaded",
	  "body": [
		"HasTunablesBeenDownloaded()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nConsole Hash  \n\nOld name: N_0x0467c11ed88b7d28"
	},
	"N_0x187382f8a3e0a6c3()": {
	  "prefix": "N_0x187382f8a3e0a6c3",
	  "body": "N_0x187382f8a3e0a6c3",
	  "description": "OLD NAME, PLEASE USE GetTunablesContentModifierId INSTEAD!"
	},
	"GetTunablesContentModifierId()": {
	  "prefix": "GetTunablesContentModifierId",
	  "body": [
		"GetTunablesContentModifierId(${1:Hash contentHash})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nReturn the content modifier id (the tunables context if you want) of a specific content.  \nIt takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.  \nThe mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'  \n'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.  \n\nOld name: N_0x187382f8a3e0a6c3"
	},
	"N_0x46718aceedeafc84()": {
	  "prefix": "N_0x46718aceedeafc84",
	  "body": "N_0x46718aceedeafc84",
	  "description": "OLD NAME, PLEASE USE HasNetworkTimeStarted INSTEAD!"
	},
	"HasNetworkTimeStarted()": {
	  "prefix": "HasNetworkTimeStarted",
	  "body": [
		"HasNetworkTimeStarted()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x46718aceedeafc84"
	},
	"IsDamageTrackerActiveOnNetworkId()": {
	  "prefix": "IsDamageTrackerActiveOnNetworkId",
	  "body": [
		"IsDamageTrackerActiveOnNetworkId(${1:int netID})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"IsPlayerInCutscene()": {
	  "prefix": "IsPlayerInCutscene",
	  "body": [
		"IsPlayerInCutscene(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"IsNetworkVehicleBeenDamagedByAnyObject()": {
	  "prefix": "IsNetworkVehicleBeenDamagedByAnyObject",
	  "body": [
		"IsNetworkVehicleBeenDamagedByAnyObject(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nhash collision.  \nDefinitely a hash collision, has something do to with your local player, not a vehicle  \n"
	},
	"IsSocialclubBanned()": {
	  "prefix": "IsSocialclubBanned",
	  "body": [
		"IsSocialclubBanned()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nif(_IS_SOCIALCLUB_BANNED() == 0) means the player is social club banned  \n"
	},
	"IsSphereVisibleToPlayer()": {
	  "prefix": "IsSphereVisibleToPlayer",
	  "body": [
		"IsSphereVisibleToPlayer(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"IsRockstarBanned()": {
	  "prefix": "IsRockstarBanned",
	  "body": [
		"IsRockstarBanned()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nif(NETWORK::_IS_ROCKSTAR_BANNED() == 0) means the player is rockstar banned  \n"
	},
	"SubtractBFromAAndCheckIfNegative()": {
	  "prefix": "SubtractBFromAAndCheckIfNegative",
	  "body": "SubtractBFromAAndCheckIfNegative",
	  "description": "OLD NAME, PLEASE USE IsTimeLessThan INSTEAD!"
	},
	"IsTimeLessThan()": {
	  "prefix": "IsTimeLessThan",
	  "body": [
		"IsTimeLessThan(${1:int timeA}, ${2:int timeB})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSubtracts the second argument from the first, then returns whether the result is negative.  \n\nOld name: SubtractBFromAAndCheckIfNegative"
	},
	"IsSphereVisibleToAnotherMachine()": {
	  "prefix": "IsSphereVisibleToAnotherMachine",
	  "body": [
		"IsSphereVisibleToAnotherMachine(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x01abce5e7cbda196()": {
	  "prefix": "N_0x01abce5e7cbda196",
	  "body": [
		"N_0x01abce5e7cbda196()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"AreIntegersEqual()": {
	  "prefix": "AreIntegersEqual",
	  "body": "AreIntegersEqual",
	  "description": "OLD NAME, PLEASE USE IsTimeEqualTo INSTEAD!"
	},
	"IsTimeEqualTo()": {
	  "prefix": "IsTimeEqualTo",
	  "body": [
		"IsTimeEqualTo(${1:int timeA}, ${2:int timeB})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nReturns true if the two times are equal; otherwise returns false.  \n\nOld name: AreIntegersEqual"
	},
	"N_0x02ada21ea2f6918f()": {
	  "prefix": "N_0x02ada21ea2f6918f",
	  "body": [
		"N_0x02ada21ea2f6918f()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"SubtractAFromBAndCheckIfNegative()": {
	  "prefix": "SubtractAFromBAndCheckIfNegative",
	  "body": "SubtractAFromBAndCheckIfNegative",
	  "description": "OLD NAME, PLEASE USE IsTimeMoreThan INSTEAD!"
	},
	"IsTimeMoreThan()": {
	  "prefix": "IsTimeMoreThan",
	  "body": [
		"IsTimeMoreThan(${1:int timeA}, ${2:int timeB})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSubtracts the first argument from the second, then returns whether the result is negative.  \n\nOld name: SubtractAFromBAndCheckIfNegative"
	},
	"N_0x041c7f2a6c9894e6()": {
	  "prefix": "N_0x041c7f2a6c9894e6",
	  "body": [
		"N_0x041c7f2a6c9894e6(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x07dd29d5e22763f1()": {
	  "prefix": "N_0x07dd29d5e22763f1",
	  "body": [
		"N_0x07dd29d5e22763f1(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x02a8bec6fd9af660()": {
	  "prefix": "N_0x02a8bec6fd9af660",
	  "body": [
		"N_0x02a8bec6fd9af660(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x07eab372c8841d99()": {
	  "prefix": "N_0x07eab372c8841d99",
	  "body": [
		"N_0x07eab372c8841d99(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x0379daf89ba09aa5()": {
	  "prefix": "N_0x0379daf89ba09aa5",
	  "body": [
		"N_0x0379daf89ba09aa5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x0c1f7d49c39d2289()": {
	  "prefix": "N_0x0c1f7d49c39d2289",
	  "body": [
		"N_0x0c1f7d49c39d2289()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x0c978fda19692c2c()": {
	  "prefix": "N_0x0c978fda19692c2c",
	  "body": [
		"N_0x0c978fda19692c2c(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nx360 Hash: 0x4AF0ADF5  \n"
	},
	"N_0x04918a41bc9b8157()": {
	  "prefix": "N_0x04918a41bc9b8157",
	  "body": [
		"N_0x04918a41bc9b8157(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x0afce529f69b21ff()": {
	  "prefix": "N_0x0afce529f69b21ff",
	  "body": [
		"N_0x0afce529f69b21ff()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x0d77a82dc2d0da59()": {
	  "prefix": "N_0x0d77a82dc2d0da59",
	  "body": [
		"N_0x0d77a82dc2d0da59(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x0dbd5d7e3c5bec3b()": {
	  "prefix": "N_0x0dbd5d7e3c5bec3b",
	  "body": [
		"N_0x0dbd5d7e3c5bec3b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x0b203b4afde53a4f()": {
	  "prefix": "N_0x0b203b4afde53a4f",
	  "body": [
		"N_0x0b203b4afde53a4f(${1:Any* p0}, ${2:Any* p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x0ede326d47cd0f3e()": {
	  "prefix": "N_0x0ede326d47cd0f3e",
	  "body": [
		"N_0x0ede326d47cd0f3e(${1:Ped ped}, ${2:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x0cd9ab83489430ea()": {
	  "prefix": "N_0x0cd9ab83489430ea",
	  "body": [
		"N_0x0cd9ab83489430ea(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0x10bd227a753b0d84()": {
	  "prefix": "N_0x10bd227a753b0d84",
	  "body": [
		"N_0x10bd227a753b0d84()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x0e4f77f7b9d74d84()": {
	  "prefix": "N_0x0e4f77f7b9d74d84",
	  "body": [
		"N_0x0e4f77f7b9d74d84(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x1153fa02a659051c()": {
	  "prefix": "N_0x1153fa02a659051c",
	  "body": [
		"N_0x1153fa02a659051c()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x0ff2862b61a58af9()": {
	  "prefix": "N_0x0ff2862b61a58af9",
	  "body": [
		"N_0x0ff2862b61a58af9(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\np0 is always false in scripts.  \n"
	},
	"N_0x120364de2845daf8()": {
	  "prefix": "N_0x120364de2845daf8",
	  "body": [
		"N_0x120364de2845daf8(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x113e6e3e50e286b0()": {
	  "prefix": "N_0x113e6e3e50e286b0",
	  "body": [
		"N_0x113e6e3e50e286b0(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x12b6281b6c6706c0()": {
	  "prefix": "N_0x12b6281b6c6706c0",
	  "body": [
		"N_0x12b6281b6c6706c0(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0x1171a97a3d3981b6()": {
	  "prefix": "N_0x1171a97a3d3981b6",
	  "body": [
		"N_0x1171a97a3d3981b6(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x1353f87e89946207()": {
	  "prefix": "N_0x1353f87e89946207",
	  "body": [
		"N_0x1353f87e89946207()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nReturns some kind of banned state  \n"
	},
	"N_0x13518ff1c6b28938()": {
	  "prefix": "N_0x13518ff1c6b28938",
	  "body": [
		"N_0x13518ff1c6b28938(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x135f9b7b7add2185()": {
	  "prefix": "N_0x135f9b7b7add2185",
	  "body": [
		"N_0x135f9b7b7add2185(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x1398582b7f72b3ed()": {
	  "prefix": "N_0x1398582b7f72b3ed",
	  "body": [
		"N_0x1398582b7f72b3ed(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x13f1fcb111b820b0()": {
	  "prefix": "N_0x13f1fcb111b820b0",
	  "body": [
		"N_0x13f1fcb111b820b0(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x140e6a44870a11ce()": {
	  "prefix": "N_0x140e6a44870a11ce",
	  "body": [
		"N_0x140e6a44870a11ce()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x144da052257ae7d8()": {
	  "prefix": "N_0x144da052257ae7d8",
	  "body": [
		"N_0x144da052257ae7d8(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x14922ed3e38761f0()": {
	  "prefix": "N_0x14922ed3e38761f0",
	  "body": [
		"N_0x14922ed3e38761f0()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x158ec424f35ec469()": {
	  "prefix": "N_0x158ec424f35ec469",
	  "body": [
		"N_0x158ec424f35ec469(${1:char* p0}, ${2:BOOL p1}, ${3:char* contentType})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x152d90e4c1b4738a()": {
	  "prefix": "N_0x152d90e4c1b4738a",
	  "body": [
		"N_0x152d90e4c1b4738a(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x162c23ca83ed0a62()": {
	  "prefix": "N_0x162c23ca83ed0a62",
	  "body": [
		"N_0x162c23ca83ed0a62(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x171df6a0c07fb3dc()": {
	  "prefix": "N_0x171df6a0c07fb3dc",
	  "body": [
		"N_0x171df6a0c07fb3dc(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x17440aa15d1d3739()": {
	  "prefix": "N_0x17440aa15d1d3739",
	  "body": [
		"N_0x17440aa15d1d3739()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x17330ebf2f2124a8()": {
	  "prefix": "N_0x17330ebf2f2124a8",
	  "body": [
		"N_0x17330ebf2f2124a8()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x1888694923ef4591()": {
	  "prefix": "N_0x1888694923ef4591",
	  "body": [
		"N_0x1888694923ef4591()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x17e0198b3882c2cb()": {
	  "prefix": "N_0x17e0198b3882c2cb",
	  "body": [
		"N_0x17e0198b3882c2cb()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x1accfba3d8dab2ee()": {
	  "prefix": "N_0x1accfba3d8dab2ee",
	  "body": [
		"N_0x1accfba3d8dab2ee(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x1950dae9848a4739()": {
	  "prefix": "N_0x1950dae9848a4739",
	  "body": [
		"N_0x1950dae9848a4739(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x1b857666604b1a74()": {
	  "prefix": "N_0x1b857666604b1a74",
	  "body": [
		"N_0x1b857666604b1a74(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nConsole Hash: 0x76A9FEB6  \n"
	},
	"N_0x1ad5b71586b94820()": {
	  "prefix": "N_0x1ad5b71586b94820",
	  "body": [
		"N_0x1ad5b71586b94820(${1:Player p0}, ${2:Any* p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nunk_0xCEA55F4C(uVar3, \"AM_ROLLERCOASTER\", -1))  \nProbably has to do with seeing if they are riding the roller coaster or ferris wheel  \nNETWORK_IS_PLAYER_???  \n"
	},
	"N_0x1d610eb0fea716d9()": {
	  "prefix": "N_0x1d610eb0fea716d9",
	  "body": [
		"N_0x1d610eb0fea716d9(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x1d4dc17c38feaff0()": {
	  "prefix": "N_0x1d4dc17c38feaff0",
	  "body": [
		"N_0x1d4dc17c38feaff0()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x1de0f5f50d723caa()": {
	  "prefix": "N_0x1de0f5f50d723caa",
	  "body": [
		"N_0x1de0f5f50d723caa(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x1f8e00fb18239600()": {
	  "prefix": "N_0x1f8e00fb18239600",
	  "body": [
		"N_0x1f8e00fb18239600(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x2302c0264ea58d31()": {
	  "prefix": "N_0x2302c0264ea58d31",
	  "body": [
		"N_0x2302c0264ea58d31()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x21d04d7bc538c146()": {
	  "prefix": "N_0x21d04d7bc538c146",
	  "body": [
		"N_0x21d04d7bc538c146(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x237d5336a9a54108()": {
	  "prefix": "N_0x237d5336a9a54108",
	  "body": [
		"N_0x237d5336a9a54108(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x24e4e51fc16305f9()": {
	  "prefix": "N_0x24e4e51fc16305f9",
	  "body": [
		"N_0x24e4e51fc16305f9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x24409fc4c55cb22d()": {
	  "prefix": "N_0x24409fc4c55cb22d",
	  "body": [
		"N_0x24409fc4c55cb22d(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x25b99872d588a101()": {
	  "prefix": "N_0x25b99872d588a101",
	  "body": [
		"N_0x25b99872d588a101(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x261e97ad7bcf3d40()": {
	  "prefix": "N_0x261e97ad7bcf3d40",
	  "body": [
		"N_0x261e97ad7bcf3d40(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x25d990f8e0e3f13c()": {
	  "prefix": "N_0x25d990f8e0e3f13c",
	  "body": [
		"N_0x25d990f8e0e3f13c()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x265559da40b3f327()": {
	  "prefix": "N_0x265559da40b3f327",
	  "body": [
		"N_0x265559da40b3f327(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x267c78c60e806b9a()": {
	  "prefix": "N_0x267c78c60e806b9a",
	  "body": [
		"N_0x267c78c60e806b9a(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x265635150fb0d82e()": {
	  "prefix": "N_0x265635150fb0d82e",
	  "body": [
		"N_0x265635150fb0d82e()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x26f07dd83a5f7f98()": {
	  "prefix": "N_0x26f07dd83a5f7f98",
	  "body": [
		"N_0x26f07dd83a5f7f98()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nspook.  \nThis function calls a function that gets another player stat, although implementation wasn't finished so it can only get your own stat.  \nStat value it calls: 0xFC58E972  \n"
	},
	"N_0x274a1519dfc1094f()": {
	  "prefix": "N_0x274a1519dfc1094f",
	  "body": [
		"N_0x274a1519dfc1094f(${1:Any* p0}, ${2:BOOL p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x283b6062a2c01e9b()": {
	  "prefix": "N_0x283b6062a2c01e9b",
	  "body": [
		"N_0x283b6062a2c01e9b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x299ef3c576773506()": {
	  "prefix": "N_0x299ef3c576773506",
	  "body": [
		"N_0x299ef3c576773506()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2a5e0621dd815a9a()": {
	  "prefix": "N_0x2a5e0621dd815a9a",
	  "body": [
		"N_0x2a5e0621dd815a9a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x2a7776c709904ab0()": {
	  "prefix": "N_0x2a7776c709904ab0",
	  "body": [
		"N_0x2a7776c709904ab0(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2b1c623823db0d9d()": {
	  "prefix": "N_0x2b1c623823db0d9d",
	  "body": [
		"N_0x2b1c623823db0d9d(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2b51edbefc301339()": {
	  "prefix": "N_0x2b51edbefc301339",
	  "body": [
		"N_0x2b51edbefc301339(${1:int p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x2bf66d2e7414f686()": {
	  "prefix": "N_0x2bf66d2e7414f686",
	  "body": [
		"N_0x2bf66d2e7414f686()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2cc848a861d01493()": {
	  "prefix": "N_0x2cc848a861d01493",
	  "body": [
		"N_0x2cc848a861d01493()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2ce9d95e4051aecd()": {
	  "prefix": "N_0x2ce9d95e4051aecd",
	  "body": [
		"N_0x2ce9d95e4051aecd(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x2d5dc831176d0114()": {
	  "prefix": "N_0x2d5dc831176d0114",
	  "body": [
		"N_0x2d5dc831176d0114(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x2da41ed6e1fcd7a5()": {
	  "prefix": "N_0x2da41ed6e1fcd7a5",
	  "body": [
		"N_0x2da41ed6e1fcd7a5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2e0bf682cc778d49()": {
	  "prefix": "N_0x2e0bf682cc778d49",
	  "body": [
		"N_0x2e0bf682cc778d49(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x2e4c123d1c8a710e()": {
	  "prefix": "N_0x2e4c123d1c8a710e",
	  "body": [
		"N_0x2e4c123d1c8a710e(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2eac52b4019e2782()": {
	  "prefix": "N_0x2eac52b4019e2782",
	  "body": [
		"N_0x2eac52b4019e2782()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x2fc5650b0271cb57()": {
	  "prefix": "N_0x2fc5650b0271cb57",
	  "body": [
		"N_0x2fc5650b0271cb57()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nNETWORK_IS_IN_???  \n"
	},
	"N_0x3054f114121c21ea()": {
	  "prefix": "N_0x3054f114121c21ea",
	  "body": [
		"N_0x3054f114121c21ea(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x308f96458b7087cc()": {
	  "prefix": "N_0x308f96458b7087cc",
	  "body": [
		"N_0x308f96458b7087cc(${1:Any* p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any* p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x3195f8dd0d531052()": {
	  "prefix": "N_0x3195f8dd0d531052",
	  "body": [
		"N_0x3195f8dd0d531052(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x32dd916f3f7c9672()": {
	  "prefix": "N_0x32dd916f3f7c9672",
	  "body": [
		"N_0x32dd916f3f7c9672(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x32ebd154cb6b8b99()": {
	  "prefix": "N_0x32ebd154cb6b8b99",
	  "body": [
		"N_0x32ebd154cb6b8b99(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x33de49edf4dde77a()": {
	  "prefix": "N_0x33de49edf4dde77a",
	  "body": [
		"N_0x33de49edf4dde77a(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Vector3\n"
	},
	"N_0x35f0b98a8387274d()": {
	  "prefix": "N_0x35f0b98a8387274d",
	  "body": [
		"N_0x35f0b98a8387274d()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x36391f397731595d()": {
	  "prefix": "N_0x36391f397731595d",
	  "body": [
		"N_0x36391f397731595d(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x367ef5e2f439b4c6()": {
	  "prefix": "N_0x367ef5e2f439b4c6",
	  "body": [
		"N_0x367ef5e2f439b4c6(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x37a4494483b9f5c9()": {
	  "prefix": "N_0x37a4494483b9f5c9",
	  "body": [
		"N_0x37a4494483b9f5c9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nNETWORK_IS_TRANSITION_???  \n"
	},
	"N_0x37d5f739fd494675()": {
	  "prefix": "N_0x37d5f739fd494675",
	  "body": [
		"N_0x37d5f739fd494675(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\nI've had this return the player's ped handle sometimes, but also other random entities.\n\nWhatever p0 is, it's at least not synced to other players.\nAt least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).\nBut another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients)."
	},
	"N_0x3855fb5eb2c5e8b2()": {
	  "prefix": "N_0x3855fb5eb2c5e8b2",
	  "body": [
		"N_0x3855fb5eb2c5e8b2(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x39917e1b4cb0f911()": {
	  "prefix": "N_0x39917e1b4cb0f911",
	  "body": [
		"N_0x39917e1b4cb0f911(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x3a17a27d75c74887()": {
	  "prefix": "N_0x3a17a27d75c74887",
	  "body": [
		"N_0x3a17a27d75c74887()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x3a3d5568af297cd5()": {
	  "prefix": "N_0x3a3d5568af297cd5",
	  "body": [
		"N_0x3a3d5568af297cd5(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x3a8b55fda4c8ddef()": {
	  "prefix": "N_0x3a8b55fda4c8ddef",
	  "body": [
		"N_0x3a8b55fda4c8ddef(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x3b39236746714134()": {
	  "prefix": "N_0x3b39236746714134",
	  "body": [
		"N_0x3b39236746714134(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x3c5c1e2c2ff814b1()": {
	  "prefix": "N_0x3c5c1e2c2ff814b1",
	  "body": [
		"N_0x3c5c1e2c2ff814b1(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x3dbf2df0aeb7d289()": {
	  "prefix": "N_0x3dbf2df0aeb7d289",
	  "body": [
		"N_0x3dbf2df0aeb7d289(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x3c891a251567dfce()": {
	  "prefix": "N_0x3c891a251567dfce",
	  "body": [
		"N_0x3c891a251567dfce(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x3f52e880aaf6c8ca()": {
	  "prefix": "N_0x3f52e880aaf6c8ca",
	  "body": [
		"N_0x3f52e880aaf6c8ca(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x3fa36981311fa4ff()": {
	  "prefix": "N_0x3fa36981311fa4ff",
	  "body": [
		"N_0x3fa36981311fa4ff(${1:int netId}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x3f9990bf5f22759c()": {
	  "prefix": "N_0x3f9990bf5f22759c",
	  "body": [
		"N_0x3f9990bf5f22759c(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x407091cf6037118e()": {
	  "prefix": "N_0x407091cf6037118e",
	  "body": [
		"N_0x407091cf6037118e(${1:int netID})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nConsole Hash: 0x9F82917F  \n"
	},
	"N_0x419594e137637120()": {
	  "prefix": "N_0x419594e137637120",
	  "body": [
		"N_0x419594e137637120(${1:BOOL p0}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x40f7e66472df3e5c()": {
	  "prefix": "N_0x40f7e66472df3e5c",
	  "body": [
		"N_0x40f7e66472df3e5c(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x422d396f80a96547()": {
	  "prefix": "N_0x422d396f80a96547",
	  "body": [
		"N_0x422d396f80a96547()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x422f32cc7e56abad()": {
	  "prefix": "N_0x422f32cc7e56abad",
	  "body": [
		"N_0x422f32cc7e56abad(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x42613035157e4208()": {
	  "prefix": "N_0x42613035157e4208",
	  "body": [
		"N_0x42613035157e4208(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x4237e822315d8ba9()": {
	  "prefix": "N_0x4237e822315d8ba9",
	  "body": [
		"N_0x4237e822315d8ba9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x4348bfda56023a2f()": {
	  "prefix": "N_0x4348bfda56023a2f",
	  "body": [
		"N_0x4348bfda56023a2f(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x444c4525ece0a4b9()": {
	  "prefix": "N_0x444c4525ece0a4b9",
	  "body": [
		"N_0x444c4525ece0a4b9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nsfink: related to: NETWORK_BAIL  \nNETWORK_BAIL_TRANSITION  \nNETWORK_JOIN_GROUP_ACTIVITY  \nNETWORK_JOIN_TRANSITION  \nNETWORK_LAUNCH_TRANSITION  \nNETWORK_SESSION_HOST  \nNETWORK_SESSION_HOST_CLOSED  \nNETWORK_SESSION_HOST_FRIENDS_ONLY  \nNETWORK_SESSION_HOST_SINGLE_PLAYER  \nNETWORK_SESSION_VOICE_LEAVE  \n"
	},
	"N_0x45a83257ed02d9bc()": {
	  "prefix": "N_0x45a83257ed02d9bc",
	  "body": [
		"N_0x45a83257ed02d9bc()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x44b37cdcae765aae()": {
	  "prefix": "N_0x44b37cdcae765aae",
	  "body": [
		"N_0x44b37cdcae765aae(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x45e816772e93a9db()": {
	  "prefix": "N_0x45e816772e93a9db",
	  "body": [
		"N_0x45e816772e93a9db()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x4811bbac21c5fcd5()": {
	  "prefix": "N_0x4811bbac21c5fcd5",
	  "body": [
		"N_0x4811bbac21c5fcd5(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x472841a026d26d8b()": {
	  "prefix": "N_0x472841a026d26d8b",
	  "body": [
		"N_0x472841a026d26d8b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x4a2d4e8bf4265b0f()": {
	  "prefix": "N_0x4a2d4e8bf4265b0f",
	  "body": [
		"N_0x4a2d4e8bf4265b0f(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x4a9fde3a5a6d0437()": {
	  "prefix": "N_0x4a9fde3a5a6d0437",
	  "body": [
		"N_0x4a9fde3a5a6d0437(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x4ad490ae1536933b()": {
	  "prefix": "N_0x4ad490ae1536933b",
	  "body": [
		"N_0x4ad490ae1536933b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x4ba166079d658ed4()": {
	  "prefix": "N_0x4ba166079d658ed4",
	  "body": [
		"N_0x4ba166079d658ed4(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x4ba92a18502bca61()": {
	  "prefix": "N_0x4ba92a18502bca61",
	  "body": [
		"N_0x4ba92a18502bca61(${1:Player player}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:int flags})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSeems to call GET_PAUSED_MAP_STREAMING_REQUEST lol wtf  \nseg001:000000000158C324 sub_158C324:                            # DATA XREF: OPD:stru_1C29978o  \nseg001:000000000158C324  \nseg001:000000000158C324 .set arg_10,  0x10  \nseg001:000000000158C324  \nseg001:000000000158C324                 mflr      r0  \nseg001:000000000158C328                 bl        sub_1803774  \nseg001:000000000158C32C                 stdu      r1, -0x80(r1)  \nseg001:000000000158C330                 std       r0, 0x80+arg_10(r1)  \nseg001:000000000158C334                 mr        r31, r3  \nseg001:000000000158C338                 lwz       r3, 8(r31)  \nseg001:000000000158C33C                 addic     r4, r3, 4  \nseg001:000000000158C340                 addic     r5, r3, 0x10  \nseg001:000000000158C344                 addic     r7, r3, 0x20  \nseg001:000000000158C348                 lwz       r6, 0(r3)  \nseg001:000000000158C34C                 lfs       f1, 0x1C(r3)  \nseg001:000000000158C350                 lwz       r8, 0x2C(r3)  \nseg001:000000000158C354                 extsw     r3, r6  \nseg001:000000000158C358                 extsw     r8, r8  \nseg001:000000000158C35C                 bl        GET_PAUSED_MAP_STREAMING_REQUEST  \nseg001:000000000158C360                 lwz       r4, 0(r31)  \nseg001:000000000158C364                 stw       r3, 0(r4)  \nseg001:000000000158C368                 addi      r1, r1, 0x80  \nseg001:000000000158C36C                 b         loc_18037D8  \nsorta makes sense though since the one above this native and GET_PAUSED_MAP_STREAMING_REQUEST are used together often in scripts  \n"
	},
	"N_0x4c2a9fdc22377075()": {
	  "prefix": "N_0x4c2a9fdc22377075",
	  "body": [
		"N_0x4c2a9fdc22377075()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x4c61b39930d045da()": {
	  "prefix": "N_0x4c61b39930d045da",
	  "body": [
		"N_0x4c61b39930d045da(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x4d02279c83be69fe()": {
	  "prefix": "N_0x4d02279c83be69fe",
	  "body": [
		"N_0x4d02279c83be69fe()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x4df7cfff471a7fb1()": {
	  "prefix": "N_0x4df7cfff471a7fb1",
	  "body": [
		"N_0x4df7cfff471a7fb1(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x524ff0aeff9c3973()": {
	  "prefix": "N_0x524ff0aeff9c3973",
	  "body": [
		"N_0x524ff0aeff9c3973(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x4e548c0d7ae39ff9()": {
	  "prefix": "N_0x4e548c0d7ae39ff9",
	  "body": [
		"N_0x4e548c0d7ae39ff9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x5324a0e3e4ce3570()": {
	  "prefix": "N_0x5324a0e3e4ce3570",
	  "body": [
		"N_0x5324a0e3e4ce3570(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x53afd64c6758f2f9()": {
	  "prefix": "N_0x53afd64c6758f2f9",
	  "body": [
		"N_0x53afd64c6758f2f9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x5539c3ebf104a53a()": {
	  "prefix": "N_0x5539c3ebf104a53a",
	  "body": [
		"N_0x5539c3ebf104a53a(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x5626d9d6810730d5()": {
	  "prefix": "N_0x5626d9d6810730d5",
	  "body": [
		"N_0x5626d9d6810730d5()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x53c10c8bd774f2c9()": {
	  "prefix": "N_0x53c10c8bd774f2c9",
	  "body": [
		"N_0x53c10c8bd774f2c9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x58cc181719256197()": {
	  "prefix": "N_0x58cc181719256197",
	  "body": [
		"N_0x58cc181719256197(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x584770794d758c18()": {
	  "prefix": "N_0x584770794d758c18",
	  "body": [
		"N_0x584770794d758c18(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x593570c289a77688()": {
	  "prefix": "N_0x593570c289a77688",
	  "body": [
		"N_0x593570c289a77688()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x58c21165f6545892()": {
	  "prefix": "N_0x58c21165f6545892",
	  "body": [
		"N_0x58c21165f6545892(${1:char* p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nHas a 3rd param (int) since patch [???].  \n"
	},
	"N_0x595f028698072dd9()": {
	  "prefix": "N_0x595f028698072dd9",
	  "body": [
		"N_0x595f028698072dd9(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x59328eb08c5ceb2b()": {
	  "prefix": "N_0x59328eb08c5ceb2b",
	  "body": [
		"N_0x59328eb08c5ceb2b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x59df79317f85a7e0()": {
	  "prefix": "N_0x59df79317f85a7e0",
	  "body": [
		"N_0x59df79317f85a7e0()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nmay be 0x6CDAA7D2  \nsfink: related to: NETWORK_BAIL  \nNETWORK_BAIL_TRANSITION  \nNETWORK_JOIN_GROUP_ACTIVITY  \nNETWORK_JOIN_TRANSITION  \nNETWORK_LAUNCH_TRANSITION  \nNETWORK_SESSION_HOST  \nNETWORK_SESSION_HOST_CLOSED  \nNETWORK_SESSION_HOST_FRIENDS_ONLY  \nNETWORK_SESSION_HOST_SINGLE_PLAYER  \nNETWORK_SESSION_VOICE_LEAVE  \n"
	},
	"N_0x5a34cd9c3c5bec44()": {
	  "prefix": "N_0x5a34cd9c3c5bec44",
	  "body": [
		"N_0x5a34cd9c3c5bec44(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x597f8dba9b206fc7()": {
	  "prefix": "N_0x597f8dba9b206fc7",
	  "body": [
		"N_0x597f8dba9b206fc7()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x5a6aa44ff8e931e6()": {
	  "prefix": "N_0x5a6aa44ff8e931e6",
	  "body": [
		"N_0x5a6aa44ff8e931e6()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nNETWORK_IS_TRANSITION_???  \n"
	},
	"N_0x59d421683d31835a()": {
	  "prefix": "N_0x59d421683d31835a",
	  "body": [
		"N_0x59d421683d31835a(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x5a0a3d1a186a5508()": {
	  "prefix": "N_0x5a0a3d1a186a5508",
	  "body": [
		"N_0x5a0a3d1a186a5508()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x5ae17c6b0134b7f1()": {
	  "prefix": "N_0x5ae17c6b0134b7f1",
	  "body": [
		"N_0x5ae17c6b0134b7f1()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x5c497525f803486b()": {
	  "prefix": "N_0x5c497525f803486b",
	  "body": [
		"N_0x5c497525f803486b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x5a6ffa2433e2f14c()": {
	  "prefix": "N_0x5a6ffa2433e2f14c",
	  "body": [
		"N_0x5a6ffa2433e2f14c(${1:Player player}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:int flags})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOne of the first things it does is get the players ped.  \nThen it calls a function that is used in some tasks and ped based functions.  \n"
	},
	"N_0x5b8ed3db018927b1()": {
	  "prefix": "N_0x5b8ed3db018927b1",
	  "body": [
		"N_0x5b8ed3db018927b1(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x5cae833b0ee0c500()": {
	  "prefix": "N_0x5cae833b0ee0c500",
	  "body": [
		"N_0x5cae833b0ee0c500(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x5d10b3795f3fc886()": {
	  "prefix": "N_0x5d10b3795f3fc886",
	  "body": [
		"N_0x5d10b3795f3fc886()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x5c707a667df8b9fa()": {
	  "prefix": "N_0x5c707a667df8b9fa",
	  "body": [
		"N_0x5c707a667df8b9fa(${1:BOOL p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x5e0165278f6339ee()": {
	  "prefix": "N_0x5e0165278f6339ee",
	  "body": [
		"N_0x5e0165278f6339ee(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x5dc577201723960a()": {
	  "prefix": "N_0x5dc577201723960a",
	  "body": [
		"N_0x5dc577201723960a()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nNETWORK_IS_TRANSITION_???  \n"
	},
	"N_0x5e3aa4ca2b6fb0ee()": {
	  "prefix": "N_0x5e3aa4ca2b6fb0ee",
	  "body": [
		"N_0x5e3aa4ca2b6fb0ee(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x5e24341a7f92a74b()": {
	  "prefix": "N_0x5e24341a7f92a74b",
	  "body": [
		"N_0x5e24341a7f92a74b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x5ecd378ee64450ab()": {
	  "prefix": "N_0x5ecd378ee64450ab",
	  "body": [
		"N_0x5ecd378ee64450ab(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x5ea784d197556507()": {
	  "prefix": "N_0x5ea784d197556507",
	  "body": [
		"N_0x5ea784d197556507()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x606e4d3e3cccf3eb()": {
	  "prefix": "N_0x606e4d3e3cccf3eb",
	  "body": [
		"N_0x606e4d3e3cccf3eb()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x600f8cb31c7aab6e()": {
	  "prefix": "N_0x600f8cb31c7aab6e",
	  "body": [
		"N_0x600f8cb31c7aab6e(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x60edd13eb3ac1ff3()": {
	  "prefix": "N_0x60edd13eb3ac1ff3",
	  "body": [
		"N_0x60edd13eb3ac1ff3()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x61a885d3f7cfee9a()": {
	  "prefix": "N_0x61a885d3f7cfee9a",
	  "body": [
		"N_0x61a885d3f7cfee9a()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x617f49c2668e6155()": {
	  "prefix": "N_0x617f49c2668e6155",
	  "body": [
		"N_0x617f49c2668e6155()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x638a3a81733086db()": {
	  "prefix": "N_0x638a3a81733086db",
	  "body": [
		"N_0x638a3a81733086db()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0x63b406d7884bfa95()": {
	  "prefix": "N_0x63b406d7884bfa95",
	  "body": [
		"N_0x63b406d7884bfa95()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x62a0296c1bb1ceb3()": {
	  "prefix": "N_0x62a0296c1bb1ceb3",
	  "body": [
		"N_0x62a0296c1bb1ceb3()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x631dc5dff4b110e3()": {
	  "prefix": "N_0x631dc5dff4b110e3",
	  "body": [
		"N_0x631dc5dff4b110e3(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x6512765e3be78c50()": {
	  "prefix": "N_0x6512765e3be78c50",
	  "body": [
		"N_0x6512765e3be78c50()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x658500ae6d723a7e()": {
	  "prefix": "N_0x658500ae6d723a7e",
	  "body": [
		"N_0x658500ae6d723a7e(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x64d779659bc37b19()": {
	  "prefix": "N_0x64d779659bc37b19",
	  "body": [
		"N_0x64d779659bc37b19(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Vector3\n"
	},
	"N_0x662635855957c411()": {
	  "prefix": "N_0x662635855957c411",
	  "body": [
		"N_0x662635855957c411(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x64f62afb081e260d()": {
	  "prefix": "N_0x64f62afb081e260d",
	  "body": [
		"N_0x64f62afb081e260d()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nthis is lightly associated with the 2 above meaning it accesses a variable that them 2 access also  \n"
	},
	"N_0x66f010a4b031a331()": {
	  "prefix": "N_0x66f010a4b031a331",
	  "body": [
		"N_0x66f010a4b031a331(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x659cf2ef7f550c4f()": {
	  "prefix": "N_0x659cf2ef7f550c4f",
	  "body": [
		"N_0x659cf2ef7f550c4f()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x67a5589628e0cff6()": {
	  "prefix": "N_0x67a5589628e0cff6",
	  "body": [
		"N_0x67a5589628e0cff6()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x66b59cffd78467af()": {
	  "prefix": "N_0x66b59cffd78467af",
	  "body": [
		"N_0x66b59cffd78467af()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x68103e2247887242()": {
	  "prefix": "N_0x68103e2247887242",
	  "body": [
		"N_0x68103e2247887242()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x678bb03c1a3bd51e()": {
	  "prefix": "N_0x678bb03c1a3bd51e",
	  "body": [
		"N_0x678bb03c1a3bd51e(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any* p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x697f508861875b42()": {
	  "prefix": "N_0x697f508861875b42",
	  "body": [
		"N_0x697f508861875b42(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x67fc09bc554a75e5()": {
	  "prefix": "N_0x67fc09bc554a75e5",
	  "body": [
		"N_0x67fc09bc554a75e5()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x6a5d89d7769a40d8()": {
	  "prefix": "N_0x6a5d89d7769a40d8",
	  "body": [
		"N_0x6a5d89d7769a40d8(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nCalled in freemode related scripts but not freemode itself.  \n"
	},
	"N_0x692d58df40657e8c()": {
	  "prefix": "N_0x692d58df40657e8c",
	  "body": [
		"N_0x692d58df40657e8c(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any* p3}, ${5:Any p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x6c34f1208b8923fd()": {
	  "prefix": "N_0x6c34f1208b8923fd",
	  "body": [
		"N_0x6c34f1208b8923fd(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x6ce50e47f5543d0c()": {
	  "prefix": "N_0x6ce50e47f5543d0c",
	  "body": [
		"N_0x6ce50e47f5543d0c()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x6bff5f84102df80a()": {
	  "prefix": "N_0x6bff5f84102df80a",
	  "body": [
		"N_0x6bff5f84102df80a(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x6d4cb481fac835e8()": {
	  "prefix": "N_0x6d4cb481fac835e8",
	  "body": [
		"N_0x6d4cb481fac835e8(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x6f697a66ce78674e()": {
	  "prefix": "N_0x6f697a66ce78674e",
	  "body": [
		"N_0x6f697a66ce78674e(${1:int team}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x6f44cbf56d79fac0()": {
	  "prefix": "N_0x6f44cbf56d79fac0",
	  "body": [
		"N_0x6f44cbf56d79fac0(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x6fb7bb3607d27fa2()": {
	  "prefix": "N_0x6fb7bb3607d27fa2",
	  "body": [
		"N_0x6fb7bb3607d27fa2()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x702bc4d605522539()": {
	  "prefix": "N_0x702bc4d605522539",
	  "body": [
		"N_0x702bc4d605522539(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x703f12425eca8bf5()": {
	  "prefix": "N_0x703f12425eca8bf5",
	  "body": [
		"N_0x703f12425eca8bf5(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x70ea8da57840f9be()": {
	  "prefix": "N_0x70ea8da57840f9be",
	  "body": [
		"N_0x70ea8da57840f9be(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x715135f4b82ac90d()": {
	  "prefix": "N_0x715135f4b82ac90d",
	  "body": [
		"N_0x715135f4b82ac90d(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nUsed in am_mp_property_ext and am_mp_property_int  \n"
	},
	"N_0x71dc455f5cd1c2b1()": {
	  "prefix": "N_0x71dc455f5cd1c2b1",
	  "body": [
		"N_0x71dc455f5cd1c2b1(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x722f5d28b61c5ea8()": {
	  "prefix": "N_0x722f5d28b61c5ea8",
	  "body": [
		"N_0x722f5d28b61c5ea8(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x7242f8b741ce1086()": {
	  "prefix": "N_0x7242f8b741ce1086",
	  "body": [
		"N_0x7242f8b741ce1086(${1:Any netId})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\nProbably a bool, returns true if the specified network id is controlled by someone else. \nIf you have control over the entity corresponding to the netId then this will return false (0);"
	},
	"N_0x728c4cc7920cd102()": {
	  "prefix": "N_0x728c4cc7920cd102",
	  "body": [
		"N_0x728c4cc7920cd102(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x72d918c99bcacc54()": {
	  "prefix": "N_0x72d918c99bcacc54",
	  "body": [
		"N_0x72d918c99bcacc54(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x72d0706cd6ccdb58()": {
	  "prefix": "N_0x72d0706cd6ccdb58",
	  "body": [
		"N_0x72d0706cd6ccdb58()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x742b58f723233ed9()": {
	  "prefix": "N_0x742b58f723233ed9",
	  "body": [
		"N_0x742b58f723233ed9(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x741a3d8380319a81()": {
	  "prefix": "N_0x741a3d8380319a81",
	  "body": [
		"N_0x741a3d8380319a81()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x74698374c45701d2()": {
	  "prefix": "N_0x74698374c45701d2",
	  "body": [
		"N_0x74698374c45701d2()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nNETWORK_IS_*  \n"
	},
	"N_0x74fb3e29e6d10fa9()": {
	  "prefix": "N_0x74fb3e29e6d10fa9",
	  "body": [
		"N_0x74fb3e29e6d10fa9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x7543bb439f63792b()": {
	  "prefix": "N_0x7543bb439f63792b",
	  "body": [
		"N_0x7543bb439f63792b(${1:int* clanDesc}, ${2:int bufferSize})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nbufferSize is 35 in the scripts.  \n"
	},
	"N_0x759299c5bb31d2a9()": {
	  "prefix": "N_0x759299c5bb31d2a9",
	  "body": [
		"N_0x759299c5bb31d2a9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x76bf03fadbf154f5()": {
	  "prefix": "N_0x76bf03fadbf154f5",
	  "body": [
		"N_0x76bf03fadbf154f5()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any*\n"
	},
	"N_0x769951e2455e2eb5()": {
	  "prefix": "N_0x769951e2455e2eb5",
	  "body": [
		"N_0x769951e2455e2eb5()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x77faddcbe3499df7()": {
	  "prefix": "N_0x77faddcbe3499df7",
	  "body": [
		"N_0x77faddcbe3499df7(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x77758139ec9b66c7()": {
	  "prefix": "N_0x77758139ec9b66c7",
	  "body": [
		"N_0x77758139ec9b66c7(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x78321bea235fd8cd()": {
	  "prefix": "N_0x78321bea235fd8cd",
	  "body": [
		"N_0x78321bea235fd8cd(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x7808619f31ff22db()": {
	  "prefix": "N_0x7808619f31ff22db",
	  "body": [
		"N_0x7808619f31ff22db()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 1.  \n"
	},
	"N_0x7ac752103856fb20()": {
	  "prefix": "N_0x7ac752103856fb20",
	  "body": [
		"N_0x7ac752103856fb20(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x793ff272d5b365f4()": {
	  "prefix": "N_0x793ff272d5b365f4",
	  "body": [
		"N_0x793ff272d5b365f4()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x7db53b37a2f211a0()": {
	  "prefix": "N_0x7db53b37a2f211a0",
	  "body": [
		"N_0x7db53b37a2f211a0()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x7d395ea61622e116()": {
	  "prefix": "N_0x7d395ea61622e116",
	  "body": [
		"N_0x7d395ea61622e116(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x7fcc39c46c3c03bd()": {
	  "prefix": "N_0x7fcc39c46c3c03bd",
	  "body": [
		"N_0x7fcc39c46c3c03bd(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x7ef7649b64d7ff10()": {
	  "prefix": "N_0x7ef7649b64d7ff10",
	  "body": [
		"N_0x7ef7649b64d7ff10(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x7fd2990af016795e()": {
	  "prefix": "N_0x7fd2990af016795e",
	  "body": [
		"N_0x7fd2990af016795e(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x82377b65e943f72d()": {
	  "prefix": "N_0x82377b65e943f72d",
	  "body": [
		"N_0x82377b65e943f72d(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\n\"GET_OBJ_ENTITY\" seems highly unlikely.  \n"
	},
	"N_0x815f18ad865f057f()": {
	  "prefix": "N_0x815f18ad865f057f",
	  "body": [
		"N_0x815f18ad865f057f(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x838da0936a24ed4d()": {
	  "prefix": "N_0x838da0936a24ed4d",
	  "body": [
		"N_0x838da0936a24ed4d(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x82a2b386716608f1()": {
	  "prefix": "N_0x82a2b386716608f1",
	  "body": [
		"N_0x82a2b386716608f1()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x83f28ce49fbbffba()": {
	  "prefix": "N_0x83f28ce49fbbffba",
	  "body": [
		"N_0x83f28ce49fbbffba(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x83660b734994124d()": {
	  "prefix": "N_0x83660b734994124d",
	  "body": [
		"N_0x83660b734994124d(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x855bc38818f6f684()": {
	  "prefix": "N_0x855bc38818f6f684",
	  "body": [
		"N_0x855bc38818f6f684()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x83fe8d7229593017()": {
	  "prefix": "N_0x83fe8d7229593017",
	  "body": [
		"N_0x83fe8d7229593017()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x86e0660e4f5c956d()": {
	  "prefix": "N_0x86e0660e4f5c956d",
	  "body": [
		"N_0x86e0660e4f5c956d()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x85a0ef54a500882c()": {
	  "prefix": "N_0x85a0ef54a500882c",
	  "body": [
		"N_0x85a0ef54a500882c(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x87e5c46c187fe0ae()": {
	  "prefix": "N_0x87e5c46c187fe0ae",
	  "body": [
		"N_0x87e5c46c187fe0ae(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x8806cebfabd3ce05()": {
	  "prefix": "N_0x8806cebfabd3ce05",
	  "body": [
		"N_0x8806cebfabd3ce05(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x88b588b41ff7868e()": {
	  "prefix": "N_0x88b588b41ff7868e",
	  "body": [
		"N_0x88b588b41ff7868e()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x883d79c4071e18b3()": {
	  "prefix": "N_0x883d79c4071e18b3",
	  "body": [
		"N_0x883d79c4071e18b3()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x8b4ffc790ca131ef()": {
	  "prefix": "N_0x8b4ffc790ca131ef",
	  "body": [
		"N_0x8b4ffc790ca131ef(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x8b0c2964ba471961()": {
	  "prefix": "N_0x8b0c2964ba471961",
	  "body": [
		"N_0x8b0c2964ba471961()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0x8bd6c6dea20e82c6()": {
	  "prefix": "N_0x8bd6c6dea20e82c6",
	  "body": [
		"N_0x8bd6c6dea20e82c6(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x8c8d2739ba44af0f()": {
	  "prefix": "N_0x8c8d2739ba44af0f",
	  "body": [
		"N_0x8c8d2739ba44af0f(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x8f5d1ad832aeb06c()": {
	  "prefix": "N_0x8f5d1ad832aeb06c",
	  "body": [
		"N_0x8f5d1ad832aeb06c(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x91b87c55093de351()": {
	  "prefix": "N_0x91b87c55093de351",
	  "body": [
		"N_0x91b87c55093de351()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nbool?  \nam_crate_drop.c  \n<...>  \nif (network::_network_are_ros_available())  \n{  \n\tif (network::_0x91B87C55093DE351())  \n<..>  \n"
	},
	"N_0x941e5306bcd7c2c7()": {
	  "prefix": "N_0x941e5306bcd7c2c7",
	  "body": [
		"N_0x941e5306bcd7c2c7()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x94538037ee44f5cf()": {
	  "prefix": "N_0x94538037ee44f5cf",
	  "body": [
		"N_0x94538037ee44f5cf(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x94a8394d150b013a()": {
	  "prefix": "N_0x94a8394d150b013a",
	  "body": [
		"N_0x94a8394d150b013a()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nNETWORK_IS_*  \n"
	},
	"N_0x9465e683b12d3f6b()": {
	  "prefix": "N_0x9465e683b12d3f6b",
	  "body": [
		"N_0x9465e683b12d3f6b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x966dd84fb6a46017()": {
	  "prefix": "N_0x966dd84fb6a46017",
	  "body": [
		"N_0x966dd84fb6a46017()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x9614b71f8adb982b()": {
	  "prefix": "N_0x9614b71f8adb982b",
	  "body": [
		"N_0x9614b71f8adb982b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x973d76aa760a6cb6()": {
	  "prefix": "N_0x973d76aa760a6cb6",
	  "body": [
		"N_0x973d76aa760a6cb6(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x993cbe59d350d225()": {
	  "prefix": "N_0x993cbe59d350d225",
	  "body": [
		"N_0x993cbe59d350d225(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x9bf438815f5d96ea()": {
	  "prefix": "N_0x9bf438815f5d96ea",
	  "body": [
		"N_0x9bf438815f5d96ea(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nGets some kind of data related to missions like the online player created races n stuff  \n"
	},
	"N_0x9d7afcbf21c51712()": {
	  "prefix": "N_0x9d7afcbf21c51712",
	  "body": [
		"N_0x9d7afcbf21c51712(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x9eca15adfe141431()": {
	  "prefix": "N_0x9eca15adfe141431",
	  "body": [
		"N_0x9eca15adfe141431()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\nDisconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.\n\nIf you're already in SP then it'll re-load singleplayer.\n\nYou might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.\n\nSomewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game."
	},
	"N_0x9f6e2821885caee2()": {
	  "prefix": "N_0x9f6e2821885caee2",
	  "body": [
		"N_0x9f6e2821885caee2(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any* p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x9fedf86898f100e9()": {
	  "prefix": "N_0x9fedf86898f100e9",
	  "body": [
		"N_0x9fedf86898f100e9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xa0fa4ec6a05da44e()": {
	  "prefix": "N_0xa0fa4ec6a05da44e",
	  "body": [
		"N_0xa0fa4ec6a05da44e()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 0.  \n"
	},
	"N_0xa134777ff7f33331()": {
	  "prefix": "N_0xa134777ff7f33331",
	  "body": [
		"N_0xa134777ff7f33331(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xa12d3a5a3753cc23()": {
	  "prefix": "N_0xa12d3a5a3753cc23",
	  "body": [
		"N_0xa12d3a5a3753cc23()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xa1e5e0204a6fcc70()": {
	  "prefix": "N_0xa1e5e0204a6fcc70",
	  "body": [
		"N_0xa1e5e0204a6fcc70()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xa2a707979fe754dc()": {
	  "prefix": "N_0xa2a707979fe754dc",
	  "body": [
		"N_0xa2a707979fe754dc(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xa2e9c1ab8a92e8cd()": {
	  "prefix": "N_0xa2e9c1ab8a92e8cd",
	  "body": [
		"N_0xa2e9c1ab8a92e8cd(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xa2f952104fc6dd4b()": {
	  "prefix": "N_0xa2f952104fc6dd4b",
	  "body": [
		"N_0xa2f952104fc6dd4b(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xa699957e60d80214()": {
	  "prefix": "N_0xa699957e60d80214",
	  "body": [
		"N_0xa699957e60d80214(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xa306f470d1660581()": {
	  "prefix": "N_0xa306f470d1660581",
	  "body": [
		"N_0xa306f470d1660581()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xa7862bc5ed1dfd7e()": {
	  "prefix": "N_0xa7862bc5ed1dfd7e",
	  "body": [
		"N_0xa7862bc5ed1dfd7e(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xa72835064dd63e4c()": {
	  "prefix": "N_0xa72835064dd63e4c",
	  "body": [
		"N_0xa72835064dd63e4c()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xa7e30de9272b6d49()": {
	  "prefix": "N_0xa7e30de9272b6d49",
	  "body": [
		"N_0xa7e30de9272b6d49(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nNETWORK_OVERRIDE_???  \n"
	},
	"N_0xa7c511fa1c5bda38()": {
	  "prefix": "N_0xa7c511fa1c5bda38",
	  "body": [
		"N_0xa7c511fa1c5bda38(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xa8acb6459542a8c8()": {
	  "prefix": "N_0xa8acb6459542a8c8",
	  "body": [
		"N_0xa8acb6459542a8c8()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xa9240a96c74cca13()": {
	  "prefix": "N_0xa9240a96c74cca13",
	  "body": [
		"N_0xa9240a96c74cca13(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xaaa553e7dd28a457()": {
	  "prefix": "N_0xaaa553e7dd28a457",
	  "body": [
		"N_0xaaa553e7dd28a457(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nconsole hash: 0xFD0F7EDD  \n"
	},
	"N_0xaa5fafcd2c5f5e47()": {
	  "prefix": "N_0xaa5fafcd2c5f5e47",
	  "body": [
		"N_0xaa5fafcd2c5f5e47()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xadb57e5b663cca8b()": {
	  "prefix": "N_0xadb57e5b663cca8b",
	  "body": [
		"N_0xadb57e5b663cca8b(${1:Player p0}, ${2:float* p1}, ${3:float* p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\ngets 2 floats from the CNetGamePlayer of p0 and stores them in p1 and p2.  \nPossibly waypoint?  \n"
	},
	"N_0xaeab987727c5a8a4()": {
	  "prefix": "N_0xaeab987727c5a8a4",
	  "body": [
		"N_0xaeab987727c5a8a4(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xaeef48cdf5b6ce7c()": {
	  "prefix": "N_0xaeef48cdf5b6ce7c",
	  "body": [
		"N_0xaeef48cdf5b6ce7c(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xb07d3185e11657a5()": {
	  "prefix": "N_0xb07d3185e11657a5",
	  "body": [
		"N_0xb07d3185e11657a5(${1:Entity p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xb13e88e655e5a3bc()": {
	  "prefix": "N_0xb13e88e655e5a3bc",
	  "body": [
		"N_0xb13e88e655e5a3bc()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xb2092a1eaa7fd45f()": {
	  "prefix": "N_0xb2092a1eaa7fd45f",
	  "body": [
		"N_0xb2092a1eaa7fd45f(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xb309ebea797e001f()": {
	  "prefix": "N_0xb309ebea797e001f",
	  "body": [
		"N_0xb309ebea797e001f(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xb37e4e6a2388ca7b()": {
	  "prefix": "N_0xb37e4e6a2388ca7b",
	  "body": [
		"N_0xb37e4e6a2388ca7b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xb57a49545ba53ce7()": {
	  "prefix": "N_0xb57a49545ba53ce7",
	  "body": [
		"N_0xb57a49545ba53ce7(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xb4271092ca7edf48()": {
	  "prefix": "N_0xb4271092ca7edf48",
	  "body": [
		"N_0xb4271092ca7edf48(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xb606e6cc59664972()": {
	  "prefix": "N_0xb606e6cc59664972",
	  "body": [
		"N_0xb606e6cc59664972(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0xb5d3453c98456528()": {
	  "prefix": "N_0xb5d3453c98456528",
	  "body": [
		"N_0xb5d3453c98456528()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xb746d20b17f2a229()": {
	  "prefix": "N_0xb746d20b17f2a229",
	  "body": [
		"N_0xb746d20b17f2a229(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xba7f0b77d80a4eb7()": {
	  "prefix": "N_0xba7f0b77d80a4eb7",
	  "body": [
		"N_0xba7f0b77d80a4eb7(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xb7c7f6ad6424304b()": {
	  "prefix": "N_0xb7c7f6ad6424304b",
	  "body": [
		"N_0xb7c7f6ad6424304b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xba96394a0eecfa65()": {
	  "prefix": "N_0xba96394a0eecfa65",
	  "body": [
		"N_0xba96394a0eecfa65()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xba9775570db788cf()": {
	  "prefix": "N_0xba9775570db788cf",
	  "body": [
		"N_0xba9775570db788cf()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xbd0be0bfc927eac1()": {
	  "prefix": "N_0xbd0be0bfc927eac1",
	  "body": [
		"N_0xbd0be0bfc927eac1()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xbaf6babf9e7ccc13()": {
	  "prefix": "N_0xbaf6babf9e7ccc13",
	  "body": [
		"N_0xbaf6babf9e7ccc13(${1:int p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xbd545d44cce70597()": {
	  "prefix": "N_0xbd545d44cce70597",
	  "body": [
		"N_0xbd545d44cce70597()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nMulleDK19: This function is hard-coded to always return 1.  \n"
	},
	"N_0xbdb6f89c729cf388()": {
	  "prefix": "N_0xbdb6f89c729cf388",
	  "body": [
		"N_0xbdb6f89c729cf388()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xbec0816ff5acbcda()": {
	  "prefix": "N_0xbec0816ff5acbcda",
	  "body": [
		"N_0xbec0816ff5acbcda(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xbf09786a7fcab582()": {
	  "prefix": "N_0xbf09786a7fcab582",
	  "body": [
		"N_0xbf09786a7fcab582(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc0d2af00bcc234ca()": {
	  "prefix": "N_0xc0d2af00bcc234ca",
	  "body": [
		"N_0xc0d2af00bcc234ca()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xbf22e0f32968e967()": {
	  "prefix": "N_0xbf22e0f32968e967",
	  "body": [
		"N_0xbf22e0f32968e967(${1:Player player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nrespawn player  \n"
	},
	"N_0xc22912b1d85f26b1()": {
	  "prefix": "N_0xc22912b1d85f26b1",
	  "body": [
		"N_0xc22912b1d85f26b1(${1:int p0}, ${2:int* p1}, ${3:Vector3* p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSeems to return time in vector3  \n"
	},
	"N_0xc32ea7a2f6ca7557()": {
	  "prefix": "N_0xc32ea7a2f6ca7557",
	  "body": [
		"N_0xc32ea7a2f6ca7557()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc3bfed92026a2aad()": {
	  "prefix": "N_0xc3bfed92026a2aad",
	  "body": [
		"N_0xc3bfed92026a2aad(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc42dd763159f3461()": {
	  "prefix": "N_0xc42dd763159f3461",
	  "body": [
		"N_0xc42dd763159f3461()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc505036a35afd01b()": {
	  "prefix": "N_0xc505036a35afd01b",
	  "body": [
		"N_0xc505036a35afd01b(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xc434133d9ba52777()": {
	  "prefix": "N_0xc434133d9ba52777",
	  "body": [
		"N_0xc434133d9ba52777(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc571d0e77d8bbc29()": {
	  "prefix": "N_0xc571d0e77d8bbc29",
	  "body": [
		"N_0xc571d0e77d8bbc29()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nNETWORK_IS_TRANSITION_???  \n"
	},
	"N_0xc55a0b40ffb1ed23()": {
	  "prefix": "N_0xc55a0b40ffb1ed23",
	  "body": [
		"N_0xc55a0b40ffb1ed23()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc64ded7ef0d2fe37()": {
	  "prefix": "N_0xc64ded7ef0d2fe37",
	  "body": [
		"N_0xc64ded7ef0d2fe37(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc7397a83f7a2a462()": {
	  "prefix": "N_0xc7397a83f7a2a462",
	  "body": [
		"N_0xc7397a83f7a2a462(${1:Any* p0}, ${2:Any p1}, ${3:BOOL p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xc7be335216b5ec7c()": {
	  "prefix": "N_0xc7be335216b5ec7c",
	  "body": [
		"N_0xc7be335216b5ec7c()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc7abac5de675ee3b()": {
	  "prefix": "N_0xc7abac5de675ee3b",
	  "body": [
		"N_0xc7abac5de675ee3b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc87e740d9f3872cc()": {
	  "prefix": "N_0xc87e740d9f3872cc",
	  "body": [
		"N_0xc87e740d9f3872cc()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xca94551b50b4932c()": {
	  "prefix": "N_0xca94551b50b4932c",
	  "body": [
		"N_0xca94551b50b4932c(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc9b43a33d09cada7()": {
	  "prefix": "N_0xc9b43a33d09cada7",
	  "body": [
		"N_0xc9b43a33d09cada7(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xcca4318e1ab03f1f()": {
	  "prefix": "N_0xcca4318e1ab03f1f",
	  "body": [
		"N_0xcca4318e1ab03f1f(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xca575c391fea25cc()": {
	  "prefix": "N_0xca575c391fea25cc",
	  "body": [
		"N_0xca575c391fea25cc(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xcb215c4b56a7fae7()": {
	  "prefix": "N_0xcb215c4b56a7fae7",
	  "body": [
		"N_0xcb215c4b56a7fae7(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0xcae55f48d3d7875c()": {
	  "prefix": "N_0xcae55f48d3d7875c",
	  "body": [
		"N_0xcae55f48d3d7875c(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xcd71a4ecab22709e()": {
	  "prefix": "N_0xcd71a4ecab22709e",
	  "body": [
		"N_0xcd71a4ecab22709e(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xcfd115b373c0df63()": {
	  "prefix": "N_0xcfd115b373c0df63",
	  "body": [
		"N_0xcfd115b373c0df63(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xcf61d4b4702ee9eb()": {
	  "prefix": "N_0xcf61d4b4702ee9eb",
	  "body": [
		"N_0xcf61d4b4702ee9eb()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0xcfeb8af24fc1d0bb()": {
	  "prefix": "N_0xcfeb8af24fc1d0bb",
	  "body": "N_0xcfeb8af24fc1d0bb",
	  "description": "OLD NAME, PLEASE USE NetworkBlockInvites_2 INSTEAD!"
	},
	"NetworkBlockInvites_2()": {
	  "prefix": "NetworkBlockInvites_2",
	  "body": [
		"NetworkBlockInvites_2(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xcfeb8af24fc1d0bb"
	},
	"N_0xd05d1a6c74da3498()": {
	  "prefix": "N_0xd05d1a6c74da3498",
	  "body": [
		"N_0xd05d1a6c74da3498(${1:Any* p0}, ${2:BOOL p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xcfeb46dcd7d8d5eb()": {
	  "prefix": "N_0xcfeb46dcd7d8d5eb",
	  "body": [
		"N_0xcfeb46dcd7d8d5eb(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xd313de83394af134()": {
	  "prefix": "N_0xd313de83394af134",
	  "body": [
		"N_0xd313de83394af134()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xd0a484cb2f829fbe()": {
	  "prefix": "N_0xd0a484cb2f829fbe",
	  "body": [
		"N_0xd0a484cb2f829fbe()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nx360 Hash: 0xF637166E  \n"
	},
	"N_0xd39b3fff8ffdd5bf()": {
	  "prefix": "N_0xd39b3fff8ffdd5bf",
	  "body": [
		"N_0xd39b3fff8ffdd5bf(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xd38c4a6d047c019d()": {
	  "prefix": "N_0xd38c4a6d047c019d",
	  "body": [
		"N_0xd38c4a6d047c019d()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xd5a4b59980401588()": {
	  "prefix": "N_0xd5a4b59980401588",
	  "body": [
		"N_0xd5a4b59980401588(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xd53acdbef24a46e8()": {
	  "prefix": "N_0xd53acdbef24a46e8",
	  "body": [
		"N_0xd53acdbef24a46e8()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xdeb2b99a1af1a2a6()": {
	  "prefix": "N_0xdeb2b99a1af1a2a6",
	  "body": [
		"N_0xdeb2b99a1af1a2a6(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xd66c9e72b3cc4982()": {
	  "prefix": "N_0xd66c9e72b3cc4982",
	  "body": [
		"N_0xd66c9e72b3cc4982(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0xd7b6c73cad419bcf()": {
	  "prefix": "N_0xd7b6c73cad419bcf",
	  "body": [
		"N_0xd7b6c73cad419bcf(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xe0a6138401bcb837()": {
	  "prefix": "N_0xe0a6138401bcb837",
	  "body": [
		"N_0xe0a6138401bcb837()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xdffa5be8381c3314()": {
	  "prefix": "N_0xdffa5be8381c3314",
	  "body": [
		"N_0xdffa5be8381c3314()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xe16aa70ce9beedc3()": {
	  "prefix": "N_0xe16aa70ce9beedc3",
	  "body": [
		"N_0xe16aa70ce9beedc3(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xe64a3ca08dfa37a9()": {
	  "prefix": "N_0xe64a3ca08dfa37a9",
	  "body": [
		"N_0xe64a3ca08dfa37a9(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xe66c690248f11150()": {
	  "prefix": "N_0xe66c690248f11150",
	  "body": [
		"N_0xe66c690248f11150(${1:Entity p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xe9b99b6853181409()": {
	  "prefix": "N_0xe9b99b6853181409",
	  "body": [
		"N_0xe9b99b6853181409()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xe6717e652b8c8d8a()": {
	  "prefix": "N_0xe6717e652b8c8d8a",
	  "body": [
		"N_0xe6717e652b8c8d8a(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xebcab9e5048434f4()": {
	  "prefix": "N_0xebcab9e5048434f4",
	  "body": [
		"N_0xebcab9e5048434f4()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nMulleDK19: This function is hard-coded to always return 1.  \n"
	},
	"N_0xea14eef5b7cd2c30()": {
	  "prefix": "N_0xea14eef5b7cd2c30",
	  "body": [
		"N_0xea14eef5b7cd2c30()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xebefc2e77084f599()": {
	  "prefix": "N_0xebefc2e77084f599",
	  "body": [
		"N_0xebefc2e77084f599(${1:Any p0}, ${2:char* p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nexample from scripts:  \nunk_0xE0C28DB5(0,Global_2398291.imm_726,1);  \nthat global is for ps3/xbox not pc  \nno idea what this does does  \n"
	},
	"N_0xebf8284d8cadeb53()": {
	  "prefix": "N_0xebf8284d8cadeb53",
	  "body": [
		"N_0xebf8284d8cadeb53()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xebfa8d50addc54c4()": {
	  "prefix": "N_0xebfa8d50addc54c4",
	  "body": [
		"N_0xebfa8d50addc54c4(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xef0912ddf7c4cb4b()": {
	  "prefix": "N_0xef0912ddf7c4cb4b",
	  "body": [
		"N_0xef0912ddf7c4cb4b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\ndont know what this native does but im storing some documentation here  \n_NETWORK_VOICE_CONNECT_TO_PLAYER  \n_NETWORK_GET_GAMER_STATUS  \n_NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED  \n_NETWORK_SEND_PRESENCE_INVITE  \n_NETWORK_SEND_PRESENCE_TRANSITION_INVITE  \n_NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE  \n_NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE  \n_NETWORK_CAN_COMMUNICATE_WITH_GAMER  \n_NETWORK_CRC_HASH_CHECK_EVENT  \n"
	},
	"N_0xedf7f927136c224b()": {
	  "prefix": "N_0xedf7f927136c224b",
	  "body": [
		"N_0xedf7f927136c224b()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xf03755696450470c()": {
	  "prefix": "N_0xf03755696450470c",
	  "body": [
		"N_0xf03755696450470c()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf083835b70ba9bfe()": {
	  "prefix": "N_0xf083835b70ba9bfe",
	  "body": [
		"N_0xf083835b70ba9bfe()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf12e6cd06c73d69e()": {
	  "prefix": "N_0xf12e6cd06c73d69e",
	  "body": [
		"N_0xf12e6cd06c73d69e()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xf1b84178f8674195()": {
	  "prefix": "N_0xf1b84178f8674195",
	  "body": [
		"N_0xf1b84178f8674195(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf1eea2dda9ffa69d()": {
	  "prefix": "N_0xf1eea2dda9ffa69d",
	  "body": [
		"N_0xf1eea2dda9ffa69d(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf287f506767cc8a9()": {
	  "prefix": "N_0xf287f506767cc8a9",
	  "body": [
		"N_0xf287f506767cc8a9()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xf2eac213d5ea0623()": {
	  "prefix": "N_0xf2eac213d5ea0623",
	  "body": [
		"N_0xf2eac213d5ea0623()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xf45352426ff3a4f0()": {
	  "prefix": "N_0xf45352426ff3a4f0",
	  "body": [
		"N_0xf45352426ff3a4f0(${1:int* clanDesc}, ${2:int bufferSize}, ${3:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nbufferSize is 35 in the scripts.  \n"
	},
	"N_0xf49abc20d8552257()": {
	  "prefix": "N_0xf49abc20d8552257",
	  "body": [
		"N_0xf49abc20d8552257(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf46a1e03e8755980()": {
	  "prefix": "N_0xf46a1e03e8755980",
	  "body": [
		"N_0xf46a1e03e8755980(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf53e48461b71eecb()": {
	  "prefix": "N_0xf53e48461b71eecb",
	  "body": [
		"N_0xf53e48461b71eecb(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xf814fec6a19fd6e0()": {
	  "prefix": "N_0xf814fec6a19fd6e0",
	  "body": [
		"N_0xf814fec6a19fd6e0()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf6f4383b7c92f11a()": {
	  "prefix": "N_0xf6f4383b7c92f11a",
	  "body": [
		"N_0xf6f4383b7c92f11a(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf98dde0a8ed09323()": {
	  "prefix": "N_0xf98dde0a8ed09323",
	  "body": [
		"N_0xf98dde0a8ed09323(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xf9b83b77929d8863()": {
	  "prefix": "N_0xf9b83b77929d8863",
	  "body": [
		"N_0xf9b83b77929d8863()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xf9e1ccae8ba4c281()": {
	  "prefix": "N_0xf9e1ccae8ba4c281",
	  "body": [
		"N_0xf9e1ccae8ba4c281(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xfa2888e3833c8e96()": {
	  "prefix": "N_0xfa2888e3833c8e96",
	  "body": [
		"N_0xfa2888e3833c8e96()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xfae628f1e9adb239()": {
	  "prefix": "N_0xfae628f1e9adb239",
	  "body": [
		"N_0xfae628f1e9adb239(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xfb1f9381e80fa13f()": {
	  "prefix": "N_0xfb1f9381e80fa13f",
	  "body": [
		"N_0xfb1f9381e80fa13f(${1:int p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\np0 is always 0. p1 is pointing to a global.  \n"
	},
	"N_0xfafc23aee23868db()": {
	  "prefix": "N_0xfafc23aee23868db",
	  "body": [
		"N_0xfafc23aee23868db()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xfb680d403909dc70()": {
	  "prefix": "N_0xfb680d403909dc70",
	  "body": [
		"N_0xfb680d403909dc70(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xfb8f2a6f3df08cbe()": {
	  "prefix": "N_0xfb8f2a6f3df08cbe",
	  "body": [
		"N_0xfb8f2a6f3df08cbe()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xfc18db55ae19e046()": {
	  "prefix": "N_0xfc18db55ae19e046",
	  "body": [
		"N_0xfc18db55ae19e046(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xfbc5e768c7a77a6a()": {
	  "prefix": "N_0xfbc5e768c7a77a6a",
	  "body": [
		"N_0xfbc5e768c7a77a6a()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xfd75dabc0957bf33()": {
	  "prefix": "N_0xfd75dabc0957bf33",
	  "body": [
		"N_0xfd75dabc0957bf33(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xfd8b834a8ba05048()": {
	  "prefix": "N_0xfd8b834a8ba05048",
	  "body": [
		"N_0xfd8b834a8ba05048()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nNETWORK_IS_IN_???  \n"
	},
	"N_0xffe1e5b792d92b34()": {
	  "prefix": "N_0xffe1e5b792d92b34",
	  "body": [
		"N_0xffe1e5b792d92b34()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nmay be 0xBF21818E  \nrelated to: NETWORK_BAIL  \nNETWORK_BAIL_TRANSITION  \nNETWORK_JOIN_GROUP_ACTIVITY  \nNETWORK_JOIN_TRANSITION  \nNETWORK_LAUNCH_TRANSITION  \nNETWORK_SESSION_HOST  \nNETWORK_SESSION_HOST_CLOSED  \nNETWORK_SESSION_HOST_FRIENDS_ONLY  \nNETWORK_SESSION_HOST_SINGLE_PLAYER  \nNETWORK_SESSION_VOICE_LEAVE  \n"
	},
	"NetToObj()": {
	  "prefix": "NetToObj",
	  "body": [
		"NetToObj(${1:int netHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Object\n\ngets the object id of a network id  \n"
	},
	"NetToEnt()": {
	  "prefix": "NetToEnt",
	  "body": [
		"NetToEnt(${1:int netHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Entity\n\ngets the entity id of a network id  \n"
	},
	"NetToPed()": {
	  "prefix": "NetToPed",
	  "body": [
		"NetToPed(${1:int netHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Ped\n\ngets the ped id of a network id  \n"
	},
	"NetToVeh()": {
	  "prefix": "NetToVeh",
	  "body": [
		"NetToVeh(${1:int netHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Vehicle\n"
	},
	"NetworkAcceptPresenceInvite()": {
	  "prefix": "NetworkAcceptPresenceInvite",
	  "body": [
		"NetworkAcceptPresenceInvite(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xc7420099936ce286()": {
	  "prefix": "N_0xc7420099936ce286",
	  "body": "N_0xc7420099936ce286",
	  "description": "OLD NAME, PLEASE USE NetworkAccessTunableBoolHashFailVal INSTEAD!"
	},
	"NetworkAccessTunableBoolHashFailVal()": {
	  "prefix": "NetworkAccessTunableBoolHashFailVal",
	  "body": [
		"NetworkAccessTunableBoolHashFailVal(${1:Hash tunableContext}, ${2:Hash tunableName}, ${3:BOOL defaultValue})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nReturns a default value if the tunable don't exist.  \nConsole Hash  \n\nOld name: N_0xc7420099936ce286"
	},
	"N_0xe5608ca7bc163a5f()": {
	  "prefix": "N_0xe5608ca7bc163a5f",
	  "body": "N_0xe5608ca7bc163a5f",
	  "description": "OLD NAME, PLEASE USE NetworkAccessTunableFloat INSTEAD!"
	},
	"NetworkAccessTunableFloat()": {
	  "prefix": "NetworkAccessTunableFloat",
	  "body": [
		"NetworkAccessTunableFloat(${1:char* tunableContext}, ${2:char* tunableName}, ${3:float* value})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSome of the tunable contexts used in the PC scripts:  \n- \"BASE_GLOBALS\"  \n- \"MP_GLOBAL\"  \n- \"MP_FM_RACES\"  \n- \"MP_FM_RACES_CAR\"  \n- \"MP_FM_RACES_SEA\"  \n- \"MP_FM_RACES_CAR\"  \n- \"MP_FM_RACES_AIR\"  \n- \"MP_FM_BASEJUMP\"  \n- \"MP_FM_RACES_CYCLE\"  \n- \"MP_FM_RACES_BIKE\"  \n- \"MP_FM_MISSIONS\"  \n- \"MP_FM_CONTACT\"  \n- \"MP_FM_RANDOM\"  \n- \"MP_FM_VERSUS\"  \n- \"MP_FM_LTS\"  \n- \"MP_FM_CAPTURE\"  \n- \"MP_FM_DM\"  \n- \"MP_FM_SURVIVAL\"  \n- \"MP_FM_GANG_ATTACK\"  \n- \"MP_FM_BASEJUMP\"  \n- \"MP_CNC_TEAM_COP\"  \n- \"MP_CNC_TEAM_VAGOS\"  \n- \"MP_CNC_TEAM_LOST\"  \nand some of the tunable names used in the PC scripts:  \n- \"XP_MULTIPLIER\"  \n- \"CASH_MULTIPLIER\"  \n- \"ARMOUR_REWARD_GIFT\"  \n- \"TOGGLE_CREATORS_OFF\"  \n\nOld name: N_0xe5608ca7bc163a5f"
	},
	"N_0xaa6a47a573abb75a()": {
	  "prefix": "N_0xaa6a47a573abb75a",
	  "body": "N_0xaa6a47a573abb75a",
	  "description": "OLD NAME, PLEASE USE NetworkAccessTunableBool INSTEAD!"
	},
	"NetworkAccessTunableBool()": {
	  "prefix": "NetworkAccessTunableBool",
	  "body": [
		"NetworkAccessTunableBool(${1:char* tunableContext}, ${2:char* tunableName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSome of the tunable contexts used in the PC scripts:  \n- \"BASE_GLOBALS\"  \n- \"MP_GLOBAL\"  \nand some of the tunable names used in the PC scripts:  \n- \"XP_MULTIPLIER\"  \n- \"CASH_MULTIPLIER\"  \n- \"ARMOUR_REWARD_GIFT\"  \n- \"TOGGLE_CREATORS_OFF\"  \n- \"MULTIPLAYER_DISABLED\"  \n\nOld name: N_0xaa6a47a573abb75a"
	},
	"N_0xea16b69d93d71a45()": {
	  "prefix": "N_0xea16b69d93d71a45",
	  "body": "N_0xea16b69d93d71a45",
	  "description": "OLD NAME, PLEASE USE NetworkAccessTunableBoolHash INSTEAD!"
	},
	"NetworkAccessTunableBoolHash()": {
	  "prefix": "NetworkAccessTunableBoolHash",
	  "body": [
		"NetworkAccessTunableBoolHash(${1:Hash tunableContext}, ${2:Hash tunableName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nConsole Hash - 0x18867C61 = NETWORK_ACCESS_TUNABLE_BOOL_HASH  \n\nOld name: N_0xea16b69d93d71a45"
	},
	"N_0x40fce03e50e8dbe8()": {
	  "prefix": "N_0x40fce03e50e8dbe8",
	  "body": "N_0x40fce03e50e8dbe8",
	  "description": "OLD NAME, PLEASE USE NetworkAccessTunableIntHash INSTEAD!"
	},
	"NetworkAccessTunableIntHash()": {
	  "prefix": "NetworkAccessTunableIntHash",
	  "body": [
		"NetworkAccessTunableIntHash(${1:Hash tunableContext}, ${2:Hash tunableName}, ${3:int* value})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nConsole Hash - 0xB2E83B75 = NETWORK_ACCESS_TUNABLE_INT_HASH  \n\nOld name: N_0x40fce03e50e8dbe8"
	},
	"N_0x972bc203bbc4c4d5()": {
	  "prefix": "N_0x972bc203bbc4c4d5",
	  "body": "N_0x972bc203bbc4c4d5",
	  "description": "OLD NAME, PLEASE USE NetworkAccessTunableFloatHash INSTEAD!"
	},
	"NetworkAccessTunableFloatHash()": {
	  "prefix": "NetworkAccessTunableFloatHash",
	  "body": [
		"NetworkAccessTunableFloatHash(${1:Hash tunableContext}, ${2:Hash tunableName}, ${3:float* value})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nConsole Hash - 0x3972551F = NETWORK_ACCESS_TUNABLE_FLOAT_HASH  \n\nOld name: N_0x972bc203bbc4c4d5"
	},
	"N_0xc88156ebb786f8d5()": {
	  "prefix": "N_0xc88156ebb786f8d5",
	  "body": "N_0xc88156ebb786f8d5",
	  "description": "OLD NAME, PLEASE USE NetworkActionFollowInvite INSTEAD!"
	},
	"NetworkActionFollowInvite()": {
	  "prefix": "NetworkActionFollowInvite",
	  "body": [
		"NetworkActionFollowInvite()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0xc88156ebb786f8d5"
	},
	"N_0x8be1146dfd5d4468()": {
	  "prefix": "N_0x8be1146dfd5d4468",
	  "body": "N_0x8be1146dfd5d4468",
	  "description": "OLD NAME, PLEASE USE NetworkAccessTunableInt INSTEAD!"
	},
	"NetworkAccessTunableInt()": {
	  "prefix": "NetworkAccessTunableInt",
	  "body": [
		"NetworkAccessTunableInt(${1:char* tunableContext}, ${2:char* tunableName}, ${3:int* value})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSome of the tunable contexts used in the PC scripts:  \n- \"MP_FM_RACES\"  \n- \"MP_FM_RACES_CAR\"  \n- \"MP_FM_RACES_SEA\"  \n- \"MP_FM_RACES_CAR\"  \n- \"MP_FM_RACES_AIR\"  \n- \"MP_FM_BASEJUMP\"  \n- \"MP_FM_RACES_CYCLE\"  \n- \"MP_FM_RACES_BIKE\"  \n- \"MP_FM_MISSIONS\"  \n- \"MP_FM_CONTACT\"  \n- \"MP_FM_RANDOM\"  \n- \"MP_FM_VERSUS\"  \n- \"MP_FM_LTS\"  \n- \"MP_FM_CAPTURE\"  \n- \"MP_FM_DM\"  \n- \"MP_FM_SURVIVAL\"  \n- \"MP_FM_GANG_ATTACK\"  \n- \"MP_FM_BASEJUMP\"  \n- \"BASE_GLOBALS\"  \n- \"MP_GLOBAL\"  \nand some of the tunable names used in the PC scripts:  \n- \"XP_MULTIPLIER\"  \n- \"CASH_MULTIPLIER\"  \n- \"ARMOUR_REWARD_GIFT\"  \n- \"TOGGLE_CREATORS_OFF\"  \n\nOld name: N_0x8be1146dfd5d4468"
	},
	"NetworkAddEntityArea()": {
	  "prefix": "NetworkAddEntityArea",
	  "body": [
		"NetworkAddEntityArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0x236406f60cf216d6()": {
	  "prefix": "N_0x236406f60cf216d6",
	  "body": "N_0x236406f60cf216d6",
	  "description": "OLD NAME, PLEASE USE NetworkAddFollowers INSTEAD!"
	},
	"NetworkAddFollowers()": {
	  "prefix": "NetworkAddFollowers",
	  "body": [
		"NetworkAddFollowers(${1:int* p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\n..  \n\nOld name: N_0x236406f60cf216d6"
	},
	"N_0x376c6375ba60293a()": {
	  "prefix": "N_0x376c6375ba60293a",
	  "body": "N_0x376c6375ba60293a",
	  "description": "OLD NAME, PLEASE USE NetworkAddEntityAngledArea INSTEAD!"
	},
	"NetworkAddEntityAngledArea()": {
	  "prefix": "NetworkAddEntityAngledArea",
	  "body": [
		"NetworkAddEntityAngledArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nConsole hash: 0xCD69BEA1  \n\nOld name: N_0x376c6375ba60293a"
	},
	"NetworkAddEntityToSynchronisedScene()": {
	  "prefix": "NetworkAddEntityToSynchronisedScene",
	  "body": [
		"NetworkAddEntityToSynchronisedScene(${1:Entity entity}, ${2:int netScene}, ${3:char* animDict}, ${4:char* animName}, ${5:float speed}, ${6:float speedMulitiplier}, ${7:int flag})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkAddPedToSynchronisedScene()": {
	  "prefix": "NetworkAddPedToSynchronisedScene",
	  "body": [
		"NetworkAddPedToSynchronisedScene(${1:Ped ped}, ${2:int netScene}, ${3:char* animDict}, ${4:char* animnName}, ${5:float speed}, ${6:float speedMultiplier}, ${7:int duration}, ${8:int flag}, ${9:float playbackRate}, ${10:Any p9})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkAddFriend()": {
	  "prefix": "NetworkAddFriend",
	  "body": [
		"NetworkAddFriend(${1:int* networkHandle}, ${2:char* message})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkAmIBlockedByGamer()": {
	  "prefix": "NetworkAmIBlockedByGamer",
	  "body": [
		"NetworkAmIBlockedByGamer(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkAmIMutedByGamer()": {
	  "prefix": "NetworkAmIMutedByGamer",
	  "body": [
		"NetworkAmIMutedByGamer(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkAmIBlockedByPlayer()": {
	  "prefix": "NetworkAmIBlockedByPlayer",
	  "body": [
		"NetworkAmIBlockedByPlayer(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkAmIMutedByPlayer()": {
	  "prefix": "NetworkAmIMutedByPlayer",
	  "body": [
		"NetworkAmIMutedByPlayer(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x521638ada1ba0d18()": {
	  "prefix": "N_0x521638ada1ba0d18",
	  "body": "N_0x521638ada1ba0d18",
	  "description": "OLD NAME, PLEASE USE NetworkApplyTransitionParameter INSTEAD!"
	},
	"NetworkApplyTransitionParameter()": {
	  "prefix": "NetworkApplyTransitionParameter",
	  "body": [
		"NetworkApplyTransitionParameter(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x521638ada1ba0d18"
	},
	"N_0x85443ff4c328f53b()": {
	  "prefix": "N_0x85443ff4c328f53b",
	  "body": "N_0x85443ff4c328f53b",
	  "description": "OLD NAME, PLEASE USE NetworkAreRosAvailable INSTEAD!"
	},
	"NetworkAreRosAvailable()": {
	  "prefix": "NetworkAreRosAvailable",
	  "body": [
		"NetworkAreRosAvailable()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nReturns whether the Rockstar game services are available or not:  \nSCLB_NO_ROS = The Rockstar game services are unavailable right now. Please try again later.  \nros.rockstargames.com  \n\nOld name: N_0x85443ff4c328f53b"
	},
	"NetworkAttachSynchronisedSceneToEntity()": {
	  "prefix": "NetworkAttachSynchronisedSceneToEntity",
	  "body": [
		"NetworkAttachSynchronisedSceneToEntity(${1:int netScene}, ${2:Entity entity}, ${3:int bone})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkAreHandlesTheSame()": {
	  "prefix": "NetworkAreHandlesTheSame",
	  "body": [
		"NetworkAreHandlesTheSame(${1:int* netHandle1}, ${2:int* netHandle2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkBailTransition()": {
	  "prefix": "NetworkBailTransition",
	  "body": [
		"NetworkBailTransition()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x2615aa2a695930c1()": {
	  "prefix": "N_0x2615aa2a695930c1",
	  "body": "N_0x2615aa2a695930c1",
	  "description": "OLD NAME, PLEASE USE NetworkAreTransitionDetailsValid INSTEAD!"
	},
	"NetworkAreTransitionDetailsValid()": {
	  "prefix": "NetworkAreTransitionDetailsValid",
	  "body": [
		"NetworkAreTransitionDetailsValid(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x2615aa2a695930c1"
	},
	"NetworkBlockInvites()": {
	  "prefix": "NetworkBlockInvites",
	  "body": [
		"NetworkBlockInvites(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x6b07b9ce4d390375()": {
	  "prefix": "N_0x6b07b9ce4d390375",
	  "body": "N_0x6b07b9ce4d390375",
	  "description": "OLD NAME, PLEASE USE NetworkBlockKickedPlayers INSTEAD!"
	},
	"NetworkBlockKickedPlayers()": {
	  "prefix": "NetworkBlockKickedPlayers",
	  "body": [
		"NetworkBlockKickedPlayers(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x6b07b9ce4d390375"
	},
	"NetworkBail()": {
	  "prefix": "NetworkBail",
	  "body": [
		"NetworkBail()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nThis has arguments.. in PC scripts.  \n"
	},
	"NetworkCanCommunicateWithGamer()": {
	  "prefix": "NetworkCanCommunicateWithGamer",
	  "body": [
		"NetworkCanCommunicateWithGamer(${1:int* player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkCanEnterMultiplayer()": {
	  "prefix": "NetworkCanEnterMultiplayer",
	  "body": [
		"NetworkCanEnterMultiplayer()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkCanSessionEnd()": {
	  "prefix": "NetworkCanSessionEnd",
	  "body": [
		"NetworkCanSessionEnd()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xaf50da1a3f8b1ba4()": {
	  "prefix": "N_0xaf50da1a3f8b1ba4",
	  "body": "N_0xaf50da1a3f8b1ba4",
	  "description": "OLD NAME, PLEASE USE NetworkCanAccessMultiplayer INSTEAD!"
	},
	"NetworkCanAccessMultiplayer()": {
	  "prefix": "NetworkCanAccessMultiplayer",
	  "body": [
		"NetworkCanAccessMultiplayer(${1:int* loadingState})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\n11 - Need to download tunables.  \n12 - Need to download background script.  \nReturns 1 if the multiplayer is loaded, otherwhise 0.  \n\nOld name: N_0xaf50da1a3f8b1ba4"
	},
	"NetworkCanBail()": {
	  "prefix": "NetworkCanBail",
	  "body": [
		"NetworkCanBail()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xeeeda5e6d7080987()": {
	  "prefix": "N_0xeeeda5e6d7080987",
	  "body": "N_0xeeeda5e6d7080987",
	  "description": "OLD NAME, PLEASE USE NetworkChangeTransitionSlots INSTEAD!"
	},
	"NetworkChangeTransitionSlots()": {
	  "prefix": "NetworkChangeTransitionSlots",
	  "body": [
		"NetworkChangeTransitionSlots(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xeeeda5e6d7080987"
	},
	"N_0x796a87b3b68d1f3d()": {
	  "prefix": "N_0x796a87b3b68d1f3d",
	  "body": "N_0x796a87b3b68d1f3d",
	  "description": "OLD NAME, PLEASE USE NetworkCheckDataManagerForHandle INSTEAD!"
	},
	"NetworkCheckDataManagerForHandle()": {
	  "prefix": "NetworkCheckDataManagerForHandle",
	  "body": [
		"NetworkCheckDataManagerForHandle(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nconsole hash: 0x3624F054  \n\nOld name: N_0x796a87b3b68d1f3d"
	},
	"N_0xa1607996431332df()": {
	  "prefix": "N_0xa1607996431332df",
	  "body": "N_0xa1607996431332df",
	  "description": "OLD NAME, PLEASE USE NetworkCanNetworkIdBeSeen INSTEAD!"
	},
	"NetworkCanNetworkIdBeSeen()": {
	  "prefix": "NetworkCanNetworkIdBeSeen",
	  "body": [
		"NetworkCanNetworkIdBeSeen(${1:int netId})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xa1607996431332df"
	},
	"N_0x729e3401f0430686()": {
	  "prefix": "N_0x729e3401f0430686",
	  "body": "N_0x729e3401f0430686",
	  "description": "OLD NAME, PLEASE USE NetworkClanAnimation INSTEAD!"
	},
	"NetworkClanAnimation()": {
	  "prefix": "NetworkClanAnimation",
	  "body": [
		"NetworkClanAnimation(${1:char* animDict}, ${2:char* animName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOnly documented...  \n\nOld name: N_0x729e3401f0430686"
	},
	"NetworkCanSetWaypoint()": {
	  "prefix": "NetworkCanSetWaypoint",
	  "body": [
		"NetworkCanSetWaypoint()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkClanDownloadMembershipPending()": {
	  "prefix": "NetworkClanDownloadMembershipPending",
	  "body": [
		"NetworkClanDownloadMembershipPending(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x57b192b4d4ad23d5()": {
	  "prefix": "N_0x57b192b4d4ad23d5",
	  "body": "N_0x57b192b4d4ad23d5",
	  "description": "OLD NAME, PLEASE USE NetworkChatMute INSTEAD!"
	},
	"NetworkChatMute()": {
	  "prefix": "NetworkChatMute",
	  "body": [
		"NetworkChatMute(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nthis function is toggle when people report you and you get the auto mute message  \n\nOld name: N_0x57b192b4d4ad23d5"
	},
	"NetworkClanGetMembershipCount()": {
	  "prefix": "NetworkClanGetMembershipCount",
	  "body": [
		"NetworkClanGetMembershipCount(${1:int* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"NetworkClanDownloadMembership()": {
	  "prefix": "NetworkClanDownloadMembership",
	  "body": [
		"NetworkClanDownloadMembership(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkClanGetMembershipValid()": {
	  "prefix": "NetworkClanGetMembershipValid",
	  "body": [
		"NetworkClanGetMembershipValid(${1:int* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkClanGetMembership()": {
	  "prefix": "NetworkClanGetMembership",
	  "body": [
		"NetworkClanGetMembership(${1:int* p0}, ${2:int* clanMembership}, ${3:int p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nBOOL DEBUG_MEMBRESHIP(int Param)  \n{  \n\tint membership;  \n\tnetworkHandleMgr handle;  \n\tNETWORK_HANDLE_FROM_PLAYER(iSelectedPlayer, &handle.netHandle, 13);  \n\tif (!_NETWORK_IS_CLAN_MEMBERSHIP_FINISHED_DOWNLOADING())  \n\t{  \n\t\tif (NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(&Param))  \n\t\t{  \nif (NETWORK_CLAN_GET_MEMBERSHIP_COUNT(&Param) > 0)  \n{  \n\tif (NETWORK_CLAN_GET_MEMBERSHIP_VALID(&Param, 0))  \n\t{  \n\t\tif (NETWORK_CLAN_GET_MEMBERSHIP(&Param, &membership, -1))  \n\t\t{  \n_0xF633805A(&membership, 35, &handle.netHandle);  \n\t\t}  \n\t}  \n}  \n\t\t}  \n\t}  \n\telse  \n\t{  \n\t\tNETWORK_CLAN_DOWNLOAD_MEMBERSHIP(&handle.netHandle);  \n\t}  \n}  \n"
	},
	"NetworkClanJoin()": {
	  "prefix": "NetworkClanJoin",
	  "body": [
		"NetworkClanJoin(${1:int clanDesc})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkClanGetMembershipDesc()": {
	  "prefix": "NetworkClanGetMembershipDesc",
	  "body": [
		"NetworkClanGetMembershipDesc(${1:int* memberDesc}, ${2:int p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nnetworkMembershipMgr memShip;  \nint maxMemship = _GET_NUM_MEMBERSHIP_DESC();  \nfor (int i = 0; i < maxMemship; i++)  \n{  \n\tNETWORK_CLAN_GET_MEMBERSHIP_DESC(&memShip.memHandle, i);  \n}  \n"
	},
	"NetworkClanRemoteMembershipsAreInCache()": {
	  "prefix": "NetworkClanRemoteMembershipsAreInCache",
	  "body": [
		"NetworkClanRemoteMembershipsAreInCache(${1:int* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xd972df67326f966e()": {
	  "prefix": "N_0xd972df67326f966e",
	  "body": "N_0xd972df67326f966e",
	  "description": "OLD NAME, PLEASE USE NetworkClearClockTimeOverride INSTEAD!"
	},
	"NetworkClearClockTimeOverride()": {
	  "prefix": "NetworkClearClockTimeOverride",
	  "body": [
		"NetworkClearClockTimeOverride()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xd972df67326f966e"
	},
	"N_0x439bfde3cd0610f6()": {
	  "prefix": "N_0x439bfde3cd0610f6",
	  "body": "N_0x439bfde3cd0610f6",
	  "description": "OLD NAME, PLEASE USE NetworkClearFollowInvite INSTEAD!"
	},
	"NetworkClearFollowInvite()": {
	  "prefix": "NetworkClearFollowInvite",
	  "body": [
		"NetworkClearFollowInvite()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0x439bfde3cd0610f6"
	},
	"NetworkClanPlayerGetDesc()": {
	  "prefix": "NetworkClanPlayerGetDesc",
	  "body": [
		"NetworkClanPlayerGetDesc(${1:int* clanDesc}, ${2:int bufferSize}, ${3:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nbufferSize is 35 in the scripts.  \nbufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.  \nthe answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]  \npastebin.com/cSZniHak  \n"
	},
	"NetworkClanPlayerIsActive()": {
	  "prefix": "NetworkClanPlayerIsActive",
	  "body": [
		"NetworkClanPlayerIsActive(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xc2b82527ca77053e()": {
	  "prefix": "N_0xc2b82527ca77053e",
	  "body": "N_0xc2b82527ca77053e",
	  "description": "OLD NAME, PLEASE USE NetworkClearPropertyId INSTEAD!"
	},
	"NetworkClearPropertyId()": {
	  "prefix": "NetworkClearPropertyId",
	  "body": [
		"NetworkClearPropertyId()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xc2b82527ca77053e"
	},
	"NetworkClearTransitionCreatorHandle()": {
	  "prefix": "NetworkClearTransitionCreatorHandle",
	  "body": [
		"NetworkClearTransitionCreatorHandle()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkConcealEntity()": {
	  "prefix": "NetworkConcealEntity",
	  "body": [
		"NetworkConcealEntity(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x058f43ec59a8631a()": {
	  "prefix": "N_0x058f43ec59a8631a",
	  "body": "N_0x058f43ec59a8631a",
	  "description": "OLD NAME, PLEASE USE NetworkClearFollowers INSTEAD!"
	},
	"NetworkClearFollowers()": {
	  "prefix": "NetworkClearFollowers",
	  "body": [
		"NetworkClearFollowers()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x058f43ec59a8631a"
	},
	"NetworkConcealPlayer()": {
	  "prefix": "NetworkConcealPlayer",
	  "body": [
		"NetworkConcealPlayer(${1:Player player}, ${2:BOOL toggle}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\nThis is what R\\* uses to hide players in MP interiors."
	},
	"NetworkClearFoundGamers()": {
	  "prefix": "NetworkClearFoundGamers",
	  "body": [
		"NetworkClearFoundGamers()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x99b72c7abde5c910()": {
	  "prefix": "N_0x99b72c7abde5c910",
	  "body": "N_0x99b72c7abde5c910",
	  "description": "OLD NAME, PLEASE USE NetworkCopyPedBlendData INSTEAD!"
	},
	"NetworkCopyPedBlendData()": {
	  "prefix": "NetworkCopyPedBlendData",
	  "body": [
		"NetworkCopyPedBlendData(${1:Ped ped}, ${2:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nconsole hash: 0x99F58A07  \nSadly I thought this copied their tattoos, but it just seems to copy their 'blend data'. E.G. skin tone/color, fat/skinny face, etc.  \n\nOld name: N_0x99b72c7abde5c910"
	},
	"N_0xe036a705f989e049()": {
	  "prefix": "N_0xe036a705f989e049",
	  "body": "N_0xe036a705f989e049",
	  "description": "OLD NAME, PLEASE USE NetworkClearVoiceChannel INSTEAD!"
	},
	"NetworkClearVoiceChannel()": {
	  "prefix": "NetworkClearVoiceChannel",
	  "body": [
		"NetworkClearVoiceChannel()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xe036a705f989e049"
	},
	"N_0x43f4dba69710e01e()": {
	  "prefix": "N_0x43f4dba69710e01e",
	  "body": "N_0x43f4dba69710e01e",
	  "description": "OLD NAME, PLEASE USE NetworkCloseTransitionMatchmaking INSTEAD!"
	},
	"NetworkCloseTransitionMatchmaking()": {
	  "prefix": "NetworkCloseTransitionMatchmaking",
	  "body": [
		"NetworkCloseTransitionMatchmaking()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x43f4dba69710e01e"
	},
	"N_0x9dd368bf06983221()": {
	  "prefix": "N_0x9dd368bf06983221",
	  "body": "N_0x9dd368bf06983221",
	  "description": "OLD NAME, PLEASE USE NetworkDisableInvincibleFlashing INSTEAD!"
	},
	"NetworkDisableInvincibleFlashing()": {
	  "prefix": "NetworkDisableInvincibleFlashing",
	  "body": [
		"NetworkDisableInvincibleFlashing(${1:int player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nhash collision???  \nI did this and I didn't see anything happening  \nint pindex;  \nfor (int i = 0; i < 32; i++)  \n{  \n\tif (NETWORK_IS_PARTICIPANT_ACTIVE(INT_TO_PARTICIPANTINDEX(i)))  \n\t{  \npindex = NETWORK_GET_PLAYER_INDEX(INT_TO_PARTICIPANTINDEX(i));  \nNETWORK_DISABLE_INVINCIBLE_FLASHING(pindex, 1);  \n\t}  \n}  \n\nOld name: N_0x9dd368bf06983221"
	},
	"N_0x02c40bf885c567b6()": {
	  "prefix": "N_0x02c40bf885c567b6",
	  "body": "N_0x02c40bf885c567b6",
	  "description": "OLD NAME, PLEASE USE NetworkConvertSynchronisedSceneToSynchronizedScene INSTEAD!"
	},
	"NetworkUnlinkNetworkedSynchronisedScene()": {
	  "prefix": "NetworkUnlinkNetworkedSynchronisedScene",
	  "body": "NetworkUnlinkNetworkedSynchronisedScene",
	  "description": "OLD NAME, PLEASE USE NetworkConvertSynchronisedSceneToSynchronizedScene INSTEAD!"
	},
	"NetworkConvertSynchronisedSceneToSynchronizedScene()": {
	  "prefix": "NetworkConvertSynchronisedSceneToSynchronizedScene",
	  "body": [
		"NetworkConvertSynchronisedSceneToSynchronizedScene(${1:int netScene})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nnetScene to scene  \n\nOld name: N_0x02c40bf885c567b6\nOld name: NetworkUnlinkNetworkedSynchronisedScene"
	},
	"N_0xa091a5e44f0072e5()": {
	  "prefix": "N_0xa091a5e44f0072e5",
	  "body": "N_0xa091a5e44f0072e5",
	  "description": "OLD NAME, PLEASE USE NetworkDoTransitionQuickmatchAsync INSTEAD!"
	},
	"NetworkDoTransitionQuickmatchAsync()": {
	  "prefix": "NetworkDoTransitionQuickmatchAsync",
	  "body": [
		"NetworkDoTransitionQuickmatchAsync(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xa091a5e44f0072e5"
	},
	"NetworkDoTransitionToFreemode()": {
	  "prefix": "NetworkDoTransitionToFreemode",
	  "body": [
		"NetworkDoTransitionToFreemode(${1:Any* p0}, ${2:Any p1}, ${3:BOOL p2}, ${4:int players}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\np2 is true 3/4 of the occurrences I found.  \n'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.  \n"
	},
	"NetworkCreateSynchronisedScene()": {
	  "prefix": "NetworkCreateSynchronisedScene",
	  "body": [
		"NetworkCreateSynchronisedScene(${1:float x}, ${2:float y}, ${3:float z}, ${4:float xRot}, ${5:float yRot}, ${6:float zRot}, ${7:int p6}, ${8:BOOL useOcclusionPortal}, ${9:BOOL looped}, ${10:float p9}, ${11:float animTime}, ${12:float p11})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"NetworkDoTransitionToGame()": {
	  "prefix": "NetworkDoTransitionToGame",
	  "body": [
		"NetworkDoTransitionToGame(${1:BOOL p0}, ${2:int maxPlayers})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x71fb0ebcd4915d56()": {
	  "prefix": "N_0x71fb0ebcd4915d56",
	  "body": "N_0x71fb0ebcd4915d56",
	  "description": "OLD NAME, PLEASE USE NetworkDoTransitionQuickmatch INSTEAD!"
	},
	"NetworkDoTransitionQuickmatch()": {
	  "prefix": "NetworkDoTransitionQuickmatch",
	  "body": [
		"NetworkDoTransitionQuickmatch(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x71fb0ebcd4915d56"
	},
	"NetworkDoTransitionQuickmatchWithGroup()": {
	  "prefix": "NetworkDoTransitionQuickmatchWithGroup",
	  "body": [
		"NetworkDoTransitionQuickmatchWithGroup(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any* p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkDoTransitionToNewFreemode()": {
	  "prefix": "NetworkDoTransitionToNewFreemode",
	  "body": [
		"NetworkDoTransitionToNewFreemode(${1:Any* p0}, ${2:Any* p1}, ${3:int players}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkDoTransitionToNewGame()": {
	  "prefix": "NetworkDoTransitionToNewGame",
	  "body": [
		"NetworkDoTransitionToNewGame(${1:BOOL p0}, ${2:int maxPlayers}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkDoesNetworkIdExist()": {
	  "prefix": "NetworkDoesNetworkIdExist",
	  "body": [
		"NetworkDoesNetworkIdExist(${1:int netID})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkDoesTunableExist()": {
	  "prefix": "NetworkDoesTunableExist",
	  "body": [
		"NetworkDoesTunableExist(${1:char* tunableContext}, ${2:char* tunableName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSome of the tunable contexts used in the PC scripts:  \n- \"MP_FM_RACES\"  \n- \"MP_FM_RACES_CAR\"  \n- \"MP_FM_RACES_SEA\"  \n- \"MP_FM_RACES_CAR\"  \n- \"MP_FM_RACES_AIR\"  \n- \"MP_FM_BASEJUMP\"  \n- \"MP_FM_RACES_CYCLE\"  \n- \"MP_FM_RACES_BIKE\"  \n- \"MP_FM_MISSIONS\"  \n- \"MP_FM_CONTACT\"  \n- \"MP_FM_RANDOM\"  \n- \"MP_FM_VERSUS\"  \n- \"MP_FM_LTS\"  \n- \"MP_FM_CAPTURE\"  \n- \"MP_FM_DM\"  \n- \"MP_FM_SURVIVAL\"  \n- \"MP_FM_GANG_ATTACK\"  \n- \"MP_FM_BASEJUMP\"  \n- \"BASE_GLOBALS\"  \n- \"MP_GLOBAL\"  \nand some of the tunable names used in the PC scripts:  \n- \"XP_MULTIPLIER\"  \n- \"CASH_MULTIPLIER\"  \n- \"ARMOUR_REWARD_GIFT\"  \n- \"TOGGLE_CREATORS_OFF\"  \n"
	},
	"NetworkDoesEntityExistWithNetworkId()": {
	  "prefix": "NetworkDoesEntityExistWithNetworkId",
	  "body": [
		"NetworkDoesEntityExistWithNetworkId(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x0b0cc10720653f3b()": {
	  "prefix": "N_0x0b0cc10720653f3b",
	  "body": "N_0x0b0cc10720653f3b",
	  "description": "OLD NAME, PLEASE USE NetworkEnableMotionDrugged INSTEAD!"
	},
	"NetworkEnableMotionDrugged()": {
	  "prefix": "NetworkEnableMotionDrugged",
	  "body": [
		"NetworkEnableMotionDrugged()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nPretty sure this is a hash collision  \n\nOld name: N_0x0b0cc10720653f3b"
	},
	"N_0xe4e53e1419d81127()": {
	  "prefix": "N_0xe4e53e1419d81127",
	  "body": "N_0xe4e53e1419d81127",
	  "description": "OLD NAME, PLEASE USE NetworkDoesTunableExistHash INSTEAD!"
	},
	"NetworkDoesTunableExistHash()": {
	  "prefix": "NetworkDoesTunableExistHash",
	  "body": [
		"NetworkDoesTunableExistHash(${1:Hash tunableContext}, ${2:Hash tunableName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nConsole Hash - 0x25915CB9 = NETWORK_DOES_TUNABLE_EXIST_HASH  \n\nOld name: N_0xe4e53e1419d81127"
	},
	"NetworkExplodeVehicle()": {
	  "prefix": "NetworkExplodeVehicle",
	  "body": [
		"NetworkExplodeVehicle(${1:Vehicle vehicle}, ${2:BOOL isAudible}, ${3:BOOL isInvisible}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nIn the console script dumps, this is only referenced once.   \nNETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);  \n^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.  \nWhich as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?  \nam_plane_takedown.c   \nnetwork_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);  \narmenian2.c   \nnetwork_explode_vehicle(Local_80[6 <2>], 1, 0, 0);  \nfm_horde_controler.c  \nnetwork_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);  \nfm_mission_controller.c, has 6 hits so not going to list them.  \nSide note, setting the first parameter to 0 seems to mute sound or so?  \nSeems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.  \n"
	},
	"NetworkEndTutorialSession()": {
	  "prefix": "NetworkEndTutorialSession",
	  "body": [
		"NetworkEndTutorialSession()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkFadeInEntity()": {
	  "prefix": "NetworkFadeInEntity",
	  "body": [
		"NetworkFadeInEntity(${1:Entity entity}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nstate - 0 does 5 fades  \nstate - 1 does 6 fades  \nnative is missing third argument, also boolean, setting to 1 made vehicle fade in slower, probably \"slow\" as per NETWORK_FADE_OUT_ENTITY  \n"
	},
	"NetworkFadeOutEntity()": {
	  "prefix": "NetworkFadeOutEntity",
	  "body": [
		"NetworkFadeOutEntity(${1:Entity entity}, ${2:BOOL normal}, ${3:BOOL slow})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nnormal - transition like when your coming out of LSC  \nslow - transition like when you walk into a mission  \n"
	},
	"N_0xf7b2cfde5c9f700d()": {
	  "prefix": "N_0xf7b2cfde5c9f700d",
	  "body": "N_0xf7b2cfde5c9f700d",
	  "description": "OLD NAME, PLEASE USE NetworkFindMatchedGamers INSTEAD!"
	},
	"NetworkFindMatchedGamers()": {
	  "prefix": "NetworkFindMatchedGamers",
	  "body": [
		"NetworkFindMatchedGamers(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xf7b2cfde5c9f700d"
	},
	"N_0xcf8bd3b0bd6d42d7()": {
	  "prefix": "N_0xcf8bd3b0bd6d42d7",
	  "body": "N_0xcf8bd3b0bd6d42d7",
	  "description": "OLD NAME, PLEASE USE NetworkForceLocalUseOfSyncedSceneCamera INSTEAD!"
	},
	"NetworkForceLocalUseOfSyncedSceneCamera()": {
	  "prefix": "NetworkForceLocalUseOfSyncedSceneCamera",
	  "body": [
		"NetworkForceLocalUseOfSyncedSceneCamera(${1:int netScene}, ${2:char* animDict}, ${3:char* animName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xcf8bd3b0bd6d42d7"
	},
	"NetworkGamertagFromHandleStart()": {
	  "prefix": "NetworkGamertagFromHandleStart",
	  "body": [
		"NetworkGamertagFromHandleStart(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGamerHasHeadset()": {
	  "prefix": "NetworkGamerHasHeadset",
	  "body": [
		"NetworkGamerHasHeadset(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGamertagFromHandlePending()": {
	  "prefix": "NetworkGamertagFromHandlePending",
	  "body": [
		"NetworkGamertagFromHandlePending()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGamertagFromHandleSucceeded()": {
	  "prefix": "NetworkGamertagFromHandleSucceeded",
	  "body": [
		"NetworkGamertagFromHandleSucceeded()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGetActivityPlayerNum()": {
	  "prefix": "NetworkGetActivityPlayerNum",
	  "body": [
		"NetworkGetActivityPlayerNum(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0x4caca84440fa26f6()": {
	  "prefix": "N_0x4caca84440fa26f6",
	  "body": "N_0x4caca84440fa26f6",
	  "description": "OLD NAME, PLEASE USE NetworkGetDesroyerOfEntity INSTEAD!"
	},
	"NetworkGetDesroyerOfEntity()": {
	  "prefix": "NetworkGetDesroyerOfEntity",
	  "body": [
		"NetworkGetDesroyerOfEntity(${1:Any p0}, ${2:Any p1}, ${3:Hash* weaponHash})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x4caca84440fa26f6"
	},
	"N_0x97a770beef227e2b()": {
	  "prefix": "N_0x97a770beef227e2b",
	  "body": "N_0x97a770beef227e2b",
	  "description": "OLD NAME, PLEASE USE NetworkGetBackgroundLoadingRecipients INSTEAD!"
	},
	"NetworkGetBackgroundLoadingRecipients()": {
	  "prefix": "NetworkGetBackgroundLoadingRecipients",
	  "body": [
		"NetworkGetBackgroundLoadingRecipients(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x97a770beef227e2b"
	},
	"NetworkGetCurrentlySelectedGamerHandleFromInviteMenu()": {
	  "prefix": "NetworkGetCurrentlySelectedGamerHandleFromInviteMenu",
	  "body": [
		"NetworkGetCurrentlySelectedGamerHandleFromInviteMenu(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGetEntityIsLocal()": {
	  "prefix": "NetworkGetEntityIsLocal",
	  "body": [
		"NetworkGetEntityIsLocal(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGetDestroyerOfNetworkId()": {
	  "prefix": "NetworkGetDestroyerOfNetworkId",
	  "body": [
		"NetworkGetDestroyerOfNetworkId(${1:int netId}, ${2:Hash* weaponHash})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"NetworkGetFoundGamer()": {
	  "prefix": "NetworkGetFoundGamer",
	  "body": [
		"NetworkGetFoundGamer(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xc7827959479dcc78()": {
	  "prefix": "N_0xc7827959479dcc78",
	  "body": "N_0xc7827959479dcc78",
	  "description": "OLD NAME, PLEASE USE NetworkGetEntityIsNetworked INSTEAD!"
	},
	"NetworkGetEntityIsNetworked()": {
	  "prefix": "NetworkGetEntityIsNetworked",
	  "body": [
		"NetworkGetEntityIsNetworked(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xc7827959479dcc78"
	},
	"NetworkGetEntityKillerOfPlayer()": {
	  "prefix": "NetworkGetEntityKillerOfPlayer",
	  "body": [
		"NetworkGetEntityKillerOfPlayer(${1:Player player}, ${2:Hash* weaponHash})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Entity\n"
	},
	"NetworkGetFriendName()": {
	  "prefix": "NetworkGetFriendName",
	  "body": [
		"NetworkGetFriendName(${1:int friendIndex})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n"
	},
	"NetworkGetGamertagFromHandle()": {
	  "prefix": "NetworkGetGamertagFromHandle",
	  "body": [
		"NetworkGetGamertagFromHandle(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n"
	},
	"NetworkGetFriendCount()": {
	  "prefix": "NetworkGetFriendCount",
	  "body": [
		"NetworkGetFriendCount()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"NetworkGetHostOfThisScript()": {
	  "prefix": "NetworkGetHostOfThisScript",
	  "body": [
		"NetworkGetHostOfThisScript()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkGetFriendNameFromIndex()": {
	  "prefix": "NetworkGetFriendNameFromIndex",
	  "body": [
		"NetworkGetFriendNameFromIndex(${1:int friendIndex})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n\nOld name: NetworkGetFriendName"
	},
	"NetworkGetLocalHandle()": {
	  "prefix": "NetworkGetLocalHandle",
	  "body": [
		"NetworkGetLocalHandle(${1:int* networkHandle}, ${2:int bufferSize})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nRetrieves the local player's NetworkHandle* and stores it in the given buffer.  \n* Currently unknown struct  \n"
	},
	"NetworkGetHostOfScript()": {
	  "prefix": "NetworkGetHostOfScript",
	  "body": [
		"NetworkGetHostOfScript(${1:char* scriptName}, ${2:int p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nscriptName examples:  \n\"freemode\", \"AM_CR_SecurityVan\", ...  \nMost of the time, these values are used:  \np1 = -1  \np2 = 0  \n"
	},
	"NetworkGetMaxFriends()": {
	  "prefix": "NetworkGetMaxFriends",
	  "body": [
		"NetworkGetMaxFriends()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOn PC this is hardcoded to 250.  \n"
	},
	"NetworkGetNumFoundGamers()": {
	  "prefix": "NetworkGetNumFoundGamers",
	  "body": [
		"NetworkGetNumFoundGamers()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"NetworkGetNumParticipants()": {
	  "prefix": "NetworkGetNumParticipants",
	  "body": [
		"NetworkGetNumParticipants()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"NetworkGetNumConnectedPlayers()": {
	  "prefix": "NetworkGetNumConnectedPlayers",
	  "body": [
		"NetworkGetNumConnectedPlayers()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nReturns the amount of players connected in the current session. Only works when connected to a session/server.  \n"
	},
	"NetworkGetNumParticipantsHost()": {
	  "prefix": "NetworkGetNumParticipantsHost",
	  "body": [
		"NetworkGetNumParticipantsHost()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nSeems to always return 0, but it's used in quite a few loops.  \nfor (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)  \n    {  \n        if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)  \n        {  \n            var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));  \n"
	},
	"N_0x3658e8cd94fc121a()": {
	  "prefix": "N_0x3658e8cd94fc121a",
	  "body": "N_0x3658e8cd94fc121a",
	  "description": "OLD NAME, PLEASE USE NetworkGetNumScriptParticipants INSTEAD!"
	},
	"NetworkGetNumScriptParticipants()": {
	  "prefix": "NetworkGetNumScriptParticipants",
	  "body": [
		"NetworkGetNumScriptParticipants(${1:Any* p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOld name: N_0x3658e8cd94fc121a"
	},
	"N_0xcefa968912d0f78d()": {
	  "prefix": "N_0xcefa968912d0f78d",
	  "body": "N_0xcefa968912d0f78d",
	  "description": "OLD NAME, PLEASE USE NetworkGetNumPresenceInvites INSTEAD!"
	},
	"NetworkGetNumPresenceInvites()": {
	  "prefix": "NetworkGetNumPresenceInvites",
	  "body": [
		"NetworkGetNumPresenceInvites()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOld name: N_0xcefa968912d0f78d"
	},
	"NetworkGetParticipantIndex()": {
	  "prefix": "NetworkGetParticipantIndex",
	  "body": [
		"NetworkGetParticipantIndex(${1:int index})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0x5835d9cd92e83184()": {
	  "prefix": "N_0x5835d9cd92e83184",
	  "body": "N_0x5835d9cd92e83184",
	  "description": "OLD NAME, PLEASE USE NetworkGetPlayerCrewEmblemTxdName INSTEAD!"
	},
	"NetworkGetPlayerCrewEmblemTxdName()": {
	  "prefix": "NetworkGetPlayerCrewEmblemTxdName",
	  "body": [
		"NetworkGetPlayerCrewEmblemTxdName(${1:Player* player}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x5835d9cd92e83184"
	},
	"N_0x125e6d638b8605d4()": {
	  "prefix": "N_0x125e6d638b8605d4",
	  "body": "N_0x125e6d638b8605d4",
	  "description": "OLD NAME, PLEASE USE NetworkGetPlayerCoords INSTEAD!"
	},
	"NetworkGetPlayerCoords()": {
	  "prefix": "NetworkGetPlayerCoords",
	  "body": [
		"NetworkGetPlayerCoords(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Vector3\nReturns the coordinates of another player.\n\nDoes not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).\nOld name: N_0x125e6d638b8605d4"
	},
	"N_0x6c0e2e0125610278()": {
	  "prefix": "N_0x6c0e2e0125610278",
	  "body": "N_0x6c0e2e0125610278",
	  "description": "OLD NAME, PLEASE USE NetworkGetPlayerIndexFromPed INSTEAD!"
	},
	"NetworkGetPlayerIndexFromPed()": {
	  "prefix": "NetworkGetPlayerIndexFromPed",
	  "body": [
		"NetworkGetPlayerIndexFromPed(${1:Ped ped})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Player\n\nReturns the Player associated to a given Ped when in an online session.  \n\nOld name: N_0x6c0e2e0125610278"
	},
	"NetworkGetPlayerFromGamerHandle()": {
	  "prefix": "NetworkGetPlayerFromGamerHandle",
	  "body": [
		"NetworkGetPlayerFromGamerHandle(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Player\n"
	},
	"NetworkGetPlayerLoudness()": {
	  "prefix": "NetworkGetPlayerLoudness",
	  "body": [
		"NetworkGetPlayerLoudness(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: float\n"
	},
	"NetworkGetPlayerIndex()": {
	  "prefix": "NetworkGetPlayerIndex",
	  "body": [
		"NetworkGetPlayerIndex(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0xdff09646e12ec386()": {
	  "prefix": "N_0xdff09646e12ec386",
	  "body": "N_0xdff09646e12ec386",
	  "description": "OLD NAME, PLEASE USE NetworkGetPresenceInviteId INSTEAD!"
	},
	"NetworkGetPresenceInviteId()": {
	  "prefix": "NetworkGetPresenceInviteId",
	  "body": [
		"NetworkGetPresenceInviteId(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0xdff09646e12ec386"
	},
	"NetworkGetPresenceInviteHandle()": {
	  "prefix": "NetworkGetPresenceInviteHandle",
	  "body": [
		"NetworkGetPresenceInviteHandle(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x26e1cd96b0903d60()": {
	  "prefix": "N_0x26e1cd96b0903d60",
	  "body": "N_0x26e1cd96b0903d60",
	  "description": "OLD NAME, PLEASE USE NetworkGetPresenceInviteSessionId INSTEAD!"
	},
	"NetworkGetPresenceInviteSessionId()": {
	  "prefix": "NetworkGetPresenceInviteSessionId",
	  "body": [
		"NetworkGetPresenceInviteSessionId(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0x26e1cd96b0903d60"
	},
	"N_0x9aa46badad0e27ed()": {
	  "prefix": "N_0x9aa46badad0e27ed",
	  "body": "N_0x9aa46badad0e27ed",
	  "description": "OLD NAME, PLEASE USE NetworkGetPrimaryClanDataClear INSTEAD!"
	},
	"NetworkGetPrimaryClanDataClear()": {
	  "prefix": "NetworkGetPrimaryClanDataClear",
	  "body": [
		"NetworkGetPrimaryClanDataClear()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0x9aa46badad0e27ed"
	},
	"N_0x4962cc4aa2f345b7()": {
	  "prefix": "N_0x4962cc4aa2f345b7",
	  "body": "N_0x4962cc4aa2f345b7",
	  "description": "OLD NAME, PLEASE USE NetworkGetPresenceInviteInviter INSTEAD!"
	},
	"NetworkGetPresenceInviteInviter()": {
	  "prefix": "NetworkGetPresenceInviteInviter",
	  "body": [
		"NetworkGetPresenceInviteInviter(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0x4962cc4aa2f345b7"
	},
	"N_0xb5074db804e28ce7()": {
	  "prefix": "N_0xb5074db804e28ce7",
	  "body": "N_0xb5074db804e28ce7",
	  "description": "OLD NAME, PLEASE USE NetworkGetPrimaryClanDataPending INSTEAD!"
	},
	"NetworkGetPrimaryClanDataPending()": {
	  "prefix": "NetworkGetPrimaryClanDataPending",
	  "body": [
		"NetworkGetPrimaryClanDataPending()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0xb5074db804e28ce7"
	},
	"N_0x042e4b70b93e6054()": {
	  "prefix": "N_0x042e4b70b93e6054",
	  "body": "N_0x042e4b70b93e6054",
	  "description": "OLD NAME, PLEASE USE NetworkGetPrimaryClanDataCancel INSTEAD!"
	},
	"NetworkGetPrimaryClanDataCancel()": {
	  "prefix": "NetworkGetPrimaryClanDataCancel",
	  "body": [
		"NetworkGetPrimaryClanDataCancel()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x042e4b70b93e6054"
	},
	"NetworkGetPrimaryClanDataStart()": {
	  "prefix": "NetworkGetPrimaryClanDataStart",
	  "body": [
		"NetworkGetPrimaryClanDataStart(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGetPrimaryClanDataNew()": {
	  "prefix": "NetworkGetPrimaryClanDataNew",
	  "body": [
		"NetworkGetPrimaryClanDataNew(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xe30cf56f1efa5f43()": {
	  "prefix": "N_0xe30cf56f1efa5f43",
	  "body": "N_0xe30cf56f1efa5f43",
	  "description": "OLD NAME, PLEASE USE NetworkGetRandomIntInRange INSTEAD!"
	},
	"NetworkGetRandomIntInRange()": {
	  "prefix": "NetworkGetRandomIntInRange",
	  "body": [
		"NetworkGetRandomIntInRange(${1:int rangeStart}, ${2:int rangeEnd})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nSame as GAMEPLAY::GET_RANDOM_INT_IN_RANGE  \n\nOld name: N_0xe30cf56f1efa5f43"
	},
	"NetworkGetScriptStatus()": {
	  "prefix": "NetworkGetScriptStatus",
	  "body": [
		"NetworkGetScriptStatus()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"N_0x5b4f04f19376a0ba()": {
	  "prefix": "N_0x5b4f04f19376a0ba",
	  "body": "N_0x5b4f04f19376a0ba",
	  "description": "OLD NAME, PLEASE USE NetworkGetPrimaryClanDataSuccess INSTEAD!"
	},
	"NetworkGetPrimaryClanDataSuccess()": {
	  "prefix": "NetworkGetPrimaryClanDataSuccess",
	  "body": [
		"NetworkGetPrimaryClanDataSuccess()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0x5b4f04f19376a0ba"
	},
	"N_0x6d03bfbd643b2a02()": {
	  "prefix": "N_0x6d03bfbd643b2a02",
	  "body": "N_0x6d03bfbd643b2a02",
	  "description": "OLD NAME, PLEASE USE NetworkGetServerTime INSTEAD!"
	},
	"NetworkGetServerTime()": {
	  "prefix": "NetworkGetServerTime",
	  "body": [
		"NetworkGetServerTime(${1:int* hours}, ${2:int* minutes}, ${3:int* seconds})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x6d03bfbd643b2a02"
	},
	"N_0x599e4fa1f87eb5ff()": {
	  "prefix": "N_0x599e4fa1f87eb5ff",
	  "body": "N_0x599e4fa1f87eb5ff",
	  "description": "OLD NAME, PLEASE USE NetworkGetRandomInt INSTEAD!"
	},
	"NetworkGetRandomInt()": {
	  "prefix": "NetworkGetRandomInt",
	  "body": [
		"NetworkGetRandomInt()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOld name: N_0x599e4fa1f87eb5ff"
	},
	"NetworkGetThisScriptIsNetworkScript()": {
	  "prefix": "NetworkGetThisScriptIsNetworkScript",
	  "body": [
		"NetworkGetThisScriptIsNetworkScript()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGetTransitionHost()": {
	  "prefix": "NetworkGetTransitionHost",
	  "body": [
		"NetworkGetTransitionHost(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGetRespawnResult()": {
	  "prefix": "NetworkGetRespawnResult",
	  "body": [
		"NetworkGetRespawnResult(${1:int randomInt}, ${2:Vector3* coordinates}, ${3:float* heading})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nBased on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..  \n"
	},
	"NetworkHandleFromFriend()": {
	  "prefix": "NetworkHandleFromFriend",
	  "body": [
		"NetworkHandleFromFriend(${1:Player friendIndex}, ${2:int* networkHandle}, ${3:int bufferSize})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkGetTalkerProximity()": {
	  "prefix": "NetworkGetTalkerProximity",
	  "body": [
		"NetworkGetTalkerProximity()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: float\n"
	},
	"NetworkHandleFromPlayer()": {
	  "prefix": "NetworkHandleFromPlayer",
	  "body": [
		"NetworkHandleFromPlayer(${1:Player player}, ${2:int* networkHandle}, ${3:int bufferSize})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nReturns a handle to networkHandle* from the specified player handle and stores it in a given buffer.  \n* Currently unknown struct  \nExample:  \nstd::vector<UINT64> GetPlayerNetworkHandle(Player player) {  \n    const int size = 13;  \n    uint64_t *buffer = std::make_unique<uint64_t[]>(size).get();  \n    NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast<int *>(buffer), 13);  \n    for (int i = 0; i < size; i++) {  \n        Log::Msg(\"networkhandle[%i]: %llx\", i, buffer[i]);  \n    }  \n    std::vector<UINT64> result(buffer, buffer + sizeof(buffer));  \n    return result;  \n}  \n"
	},
	"N_0x5ed0356a0ce3a34f()": {
	  "prefix": "N_0x5ed0356a0ce3a34f",
	  "body": "N_0x5ed0356a0ce3a34f",
	  "description": "OLD NAME, PLEASE USE NetworkGetTimeoutTime INSTEAD!"
	},
	"NetworkGetTimeoutTime()": {
	  "prefix": "NetworkGetTimeoutTime",
	  "body": [
		"NetworkGetTimeoutTime()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nReturns the value of the tunable 0x9A82F2B. Usually 8000 iirc.  \n\nOld name: N_0x5ed0356a0ce3a34f"
	},
	"NetworkHandleFromUserId()": {
	  "prefix": "NetworkHandleFromUserId",
	  "body": [
		"NetworkHandleFromUserId(${1:char* userId}, ${2:int* networkHandle}, ${3:int bufferSize})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nReturns a NetworkHandle* from the specified user ID and stores it in a given buffer.  \n* Currently unknown struct  \n"
	},
	"NetworkHasControlOfEntity()": {
	  "prefix": "NetworkHasControlOfEntity",
	  "body": [
		"NetworkHasControlOfEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkGetTransitionMembers()": {
	  "prefix": "NetworkGetTransitionMembers",
	  "body": [
		"NetworkGetTransitionMembers(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"N_0xc01e93fac20c3346()": {
	  "prefix": "N_0xc01e93fac20c3346",
	  "body": "N_0xc01e93fac20c3346",
	  "description": "OLD NAME, PLEASE USE NetworkHasControlOfPavementStats INSTEAD!"
	},
	"NetworkHasControlOfPavementStats()": {
	  "prefix": "NetworkHasControlOfPavementStats",
	  "body": [
		"NetworkHasControlOfPavementStats(${1:Hash doorHash})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nconsole hash: 0xD14D9C07  \n\nOld name: N_0xc01e93fac20c3346"
	},
	"NetworkHandleFromMemberId()": {
	  "prefix": "NetworkHandleFromMemberId",
	  "body": [
		"NetworkHandleFromMemberId(${1:char* memberId}, ${2:int* networkHandle}, ${3:int bufferSize})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nReturns a NetworkHandle* from the specified member ID and stores it in a given buffer.  \n* Currently unknown struct  \n"
	},
	"N_0x76d9b976c4c09fde()": {
	  "prefix": "N_0x76d9b976c4c09fde",
	  "body": "N_0x76d9b976c4c09fde",
	  "description": "OLD NAME, PLEASE USE NetworkHasFollowInvite INSTEAD!"
	},
	"NetworkHasFollowInvite()": {
	  "prefix": "NetworkHasFollowInvite",
	  "body": [
		"NetworkHasFollowInvite()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x76d9b976c4c09fde"
	},
	"NetworkHasControlOfDoor()": {
	  "prefix": "NetworkHasControlOfDoor",
	  "body": [
		"NetworkHasControlOfDoor(${1:Hash doorHash})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkHasHeadset()": {
	  "prefix": "NetworkHasHeadset",
	  "body": [
		"NetworkHasHeadset()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkHasControlOfNetworkId()": {
	  "prefix": "NetworkHasControlOfNetworkId",
	  "body": [
		"NetworkHasControlOfNetworkId(${1:int netId})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkHasInvitedGamerToTransition()": {
	  "prefix": "NetworkHasInvitedGamerToTransition",
	  "body": [
		"NetworkHasInvitedGamerToTransition(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkHasControlOfPickup()": {
	  "prefix": "NetworkHasControlOfPickup",
	  "body": [
		"NetworkHasControlOfPickup(${1:Pickup pickup})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkHasPlayerStartedTransition()": {
	  "prefix": "NetworkHasPlayerStartedTransition",
	  "body": [
		"NetworkHasPlayerStartedTransition(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x58575ac3cf2ca8ec()": {
	  "prefix": "N_0x58575ac3cf2ca8ec",
	  "body": "N_0x58575ac3cf2ca8ec",
	  "description": "OLD NAME, PLEASE USE NetworkHashFromGamerHandle INSTEAD!"
	},
	"NetworkHashFromGamerHandle()": {
	  "prefix": "NetworkHashFromGamerHandle",
	  "body": [
		"NetworkHashFromGamerHandle(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Hash\n\nconsole hash: 0x5AC9F04D = network_hash_from_gamer_handle  \n\nOld name: N_0x58575ac3cf2ca8ec"
	},
	"NetworkHasInvitedGamer()": {
	  "prefix": "NetworkHasInvitedGamer",
	  "body": [
		"NetworkHasInvitedGamer(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkHaveOnlinePrivileges()": {
	  "prefix": "NetworkHaveOnlinePrivileges",
	  "body": [
		"NetworkHaveOnlinePrivileges()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkHasPendingInvite()": {
	  "prefix": "NetworkHasPendingInvite",
	  "body": [
		"NetworkHasPendingInvite()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkInviteGamers()": {
	  "prefix": "NetworkInviteGamers",
	  "body": [
		"NetworkInviteGamers(${1:Any* p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\n//nothing doin  \nint Global_1837683 = GlobalVariable::Get(1837683);  \nint Global_1837683_f_404 = GlobalVariable::Get(1837683 + 404);  \nNETWORK_INVITE_GAMERS(&Global_1837683, Global_1837683_f_404, 0, 0);  \n"
	},
	"N_0xbc1d768f2f5d6c05()": {
	  "prefix": "N_0xbc1d768f2f5d6c05",
	  "body": "N_0xbc1d768f2f5d6c05",
	  "description": "OLD NAME, PLEASE USE NetworkHashFromPlayerHandle INSTEAD!"
	},
	"NetworkHashFromPlayerHandle()": {
	  "prefix": "NetworkHashFromPlayerHandle",
	  "body": [
		"NetworkHashFromPlayerHandle(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Hash\n\nconsole hash: 0xF8D7AF3B = NETWORK_HASH_FROM_PLAYER_HANDLE  \n\nOld name: N_0xbc1d768f2f5d6c05"
	},
	"NetworkIsActivitySession()": {
	  "prefix": "NetworkIsActivitySession",
	  "body": [
		"NetworkIsActivitySession()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsActivitySpectator()": {
	  "prefix": "NetworkIsActivitySpectator",
	  "body": [
		"NetworkIsActivitySpectator()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkHostTransition()": {
	  "prefix": "NetworkHostTransition",
	  "body": [
		"NetworkHostTransition(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:Any p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:int p7}, ${9:Any p8}, ${10:int p9})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\nFrom what I can tell it looks like it does the following:\n\nCreates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.\n\nYou also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`."
	},
	"NetworkIsAddingFriend()": {
	  "prefix": "NetworkIsAddingFriend",
	  "body": [
		"NetworkIsAddingFriend()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkInviteGamersToTransition()": {
	  "prefix": "NetworkInviteGamersToTransition",
	  "body": [
		"NetworkInviteGamersToTransition(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsChattingInPlatformParty()": {
	  "prefix": "NetworkIsChattingInPlatformParty",
	  "body": [
		"NetworkIsChattingInPlatformParty(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nThis would be nice to see if someone is in party chat, but 2 sad notes.  \n1) It only becomes true if said person is speaking in that party at the time.  \n2) It will never, become true unless you are in that party with said person.  \n"
	},
	"NetworkIsActivitySpectatorFromHandle()": {
	  "prefix": "NetworkIsActivitySpectatorFromHandle",
	  "body": [
		"NetworkIsActivitySpectatorFromHandle(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xd7c95d322ff57522()": {
	  "prefix": "N_0xd7c95d322ff57522",
	  "body": "N_0xd7c95d322ff57522",
	  "description": "OLD NAME, PLEASE USE NetworkIsClockTimeOverridden INSTEAD!"
	},
	"NetworkIsClockTimeOverridden()": {
	  "prefix": "NetworkIsClockTimeOverridden",
	  "body": [
		"NetworkIsClockTimeOverridden()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xd7c95d322ff57522"
	},
	"N_0xeffb25453d8600f9()": {
	  "prefix": "N_0xeffb25453d8600f9",
	  "body": "N_0xeffb25453d8600f9",
	  "description": "OLD NAME, PLEASE USE NetworkIsCableConnected INSTEAD!"
	},
	"NetworkIsCableConnected()": {
	  "prefix": "NetworkIsCableConnected",
	  "body": [
		"NetworkIsCableConnected()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xeffb25453d8600f9"
	},
	"NetworkIsEntityConcealed()": {
	  "prefix": "NetworkIsEntityConcealed",
	  "body": [
		"NetworkIsEntityConcealed(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\nThis only works with vehicles."
	},
	"N_0xb3f64a6a91432477()": {
	  "prefix": "N_0xb3f64a6a91432477",
	  "body": "N_0xb3f64a6a91432477",
	  "description": "OLD NAME, PLEASE USE NetworkIsClanMembershipFinishedDownloading INSTEAD!"
	},
	"NetworkIsClanMembershipFinishedDownloading()": {
	  "prefix": "NetworkIsClanMembershipFinishedDownloading",
	  "body": [
		"NetworkIsClanMembershipFinishedDownloading()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xb3f64a6a91432477"
	},
	"NetworkIsCloudAvailable()": {
	  "prefix": "NetworkIsCloudAvailable",
	  "body": [
		"NetworkIsCloudAvailable()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsFriend()": {
	  "prefix": "NetworkIsFriend",
	  "body": [
		"NetworkIsFriend(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsFindingGamers()": {
	  "prefix": "NetworkIsFindingGamers",
	  "body": [
		"NetworkIsFindingGamers()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsFriendInMultiplayer()": {
	  "prefix": "NetworkIsFriendInMultiplayer",
	  "body": [
		"NetworkIsFriendInMultiplayer(${1:char* friendName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0xbad8f2a42b844821()": {
	  "prefix": "N_0xbad8f2a42b844821",
	  "body": "N_0xbad8f2a42b844821",
	  "description": "OLD NAME, PLEASE USE NetworkIsFriendIndexOnline INSTEAD!"
	},
	"NetworkIsFriendIndexOnline()": {
	  "prefix": "NetworkIsFriendIndexOnline",
	  "body": [
		"NetworkIsFriendIndexOnline(${1:int friendIndex})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xbad8f2a42b844821"
	},
	"NetworkIsFriendInSameTitle()": {
	  "prefix": "NetworkIsFriendInSameTitle",
	  "body": [
		"NetworkIsFriendInSameTitle(${1:char* friendName})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nIn scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.  \n"
	},
	"N_0x87eb7a3ffcb314db()": {
	  "prefix": "N_0x87eb7a3ffcb314db",
	  "body": "N_0x87eb7a3ffcb314db",
	  "description": "OLD NAME, PLEASE USE NetworkIsFriendOnline_2 INSTEAD!"
	},
	"NetworkIsFriendOnline_2()": {
	  "prefix": "NetworkIsFriendOnline_2",
	  "body": [
		"NetworkIsFriendOnline_2(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x87eb7a3ffcb314db"
	},
	"NetworkIsFriendOnline()": {
	  "prefix": "NetworkIsFriendOnline",
	  "body": [
		"NetworkIsFriendOnline(${1:char* name})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsGameInProgress()": {
	  "prefix": "NetworkIsGameInProgress",
	  "body": [
		"NetworkIsGameInProgress()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsGamerBlockedByMe()": {
	  "prefix": "NetworkIsGamerBlockedByMe",
	  "body": [
		"NetworkIsGamerBlockedByMe(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsGamerMutedByMe()": {
	  "prefix": "NetworkIsGamerMutedByMe",
	  "body": [
		"NetworkIsGamerMutedByMe(${1:int* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsGamerInMySession()": {
	  "prefix": "NetworkIsGamerInMySession",
	  "body": [
		"NetworkIsGamerInMySession(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsHandleValid()": {
	  "prefix": "NetworkIsHandleValid",
	  "body": [
		"NetworkIsHandleValid(${1:int* networkHandle}, ${2:int bufferSize})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsGamerTalking()": {
	  "prefix": "NetworkIsGamerTalking",
	  "body": [
		"NetworkIsGamerTalking(${1:int* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsInMpCutscene()": {
	  "prefix": "NetworkIsInMpCutscene",
	  "body": [
		"NetworkIsInMpCutscene()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsHost()": {
	  "prefix": "NetworkIsHost",
	  "body": [
		"NetworkIsHost()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nIf you are host, returns true else returns false.  \nanyone know how to use this to find correct host? is possible?  \ngo to a mission and it will set a host then search the host name using a program then find the pointer to the host name  \n"
	},
	"NetworkIsInParty()": {
	  "prefix": "NetworkIsInParty",
	  "body": [
		"NetworkIsInParty()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nNote according to IDA TU27 X360(Console),  \nThis native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.  \nSide note: This location just stops where it's at once jumped to.  \nScreenshot for side note,   \nh t t p ://i.imgur.com/m2ci1mF.png  \nh t t p://i.imgur.com/Z0Wx2B6.png  \n"
	},
	"NetworkIsHostOfThisScript()": {
	  "prefix": "NetworkIsHostOfThisScript",
	  "body": [
		"NetworkIsHostOfThisScript()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsInSession()": {
	  "prefix": "NetworkIsInSession",
	  "body": [
		"NetworkIsInSession()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsInSpectatorMode()": {
	  "prefix": "NetworkIsInSpectatorMode",
	  "body": [
		"NetworkIsInSpectatorMode()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsInTransition()": {
	  "prefix": "NetworkIsInTransition",
	  "body": [
		"NetworkIsInTransition()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsInTutorialSession()": {
	  "prefix": "NetworkIsInTutorialSession",
	  "body": [
		"NetworkIsInTutorialSession()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkIsLocalPlayerInvincible()": {
	  "prefix": "NetworkIsLocalPlayerInvincible",
	  "body": [
		"NetworkIsLocalPlayerInvincible()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsInactiveProfile()": {
	  "prefix": "NetworkIsInactiveProfile",
	  "body": [
		"NetworkIsInactiveProfile(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x9747292807126eda()": {
	  "prefix": "N_0x9747292807126eda",
	  "body": "N_0x9747292807126eda",
	  "description": "OLD NAME, PLEASE USE NetworkIsMultiplayerDisabled INSTEAD!"
	},
	"NetworkIsMultiplayerDisabled()": {
	  "prefix": "NetworkIsMultiplayerDisabled",
	  "body": [
		"NetworkIsMultiplayerDisabled()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: ScrHandle\n\nOld name: N_0x9747292807126eda"
	},
	"NetworkIsParticipantActive()": {
	  "prefix": "NetworkIsParticipantActive",
	  "body": [
		"NetworkIsParticipantActive(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsPartyMember()": {
	  "prefix": "NetworkIsPartyMember",
	  "body": [
		"NetworkIsPartyMember(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nNote according to IDA TU27 X360(Console),  \nThis native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.  \nSide note: This location just stops where it's at once jumped to.  \nScreenshot for side note,   \nh t t p ://i.imgur.com/m2ci1mF.png  \nh t t p://i.imgur.com/Z0Wx2B6.png  \n"
	},
	"NetworkIsPendingFriend()": {
	  "prefix": "NetworkIsPendingFriend",
	  "body": [
		"NetworkIsPendingFriend(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nThis function is hard-coded to always return 0.  \n"
	},
	"NetworkIsPlayerAParticipant()": {
	  "prefix": "NetworkIsPlayerAParticipant",
	  "body": [
		"NetworkIsPlayerAParticipant(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsPlayerActive()": {
	  "prefix": "NetworkIsPlayerActive",
	  "body": [
		"NetworkIsPlayerActive(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsPlayerBlockedByMe()": {
	  "prefix": "NetworkIsPlayerBlockedByMe",
	  "body": [
		"NetworkIsPlayerBlockedByMe(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsPlayerAnimationDrawingSynchronized()": {
	  "prefix": "NetworkIsPlayerAnimationDrawingSynchronized",
	  "body": [
		"NetworkIsPlayerAnimationDrawingSynchronized()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nhash collision  \n"
	},
	"NetworkIsPlayerConnected()": {
	  "prefix": "NetworkIsPlayerConnected",
	  "body": [
		"NetworkIsPlayerConnected(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsPlayerConcealed()": {
	  "prefix": "NetworkIsPlayerConcealed",
	  "body": [
		"NetworkIsPlayerConcealed(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsPlayerInMpCutscene()": {
	  "prefix": "NetworkIsPlayerInMpCutscene",
	  "body": [
		"NetworkIsPlayerInMpCutscene(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x9de986fc9a87c474()": {
	  "prefix": "N_0x9de986fc9a87c474",
	  "body": "N_0x9de986fc9a87c474",
	  "description": "OLD NAME, PLEASE USE NetworkIsPlayerEqualToIndex INSTEAD!"
	},
	"NetworkIsPlayerEqualToIndex()": {
	  "prefix": "NetworkIsPlayerEqualToIndex",
	  "body": [
		"NetworkIsPlayerEqualToIndex(${1:Player player}, ${2:int index})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nNETWORK_ARE_*  \n\nOld name: N_0x9de986fc9a87c474"
	},
	"NetworkIsPlayerMutedByMe()": {
	  "prefix": "NetworkIsPlayerMutedByMe",
	  "body": [
		"NetworkIsPlayerMutedByMe(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x46fb3ed415c7641c()": {
	  "prefix": "N_0x46fb3ed415c7641c",
	  "body": "N_0x46fb3ed415c7641c",
	  "description": "OLD NAME, PLEASE USE NetworkIsPlayerInScript INSTEAD!"
	},
	"NetworkIsPlayerInScript()": {
	  "prefix": "NetworkIsPlayerInScript",
	  "body": [
		"NetworkIsPlayerInScript(${1:Player player}, ${2:int p1}, ${3:Hash scriptHash})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\np1 = 6  \nNETWORK_CRC_HASH_CHECK?  \n\nOld name: N_0x46fb3ed415c7641c"
	},
	"NetworkIsPlayerTalking()": {
	  "prefix": "NetworkIsPlayerTalking",
	  "body": [
		"NetworkIsPlayerTalking(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nreturns true if someone is screaming or talking in a microphone  \n"
	},
	"N_0x8d11e61a4abf49cc()": {
	  "prefix": "N_0x8d11e61a4abf49cc",
	  "body": "N_0x8d11e61a4abf49cc",
	  "description": "OLD NAME, PLEASE USE NetworkIsPsnAvailable INSTEAD!"
	},
	"NetworkIsPsnAvailable()": {
	  "prefix": "NetworkIsPsnAvailable",
	  "body": [
		"NetworkIsPsnAvailable()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x8d11e61a4abf49cc"
	},
	"NetworkIsSessionActive()": {
	  "prefix": "NetworkIsSessionActive",
	  "body": [
		"NetworkIsSessionActive()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsScriptActive()": {
	  "prefix": "NetworkIsScriptActive",
	  "body": [
		"NetworkIsScriptActive(${1:char* scriptName}, ${2:Player player}, ${3:BOOL p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsSessionBusy()": {
	  "prefix": "NetworkIsSessionBusy",
	  "body": [
		"NetworkIsSessionBusy()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsSessionStarted()": {
	  "prefix": "NetworkIsSessionStarted",
	  "body": [
		"NetworkIsSessionStarted()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nThis checks if player is playing on gta online or not.  \nPlease add an if and block your mod if this is \"true\".  \n"
	},
	"NetworkIsSignedIn()": {
	  "prefix": "NetworkIsSignedIn",
	  "body": [
		"NetworkIsSignedIn()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nReturns whether the player is signed into Social Club.  \n"
	},
	"NetworkIsTextChatActive()": {
	  "prefix": "NetworkIsTextChatActive",
	  "body": [
		"NetworkIsTextChatActive()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nSame as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.  \n"
	},
	"NetworkIsSignedOnline()": {
	  "prefix": "NetworkIsSignedOnline",
	  "body": [
		"NetworkIsSignedOnline()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nReturns whether the game is not in offline mode.  \nseemed not to work for some ppl  \n"
	},
	"N_0xd1110739eeadb592()": {
	  "prefix": "N_0xd1110739eeadb592",
	  "body": "N_0xd1110739eeadb592",
	  "description": "OLD NAME, PLEASE USE NetworkIsThisScriptMarked INSTEAD!"
	},
	"NetworkSetThisScriptMarked()": {
	  "prefix": "NetworkSetThisScriptMarked",
	  "body": "NetworkSetThisScriptMarked",
	  "description": "OLD NAME, PLEASE USE NetworkIsThisScriptMarked INSTEAD!"
	},
	"NetworkIsThisScriptMarked()": {
	  "prefix": "NetworkIsThisScriptMarked",
	  "body": [
		"NetworkIsThisScriptMarked(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xd1110739eeadb592\nOld name: NetworkSetThisScriptMarked"
	},
	"NetworkIsTransitionBusy()": {
	  "prefix": "NetworkIsTransitionBusy",
	  "body": [
		"NetworkIsTransitionBusy()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkIsTransitionHost()": {
	  "prefix": "NetworkIsTransitionHost",
	  "body": [
		"NetworkIsTransitionHost()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkIsTransitionHostFromHandle()": {
	  "prefix": "NetworkIsTransitionHostFromHandle",
	  "body": [
		"NetworkIsTransitionHostFromHandle(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x292564c735375edf()": {
	  "prefix": "N_0x292564c735375edf",
	  "body": "N_0x292564c735375edf",
	  "description": "OLD NAME, PLEASE USE NetworkIsTransitionMatchmaking INSTEAD!"
	},
	"NetworkIsTransitionMatchmaking()": {
	  "prefix": "NetworkIsTransitionMatchmaking",
	  "body": [
		"NetworkIsTransitionMatchmaking()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0x292564c735375edf"
	},
	"NetworkIsTransitionStarted()": {
	  "prefix": "NetworkIsTransitionStarted",
	  "body": [
		"NetworkIsTransitionStarted()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkIsTransitionToGame()": {
	  "prefix": "NetworkIsTransitionToGame",
	  "body": [
		"NetworkIsTransitionToGame()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkJoinTransition()": {
	  "prefix": "NetworkJoinTransition",
	  "body": [
		"NetworkJoinTransition(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nint handle[76];  \nNETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);  \nPlayer uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);  \nNETWORK_JOIN_TRANSITION(uVar2);  \n\t\tnothing doin.  \n"
	},
	"N_0xa06509a691d12be4()": {
	  "prefix": "N_0xa06509a691d12be4",
	  "body": "N_0xa06509a691d12be4",
	  "description": "OLD NAME, PLEASE USE NetworkJoinGroupActivity INSTEAD!"
	},
	"NetworkJoinGroupActivity()": {
	  "prefix": "NetworkJoinGroupActivity",
	  "body": [
		"NetworkJoinGroupActivity()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nOld name: N_0xa06509a691d12be4"
	},
	"NetworkLeaveTransition()": {
	  "prefix": "NetworkLeaveTransition",
	  "body": [
		"NetworkLeaveTransition()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkLaunchTransition()": {
	  "prefix": "NetworkLaunchTransition",
	  "body": [
		"NetworkLaunchTransition()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n"
	},
	"NetworkMarkTransitionGamerAsFullyJoined()": {
	  "prefix": "NetworkMarkTransitionGamerAsFullyJoined",
	  "body": [
		"NetworkMarkTransitionGamerAsFullyJoined(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkMemberIdFromGamerHandle()": {
	  "prefix": "NetworkMemberIdFromGamerHandle",
	  "body": [
		"NetworkMemberIdFromGamerHandle(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n"
	},
	"N_0x3039ae5ad2c9c0c4()": {
	  "prefix": "N_0x3039ae5ad2c9c0c4",
	  "body": "N_0x3039ae5ad2c9c0c4",
	  "description": "OLD NAME, PLEASE USE NetworkOverrideChatRestrictions INSTEAD!"
	},
	"NetworkOverrideChatRestrictions()": {
	  "prefix": "NetworkOverrideChatRestrictions",
	  "body": [
		"NetworkOverrideChatRestrictions(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nCould possibly bypass being muted or automatically muted  \n\nOld name: N_0x3039ae5ad2c9c0c4"
	},
	"N_0x2b3a8f7ca3a38fde()": {
	  "prefix": "N_0x2b3a8f7ca3a38fde",
	  "body": "N_0x2b3a8f7ca3a38fde",
	  "description": "OLD NAME, PLEASE USE NetworkOpenTransitionMatchmaking INSTEAD!"
	},
	"NetworkOpenTransitionMatchmaking()": {
	  "prefix": "NetworkOpenTransitionMatchmaking",
	  "body": [
		"NetworkOpenTransitionMatchmaking()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x2b3a8f7ca3a38fde"
	},
	"N_0xddf73e2b1fec5ab4()": {
	  "prefix": "N_0xddf73e2b1fec5ab4",
	  "body": "N_0xddf73e2b1fec5ab4",
	  "description": "OLD NAME, PLEASE USE NetworkOverrideReceiveRestrictions INSTEAD!"
	},
	"NetworkOverrideReceiveRestrictions()": {
	  "prefix": "NetworkOverrideReceiveRestrictions",
	  "body": [
		"NetworkOverrideReceiveRestrictions(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nR* uses this to hear all player when spectating.   \nIt allows you to hear other online players when their chat is on none, crew and or friends  \n\nOld name: N_0xddf73e2b1fec5ab4"
	},
	"NetworkOverrideClockTime()": {
	  "prefix": "NetworkOverrideClockTime",
	  "body": [
		"NetworkOverrideClockTime(${1:int Hours}, ${2:int Minutes}, ${3:int Seconds})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nWorks in Singleplayer too.  \nActually has a 4th param (BOOL) that sets byte_14273C46C (in b944) to whatever was passed to p3.  \n"
	},
	"N_0x97dd4c5944cc2e6a()": {
	  "prefix": "N_0x97dd4c5944cc2e6a",
	  "body": "N_0x97dd4c5944cc2e6a",
	  "description": "OLD NAME, PLEASE USE NetworkOverrideSendRestrictions INSTEAD!"
	},
	"NetworkOverrideSendRestrictions()": {
	  "prefix": "NetworkOverrideSendRestrictions",
	  "body": [
		"NetworkOverrideSendRestrictions(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nConsole Hash: 0x6C344AE3  \n\"NETWORK_OVERRIDE_SEND_RESTRICTIONS\" is right, but dev-c put a _ by default.  \nThis is used alongside the native,  \n'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read it's description for more info.  \n\nOld name: N_0x97dd4c5944cc2e6a"
	},
	"NetworkPlayerGetName()": {
	  "prefix": "NetworkPlayerGetName",
	  "body": [
		"NetworkPlayerGetName(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n\nReturns the name of a given player. Returns \"**Invalid**\" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.  \nDoes exactly the same as GET_PLAYER_NAME.  \n"
	},
	"NetworkPlayerGetUserId()": {
	  "prefix": "NetworkPlayerGetUserId",
	  "body": "NetworkPlayerGetUserId",
	  "description": "OLD NAME, PLEASE USE NetworkPlayerGetUserid INSTEAD!"
	},
	"NetworkPlayerGetUserid()": {
	  "prefix": "NetworkPlayerGetUserid",
	  "body": [
		"NetworkPlayerGetUserid(${1:Player player}, ${2:char* userID})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n\nSets [userID] to the user id of the given player. Returns \"**Invalid**\" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.  \n\nOld name: NetworkPlayerGetUserId"
	},
	"N_0xaf66059a131aa269()": {
	  "prefix": "N_0xaf66059a131aa269",
	  "body": "N_0xaf66059a131aa269",
	  "description": "OLD NAME, PLEASE USE NetworkOverrideTransitionChat INSTEAD!"
	},
	"NetworkOverrideTransitionChat()": {
	  "prefix": "NetworkOverrideTransitionChat",
	  "body": [
		"NetworkOverrideTransitionChat(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xaf66059a131aa269"
	},
	"NetworkPlayerHasHeadset()": {
	  "prefix": "NetworkPlayerHasHeadset",
	  "body": [
		"NetworkPlayerHasHeadset(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkPlayerIsBadsport()": {
	  "prefix": "NetworkPlayerIsBadsport",
	  "body": [
		"NetworkPlayerIsBadsport()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nReturns whether the player has been reported too often or not.  \nExample : griefing.  \n"
	},
	"NetworkPlayerIsInClan()": {
	  "prefix": "NetworkPlayerIsInClan",
	  "body": [
		"NetworkPlayerIsInClan()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkPlayerIsCheater()": {
	  "prefix": "NetworkPlayerIsCheater",
	  "body": [
		"NetworkPlayerIsCheater()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x172f75b6ee2233ba()": {
	  "prefix": "N_0x172f75b6ee2233ba",
	  "body": "N_0x172f75b6ee2233ba",
	  "description": "OLD NAME, PLEASE USE NetworkPlayerIsUnk INSTEAD!"
	},
	"NetworkPlayerIsUnk()": {
	  "prefix": "NetworkPlayerIsUnk",
	  "body": [
		"NetworkPlayerIsUnk()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nfuck this function in particular.  \nIt's similar to unk_0x9A176B6E but this ones got a different stat hash:  \n0xBC707798  \n\nOld name: N_0x172f75b6ee2233ba"
	},
	"NetworkPlayerIsRockstarDev()": {
	  "prefix": "NetworkPlayerIsRockstarDev",
	  "body": [
		"NetworkPlayerIsRockstarDev(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nChecks if a specific value (BYTE) in CPlayerInfo is nonzero.  \nReturns always false in Singleplayer.  \nNo longer used for dev checks since first mods were released on PS3 & 360.  \nR* now checks with the is_dlc_present native for the dlc hash 2532323046,  \nif that is present it will unlock dev stuff.  \n"
	},
	"N_0x565e430db3b05bec()": {
	  "prefix": "N_0x565e430db3b05bec",
	  "body": "N_0x565e430db3b05bec",
	  "description": "OLD NAME, PLEASE USE NetworkPlayerSomething INSTEAD!"
	},
	"NetworkPlayerSomething()": {
	  "prefix": "NetworkPlayerSomething",
	  "body": [
		"NetworkPlayerSomething(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nNETWORK_PLAYER_???  \n\nOld name: N_0x565e430db3b05bec"
	},
	"N_0x06faacd625d80caa()": {
	  "prefix": "N_0x06faacd625d80caa",
	  "body": "N_0x06faacd625d80caa",
	  "description": "OLD NAME, PLEASE USE NetworkRegisterEntityAsNetworked INSTEAD!"
	},
	"NetworkRegisterEntityAsNetworked()": {
	  "prefix": "NetworkRegisterEntityAsNetworked",
	  "body": [
		"NetworkRegisterEntityAsNetworked(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x06faacd625d80caa"
	},
	"NetworkRegisterHostBroadcastVariables()": {
	  "prefix": "NetworkRegisterHostBroadcastVariables",
	  "body": [
		"NetworkRegisterHostBroadcastVariables(${1:int* vars}, ${2:int sizeofVars})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nsizeofVars is in bytes  \n"
	},
	"NetworkRegisterPlayerBroadcastVariables()": {
	  "prefix": "NetworkRegisterPlayerBroadcastVariables",
	  "body": [
		"NetworkRegisterPlayerBroadcastVariables(${1:int* vars}, ${2:int numVars})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkRemoveEntityArea()": {
	  "prefix": "NetworkRemoveEntityArea",
	  "body": [
		"NetworkRemoveEntityArea(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x726e0375c7a26368()": {
	  "prefix": "N_0x726e0375c7a26368",
	  "body": "N_0x726e0375c7a26368",
	  "description": "OLD NAME, PLEASE USE NetworkRemoveAllTransitionInvite INSTEAD!"
	},
	"NetworkRemoveAllTransitionInvite()": {
	  "prefix": "NetworkRemoveAllTransitionInvite",
	  "body": [
		"NetworkRemoveAllTransitionInvite()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x726e0375c7a26368"
	},
	"N_0xf0210268db0974b1()": {
	  "prefix": "N_0xf0210268db0974b1",
	  "body": "N_0xf0210268db0974b1",
	  "description": "OLD NAME, PLEASE USE NetworkRemovePresenceInvite INSTEAD!"
	},
	"NetworkRemovePresenceInvite()": {
	  "prefix": "NetworkRemovePresenceInvite",
	  "body": [
		"NetworkRemovePresenceInvite(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xf0210268db0974b1"
	},
	"NetworkRemoveTransitionInvite()": {
	  "prefix": "NetworkRemoveTransitionInvite",
	  "body": [
		"NetworkRemoveTransitionInvite(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x924426bffd82e915()": {
	  "prefix": "N_0x924426bffd82e915",
	  "body": "N_0x924426bffd82e915",
	  "description": "OLD NAME, PLEASE USE NetworkRequestCloudBackgroundScripts INSTEAD!"
	},
	"NetworkRequestCloudBackgroundScripts()": {
	  "prefix": "NetworkRequestCloudBackgroundScripts",
	  "body": [
		"NetworkRequestCloudBackgroundScripts()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nNETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS - Correct console hash is 0x98EFB921  \nStart the downloading of BG_NG.RPF from R* Cloud which contains hotfix.  \nThe console hash given is incorrect for Xbox360 that is. I searched in IDA and found 0x98EFB921 which came right after 0x155465EE. Then I searched it in TU27 X360 scripts and found it was the same results same scripts as the PC Hash for this which is obviously correct. I found the correct one as I noticed TU27 X360 script search pulled no results for 0x29532731 when it should have.  \nAs you can see here you will see the 155465EE first then the correct hash for this native. Then the current 29532731 one which could be the native below or the native below's hash could be the has below the 29532731   \npuu.sh/nhdQI/e0ca5567b4.png  \n0x98EFB921 is the correct console hash for \"_DOWNLOAD_BG_SCRIPT_RPF\". 0x29532731 is \"_HAS_BG_SCRIPT_BEEN_DOWNLOADED\"  \nThe code:  \nseg001:00000000003EFF4C uunk_0x29532731:                        # CODE XREF: sub_158C8AC+14p  \nseg001:00000000003EFF4C                 lis       r3, dword_1CFB100@ha  \nseg001:00000000003EFF50                 lwz       r3, dword_1CFB100@l(r3)  \nseg001:00000000003EFF54                 ld        r3, 0x1020(r3)  \nseg001:00000000003EFF58                 extsw     r3, r3  \nseg001:00000000003EFF5C                 blr  \nseg001:00000000003EFF5C # End of function uunk_0x29532731  \n\nOld name: N_0x924426bffd82e915"
	},
	"N_0x42fb3b532d526e6c()": {
	  "prefix": "N_0x42fb3b532d526e6c",
	  "body": "N_0x42fb3b532d526e6c",
	  "description": "OLD NAME, PLEASE USE NetworkRequestCloudTunables INSTEAD!"
	},
	"NetworkRequestCloudTunables()": {
	  "prefix": "NetworkRequestCloudTunables",
	  "body": [
		"NetworkRequestCloudTunables()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nThis native start the download of tunables from R* cloud  \n\nOld name: N_0x42fb3b532d526e6c"
	},
	"NetworkRequestControlOfEntity()": {
	  "prefix": "NetworkRequestControlOfEntity",
	  "body": [
		"NetworkRequestControlOfEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkRequestControlOfDoor()": {
	  "prefix": "NetworkRequestControlOfDoor",
	  "body": [
		"NetworkRequestControlOfDoor(${1:int doorID})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkRequestControlOfNetworkId()": {
	  "prefix": "NetworkRequestControlOfNetworkId",
	  "body": [
		"NetworkRequestControlOfNetworkId(${1:int netId})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"NetworkResetBodyTracker()": {
	  "prefix": "NetworkResetBodyTracker",
	  "body": [
		"NetworkResetBodyTracker()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nhash collision?? - Not sure, but fits alphabetically  \n"
	},
	"N_0x9769f811d1785b03()": {
	  "prefix": "N_0x9769f811d1785b03",
	  "body": "N_0x9769f811d1785b03",
	  "description": "OLD NAME, PLEASE USE NetworkRespawnCoords INSTEAD!"
	},
	"NetworkRespawnCoords()": {
	  "prefix": "NetworkRespawnCoords",
	  "body": [
		"NetworkRespawnCoords(${1:Player player}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\np4 and p5 are always 0 in scripts  \n\nOld name: N_0x9769f811d1785b03"
	},
	"NetworkResurrectLocalPlayer()": {
	  "prefix": "NetworkResurrectLocalPlayer",
	  "body": [
		"NetworkResurrectLocalPlayer(${1:float x}, ${2:float y}, ${3:float z}, ${4:float heading}, ${5:BOOL unk}, ${6:BOOL changetime})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x49ec8030f5015f8b()": {
	  "prefix": "N_0x49ec8030f5015f8b",
	  "body": "N_0x49ec8030f5015f8b",
	  "description": "OLD NAME, PLEASE USE NetworkSctvSlots INSTEAD!"
	},
	"NetworkSctvSlots()": {
	  "prefix": "NetworkSctvSlots",
	  "body": [
		"NetworkSctvSlots(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\np0 = 0 or 4  \n\nOld name: N_0x49ec8030f5015f8b"
	},
	"N_0xc3c7a6afdb244624()": {
	  "prefix": "N_0xc3c7a6afdb244624",
	  "body": "N_0xc3c7a6afdb244624",
	  "description": "OLD NAME, PLEASE USE NetworkSendPresenceInvite INSTEAD!"
	},
	"NetworkSendPresenceInvite()": {
	  "prefix": "NetworkSendPresenceInvite",
	  "body": [
		"NetworkSendPresenceInvite(${1:int* networkHandle}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xc3c7a6afdb244624"
	},
	"N_0xc116ff9b4d488291()": {
	  "prefix": "N_0xc116ff9b4d488291",
	  "body": "N_0xc116ff9b4d488291",
	  "description": "OLD NAME, PLEASE USE NetworkSendPresenceTransitionInvite INSTEAD!"
	},
	"NetworkSendPresenceTransitionInvite()": {
	  "prefix": "NetworkSendPresenceTransitionInvite",
	  "body": [
		"NetworkSendPresenceTransitionInvite(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nString \"NETWORK_SEND_PRESENCE_TRANSITION_INVITE\" is contained in the function in ida so this one is correct.  \n\nOld name: N_0xc116ff9b4d488291"
	},
	"NetworkSendTextMessage()": {
	  "prefix": "NetworkSendTextMessage",
	  "body": [
		"NetworkSendTextMessage(${1:char* message}, ${2:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nhow can I increase the character limit on this native?  \n--------------------------------  \nreturn - it's possible for it to have an error and return a value. One error is if it cannot find space to create the event it doesn't send the text and returns zero. It also returns 0 is the strlen is 0 or the strlen > 0x100 (I thought it was 64 so idk why it's checking 265. I may just be dumb :P ) There are other ways it could return 0 also but who the hell cares cuz it's very unlikely, but it returns a bool.  \nto the top guy, idk if it is possible. It is probably read a max of 64 characters on the recieving end so even if we did modify it to send more it probably wouldn't work. One of the other problems is that in part of the function it copies the string to the local stack which means we would have to change that to make it work.  \n"
	},
	"NetworkSendTransitionGamerInstruction()": {
	  "prefix": "NetworkSendTransitionGamerInstruction",
	  "body": [
		"NetworkSendTransitionGamerInstruction(${1:int* networkHandle}, ${2:char* p1}, ${3:int p2}, ${4:int p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nthe first arg seems to be the network player handle (&handle) and the second var is pretty much always \"\" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1  \ndoes this send an invite to a player?  \n"
	},
	"N_0xa73667484d7037c3()": {
	  "prefix": "N_0xa73667484d7037c3",
	  "body": "N_0xa73667484d7037c3",
	  "description": "OLD NAME, PLEASE USE NetworkSessionBlockJoinRequests INSTEAD!"
	},
	"NetworkSessionBlockJoinRequests()": {
	  "prefix": "NetworkSessionBlockJoinRequests",
	  "body": [
		"NetworkSessionBlockJoinRequests(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xa73667484d7037c3"
	},
	"N_0xbe3e347a87aceb82()": {
	  "prefix": "N_0xbe3e347a87aceb82",
	  "body": "N_0xbe3e347a87aceb82",
	  "description": "OLD NAME, PLEASE USE NetworkSessionActivityQuickmatch INSTEAD!"
	},
	"NetworkSessionActivityQuickmatch()": {
	  "prefix": "NetworkSessionActivityQuickmatch",
	  "body": [
		"NetworkSessionActivityQuickmatch(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xbe3e347a87aceb82"
	},
	"N_0xb4ab419e0d86acae()": {
	  "prefix": "N_0xb4ab419e0d86acae",
	  "body": "N_0xb4ab419e0d86acae",
	  "description": "OLD NAME, PLEASE USE NetworkSessionChangeSlots INSTEAD!"
	},
	"NetworkSessionChangeSlots()": {
	  "prefix": "NetworkSessionChangeSlots",
	  "body": [
		"NetworkSessionChangeSlots(${1:int p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xb4ab419e0d86acae"
	},
	"NetworkSessionCancelInvite()": {
	  "prefix": "NetworkSessionCancelInvite",
	  "body": [
		"NetworkSessionCancelInvite()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSessionEnd()": {
	  "prefix": "NetworkSessionEnd",
	  "body": [
		"NetworkSessionEnd(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\np0 is always false and p1 varies.  \nNETWORK_SESSION_END(0, 1)  \nNETWORK_SESSION_END(0, 0)  \nResults in: \"Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later.\"  \n"
	},
	"N_0x94bc51e9449d917f()": {
	  "prefix": "N_0x94bc51e9449d917f",
	  "body": "N_0x94bc51e9449d917f",
	  "description": "OLD NAME, PLEASE USE NetworkSessionCrewMatchmaking INSTEAD!"
	},
	"NetworkSessionCrewMatchmaking()": {
	  "prefix": "NetworkSessionCrewMatchmaking",
	  "body": [
		"NetworkSessionCrewMatchmaking(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int maxPlayers}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x94bc51e9449d917f"
	},
	"N_0xa29177f7703b5644()": {
	  "prefix": "N_0xa29177f7703b5644",
	  "body": "N_0xa29177f7703b5644",
	  "description": "OLD NAME, PLEASE USE NetworkSessionForceCancelInvite INSTEAD!"
	},
	"NetworkSessionForceCancelInvite()": {
	  "prefix": "NetworkSessionForceCancelInvite",
	  "body": [
		"NetworkSessionForceCancelInvite()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xa29177f7703b5644"
	},
	"NetworkSessionEnter()": {
	  "prefix": "NetworkSessionEnter",
	  "body": [
		"NetworkSessionEnter(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:int maxPlayers}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Any\n\nunknown params  \np0 = 0, 2, or 999 (The global is 999 by default.)  \np1 = 0 (Always in every script it's found in atleast.)  \np2 = 0, 3, or 4 (Based on a var that is determined by a function.)  \np3 = maxPlayers (It's obvious in x360 scripts it's always 18)  \np4 = 0 (Always in every script it's found in atleast.)  \np5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)  \np5 is reset to 0 if,  \nGlobal_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.  \n"
	},
	"N_0x2cfc76e0d087c994()": {
	  "prefix": "N_0x2cfc76e0d087c994",
	  "body": "N_0x2cfc76e0d087c994",
	  "description": "OLD NAME, PLEASE USE NetworkSessionFriendMatchmaking INSTEAD!"
	},
	"NetworkSessionFriendMatchmaking()": {
	  "prefix": "NetworkSessionFriendMatchmaking",
	  "body": [
		"NetworkSessionFriendMatchmaking(${1:int p0}, ${2:int p1}, ${3:int maxPlayers}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x2cfc76e0d087c994"
	},
	"NetworkSessionGetInviter()": {
	  "prefix": "NetworkSessionGetInviter",
	  "body": [
		"NetworkSessionGetInviter(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x56ce820830ef040b()": {
	  "prefix": "N_0x56ce820830ef040b",
	  "body": "N_0x56ce820830ef040b",
	  "description": "OLD NAME, PLEASE USE NetworkSessionGetUnk INSTEAD!"
	},
	"NetworkSessionGetUnk()": {
	  "prefix": "NetworkSessionGetUnk",
	  "body": [
		"NetworkSessionGetUnk(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nOld name: N_0x56ce820830ef040b"
	},
	"NetworkSessionHostFriendsOnly()": {
	  "prefix": "NetworkSessionHostFriendsOnly",
	  "body": [
		"NetworkSessionHostFriendsOnly(${1:int p0}, ${2:int maxPlayers})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nDoes nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.  \n"
	},
	"NetworkSessionHost()": {
	  "prefix": "NetworkSessionHost",
	  "body": [
		"NetworkSessionHost(${1:int p0}, ${2:int maxPlayers}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nDoes nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.  \n"
	},
	"N_0xc19f6c8e7865a6ff()": {
	  "prefix": "N_0xc19f6c8e7865a6ff",
	  "body": "N_0xc19f6c8e7865a6ff",
	  "description": "OLD NAME, PLEASE USE NetworkSessionHosted INSTEAD!"
	},
	"NetworkSessionHosted()": {
	  "prefix": "NetworkSessionHosted",
	  "body": [
		"NetworkSessionHosted(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0xc19f6c8e7865a6ff"
	},
	"N_0xed34c0c02c098bb7()": {
	  "prefix": "N_0xed34c0c02c098bb7",
	  "body": "N_0xed34c0c02c098bb7",
	  "description": "OLD NAME, PLEASE USE NetworkSessionHostClosed INSTEAD!"
	},
	"NetworkSessionHostClosed()": {
	  "prefix": "NetworkSessionHostClosed",
	  "body": [
		"NetworkSessionHostClosed(${1:int p0}, ${2:int maxPlayers})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xed34c0c02c098bb7"
	},
	"N_0xfbcfa2ea2e206890()": {
	  "prefix": "N_0xfbcfa2ea2e206890",
	  "body": "N_0xfbcfa2ea2e206890",
	  "description": "OLD NAME, PLEASE USE NetworkSessionIsClosedFriends INSTEAD!"
	},
	"NetworkSessionIsClosedFriends()": {
	  "prefix": "NetworkSessionIsClosedFriends",
	  "body": [
		"NetworkSessionIsClosedFriends()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xfbcfa2ea2e206890"
	},
	"NetworkSessionHostSinglePlayer()": {
	  "prefix": "NetworkSessionHostSinglePlayer",
	  "body": [
		"NetworkSessionHostSinglePlayer(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nLoads up the map that is loaded when beeing in mission creator  \nPlayer gets placed in a mix between online/offline mode  \np0 is always 2 in R* scripts.  \nAppears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812  \n"
	},
	"N_0xcef70aa5b3f89ba1()": {
	  "prefix": "N_0xcef70aa5b3f89ba1",
	  "body": "N_0xcef70aa5b3f89ba1",
	  "description": "OLD NAME, PLEASE USE NetworkSessionIsPrivate INSTEAD!"
	},
	"NetworkSessionIsPrivate()": {
	  "prefix": "NetworkSessionIsPrivate",
	  "body": [
		"NetworkSessionIsPrivate()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xcef70aa5b3f89ba1"
	},
	"N_0x74732c6ca90da2b4()": {
	  "prefix": "N_0x74732c6ca90da2b4",
	  "body": "N_0x74732c6ca90da2b4",
	  "description": "OLD NAME, PLEASE USE NetworkSessionIsClosedCrew INSTEAD!"
	},
	"NetworkSessionIsClosedCrew()": {
	  "prefix": "NetworkSessionIsClosedCrew",
	  "body": [
		"NetworkSessionIsClosedCrew()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x74732c6ca90da2b4"
	},
	"N_0xf3929c2379b60cce()": {
	  "prefix": "N_0xf3929c2379b60cce",
	  "body": "N_0xf3929c2379b60cce",
	  "description": "OLD NAME, PLEASE USE NetworkSessionIsSolo INSTEAD!"
	},
	"NetworkSessionIsSolo()": {
	  "prefix": "NetworkSessionIsSolo",
	  "body": [
		"NetworkSessionIsSolo()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xf3929c2379b60cce"
	},
	"NetworkSessionArePlayersVotingToKick()": {
	  "prefix": "NetworkSessionArePlayersVotingToKick",
	  "body": "NetworkSessionArePlayersVotingToKick",
	  "description": "OLD NAME, PLEASE USE NetworkSessionIsPlayerVotedToKick INSTEAD!"
	},
	"NetworkSessionIsPlayerVotedToKick()": {
	  "prefix": "NetworkSessionIsPlayerVotedToKick",
	  "body": [
		"NetworkSessionIsPlayerVotedToKick(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: NetworkSessionArePlayersVotingToKick"
	},
	"NetworkSessionKickPlayer()": {
	  "prefix": "NetworkSessionKickPlayer",
	  "body": [
		"NetworkSessionKickPlayer(${1:Player player})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOnly works when you are host.  \n"
	},
	"N_0x271cc6ab59ebf9a5()": {
	  "prefix": "N_0x271cc6ab59ebf9a5",
	  "body": "N_0x271cc6ab59ebf9a5",
	  "description": "OLD NAME, PLEASE USE NetworkSessionMarkVisible INSTEAD!"
	},
	"NetworkSessionMarkVisible()": {
	  "prefix": "NetworkSessionMarkVisible",
	  "body": [
		"NetworkSessionMarkVisible(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x271cc6ab59ebf9a5"
	},
	"N_0xba416d68c631496a()": {
	  "prefix": "N_0xba416d68c631496a",
	  "body": "N_0xba416d68c631496a",
	  "description": "OLD NAME, PLEASE USE NetworkSessionIsVisible INSTEAD!"
	},
	"NetworkSessionIsVisible()": {
	  "prefix": "NetworkSessionIsVisible",
	  "body": [
		"NetworkSessionIsVisible()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xba416d68c631496a"
	},
	"NetworkSessionLeaveSinglePlayer()": {
	  "prefix": "NetworkSessionLeaveSinglePlayer",
	  "body": [
		"NetworkSessionLeaveSinglePlayer()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSessionVoiceHost()": {
	  "prefix": "NetworkSessionVoiceHost",
	  "body": [
		"NetworkSessionVoiceHost()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x8b6a4dd0af9ce215()": {
	  "prefix": "N_0x8b6a4dd0af9ce215",
	  "body": "N_0x8b6a4dd0af9ce215",
	  "description": "OLD NAME, PLEASE USE NetworkSessionSetMaxPlayers INSTEAD!"
	},
	"NetworkSessionSetMaxPlayers()": {
	  "prefix": "NetworkSessionSetMaxPlayers",
	  "body": [
		"NetworkSessionSetMaxPlayers(${1:int playerType}, ${2:int playerCount})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nBLR the shit.  \n\nOld name: N_0x8b6a4dd0af9ce215"
	},
	"NetworkSetActivitySpectator()": {
	  "prefix": "NetworkSetActivitySpectator",
	  "body": [
		"NetworkSetActivitySpectator(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSessionVoiceLeave()": {
	  "prefix": "NetworkSessionVoiceLeave",
	  "body": [
		"NetworkSessionVoiceLeave()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetActivitySpectatorMax()": {
	  "prefix": "NetworkSetActivitySpectatorMax",
	  "body": [
		"NetworkSetActivitySpectatorMax(${1:int maxSpectators})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetCurrentlySelectedGamerHandleFromInviteMenu()": {
	  "prefix": "NetworkSetCurrentlySelectedGamerHandleFromInviteMenu",
	  "body": [
		"NetworkSetCurrentlySelectedGamerHandleFromInviteMenu(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"N_0x23dfb504655d0ce4()": {
	  "prefix": "N_0x23dfb504655d0ce4",
	  "body": "N_0x23dfb504655d0ce4",
	  "description": "OLD NAME, PLEASE USE NetworkSessionWasInvited INSTEAD!"
	},
	"NetworkSessionWasInvited()": {
	  "prefix": "NetworkSessionWasInvited",
	  "body": [
		"NetworkSessionWasInvited()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x23dfb504655d0ce4"
	},
	"N_0xf1ca12b18aef5298()": {
	  "prefix": "N_0xf1ca12b18aef5298",
	  "body": "N_0xf1ca12b18aef5298",
	  "description": "OLD NAME, PLEASE USE NetworkSetEntityInvisibleToNetwork INSTEAD!"
	},
	"NetworkSetEntityVisibleToNetwork()": {
	  "prefix": "NetworkSetEntityVisibleToNetwork",
	  "body": "NetworkSetEntityVisibleToNetwork",
	  "description": "OLD NAME, PLEASE USE NetworkSetEntityInvisibleToNetwork INSTEAD!"
	},
	"NetworkSetEntityInvisibleToNetwork()": {
	  "prefix": "NetworkSetEntityInvisibleToNetwork",
	  "body": [
		"NetworkSetEntityInvisibleToNetwork(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nif set to true other network players can't see it  \nif set to false other network player can see it  \n=========================================  \n^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.  \npc or last gen?  \n^^ last-gen  \n\nOld name: N_0xf1ca12b18aef5298\nOld name: NetworkSetEntityVisibleToNetwork"
	},
	"NetworkSetEntityCanBlend()": {
	  "prefix": "NetworkSetEntityCanBlend",
	  "body": [
		"NetworkSetEntityCanBlend(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetGamerInvitedToTransition()": {
	  "prefix": "NetworkSetGamerInvitedToTransition",
	  "body": [
		"NetworkSetGamerInvitedToTransition(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetFriendlyFireOption()": {
	  "prefix": "NetworkSetFriendlyFireOption",
	  "body": [
		"NetworkSetFriendlyFireOption(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\n//friendly fire toggle  \n"
	},
	"NetworkSetKeepFocuspoint()": {
	  "prefix": "NetworkSetKeepFocuspoint",
	  "body": [
		"NetworkSetKeepFocuspoint(${1:BOOL p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nhash collision???  \n"
	},
	"NetworkSetInMpCutscene()": {
	  "prefix": "NetworkSetInMpCutscene",
	  "body": [
		"NetworkSetInMpCutscene(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetLocalPlayerInvincibleTime()": {
	  "prefix": "NetworkSetLocalPlayerInvincibleTime",
	  "body": [
		"NetworkSetLocalPlayerInvincibleTime(${1:int time})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetInSpectatorMode()": {
	  "prefix": "NetworkSetInSpectatorMode",
	  "body": [
		"NetworkSetInSpectatorMode(${1:BOOL toggle}, ${2:Ped playerPed})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x2b1813aba29016c5()": {
	  "prefix": "N_0x2b1813aba29016c5",
	  "body": "N_0x2b1813aba29016c5",
	  "description": "OLD NAME, PLEASE USE NetworkSetNetworkIdDynamic INSTEAD!"
	},
	"NetworkSetNetworkIdDynamic()": {
	  "prefix": "NetworkSetNetworkIdDynamic",
	  "body": [
		"NetworkSetNetworkIdDynamic(${1:int netID}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nThis is called shortly after setting Network ID Migration off it seems. Does anyone know the point of this?   \nExample scenario,   \nIf I were to request and gain control of an online players vehicle then their vehicle's Network ID and turn migration off. I wouldn't need to ever request control again as they wouldn't gain control back.   \n- scenario over -  \nSo what would be the point hereafter of setting it 'dynamic'?  \n\nOld name: N_0x2b1813aba29016c5"
	},
	"NetworkSetMissionFinished()": {
	  "prefix": "NetworkSetMissionFinished",
	  "body": [
		"NetworkSetMissionFinished()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetOverrideSpectatorMode()": {
	  "prefix": "NetworkSetOverrideSpectatorMode",
	  "body": [
		"NetworkSetOverrideSpectatorMode(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x3e200c2bcf4164eb()": {
	  "prefix": "N_0x3e200c2bcf4164eb",
	  "body": "N_0x3e200c2bcf4164eb",
	  "description": "OLD NAME, PLEASE USE NetworkSetRichPresence_2 INSTEAD!"
	},
	"NetworkSetRichPresence_2()": {
	  "prefix": "NetworkSetRichPresence_2",
	  "body": [
		"NetworkSetRichPresence_2(${1:int p0}, ${2:char* gxtLabel})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n**This native does absolutely nothing, just a nullsub**\n\n\nNETWORK_SET_RICH_PRESENCE but for PlayStation? (On PC it's a nullsub)  \n\nOld name: N_0x3e200c2bcf4164eb"
	},
	"NetworkSetPropertyId()": {
	  "prefix": "NetworkSetPropertyId",
	  "body": [
		"NetworkSetPropertyId(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetTeamOnlyChat()": {
	  "prefix": "NetworkSetTeamOnlyChat",
	  "body": [
		"NetworkSetTeamOnlyChat(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetRichPresence()": {
	  "prefix": "NetworkSetRichPresence",
	  "body": [
		"NetworkSetRichPresence(${1:int p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOn PC it's a nullsub which means it does absolutely nothing.  \nNow that Discord supports Rich Presence, R* might finally implement this for PC. Or maybe in future games like RDR2, GTA VI...  \n"
	},
	"N_0x30de938b516f0ad2()": {
	  "prefix": "N_0x30de938b516f0ad2",
	  "body": "N_0x30de938b516f0ad2",
	  "description": "OLD NAME, PLEASE USE NetworkSetTransitionActivityId INSTEAD!"
	},
	"NetworkSetTransitionActivityId()": {
	  "prefix": "NetworkSetTransitionActivityId",
	  "body": [
		"NetworkSetTransitionActivityId(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x30de938b516f0ad2"
	},
	"NetworkSetTransitionCreatorHandle()": {
	  "prefix": "NetworkSetTransitionCreatorHandle",
	  "body": [
		"NetworkSetTransitionCreatorHandle(${1:Any* p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetTalkerProximity()": {
	  "prefix": "NetworkSetTalkerProximity",
	  "body": [
		"NetworkSetTalkerProximity(${1:float p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetVoiceChannel()": {
	  "prefix": "NetworkSetVoiceChannel",
	  "body": [
		"NetworkSetVoiceChannel(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkSetThisScriptIsNetworkScript()": {
	  "prefix": "NetworkSetThisScriptIsNetworkScript",
	  "body": [
		"NetworkSetThisScriptIsNetworkScript(${1:int lobbySize}, ${2:BOOL p1}, ${3:int playerId})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\np1 is always 0  \n"
	},
	"NetworkSetVoiceActive()": {
	  "prefix": "NetworkSetVoiceActive",
	  "body": [
		"NetworkSetVoiceActive(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkStartSynchronisedScene()": {
	  "prefix": "NetworkStartSynchronisedScene",
	  "body": [
		"NetworkStartSynchronisedScene(${1:int netScene})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"NetworkShowProfileUi()": {
	  "prefix": "NetworkShowProfileUi",
	  "body": [
		"NetworkShowProfileUi(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nExample:  \nint playerHandle;\t  \nNETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13);  \nNETWORK_SHOW_PROFILE_UI(&playerHandle);  \n"
	},
	"NetworkSuppressInvite()": {
	  "prefix": "NetworkSuppressInvite",
	  "body": [
		"NetworkSuppressInvite(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xabd5e88b8a2d3db2()": {
	  "prefix": "N_0xabd5e88b8a2d3db2",
	  "body": "N_0xabd5e88b8a2d3db2",
	  "description": "OLD NAME, PLEASE USE NetworkVoiceConnectToPlayer INSTEAD!"
	},
	"NetworkVoiceConnectToPlayer()": {
	  "prefix": "NetworkVoiceConnectToPlayer",
	  "body": [
		"NetworkVoiceConnectToPlayer(${1:Any* globalPtr})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOnly one occurence in the scripts:  \nauto sub_cb43(auto a_0, auto a_1) {  \n    if (g_2594CB._f1) {  \n        if (NETWORK::_855BC38818F6F684()) {  \n            NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93);  \n            g_2594CB._f14/*{13}*/ = a_0._fB93;  \n            g_2594CB._f4/*\"64\"*/ = a_1;  \n            return 1;  \n        }  \n    }  \n    return 0;  \n}  \nother:  \nlooks like it passes a player in the paramater  \nContains string \"NETWORK_VOICE_CONNECT_TO_PLAYER\" in ida  \n\nOld name: N_0xabd5e88b8a2d3db2"
	},
	"NetworkStopSynchronisedScene()": {
	  "prefix": "NetworkStopSynchronisedScene",
	  "body": [
		"NetworkStopSynchronisedScene(${1:int netScene})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"ObjToNet()": {
	  "prefix": "ObjToNet",
	  "body": [
		"ObjToNet(${1:Object object})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nLets objects spawn online simply do it like this:  \nint createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));  \n"
	},
	"ParticipantIdToInt()": {
	  "prefix": "ParticipantIdToInt",
	  "body": [
		"ParticipantIdToInt()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\nReturn the local Participant ID.  \nThis native is exactly the same as 'PARTICIPANT_ID' native.  \n"
	},
	"N_0x7368e683bb9038d6()": {
	  "prefix": "N_0x7368e683bb9038d6",
	  "body": "N_0x7368e683bb9038d6",
	  "description": "OLD NAME, PLEASE USE NetworkUnregisterNetworkedEntity INSTEAD!"
	},
	"NetworkUnregisterNetworkedEntity()": {
	  "prefix": "NetworkUnregisterNetworkedEntity",
	  "body": [
		"NetworkUnregisterNetworkedEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOld name: N_0x7368e683bb9038d6"
	},
	"PedToNet()": {
	  "prefix": "PedToNet",
	  "body": [
		"PedToNet(${1:Ped ped})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\ngets the network id of a ped  \n"
	},
	"N_0xe532d6811b3a4d2a()": {
	  "prefix": "N_0xe532d6811b3a4d2a",
	  "body": "N_0xe532d6811b3a4d2a",
	  "description": "OLD NAME, PLEASE USE NetworkXAffectsGamers INSTEAD!"
	},
	"NetworkXAffectsGamers()": {
	  "prefix": "NetworkXAffectsGamers",
	  "body": [
		"NetworkXAffectsGamers(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0xe532d6811b3a4d2a"
	},
	"ParticipantId()": {
	  "prefix": "ParticipantId",
	  "body": [
		"ParticipantId()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: Player\n\nReturn the local Participant ID  \n"
	},
	"ReserveNetworkMissionPeds()": {
	  "prefix": "ReserveNetworkMissionPeds",
	  "body": [
		"ReserveNetworkMissionPeds(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetBalanceAddMachine()": {
	  "prefix": "SetBalanceAddMachine",
	  "body": [
		"SetBalanceAddMachine(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"SetBalanceAddMachines()": {
	  "prefix": "SetBalanceAddMachines",
	  "body": [
		"SetBalanceAddMachines(${1:Any* p0}, ${2:Any p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n"
	},
	"ReserveNetworkMissionObjects()": {
	  "prefix": "ReserveNetworkMissionObjects",
	  "body": [
		"ReserveNetworkMissionObjects(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetEntityLocallyVisible()": {
	  "prefix": "SetEntityLocallyVisible",
	  "body": [
		"SetEntityLocallyVisible(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nI tried using this and I see nothing happening, what is this suppose to do?  \n"
	},
	"ReserveNetworkMissionVehicles()": {
	  "prefix": "ReserveNetworkMissionVehicles",
	  "body": [
		"ReserveNetworkMissionVehicles(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetLocalPlayerVisibleInCutscene()": {
	  "prefix": "SetLocalPlayerVisibleInCutscene",
	  "body": [
		"SetLocalPlayerVisibleInCutscene(${1:BOOL p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetEntityLocallyInvisible()": {
	  "prefix": "SetEntityLocallyInvisible",
	  "body": [
		"SetEntityLocallyInvisible(${1:Entity entity})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nI tried using this and I see nothing happening, what is this suppose to do?  \n"
	},
	"SetNetworkIdCanMigrate()": {
	  "prefix": "SetNetworkIdCanMigrate",
	  "body": [
		"SetNetworkIdCanMigrate(${1:int netId}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nWhether or not another player is allowed to take control of the entity  \n"
	},
	"SetNetworkIdExistsOnAllMachines()": {
	  "prefix": "SetNetworkIdExistsOnAllMachines",
	  "body": [
		"SetNetworkIdExistsOnAllMachines(${1:int netId}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetEntityVisibleInCutscene()": {
	  "prefix": "SetEntityVisibleInCutscene",
	  "body": [
		"SetEntityVisibleInCutscene(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetNetworkIdVisibleInCutscene()": {
	  "prefix": "SetNetworkIdVisibleInCutscene",
	  "body": [
		"SetNetworkIdVisibleInCutscene(${1:int netId}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetLocalPlayerInvisibleLocally()": {
	  "prefix": "SetLocalPlayerInvisibleLocally",
	  "body": [
		"SetLocalPlayerInvisibleLocally(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x6274c4712850841e()": {
	  "prefix": "N_0x6274c4712850841e",
	  "body": "N_0x6274c4712850841e",
	  "description": "OLD NAME, PLEASE USE SetNetworkObjectNonContact INSTEAD!"
	},
	"SetNetworkObjectNonContact()": {
	  "prefix": "SetNetworkObjectNonContact",
	  "body": [
		"SetNetworkObjectNonContact(${1:Object object}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nOriginal put name,  \n_SET_NETWORK_VEHICLE_NON_CONTACT  \nHowever changed to 'object' as the instances where this is called in scripts both freemode and golf it's only used on objects after the objects are called OBJ_TO_NET p_parachute_s (freemode) prop_golf_ball (golf). Tho the script search was done via TU27 Xbox360 ones.  \nGot my hopes up whoever put this as vehicle. I was hoping it was what R* used in non-contact races.  \n\nOld name: N_0x6274c4712850841e"
	},
	"SetPlayerInvisibleLocally()": {
	  "prefix": "SetPlayerInvisibleLocally",
	  "body": [
		"SetPlayerInvisibleLocally(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"SetLocalPlayerVisibleLocally()": {
	  "prefix": "SetLocalPlayerVisibleLocally",
	  "body": [
		"SetLocalPlayerVisibleLocally(${1:BOOL p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0xa8a024587329f36a()": {
	  "prefix": "N_0xa8a024587329f36a",
	  "body": "N_0xa8a024587329f36a",
	  "description": "OLD NAME, PLEASE USE SetNetworkIdSyncToPlayer INSTEAD!"
	},
	"SetNetworkIdSyncToPlayer()": {
	  "prefix": "SetNetworkIdSyncToPlayer",
	  "body": [
		"SetNetworkIdSyncToPlayer(${1:int netId}, ${2:Player player}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nnot tested....  \n\nOld name: N_0xa8a024587329f36a"
	},
	"ShutdownAndLaunchSinglePlayerGame()": {
	  "prefix": "ShutdownAndLaunchSinglePlayerGame",
	  "body": [
		"ShutdownAndLaunchSinglePlayerGame()"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nStarts a new singleplayer game (at the prologue).  \n"
	},
	"TextureDownloadGetName()": {
	  "prefix": "TextureDownloadGetName",
	  "body": [
		"TextureDownloadGetName(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: char*\n"
	},
	"SetNetworkVehicleRespotTimer()": {
	  "prefix": "SetNetworkVehicleRespotTimer",
	  "body": [
		"SetNetworkVehicleRespotTimer(${1:int netId}, ${2:int time})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"N_0x5776ed562c134687()": {
	  "prefix": "N_0x5776ed562c134687",
	  "body": "N_0x5776ed562c134687",
	  "description": "OLD NAME, PLEASE USE TextureDownloadHasFailed INSTEAD!"
	},
	"TextureDownloadHasFailed()": {
	  "prefix": "TextureDownloadHasFailed",
	  "body": [
		"TextureDownloadHasFailed(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nOld name: N_0x5776ed562c134687"
	},
	"SetPlayerVisibleLocally()": {
	  "prefix": "SetPlayerVisibleLocally",
	  "body": [
		"SetPlayerVisibleLocally(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"TextureDownloadRequest()": {
	  "prefix": "TextureDownloadRequest",
	  "body": [
		"TextureDownloadRequest(${1:int* PlayerHandle}, ${2:char* FilePath}, ${3:char* Name}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n"
	},
	"SetStoreEnabled()": {
	  "prefix": "SetStoreEnabled",
	  "body": [
		"SetStoreEnabled(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nAccess to the store for shark cards etc...  \n"
	},
	"UsingNetworkWeapontype()": {
	  "prefix": "UsingNetworkWeapontype",
	  "body": [
		"UsingNetworkWeapontype(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: BOOL\n\nhash collision?  \n"
	},
	"TextureDownloadRelease()": {
	  "prefix": "TextureDownloadRelease",
	  "body": [
		"TextureDownloadRelease(${1:int p0})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n"
	},
	"UsePlayerColourInsteadOfTeamColour()": {
	  "prefix": "UsePlayerColourInsteadOfTeamColour",
	  "body": [
		"UsePlayerColourInsteadOfTeamColour(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: void\n\nhash collision?  \n"
	},
	"VehToNet()": {
	  "prefix": "VehToNet",
	  "body": [
		"VehToNet(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: NETWORK\nReturns: int\n\ncalls from vehicle to net.  \n"
	},
	"N_0x1c2473301b1c66ba()": {
	  "prefix": "N_0x1c2473301b1c66ba",
	  "body": [
		"N_0x1c2473301b1c66ba()"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: Any\n\nNETWORK_CAN_R??? or NETWORK_CAN_S???  \n"
	},
	"N_0x6fcf8ddea146c45b()": {
	  "prefix": "N_0x6fcf8ddea146c45b",
	  "body": [
		"N_0x6fcf8ddea146c45b(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nThis function is hard-coded to always return 1. Крч какая-то хуйня.  \n"
	},
	"N_0x7c4fccd2e4deb394()": {
	  "prefix": "N_0x7c4fccd2e4deb394",
	  "body": [
		"N_0x7c4fccd2e4deb394()"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n\nUsed for cash gifts  \nConsole Hash  \n"
	},
	"N_0xe154b48b68ef72bc()": {
	  "prefix": "N_0xe154b48b68ef72bc",
	  "body": [
		"N_0xe154b48b68ef72bc(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n\nThis function is hard-coded to always return 1.  \n"
	},
	"N_0x7303e27cc6532080()": {
	  "prefix": "N_0x7303e27cc6532080",
	  "body": [
		"N_0x7303e27cc6532080(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any* p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n\nNETWORK_CAN_R??? or NETWORK_CAN_S???  \n"
	},
	"N_0xe260e0bb9cd995ac()": {
	  "prefix": "N_0xe260e0bb9cd995ac",
	  "body": [
		"N_0xe260e0bb9cd995ac(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n"
	},
	"N_0xdc18531d7019a535()": {
	  "prefix": "N_0xdc18531d7019a535",
	  "body": [
		"N_0xdc18531d7019a535(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n\nprobably 0x3461981 on console  \n"
	},
	"N_0xf70efa14fe091429()": {
	  "prefix": "N_0xf70efa14fe091429",
	  "body": [
		"N_0xf70efa14fe091429(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: Any\n"
	},
	"NetworkBuyAirstrike()": {
	  "prefix": "NetworkBuyAirstrike",
	  "body": [
		"NetworkBuyAirstrike(${1:int cost}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\np1 = 0 (always)  \np2 = 1 (always)  \n"
	},
	"NetworkBuyBounty()": {
	  "prefix": "NetworkBuyBounty",
	  "body": [
		"NetworkBuyBounty(${1:int amount}, ${2:Player victim}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\np1 is just an assumption. p2 was false and p3 was true.  \n"
	},
	"N_0x8a7b3952dd64d2b5()": {
	  "prefix": "N_0x8a7b3952dd64d2b5",
	  "body": "N_0x8a7b3952dd64d2b5",
	  "description": "OLD NAME, PLEASE USE NetworkBuyFairgroundRide INSTEAD!"
	},
	"NetworkBuyFairgroundRide()": {
	  "prefix": "NetworkBuyFairgroundRide",
	  "body": [
		"NetworkBuyFairgroundRide(${1:int amountSpent}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nThe first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.  \nThe last 3 parameters are,   \n2,0,1 in the am_ferriswheel.c  \n1,0,1 in the am_rollercoaster.c  \n\nOld name: N_0x8a7b3952dd64d2b5"
	},
	"NetworkBuyHeliStrike()": {
	  "prefix": "NetworkBuyHeliStrike",
	  "body": [
		"NetworkBuyHeliStrike(${1:int cost}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\np1 = 0 (always)  \np2 = 1 (always)  \n"
	},
	"NetworkBuyHealthcare()": {
	  "prefix": "NetworkBuyHealthcare",
	  "body": [
		"NetworkBuyHealthcare(${1:int cost}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkBuyItem()": {
	  "prefix": "NetworkBuyItem",
	  "body": [
		"NetworkBuyItem(${1:Ped player}, ${2:Hash item}, ${3:Any p2}, ${4:Any p3}, ${5:BOOL p4}, ${6:char* item_name}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:BOOL p9})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkBuyProperty()": {
	  "prefix": "NetworkBuyProperty",
	  "body": [
		"NetworkBuyProperty(${1:float propertyCost}, ${2:Hash propertyName}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkCanReceivePlayerCash()": {
	  "prefix": "NetworkCanReceivePlayerCash",
	  "body": [
		"NetworkCanReceivePlayerCash(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n"
	},
	"N_0x3a54e33660ded67f()": {
	  "prefix": "N_0x3a54e33660ded67f",
	  "body": "N_0x3a54e33660ded67f",
	  "description": "OLD NAME, PLEASE USE NetworkCanBet INSTEAD!"
	},
	"NetworkCanBet()": {
	  "prefix": "NetworkCanBet",
	  "body": [
		"NetworkCanBet(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n\nOld name: N_0x3a54e33660ded67f"
	},
	"N_0xa921ded15fdf28f5()": {
	  "prefix": "N_0xa921ded15fdf28f5",
	  "body": "N_0xa921ded15fdf28f5",
	  "description": "OLD NAME, PLEASE USE NetworkClearCharacterWallet INSTEAD!"
	},
	"NetworkClearCharacterWallet()": {
	  "prefix": "NetworkClearCharacterWallet",
	  "body": [
		"NetworkClearCharacterWallet(${1:Any p0})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0xa921ded15fdf28f5"
	},
	"N_0xab3caa6b422164da()": {
	  "prefix": "N_0xab3caa6b422164da",
	  "body": "N_0xab3caa6b422164da",
	  "description": "OLD NAME, PLEASE USE NetworkCanSpendMoney INSTEAD!"
	},
	"NetworkCanSpendMoney()": {
	  "prefix": "NetworkCanSpendMoney",
	  "body": [
		"NetworkCanSpendMoney(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n\nOld name: N_0xab3caa6b422164da"
	},
	"N_0x515b4a22e4d3c6d7()": {
	  "prefix": "N_0x515b4a22e4d3c6d7",
	  "body": "N_0x515b4a22e4d3c6d7",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromAiTargetKill INSTEAD!"
	},
	"NetworkEarnFromAiTargetKill()": {
	  "prefix": "NetworkEarnFromAiTargetKill",
	  "body": [
		"NetworkEarnFromAiTargetKill(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nDSPORT  \n\nOld name: N_0x515b4a22e4d3c6d7"
	},
	"NetworkDeleteCharacter()": {
	  "prefix": "NetworkDeleteCharacter",
	  "body": [
		"NetworkDeleteCharacter(${1:int characterIndex}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nNote the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);  \n"
	},
	"N_0xf514621e8ea463d0()": {
	  "prefix": "N_0xf514621e8ea463d0",
	  "body": "N_0xf514621e8ea463d0",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromArmourTruck INSTEAD!"
	},
	"NetworkEarnFromArmourTruck()": {
	  "prefix": "NetworkEarnFromArmourTruck",
	  "body": [
		"NetworkEarnFromArmourTruck(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nFor the money bags that drop a max of $40,000. Often called 40k bags.  \nMost likely NETWORK_EARN_FROM_ROB***  \nMONEY_EARN_JOBS  \n\nOld name: N_0xf514621e8ea463d0"
	},
	"N_0xfb6db092fbae29e6()": {
	  "prefix": "N_0xfb6db092fbae29e6",
	  "body": "N_0xfb6db092fbae29e6",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromAmbientJob INSTEAD!"
	},
	"NetworkEarnFromAmbientJob()": {
	  "prefix": "NetworkEarnFromAmbientJob",
	  "body": [
		"NetworkEarnFromAmbientJob(${1:int p0}, ${2:char* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nConsole Hash - 0xA14CC95D = NETWORK_EARN_FROM_AMBIENT_JOB  \nExample for p1: \"AM_DISTRACT_COPS\"  \n\nOld name: N_0xfb6db092fbae29e6"
	},
	"NetworkEarnFromBetting()": {
	  "prefix": "NetworkEarnFromBetting",
	  "body": [
		"NetworkEarnFromBetting(${1:int amount}, ${2:char* p1})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkEarnFromBounty()": {
	  "prefix": "NetworkEarnFromBounty",
	  "body": [
		"NetworkEarnFromBounty(${1:int amount}, ${2:int* networkHandle}, ${3:Any* p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0x2b171e6b2f64d8df()": {
	  "prefix": "N_0x2b171e6b2f64d8df",
	  "body": "N_0x2b171e6b2f64d8df",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromChallengeWin INSTEAD!"
	},
	"NetworkEarnFromChallengeWin()": {
	  "prefix": "NetworkEarnFromChallengeWin",
	  "body": [
		"NetworkEarnFromChallengeWin(${1:Any p0}, ${2:Any* p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x2b171e6b2f64d8df"
	},
	"N_0xb1cc1b9ec3007a2a()": {
	  "prefix": "N_0xb1cc1b9ec3007a2a",
	  "body": "N_0xb1cc1b9ec3007a2a",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromCrateDrop INSTEAD!"
	},
	"NetworkEarnFromCrateDrop()": {
	  "prefix": "NetworkEarnFromCrateDrop",
	  "body": [
		"NetworkEarnFromCrateDrop(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0xb1cc1b9ec3007a2a"
	},
	"N_0xa03d4ace0a3284ce()": {
	  "prefix": "N_0xa03d4ace0a3284ce",
	  "body": "N_0xa03d4ace0a3284ce",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromGangPickup INSTEAD!"
	},
	"NetworkEarnFromGangPickup()": {
	  "prefix": "NetworkEarnFromGangPickup",
	  "body": [
		"NetworkEarnFromGangPickup(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nMONEY_EARN_PICKED_UP  \n\nOld name: N_0xa03d4ace0a3284ce"
	},
	"N_0x6ea318c91c1a8786()": {
	  "prefix": "N_0x6ea318c91c1a8786",
	  "body": "N_0x6ea318c91c1a8786",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromDailyObjective INSTEAD!"
	},
	"NetworkEarnFromDailyObjective()": {
	  "prefix": "NetworkEarnFromDailyObjective",
	  "body": [
		"NetworkEarnFromDailyObjective(${1:int p0}, ${2:char* p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nConsole Hash - 0xAB6BD72F = NETWORK_EARN_FROM_DAILY_OBJECTIVE  \n\nOld name: N_0x6ea318c91c1a8786"
	},
	"NetworkEarnFromImportExport()": {
	  "prefix": "NetworkEarnFromImportExport",
	  "body": [
		"NetworkEarnFromImportExport(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkEarnFromHoldups()": {
	  "prefix": "NetworkEarnFromHoldups",
	  "body": [
		"NetworkEarnFromHoldups(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0x6816fb4416760775()": {
	  "prefix": "N_0x6816fb4416760775",
	  "body": "N_0x6816fb4416760775",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromJobBonus INSTEAD!"
	},
	"NetworkEarnFromJobBonus()": {
	  "prefix": "NetworkEarnFromJobBonus",
	  "body": [
		"NetworkEarnFromJobBonus(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nConsole Hash - 0xBEE23713 = NETWORK_EARN_FROM_JOB_BONUS  \n\nOld name: N_0x6816fb4416760775"
	},
	"NetworkEarnFromJob()": {
	  "prefix": "NetworkEarnFromJob",
	  "body": [
		"NetworkEarnFromJob(${1:int amount}, ${2:char* p1})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0x4337511fa8221d36()": {
	  "prefix": "N_0x4337511fa8221d36",
	  "body": "N_0x4337511fa8221d36",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromNotBadsport INSTEAD!"
	},
	"NetworkEarnFromNotBadsport()": {
	  "prefix": "NetworkEarnFromNotBadsport",
	  "body": [
		"NetworkEarnFromNotBadsport(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nEnough007: Adds an entry in the Network Transaction Log.  \nMax value for amount 2000  \n\nOld name: N_0x4337511fa8221d36"
	},
	"N_0x61326ee6df15b0ca()": {
	  "prefix": "N_0x61326ee6df15b0ca",
	  "body": "N_0x61326ee6df15b0ca",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromMissionH INSTEAD!"
	},
	"NetworkEarnFromMissionH()": {
	  "prefix": "NetworkEarnFromMissionH",
	  "body": [
		"NetworkEarnFromMissionH(${1:int amount}, ${2:char* heistHash})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nPretty sure this is actually a hash collision.  \nIt should be NETWORK_EARN_FROM_A*** or NETWORK_EARN_FROM_B***  \n=============================================================  \nNot a hash collision, test it for yourself when finishing heist.  \nlackos; 2017.03.12  \n\nOld name: N_0x61326ee6df15b0ca"
	},
	"NetworkEarnFromPickup()": {
	  "prefix": "NetworkEarnFromPickup",
	  "body": [
		"NetworkEarnFromPickup(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: Any\n"
	},
	"N_0x3f4d00167e41e0ad()": {
	  "prefix": "N_0x3f4d00167e41e0ad",
	  "body": "N_0x3f4d00167e41e0ad",
	  "description": "OLD NAME, PLEASE USE NetworkEarnFromPersonalVehicle INSTEAD!"
	},
	"NetworkEarnFromPersonalVehicle()": {
	  "prefix": "NetworkEarnFromPersonalVehicle",
	  "body": [
		"NetworkEarnFromPersonalVehicle(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nNow has 9 parameters.  \n\nOld name: N_0x3f4d00167e41e0ad"
	},
	"NetworkEarnFromProperty()": {
	  "prefix": "NetworkEarnFromProperty",
	  "body": [
		"NetworkEarnFromProperty(${1:int amount}, ${2:Hash propertyName})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkEarnFromRockstar()": {
	  "prefix": "NetworkEarnFromRockstar",
	  "body": [
		"NetworkEarnFromRockstar(${1:int amount})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nThis merely adds an entry in the Network Transaction Log;   \nit does not grant cash to the player (on PC).  \nMax value for amount is 9999999.  \n"
	},
	"NetworkEarnFromVehicle()": {
	  "prefix": "NetworkEarnFromVehicle",
	  "body": [
		"NetworkEarnFromVehicle(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nNow has 8 params.  \n"
	},
	"N_0xa6fa3979bed01b81()": {
	  "prefix": "N_0xa6fa3979bed01b81",
	  "body": "N_0xa6fa3979bed01b81",
	  "description": "OLD NAME, PLEASE USE NetworkGetBankBalanceString INSTEAD!"
	},
	"NetworkGetBankBalanceString()": {
	  "prefix": "NetworkGetBankBalanceString",
	  "body": [
		"NetworkGetBankBalanceString()"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: char*\n\nConsole Hash: Probably 0xAA7EA3BD  \n\nOld name: N_0xa6fa3979bed01b81"
	},
	"N_0x5cbad97e059e1b94()": {
	  "prefix": "N_0x5cbad97e059e1b94",
	  "body": "N_0x5cbad97e059e1b94",
	  "description": "OLD NAME, PLEASE USE NetworkGetVcBalance INSTEAD!"
	},
	"NetworkGetVcBalance()": {
	  "prefix": "NetworkGetVcBalance",
	  "body": [
		"NetworkGetVcBalance()"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: int\n\nOld name: N_0x5cbad97e059e1b94"
	},
	"N_0x76ef28da05ea395a()": {
	  "prefix": "N_0x76ef28da05ea395a",
	  "body": "N_0x76ef28da05ea395a",
	  "description": "OLD NAME, PLEASE USE NetworkGetVcBankBalance INSTEAD!"
	},
	"NetworkGetVcBankBalance()": {
	  "prefix": "NetworkGetVcBankBalance",
	  "body": [
		"NetworkGetVcBankBalance()"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: int\n\nFrom what I can see in ida, I believe it retrieves the players online bank balance.  \n\nOld name: N_0x76ef28da05ea395a"
	},
	"N_0xa40f9c2623f6a8b5()": {
	  "prefix": "N_0xa40f9c2623f6a8b5",
	  "body": "N_0xa40f9c2623f6a8b5",
	  "description": "OLD NAME, PLEASE USE NetworkGetVcWalletBalance INSTEAD!"
	},
	"NetworkGetVcWalletBalance()": {
	  "prefix": "NetworkGetVcWalletBalance",
	  "body": [
		"NetworkGetVcWalletBalance(${1:int character})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: int\n\nFrom what I understand, it retrieves STAT_WALLET_BALANCE for the specified character (-1 means use MPPLY_LAST_MP_CHAR)  \n\nOld name: N_0xa40f9c2623f6a8b5"
	},
	"NetworkGivePlayerJobshareCash()": {
	  "prefix": "NetworkGivePlayerJobshareCash",
	  "body": [
		"NetworkGivePlayerJobshareCash(${1:int amount}, ${2:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0x3da5ecd1a56cba6d()": {
	  "prefix": "N_0x3da5ecd1a56cba6d",
	  "body": "N_0x3da5ecd1a56cba6d",
	  "description": "OLD NAME, PLEASE USE NetworkInitializeCash INSTEAD!"
	},
	"NetworkInitializeCash()": {
	  "prefix": "NetworkInitializeCash",
	  "body": [
		"NetworkInitializeCash(${1:int p0}, ${2:int p1})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x3da5ecd1a56cba6d"
	},
	"N_0x81404f3dc124fe5b()": {
	  "prefix": "N_0x81404f3dc124fe5b",
	  "body": "N_0x81404f3dc124fe5b",
	  "description": "OLD NAME, PLEASE USE NetworkMoneyCanBet INSTEAD!"
	},
	"NetworkMoneyCanBet()": {
	  "prefix": "NetworkMoneyCanBet",
	  "body": [
		"NetworkMoneyCanBet(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: BOOL\n\nOld name: N_0x81404f3dc124fe5b"
	},
	"N_0x5fd5ed82cbbe9989()": {
	  "prefix": "N_0x5fd5ed82cbbe9989",
	  "body": "N_0x5fd5ed82cbbe9989",
	  "description": "OLD NAME, PLEASE USE NetworkPayEmployeeWage INSTEAD!"
	},
	"NetworkPayEmployeeWage()": {
	  "prefix": "NetworkPayEmployeeWage",
	  "body": [
		"NetworkPayEmployeeWage(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x5fd5ed82cbbe9989"
	},
	"N_0x9346e14f2af74d46()": {
	  "prefix": "N_0x9346e14f2af74d46",
	  "body": "N_0x9346e14f2af74d46",
	  "description": "OLD NAME, PLEASE USE NetworkPayMatchEntryFee INSTEAD!"
	},
	"NetworkPayMatchEntryFee()": {
	  "prefix": "NetworkPayMatchEntryFee",
	  "body": [
		"NetworkPayMatchEntryFee(${1:int value}, ${2:int* p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x9346e14f2af74d46"
	},
	"N_0xafe08b35ec0c9eae()": {
	  "prefix": "N_0xafe08b35ec0c9eae",
	  "body": "N_0xafe08b35ec0c9eae",
	  "description": "OLD NAME, PLEASE USE NetworkPayUtilityBill INSTEAD!"
	},
	"NetworkPayUtilityBill()": {
	  "prefix": "NetworkPayUtilityBill",
	  "body": [
		"NetworkPayUtilityBill(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0xafe08b35ec0c9eae"
	},
	"NetworkReceivePlayerJobshareCash()": {
	  "prefix": "NetworkReceivePlayerJobshareCash",
	  "body": [
		"NetworkReceivePlayerJobshareCash(${1:int value}, ${2:int* networkHandle})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0xf9c812cd7c46e817()": {
	  "prefix": "N_0xf9c812cd7c46e817",
	  "body": "N_0xf9c812cd7c46e817",
	  "description": "OLD NAME, PLEASE USE NetworkRefundCash INSTEAD!"
	},
	"NetworkRefundCash()": {
	  "prefix": "NetworkRefundCash",
	  "body": [
		"NetworkRefundCash(${1:int index}, ${2:char* context}, ${3:char* reason}, ${4:BOOL unk})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nindex  \n-------  \nSee function sub_1005 in am_boat_taxi.ysc  \ncontext  \n----------  \n\"BACKUP_VAGOS\"  \n\"BACKUP_LOST\"  \n\"BACKUP_FAMILIES\"  \n\"HIRE_MUGGER\"  \n\"HIRE_MERCENARY\"  \n\"BUY_CARDROPOFF\"  \n\"HELI_PICKUP\"  \n\"BOAT_PICKUP\"  \n\"CLEAR_WANTED\"  \n\"HEAD_2_HEAD\"  \n\"CHALLENGE\"  \n\"SHARE_LAST_JOB\"  \n\"DEFAULT\"  \nreason  \n---------  \n\"NOTREACHTARGET\"  \n\"TARGET_ESCAPE\"  \n\"DELIVERY_FAIL\"  \n\"NOT_USED\"  \n\"TEAM_QUIT\"  \n\"SERVER_ERROR\"  \n\"RECEIVE_LJ_L\"  \n\"CHALLENGE_PLAYER_LEFT\"  \n\"DEFAULT\"  \nunk  \n-----  \nUnknown bool value  \n\nOld name: N_0xf9c812cd7c46e817"
	},
	"NetworkSpentAmmoDrop()": {
	  "prefix": "NetworkSpentAmmoDrop",
	  "body": [
		"NetworkSpentAmmoDrop(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentArrestBail()": {
	  "prefix": "NetworkSpentArrestBail",
	  "body": [
		"NetworkSpentArrestBail(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBetting()": {
	  "prefix": "NetworkSpentBetting",
	  "body": [
		"NetworkSpentBetting(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBoatPickup()": {
	  "prefix": "NetworkSpentBoatPickup",
	  "body": [
		"NetworkSpentBoatPickup(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBounty()": {
	  "prefix": "NetworkSpentBounty",
	  "body": [
		"NetworkSpentBounty(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBullShark()": {
	  "prefix": "NetworkSpentBullShark",
	  "body": [
		"NetworkSpentBullShark(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBuyOfftheradar()": {
	  "prefix": "NetworkSpentBuyOfftheradar",
	  "body": [
		"NetworkSpentBuyOfftheradar(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBuyPassiveMode()": {
	  "prefix": "NetworkSpentBuyPassiveMode",
	  "body": [
		"NetworkSpentBuyPassiveMode(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBuyRevealPlayers()": {
	  "prefix": "NetworkSpentBuyRevealPlayers",
	  "body": [
		"NetworkSpentBuyRevealPlayers(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentCallPlayer()": {
	  "prefix": "NetworkSpentCallPlayer",
	  "body": [
		"NetworkSpentCallPlayer(${1:Any p0}, ${2:Any* p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentBuyWantedlevel()": {
	  "prefix": "NetworkSpentBuyWantedlevel",
	  "body": [
		"NetworkSpentBuyWantedlevel(${1:Any p0}, ${2:Any* p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentCashDrop()": {
	  "prefix": "NetworkSpentCashDrop",
	  "body": [
		"NetworkSpentCashDrop(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentCarwash()": {
	  "prefix": "NetworkSpentCarwash",
	  "body": [
		"NetworkSpentCarwash(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0x6a445b64ed7abeb5()": {
	  "prefix": "N_0x6a445b64ed7abeb5",
	  "body": "N_0x6a445b64ed7abeb5",
	  "description": "OLD NAME, PLEASE USE NetworkSpentFromRockstar INSTEAD!"
	},
	"NetworkSpentFromRockstar()": {
	  "prefix": "NetworkSpentFromRockstar",
	  "body": [
		"NetworkSpentFromRockstar(${1:int bank}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x6a445b64ed7abeb5"
	},
	"NetworkSpentCinema()": {
	  "prefix": "NetworkSpentCinema",
	  "body": [
		"NetworkSpentCinema(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentHeliPickup()": {
	  "prefix": "NetworkSpentHeliPickup",
	  "body": [
		"NetworkSpentHeliPickup(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentHireMugger()": {
	  "prefix": "NetworkSpentHireMugger",
	  "body": [
		"NetworkSpentHireMugger(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOnly used once in a script (am_contact_requests)  \np1 = 0  \np2 = 1  \n"
	},
	"NetworkSpentHoldups()": {
	  "prefix": "NetworkSpentHoldups",
	  "body": [
		"NetworkSpentHoldups(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentHireMercenary()": {
	  "prefix": "NetworkSpentHireMercenary",
	  "body": [
		"NetworkSpentHireMercenary(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0xee99784e4467689c()": {
	  "prefix": "N_0xee99784e4467689c",
	  "body": "N_0xee99784e4467689c",
	  "description": "OLD NAME, PLEASE USE NetworkSpentInStripclub INSTEAD!"
	},
	"NetworkSpentInStripclub()": {
	  "prefix": "NetworkSpentInStripclub",
	  "body": [
		"NetworkSpentInStripclub(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0xee99784e4467689c"
	},
	"N_0xd5bb406f4e04019f()": {
	  "prefix": "N_0xd5bb406f4e04019f",
	  "body": "N_0xd5bb406f4e04019f",
	  "description": "OLD NAME, PLEASE USE NetworkSpentNoCops INSTEAD!"
	},
	"NetworkSpentNoCops()": {
	  "prefix": "NetworkSpentNoCops",
	  "body": [
		"NetworkSpentNoCops(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0xd5bb406f4e04019f"
	},
	"N_0x7c99101f7fce2ee5()": {
	  "prefix": "N_0x7c99101f7fce2ee5",
	  "body": "N_0x7c99101f7fce2ee5",
	  "description": "OLD NAME, PLEASE USE NetworkSpentPlayerHealthcare INSTEAD!"
	},
	"NetworkSpentPlayerHealthcare()": {
	  "prefix": "NetworkSpentPlayerHealthcare",
	  "body": [
		"NetworkSpentPlayerHealthcare(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x7c99101f7fce2ee5"
	},
	"NetworkSpentPayVehicleInsurancePremium()": {
	  "prefix": "NetworkSpentPayVehicleInsurancePremium",
	  "body": [
		"NetworkSpentPayVehicleInsurancePremium(${1:int amount}, ${2:Hash vehicleModel}, ${3:int* networkHandle}, ${4:BOOL notBankrupt}, ${5:BOOL hasTheMoney})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nAccording to how I understood this in the freemode script alone,  \nThe first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.  \nThe second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.  \nThe third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, \"Previous_Owner\").  \nThe fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.  \nThe fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,  \nbool hasTheMoney = NETWORKCASH::_GET_BANK_BALANCE() < carCost.  \n"
	},
	"NetworkSpentProstitutes()": {
	  "prefix": "NetworkSpentProstitutes",
	  "body": [
		"NetworkSpentProstitutes(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0x9d26502bb97bfe62()": {
	  "prefix": "N_0x9d26502bb97bfe62",
	  "body": "N_0x9d26502bb97bfe62",
	  "description": "OLD NAME, PLEASE USE NetworkSpentRequestHeist INSTEAD!"
	},
	"NetworkSpentRequestHeist()": {
	  "prefix": "NetworkSpentRequestHeist",
	  "body": [
		"NetworkSpentRequestHeist(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nConsole Hash 0xF4287778 = NETWORK_SPENT_REQUEST_HEIST  \n\nOld name: N_0x9d26502bb97bfe62"
	},
	"N_0x8204da7934df3155()": {
	  "prefix": "N_0x8204da7934df3155",
	  "body": "N_0x8204da7934df3155",
	  "description": "OLD NAME, PLEASE USE NetworkSpentRequestJob INSTEAD!"
	},
	"NetworkSpentRequestJob()": {
	  "prefix": "NetworkSpentRequestJob",
	  "body": [
		"NetworkSpentRequestJob(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x8204da7934df3155"
	},
	"N_0x995a65f15f581359()": {
	  "prefix": "N_0x995a65f15f581359",
	  "body": "N_0x995a65f15f581359",
	  "description": "OLD NAME, PLEASE USE NetworkSpentRobbedByMugger INSTEAD!"
	},
	"NetworkSpentRobbedByMugger()": {
	  "prefix": "NetworkSpentRobbedByMugger",
	  "body": [
		"NetworkSpentRobbedByMugger(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n\nOld name: N_0x995a65f15f581359"
	},
	"NetworkSpentTaxi()": {
	  "prefix": "NetworkSpentTaxi",
	  "body": [
		"NetworkSpentTaxi(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"NetworkSpentTelescope()": {
	  "prefix": "NetworkSpentTelescope",
	  "body": [
		"NetworkSpentTelescope(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: void\n"
	},
	"N_0x20194d48eaec9a41()": {
	  "prefix": "N_0x20194d48eaec9a41",
	  "body": "N_0x20194d48eaec9a41",
	  "description": "OLD NAME, PLEASE USE ProcessCashGift INSTEAD!"
	},
	"ProcessCashGift()": {
	  "prefix": "ProcessCashGift",
	  "body": [
		"ProcessCashGift(${1:int* p0}, ${2:int* p1}, ${3:char* p2})"
	  ],
	  "description": "Namespace: NETWORKCASH\nReturns: char*\n\nThis isn't a hash collision. It is used to give the player cash via the CASH_GIFT stats.  \n\nOld name: N_0x20194d48eaec9a41"
	},
	"AddDoorToSystem()": {
	  "prefix": "AddDoorToSystem",
	  "body": [
		"AddDoorToSystem(${1:Hash doorHash}, ${2:Hash modelHash}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"AttachPortablePickupToPed()": {
	  "prefix": "AttachPortablePickupToPed",
	  "body": [
		"AttachPortablePickupToPed(${1:Ped ped}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"CreateAmbientPickup()": {
	  "prefix": "CreateAmbientPickup",
	  "body": [
		"CreateAmbientPickup(${1:Hash pickupHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:int p4}, ${6:int value}, ${7:Hash modelHash}, ${8:BOOL returnHandle}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Pickup\n\nUsed for doing money drop  \nPickup hashes: pastebin.com/8EuSv2r1  \n"
	},
	"CreateMoneyPickups()": {
	  "prefix": "CreateMoneyPickups",
	  "body": [
		"CreateMoneyPickups(${1:float x}, ${2:float y}, ${3:float z}, ${4:int value}, ${5:int amount}, ${6:Hash model})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nSpawns one or more money pickups.  \nx: The X-component of the world position to spawn the money pickups at.  \ny: The Y-component of the world position to spawn the money pickups at.  \nz: The Z-component of the world position to spawn the money pickups at.  \nvalue: The combined value of the pickups (in dollars).  \namount: The number of pickups to spawn.  \nmodel: The model to use, or 0 for default money model.  \nExample:  \nCREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);  \nSpawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).  \n==============================================  \nMax is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000  \n"
	},
	"CreateObject()": {
	  "prefix": "CreateObject",
	  "body": [
		"CreateObject(${1:Object modelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL isNetwork}, ${6:BOOL thisScriptCheck}, ${7:BOOL dynamic})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Object\n\nthisScriptCheck - can be destroyed if it belongs to the calling script.  \np5 - last parameter does not mean object handle is returned  \nmaybe a quick view in disassembly will tell us what is actually does  \n----------  \nprop_tt_screenstatic (0xE2E039BC) is handled different. Not sure how yet but it I know it is.  \n"
	},
	"CreatePickupRotate()": {
	  "prefix": "CreatePickupRotate",
	  "body": [
		"CreatePickupRotate(${1:Hash pickupHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:int flag}, ${9:int amount}, ${10:Any p9}, ${11:BOOL p10}, ${12:Hash modelHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Pickup\n\nPickup hashes: pastebin.com/8EuSv2r1  \nflags:  \n8 (1 << 3): place on ground  \n512 (1 << 9): spin around  \n"
	},
	"CreateObjectNoOffset()": {
	  "prefix": "CreateObjectNoOffset",
	  "body": [
		"CreateObjectNoOffset(${1:Hash modelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL isNetwork}, ${6:BOOL thisScriptCheck}, ${7:BOOL dynamic})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Object\n\nthisScriptCheck - can be destroyed if it belongs to the calling script.  \np5 - does not mean object handle is returned  \nmaybe a quick view in disassembly will tell us what is actually does  \n----------  \nprop_tt_screenstatic (0xE2E039BC) is handled different. Not sure how yet but it I know it is.  \n"
	},
	"CreatePickup()": {
	  "prefix": "CreatePickup",
	  "body": [
		"CreatePickup(${1:Hash pickupHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:int p4}, ${6:int value}, ${7:BOOL p6}, ${8:Hash modelHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Pickup\n\nPickup hashes: pastebin.com/8EuSv2r1  \n"
	},
	"CreatePortablePickup()": {
	  "prefix": "CreatePortablePickup",
	  "body": [
		"CreatePortablePickup(${1:Hash pickupHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL placeOnGround}, ${6:Hash modelHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Pickup\n\nPickup hashes: pastebin.com/8EuSv2r1  \n"
	},
	"DeleteObject()": {
	  "prefix": "DeleteObject",
	  "body": [
		"DeleteObject(${1:Object* object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nDeletes the specified object, then sets the handle pointed to by the pointer to NULL.  \nmeme.  \n"
	},
	"N_0x125494b98a21aaf7()": {
	  "prefix": "N_0x125494b98a21aaf7",
	  "body": "N_0x125494b98a21aaf7",
	  "description": "OLD NAME, PLEASE USE CreatePortablePickup_2 INSTEAD!"
	},
	"CreatePortablePickup_2()": {
	  "prefix": "CreatePortablePickup_2",
	  "body": [
		"CreatePortablePickup_2(${1:Hash pickupHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL placeOnGround}, ${6:Hash modelHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Pickup\n\nOld name: N_0x125494b98a21aaf7"
	},
	"DetachPortablePickupFromPed()": {
	  "prefix": "DetachPortablePickupFromPed",
	  "body": [
		"DetachPortablePickupFromPed(${1:Ped ped})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xc153c43ea202c8c1()": {
	  "prefix": "N_0xc153c43ea202c8c1",
	  "body": "N_0xc153c43ea202c8c1",
	  "description": "OLD NAME, PLEASE USE DoesDoorExist INSTEAD!"
	},
	"DoesDoorExist()": {
	  "prefix": "DoesDoorExist",
	  "body": [
		"DoesDoorExist(${1:Hash doorHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n\nExample:  \nif (OBJECT::_DOES_DOOR_EXIST(doorHash))  \n{  \n    OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);  \n}  \n\nOld name: N_0xc153c43ea202c8c1"
	},
	"DoesPickupExist()": {
	  "prefix": "DoesPickupExist",
	  "body": [
		"DoesPickupExist(${1:Pickup pickup})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"DoesObjectOfTypeExistAtCoords()": {
	  "prefix": "DoesObjectOfTypeExistAtCoords",
	  "body": [
		"DoesObjectOfTypeExistAtCoords(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash hash}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n\np5 is usually 0.  \n"
	},
	"DoesPickupObjectExist()": {
	  "prefix": "DoesPickupObjectExist",
	  "body": [
		"DoesPickupObjectExist(${1:Object pickupObject})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x52af537a0c5b8aad()": {
	  "prefix": "N_0x52af537a0c5b8aad",
	  "body": "N_0x52af537a0c5b8aad",
	  "description": "OLD NAME, PLEASE USE DoesRayfireMapObjectExist INSTEAD!"
	},
	"DoesDesObjectExist()": {
	  "prefix": "DoesDesObjectExist",
	  "body": "DoesDesObjectExist",
	  "description": "OLD NAME, PLEASE USE DoesRayfireMapObjectExist INSTEAD!"
	},
	"DoesRayfireMapObjectExist()": {
	  "prefix": "DoesRayfireMapObjectExist",
	  "body": [
		"DoesRayfireMapObjectExist(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n\nReturns true if a destructible object with this handle exists, false otherwise.  \n\nOld name: N_0x52af537a0c5b8aad\nOld name: DoesDesObjectExist"
	},
	"DoorControl()": {
	  "prefix": "DoorControl",
	  "body": [
		"DoorControl(${1:Hash doorHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL locked}, ${6:float xRotMult}, ${7:float yRotMult}, ${8:float zRotMult})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nOBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door unlocked  \nOBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door locked  \nlocked simply tells the game whether or not the door is locked.  \nx,y,z RotMult are multipliers that specify how fast the door/gate will rotate in degrees per second.  \n"
	},
	"GetClosestObjectOfType()": {
	  "prefix": "GetClosestObjectOfType",
	  "body": [
		"GetClosestObjectOfType(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:BOOL isMission}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Object\n\nHas 8 params in the latest patches.  \nisMission - if true doesn't return mission objects  \n"
	},
	"GetObjectFragmentDamageHealth()": {
	  "prefix": "GetObjectFragmentDamageHealth",
	  "body": [
		"GetObjectFragmentDamageHealth(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: float\n"
	},
	"GetPickupCoords()": {
	  "prefix": "GetPickupCoords",
	  "body": [
		"GetPickupCoords(${1:Pickup pickup})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Vector3\n"
	},
	"N_0x5eaad83f8cfb4575()": {
	  "prefix": "N_0x5eaad83f8cfb4575",
	  "body": "N_0x5eaad83f8cfb4575",
	  "description": "OLD NAME, PLEASE USE GetPickupHash INSTEAD!"
	},
	"GetPickupHash()": {
	  "prefix": "GetPickupHash",
	  "body": [
		"GetPickupHash(${1:Pickup pickupHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Hash\n\nreturns pickup hash.  \n\nOld name: N_0x5eaad83f8cfb4575"
	},
	"GetObjectOffsetFromCoords()": {
	  "prefix": "GetObjectOffsetFromCoords",
	  "body": [
		"GetObjectOffsetFromCoords(${1:float xPos}, ${2:float yPos}, ${3:float zPos}, ${4:float heading}, ${5:float xOffset}, ${6:float yOffset}, ${7:float zOffset})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Vector3\n"
	},
	"N_0x5099bc55630b25ae()": {
	  "prefix": "N_0x5099bc55630b25ae",
	  "body": "N_0x5099bc55630b25ae",
	  "description": "OLD NAME, PLEASE USE GetPickupObject INSTEAD!"
	},
	"GetPickupObject()": {
	  "prefix": "GetPickupObject",
	  "body": [
		"GetPickupObject(${1:Pickup pickup})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Object\n\nOld name: N_0x5099bc55630b25ae"
	},
	"N_0xb48fced898292e52()": {
	  "prefix": "N_0xb48fced898292e52",
	  "body": "N_0xb48fced898292e52",
	  "description": "OLD NAME, PLEASE USE GetRayfireMapObject INSTEAD!"
	},
	"GetDesObject()": {
	  "prefix": "GetDesObject",
	  "body": "GetDesObject",
	  "description": "OLD NAME, PLEASE USE GetRayfireMapObject INSTEAD!"
	},
	"GetRayfireMapObject()": {
	  "prefix": "GetRayfireMapObject",
	  "body": [
		"GetRayfireMapObject(${1:float x}, ${2:float y}, ${3:float z}, ${4:float rotation}, ${5:char* name})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: int\n\nGets a destructible object's handle  \nExample:  \nOBJECT::_B48FCED898292E52(-809.9619750976562, 170.919, 75.7406997680664, 3.0, \"des_tvsmash\");  \nAll found arguments for p4 starts with \"des_\" like \"DES_FIB_Floor\" and \"des_shipsink\".  \n\nOld name: N_0xb48fced898292e52\nOld name: GetDesObject"
	},
	"N_0x260ee4fdbdf4db01()": {
	  "prefix": "N_0x260ee4fdbdf4db01",
	  "body": "N_0x260ee4fdbdf4db01",
	  "description": "OLD NAME, PLEASE USE GetRayfireMapObjectAnimPhase INSTEAD!"
	},
	"GetDesObjectAnimProgress()": {
	  "prefix": "GetDesObjectAnimProgress",
	  "body": "GetDesObjectAnimProgress",
	  "description": "OLD NAME, PLEASE USE GetRayfireMapObjectAnimPhase INSTEAD!"
	},
	"GetRayfireMapObjectAnimPhase()": {
	  "prefix": "GetRayfireMapObjectAnimPhase",
	  "body": [
		"GetRayfireMapObjectAnimPhase(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: float\n\nOld name: N_0x260ee4fdbdf4db01\nOld name: GetDesObjectAnimProgress"
	},
	"GetStateOfClosestDoorOfType()": {
	  "prefix": "GetStateOfClosestDoorOfType",
	  "body": [
		"GetStateOfClosestDoorOfType(${1:Hash type}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL* locked}, ${6:float* heading})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nlocked is 0 if no door is found  \nlocked is 0 if door is unlocked  \nlocked is 1 if door is found and unlocked.  \n-------------  \nthe locked bool is either 0(unlocked)(false) or 1(locked)(true)  \n"
	},
	"GetSafePickupCoords()": {
	  "prefix": "GetSafePickupCoords",
	  "body": [
		"GetSafePickupCoords(${1:float x}, ${2:float y}, ${3:float z}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Vector3\n"
	},
	"N_0x899ba936634a322e()": {
	  "prefix": "N_0x899ba936634a322e",
	  "body": "N_0x899ba936634a322e",
	  "description": "OLD NAME, PLEASE USE GetStateOfRayfireMapObject INSTEAD!"
	},
	"GetDesObjectState()": {
	  "prefix": "GetDesObjectState",
	  "body": "GetDesObjectState",
	  "description": "OLD NAME, PLEASE USE GetStateOfRayfireMapObject INSTEAD!"
	},
	"GetStateOfRayfireMapObject()": {
	  "prefix": "GetStateOfRayfireMapObject",
	  "body": [
		"GetStateOfRayfireMapObject(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: int\n\nGet a destructible object's state.  \nSubstract 1 to get the real state.  \nSee SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states  \nFor example, if the object just spawned (state 2), the native will return 3.  \n\nOld name: N_0x899ba936634a322e\nOld name: GetDesObjectState"
	},
	"N_0x08f96ca6c551ad51()": {
	  "prefix": "N_0x08f96ca6c551ad51",
	  "body": "N_0x08f96ca6c551ad51",
	  "description": "OLD NAME, PLEASE USE GetWeaponHashFromPickup INSTEAD!"
	},
	"GetWeaponHashFromPickup()": {
	  "prefix": "GetWeaponHashFromPickup",
	  "body": [
		"GetWeaponHashFromPickup(${1:Pickup pickupHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Hash\n\nreturns the weapon hash of pickup  \n\nOld name: N_0x08f96ca6c551ad51"
	},
	"HasClosestObjectOfTypeBeenBroken()": {
	  "prefix": "HasClosestObjectOfTypeBeenBroken",
	  "body": [
		"HasClosestObjectOfTypeBeenBroken(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Hash modelHash}, ${6:Any p5})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"HasPickupBeenCollected()": {
	  "prefix": "HasPickupBeenCollected",
	  "body": [
		"HasPickupBeenCollected(${1:Pickup pickup})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x3430676b11cdf21d()": {
	  "prefix": "N_0x3430676b11cdf21d",
	  "body": "N_0x3430676b11cdf21d",
	  "description": "OLD NAME, PLEASE USE HighlightPlacementCoords INSTEAD!"
	},
	"HighlightPlacementCoords()": {
	  "prefix": "HighlightPlacementCoords",
	  "body": [
		"HighlightPlacementCoords(${1:float x}, ${2:float y}, ${3:float z}, ${4:int colorIndex})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\ndraws circular marker at pos  \n-1 = none  \n0 = red  \n1 = green  \n2 = blue  \n3 = green larger  \n4 = nothing  \n5 = green small  \n\nOld name: N_0x3430676b11cdf21d"
	},
	"HasObjectBeenBroken()": {
	  "prefix": "HasObjectBeenBroken",
	  "body": [
		"HasObjectBeenBroken(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"IsAnyObjectNearPoint()": {
	  "prefix": "IsAnyObjectNearPoint",
	  "body": [
		"IsAnyObjectNearPoint(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"IsGarageEmpty()": {
	  "prefix": "IsGarageEmpty",
	  "body": [
		"IsGarageEmpty(${1:Any garage}, ${2:BOOL p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"IsObjectVisible()": {
	  "prefix": "IsObjectVisible",
	  "body": [
		"IsObjectVisible(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"IsDoorClosed()": {
	  "prefix": "IsDoorClosed",
	  "body": [
		"IsDoorClosed(${1:Hash door})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"IsPickupWithinRadius()": {
	  "prefix": "IsPickupWithinRadius",
	  "body": [
		"IsPickupWithinRadius(${1:Hash pickupHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n\nPickup hashes: pastebin.com/8EuSv2r1  \n"
	},
	"IsObjectNearPoint()": {
	  "prefix": "IsObjectNearPoint",
	  "body": [
		"IsObjectNearPoint(${1:Hash objectHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float range})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x024a60deb0ea69f0()": {
	  "prefix": "N_0x024a60deb0ea69f0",
	  "body": [
		"N_0x024a60deb0ea69f0(${1:Any p0}, ${2:Player player}, ${3:float p2}, ${4:int p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x0378c08504160d0d()": {
	  "prefix": "N_0x0378c08504160d0d",
	  "body": [
		"N_0x0378c08504160d0d(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"IsPointInAngledArea()": {
	  "prefix": "IsPointInAngledArea",
	  "body": [
		"IsPointInAngledArea(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:BOOL p10}, ${12:BOOL p11})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x0596843b34b95ce5()": {
	  "prefix": "N_0x0596843b34b95ce5",
	  "body": [
		"N_0x0596843b34b95ce5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"MarkObjectForDeletion()": {
	  "prefix": "MarkObjectForDeletion",
	  "body": [
		"MarkObjectForDeletion(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nis this like setting is as no longer needed?  \n"
	},
	"N_0x0bf3b3bd47d79c08()": {
	  "prefix": "N_0x0bf3b3bd47d79c08",
	  "body": [
		"N_0x0bf3b3bd47d79c08(${1:Hash hash}, ${2:int p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x03c27e13b42a0e82()": {
	  "prefix": "N_0x03c27e13b42a0e82",
	  "body": [
		"N_0x03c27e13b42a0e82(${1:Hash doorHash}, ${2:float p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x163f8b586bc95f2a()": {
	  "prefix": "N_0x163f8b586bc95f2a",
	  "body": [
		"N_0x163f8b586bc95f2a(${1:Any coords}, ${2:float radius}, ${3:Hash modelHash}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:Vector3* p6}, ${8:int p7})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Any\n\nonly documented params  \ndont know what this does.... To Be Continued...  \n"
	},
	"N_0x190428512b240692()": {
	  "prefix": "N_0x190428512b240692",
	  "body": [
		"N_0x190428512b240692(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x11d1e53a726891fe()": {
	  "prefix": "N_0x11d1e53a726891fe",
	  "body": [
		"N_0x11d1e53a726891fe(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n\nconsole hash: 0x883DAB2D  \n"
	},
	"N_0x160aa1b32f6139b8()": {
	  "prefix": "N_0x160aa1b32f6139b8",
	  "body": [
		"N_0x160aa1b32f6139b8(${1:Hash doorHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: int\n"
	},
	"N_0x1c1b69fae509ba97()": {
	  "prefix": "N_0x1c1b69fae509ba97",
	  "body": [
		"N_0x1c1b69fae509ba97(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x1761dc5d8471cbaa()": {
	  "prefix": "N_0x1761dc5d8471cbaa",
	  "body": [
		"N_0x1761dc5d8471cbaa(${1:Any p0}, ${2:Player player}, ${3:int p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x31f924b53eaddf65()": {
	  "prefix": "N_0x31f924b53eaddf65",
	  "body": [
		"N_0x31f924b53eaddf65(${1:BOOL p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x1e3f1b1b891a2aaa()": {
	  "prefix": "N_0x1e3f1b1b891a2aaa",
	  "body": [
		"N_0x1e3f1b1b891a2aaa(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x372ef6699146a1e4()": {
	  "prefix": "N_0x372ef6699146a1e4",
	  "body": [
		"N_0x372ef6699146a1e4(${1:Any p0}, ${2:Entity entity}, ${3:float p2}, ${4:int p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x318516e02de3ece2()": {
	  "prefix": "N_0x318516e02de3ece2",
	  "body": [
		"N_0x318516e02de3ece2(${1:float p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x39a5fb7eaf150840()": {
	  "prefix": "N_0x39a5fb7eaf150840",
	  "body": [
		"N_0x39a5fb7eaf150840(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x394cd08e31313c28()": {
	  "prefix": "N_0x394cd08e31313c28",
	  "body": [
		"N_0x394cd08e31313c28()"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x46494a2475701343()": {
	  "prefix": "N_0x46494a2475701343",
	  "body": [
		"N_0x46494a2475701343(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Hash modelHash}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x3ed2b83ab2e82799()": {
	  "prefix": "N_0x3ed2b83ab2e82799",
	  "body": [
		"N_0x3ed2b83ab2e82799(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x46f3add1e2d5baf2()": {
	  "prefix": "N_0x46f3add1e2d5baf2",
	  "body": [
		"N_0x46f3add1e2d5baf2(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x4a39db43e47cf3aa()": {
	  "prefix": "N_0x4a39db43e47cf3aa",
	  "body": [
		"N_0x4a39db43e47cf3aa(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x4bc2854478f3a749()": {
	  "prefix": "N_0x4bc2854478f3a749",
	  "body": [
		"N_0x4bc2854478f3a749(${1:Hash doorHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: int\n"
	},
	"N_0x4d89d607cb3dd1d2()": {
	  "prefix": "N_0x4d89d607cb3dd1d2",
	  "body": [
		"N_0x4d89d607cb3dd1d2(${1:Object object}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x589f80b325cc82c5()": {
	  "prefix": "N_0x589f80b325cc82c5",
	  "body": [
		"N_0x589f80b325cc82c5(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:Any p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x616093ec6b139dd9()": {
	  "prefix": "N_0x616093ec6b139dd9",
	  "body": [
		"N_0x616093ec6b139dd9(${1:Player player}, ${2:Hash pickupHash}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nFrom the scripts:  \nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);  \nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);  \nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);  \nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);  \nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);  \nOBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);  \nSET_PLAYER_P*  \n"
	},
	"N_0x62454a641b41f3c5()": {
	  "prefix": "N_0x62454a641b41f3c5",
	  "body": [
		"N_0x62454a641b41f3c5(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x641f272b52e2f0f8()": {
	  "prefix": "N_0x641f272b52e2f0f8",
	  "body": [
		"N_0x641f272b52e2f0f8(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x65499865fca6e5ec()": {
	  "prefix": "N_0x65499865fca6e5ec",
	  "body": [
		"N_0x65499865fca6e5ec(${1:Hash doorHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: float\n\npossibly called:  \nADD_DOOR_EXPERIMENTAL_MATRIX  \n"
	},
	"N_0x673ed815d6e323b7()": {
	  "prefix": "N_0x673ed815d6e323b7",
	  "body": [
		"N_0x673ed815d6e323b7(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x66a49d021870fe88()": {
	  "prefix": "N_0x66a49d021870fe88",
	  "body": [
		"N_0x66a49d021870fe88()"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x701fda1e82076ba4()": {
	  "prefix": "N_0x701fda1e82076ba4",
	  "body": [
		"N_0x701fda1e82076ba4()"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x758a5c1b3b1e1990()": {
	  "prefix": "N_0x758a5c1b3b1e1990",
	  "body": [
		"N_0x758a5c1b3b1e1990(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x78857fc65cadb909()": {
	  "prefix": "N_0x78857fc65cadb909",
	  "body": [
		"N_0x78857fc65cadb909(${1:BOOL p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x762db2d380b48d04()": {
	  "prefix": "N_0x762db2d380b48d04",
	  "body": [
		"N_0x762db2d380b48d04(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x826d1ee4d1cafc78()": {
	  "prefix": "N_0x826d1ee4d1cafc78",
	  "body": [
		"N_0x826d1ee4d1cafc78(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x85b6c850546fdde2()": {
	  "prefix": "N_0x85b6c850546fdde2",
	  "body": [
		"N_0x85b6c850546fdde2(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0x858ec9fd25de04aa()": {
	  "prefix": "N_0x858ec9fd25de04aa",
	  "body": [
		"N_0x858ec9fd25de04aa(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x867458251d47ccb2()": {
	  "prefix": "N_0x867458251d47ccb2",
	  "body": [
		"N_0x867458251d47ccb2(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x8881c98a31117998()": {
	  "prefix": "N_0x8881c98a31117998",
	  "body": [
		"N_0x8881c98a31117998(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x88eaec617cd26926()": {
	  "prefix": "N_0x88eaec617cd26926",
	  "body": [
		"N_0x88eaec617cd26926(${1:Hash p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nSET_LOCAL_PLAYER_*  \n"
	},
	"N_0x8caab2bd3ea58bd4()": {
	  "prefix": "N_0x8caab2bd3ea58bd4",
	  "body": [
		"N_0x8caab2bd3ea58bd4(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x92aefb5f6e294023()": {
	  "prefix": "N_0x92aefb5f6e294023",
	  "body": [
		"N_0x92aefb5f6e294023(${1:Object object}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x96ee0eba0163df80()": {
	  "prefix": "N_0x96ee0eba0163df80",
	  "body": [
		"N_0x96ee0eba0163df80(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x9ba001cb45cbf627()": {
	  "prefix": "N_0x9ba001cb45cbf627",
	  "body": [
		"N_0x9ba001cb45cbf627(${1:Hash doorHash}, ${2:float heading}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xa08fe5e49bdc39dd()": {
	  "prefix": "N_0xa08fe5e49bdc39dd",
	  "body": [
		"N_0xa08fe5e49bdc39dd(${1:Any p0}, ${2:float p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xa2c1f5e92afe49ed()": {
	  "prefix": "N_0xa2c1f5e92afe49ed",
	  "body": [
		"N_0xa2c1f5e92afe49ed()"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xa85a21582451e951()": {
	  "prefix": "N_0xa85a21582451e951",
	  "body": [
		"N_0xa85a21582451e951(${1:Hash doorHash}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xa90e7227a9303fa9()": {
	  "prefix": "N_0xa90e7227a9303fa9",
	  "body": [
		"N_0xa90e7227a9303fa9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xb2d0bde54f0e8e5a()": {
	  "prefix": "N_0xb2d0bde54f0e8e5a",
	  "body": [
		"N_0xb2d0bde54f0e8e5a(${1:Object object}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xbce595371a5fbaaf()": {
	  "prefix": "N_0xbce595371a5fbaaf",
	  "body": [
		"N_0xbce595371a5fbaaf(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xb3eca65c7317f174()": {
	  "prefix": "N_0xb3eca65c7317f174",
	  "body": [
		"N_0xb3eca65c7317f174()"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Any\n"
	},
	"N_0xc485e07e4f0b7958()": {
	  "prefix": "N_0xc485e07e4f0b7958",
	  "body": [
		"N_0xc485e07e4f0b7958(${1:Hash doorHash}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xc7f29ca00f46350e()": {
	  "prefix": "N_0xc7f29ca00f46350e",
	  "body": [
		"N_0xc7f29ca00f46350e(${1:BOOL p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xc6033d32241f6fb5()": {
	  "prefix": "N_0xc6033d32241f6fb5",
	  "body": [
		"N_0xc6033d32241f6fb5(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xd76eeef746057fd6()": {
	  "prefix": "N_0xd76eeef746057fd6",
	  "body": [
		"N_0xd76eeef746057fd6(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Any\n"
	},
	"N_0xd9b71952f78a2640()": {
	  "prefix": "N_0xd9b71952f78a2640",
	  "body": [
		"N_0xd9b71952f78a2640(${1:Hash doorHash}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xda05194260cdcdf9()": {
	  "prefix": "N_0xda05194260cdcdf9",
	  "body": [
		"N_0xda05194260cdcdf9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xdb41d07a45a6d4b7()": {
	  "prefix": "N_0xdb41d07a45a6d4b7",
	  "body": [
		"N_0xdb41d07a45a6d4b7(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Any\n"
	},
	"N_0xdf6ca0330f2e737b()": {
	  "prefix": "N_0xdf6ca0330f2e737b",
	  "body": [
		"N_0xdf6ca0330f2e737b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xdf97cdd4fc08fd34()": {
	  "prefix": "N_0xdf97cdd4fc08fd34",
	  "body": [
		"N_0xdf97cdd4fc08fd34(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0xe7e4c198b0185900()": {
	  "prefix": "N_0xe7e4c198b0185900",
	  "body": [
		"N_0xe7e4c198b0185900(${1:Object p0}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xe84eb93729c5f36a()": {
	  "prefix": "N_0xe84eb93729c5f36a",
	  "body": [
		"N_0xe84eb93729c5f36a(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Any\n"
	},
	"N_0xeb6f1a9b5510a5d2()": {
	  "prefix": "N_0xeb6f1a9b5510a5d2",
	  "body": [
		"N_0xeb6f1a9b5510a5d2(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xf0eed5a6bc7b237a()": {
	  "prefix": "N_0xf0eed5a6bc7b237a",
	  "body": [
		"N_0xf0eed5a6bc7b237a(${1:Any p0}, ${2:Entity entity}, ${3:int p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n\nIS_OBJECT_???  \n"
	},
	"N_0xf12e33034d887f66()": {
	  "prefix": "N_0xf12e33034d887f66",
	  "body": [
		"N_0xf12e33034d887f66(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Any\n"
	},
	"N_0xf2e1a7133dd356a6()": {
	  "prefix": "N_0xf2e1a7133dd356a6",
	  "body": [
		"N_0xf2e1a7133dd356a6(${1:Hash hash}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xf92099527db8e2a7()": {
	  "prefix": "N_0xf92099527db8e2a7",
	  "body": [
		"N_0xf92099527db8e2a7(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"PlaceObjectOnGroundProperly()": {
	  "prefix": "PlaceObjectOnGroundProperly",
	  "body": [
		"PlaceObjectOnGroundProperly(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n"
	},
	"N_0xf9c1681347c8bd15()": {
	  "prefix": "N_0xf9c1681347c8bd15",
	  "body": [
		"N_0xf9c1681347c8bd15(${1:Object object})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"RemoveAllPickupsOfType()": {
	  "prefix": "RemoveAllPickupsOfType",
	  "body": [
		"RemoveAllPickupsOfType(${1:Hash pickupHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nPickup hashes: pastebin.com/8EuSv2r1  \n"
	},
	"SetActivateObjectPhysicsAsSoonAsItIsUnfrozen()": {
	  "prefix": "SetActivateObjectPhysicsAsSoonAsItIsUnfrozen",
	  "body": [
		"SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(${1:Object object}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"RemoveDoorFromSystem()": {
	  "prefix": "RemoveDoorFromSystem",
	  "body": [
		"RemoveDoorFromSystem(${1:Hash doorHash})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0x6bab9442830c7f53()": {
	  "prefix": "N_0x6bab9442830c7f53",
	  "body": "N_0x6bab9442830c7f53",
	  "description": "OLD NAME, PLEASE USE SetDoorAccelerationLimit INSTEAD!"
	},
	"SetDoorAccelerationLimit()": {
	  "prefix": "SetDoorAccelerationLimit",
	  "body": [
		"SetDoorAccelerationLimit(${1:Hash doorHash}, ${2:int limit}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nSets the acceleration limit of a door.  \nHow fast it can open, or the inverse hinge resistance.  \nA limit of 0 seems to lock doors.  \np2 is always 0, p3 is always 1.  \n\nOld name: N_0x6bab9442830c7f53"
	},
	"RemovePickup()": {
	  "prefix": "RemovePickup",
	  "body": [
		"RemovePickup(${1:Pickup pickup})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"SetForceObjectThisFrame()": {
	  "prefix": "SetForceObjectThisFrame",
	  "body": [
		"SetForceObjectThisFrame(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"N_0xb6e6fba95c7324ac()": {
	  "prefix": "N_0xb6e6fba95c7324ac",
	  "body": "N_0xb6e6fba95c7324ac",
	  "description": "OLD NAME, PLEASE USE SetDoorAjarAngle INSTEAD!"
	},
	"SetDoorAjarAngle()": {
	  "prefix": "SetDoorAjarAngle",
	  "body": [
		"SetDoorAjarAngle(${1:Hash doorHash}, ${2:float ajar}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nSets the ajar angle of a door.  \nRanges from -1.0 to 1.0, and 0.0 is closed / default.  \np2 is always 0, p3 is always 1.  \n\nOld name: N_0xb6e6fba95c7324ac"
	},
	"N_0x3b2fd68db5f8331c()": {
	  "prefix": "N_0x3b2fd68db5f8331c",
	  "body": "N_0x3b2fd68db5f8331c",
	  "description": "OLD NAME, PLEASE USE SetObjectColour INSTEAD!"
	},
	"SetObjectColour()": {
	  "prefix": "SetObjectColour",
	  "body": [
		"SetObjectColour(${1:Entity entity}, ${2:Any p1}, ${3:int R}, ${4:int G}, ${5:int B})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\nSeems to set the colour of the prop. Haven't really tested it on other props.\nOnly appears in am_mp_nightclub.c for the nightclub dancefloor.\n\nNot sure what p1 does, seems to only ever be '1' in scripts.\nOld name: N_0x3b2fd68db5f8331c"
	},
	"SetObjectPhysicsParams()": {
	  "prefix": "SetObjectPhysicsParams",
	  "body": [
		"SetObjectPhysicsParams(${1:Object object}, ${2:float weight}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float gravity}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float buoyancy})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nAdjust the physics parameters of a prop, or otherwise known as \"object\". This is useful for simulated gravity.  \nOther parameters seem to be unknown.  \np2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?  \np3: seems similar to p2  \np4: makes obj fall slower the higher the value  \np5: similar to p4  \n"
	},
	"N_0x77f33f2ccf64b3aa()": {
	  "prefix": "N_0x77f33f2ccf64b3aa",
	  "body": "N_0x77f33f2ccf64b3aa",
	  "description": "OLD NAME, PLEASE USE SetObjectSomething INSTEAD!"
	},
	"SetObjectSomething()": {
	  "prefix": "SetObjectSomething",
	  "body": [
		"SetObjectSomething(${1:Object object}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n`\ni don't know what this does  \n<pre>  \nvoid __fastcall OBJECT___0x77F33F2CCF64B3AA_START(scrNativeCallContext *args)  \n{  \n  bool p2; // bl@1  \n  CObject *pObject; // rax@1  \n  scrNativeCallContextArgStruct *pArgs; // rax@1  \n  pArgs = args->pArgs;  \n  p2 = pArgs->a2.BOOL != 0;  \n  pObject = getAddressOfObject(pArgs->a1.Object);  \n  if ( pObject )  \n  {  \n    pObject->field_425 &= 0xDFu;                // 1101 1111 (clear bit 6)  \n    pObject->field_425 |= 32 * p2;              // bit 6 = p2  \n  }  \n}  \n// sfink  \n// note to AB: please set \"white-space: pre\" in css  \n`\n\n\n## Parameters\n* **object**: \n* **p1**: \n\nOld name: N_0x77f33f2ccf64b3aa"
	},
	"SetObjectTargettable()": {
	  "prefix": "SetObjectTargettable",
	  "body": [
		"SetObjectTargettable(${1:Object object}, ${2:BOOL targettable})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: Any\n"
	},
	"SetPickupRegenerationTime()": {
	  "prefix": "SetPickupRegenerationTime",
	  "body": [
		"SetPickupRegenerationTime(${1:Pickup pickup}, ${2:int duration})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nduration specifies the time until the next respawn, in ms. (known values: 600000).  \nUsage Example:  \nPickup pickup = OBJECT::CREATE_PICKUP_ROTATE(...);  \nOBJECT::SET_PICKUP_REGENERATION_TIME(pickup, 600000); // 10mins  \n"
	},
	"N_0x971da0055324d033()": {
	  "prefix": "N_0x971da0055324d033",
	  "body": "N_0x971da0055324d033",
	  "description": "OLD NAME, PLEASE USE SetObjectTextureVariant INSTEAD!"
	},
	"SetObjectTextureVariant()": {
	  "prefix": "SetObjectTextureVariant",
	  "body": [
		"SetObjectTextureVariant(${1:Object object}, ${2:int paintIndex})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nenum ObjectPaintVariants  \n{  \n\tPacific = 0,  \n\tAzure = 1,  \n\tNautical = 2,  \n\tContinental = 3,  \n\tBattleship = 4,  \n\tIntrepid = 5,  \n\tUniform = 6,  \n\tClassico = 7,  \n\tMediterranean = 8,  \n\tCommand = 9,  \n\tMariner = 10,  \n\tRuby = 11,  \n\tVintage = 12,  \n\tPristine = 13,  \n\tMerchant = 14,  \n\tVoyager = 15  \n};  \n\nOld name: N_0x971da0055324d033"
	},
	"SetStateOfClosestDoorOfType()": {
	  "prefix": "SetStateOfClosestDoorOfType",
	  "body": [
		"SetStateOfClosestDoorOfType(${1:Hash type}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL locked}, ${6:float heading}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nHardcoded to not work in multiplayer.  \nUsed to lock/unlock doors to interior areas of the game.  \n(Possible) Door Types:  \npastebin.com/9S2m3qA4  \nHeading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.  \nLocked means that the heading is locked.    \np6 is always 0.   \n225 door types, model names and coords found in stripclub.c4:  \npastebin.com/gywnbzsH  \nget door info: pastebin.com/i14rbekD  \n"
	},
	"N_0x5c29f698d404c5e1()": {
	  "prefix": "N_0x5c29f698d404c5e1",
	  "body": "N_0x5c29f698d404c5e1",
	  "description": "OLD NAME, PLEASE USE SetStateOfRayfireMapObject INSTEAD!"
	},
	"SetDesObjectState()": {
	  "prefix": "SetDesObjectState",
	  "body": "SetDesObjectState",
	  "description": "OLD NAME, PLEASE USE SetStateOfRayfireMapObject INSTEAD!"
	},
	"SetStateOfRayfireMapObject()": {
	  "prefix": "SetStateOfRayfireMapObject",
	  "body": [
		"SetStateOfRayfireMapObject(${1:Object object}, ${2:int state})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n\nDefines the state of a destructible object.  \nUse the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords  \nState 2 == object just spawned  \nState 4 == Beginning of the animation  \nState 6 == Start animation  \nState 9 == End of the animation  \n\nOld name: N_0x5c29f698d404c5e1\nOld name: SetDesObjectState"
	},
	"SlideObject()": {
	  "prefix": "SlideObject",
	  "body": [
		"SlideObject(${1:Object object}, ${2:float toX}, ${3:float toY}, ${4:float toZ}, ${5:float speedX}, ${6:float speedY}, ${7:float speedZ}, ${8:BOOL collision})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: BOOL\n\nReturns true if the object has finished moving.  \nIf false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.  \nSee also: gtag.gtagaming.com/opcode-database/opcode/034E/  \n"
	},
	"SetTeamPickupObject()": {
	  "prefix": "SetTeamPickupObject",
	  "body": [
		"SetTeamPickupObject(${1:Object object}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"TrackObjectVisibility()": {
	  "prefix": "TrackObjectVisibility",
	  "body": [
		"TrackObjectVisibility(${1:Any p0})"
	  ],
	  "description": "Namespace: OBJECT\nReturns: void\n"
	},
	"DisableAllControlActions()": {
	  "prefix": "DisableAllControlActions",
	  "body": [
		"DisableAllControlActions(${1:int inputGroup})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"DisableControlAction()": {
	  "prefix": "DisableControlAction",
	  "body": [
		"DisableControlAction(${1:int inputGroup}, ${2:int control}, ${3:BOOL disable})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n\ncontrol values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Controls.cs  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \nControl values from the decompiled scripts: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,  \n28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,5  \n4,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,  \n79,80,81,82,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,105,  \n107,108,109,110,111,112,113,114,115,116,117,118,119,123,126,129,130,131,132,  \n133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,  \n153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172  \n,177,187,188,189,190,195,196,199,200,201,202,203,205,207,208,209,211,212,213, 217,219,220,221,225,226,230,234,235,236,237,238,239,240,241,242,243,244,257,  \n261,262,263,264,265,270,271,272,273,274,278,279,280,281,282,283,284,285,286,  \n287,288,289,337.  \nExample: CONTROLS::DISABLE_CONTROL_ACTION(2, 19, true) disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame.   \nControl group 1 and 0 gives the same results as 2. Same results for all players.  \n"
	},
	"N_0x7f4724035fdca1dd()": {
	  "prefix": "N_0x7f4724035fdca1dd",
	  "body": "N_0x7f4724035fdca1dd",
	  "description": "OLD NAME, PLEASE USE DisableInputGroup INSTEAD!"
	},
	"DisableInputGroup()": {
	  "prefix": "DisableInputGroup",
	  "body": [
		"DisableInputGroup(${1:int inputGroup})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n\nOld name: N_0x7f4724035fdca1dd"
	},
	"EnableControlAction()": {
	  "prefix": "EnableControlAction",
	  "body": [
		"EnableControlAction(${1:int inputGroup}, ${2:int control}, ${3:BOOL enable})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n\ncontrol values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Control.cs  \nand  \nwiki.fivem.net/wiki/Controls  \n0, 1 and 2 used in the scripts.  \nControl values from the decompiled scripts:   \n0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,  \n37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100  \n,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19  \n0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2  \n20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,  \n261,262,263,264,286,287,288,289,337,338,339,340,341,342,343  \nINPUTGROUP_MOVE  \nINPUTGROUP_LOOK  \nINPUTGROUP_WHEEL  \nINPUTGROUP_CELLPHONE_NAVIGATE  \nINPUTGROUP_CELLPHONE_NAVIGATE_UD  \nINPUTGROUP_CELLPHONE_NAVIGATE_LR  \nINPUTGROUP_FRONTEND_DPAD_ALL  \nINPUTGROUP_FRONTEND_DPAD_UD  \nINPUTGROUP_FRONTEND_DPAD_LR  \nINPUTGROUP_FRONTEND_LSTICK_ALL  \nINPUTGROUP_FRONTEND_RSTICK_ALL  \nINPUTGROUP_FRONTEND_GENERIC_UD  \nINPUTGROUP_FRONTEND_GENERIC_LR  \nINPUTGROUP_FRONTEND_GENERIC_ALL  \nINPUTGROUP_FRONTEND_BUMPERS  \nINPUTGROUP_FRONTEND_TRIGGERS  \nINPUTGROUP_FRONTEND_STICKS  \nINPUTGROUP_SCRIPT_DPAD_ALL  \nINPUTGROUP_SCRIPT_DPAD_UD  \nINPUTGROUP_SCRIPT_DPAD_LR  \nINPUTGROUP_SCRIPT_LSTICK_ALL  \nINPUTGROUP_SCRIPT_RSTICK_ALL  \nINPUTGROUP_SCRIPT_BUMPERS  \nINPUTGROUP_SCRIPT_TRIGGERS  \nINPUTGROUP_WEAPON_WHEEL_CYCLE  \nINPUTGROUP_FLY  \nINPUTGROUP_SUB  \nINPUTGROUP_VEH_MOVE_ALL  \nINPUTGROUP_CURSOR  \nINPUTGROUP_CURSOR_SCROLL  \nINPUTGROUP_SNIPER_ZOOM_SECONDARY  \nINPUTGROUP_VEH_HYDRAULICS_CONTROL  \nTook those in IDA Pro.Not sure in which order they go  \n"
	},
	"EnableAllControlActions()": {
	  "prefix": "EnableAllControlActions",
	  "body": [
		"EnableAllControlActions(${1:int inputGroup})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"GetControlNormal()": {
	  "prefix": "GetControlNormal",
	  "body": [
		"GetControlNormal(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: float\n\nReturns the value of CONTROLS::GET_CONTROL_VALUE Normalized (ie a real number value between -1 and 1)  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"N_0x0499d7b09fc9b407()": {
	  "prefix": "N_0x0499d7b09fc9b407",
	  "body": "N_0x0499d7b09fc9b407",
	  "description": "OLD NAME, PLEASE USE GetControlInstructionalButton INSTEAD!"
	},
	"GetControlInstructionalButton()": {
	  "prefix": "GetControlInstructionalButton",
	  "body": [
		"GetControlInstructionalButton(${1:int inputGroup}, ${2:int control}, ${3:Player p2})"
	  ],
	  "description": "Namespace: PAD\nReturns: char*\n\nformerly called _GET_CONTROL_ACTION_NAME incorrectly  \np2 appears to always be true.  \np2 is unused variable in function.  \nEG:  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/  \nGET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/  \ngtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n\nOld name: N_0x0499d7b09fc9b407"
	},
	"GetDisabledControlNormal()": {
	  "prefix": "GetDisabledControlNormal",
	  "body": [
		"GetDisabledControlNormal(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: float\n\ncontrol - c# works with (int)GTA.Control.CursorY / (int)GTA.Control.CursorX and returns the mouse movement (additive).  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"GetControlValue()": {
	  "prefix": "GetControlValue",
	  "body": [
		"GetControlValue(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: int\n\n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"IsControlEnabled()": {
	  "prefix": "IsControlEnabled",
	  "body": [
		"IsControlEnabled(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nControl Groups:  \nenum InputGroups  \n{  \n\tINPUTGROUP_MOVE = 0,  \n\tINPUTGROUP_LOOK = 1,  \n\tINPUTGROUP_WHEEL = 2,  \n\tINPUTGROUP_CELLPHONE_NAVIGATE = 3,  \n\tINPUTGROUP_CELLPHONE_NAVIGATE_UD = 4,  \n\tINPUTGROUP_CELLPHONE_NAVIGATE_LR = 5,  \n\tINPUTGROUP_FRONTEND_DPAD_ALL = 6,  \n\tINPUTGROUP_FRONTEND_DPAD_UD = 7,  \n\tINPUTGROUP_FRONTEND_DPAD_LR = 8,  \n\tINPUTGROUP_FRONTEND_LSTICK_ALL = 9,  \n\tINPUTGROUP_FRONTEND_RSTICK_ALL = 10,  \n\tINPUTGROUP_FRONTEND_GENERIC_UD = 11,  \n\tINPUTGROUP_FRONTEND_GENERIC_LR = 12,  \n\tINPUTGROUP_FRONTEND_GENERIC_ALL = 13,  \n\tINPUTGROUP_FRONTEND_BUMPERS = 14,  \n\tINPUTGROUP_FRONTEND_TRIGGERS = 15,  \n\tINPUTGROUP_FRONTEND_STICKS = 16,  \n\tINPUTGROUP_SCRIPT_DPAD_ALL = 17,  \n\tINPUTGROUP_SCRIPT_DPAD_UD = 18,  \n\tINPUTGROUP_SCRIPT_DPAD_LR = 19,  \n\tINPUTGROUP_SCRIPT_LSTICK_ALL = 20,  \n\tINPUTGROUP_SCRIPT_RSTICK_ALL = 21,  \n\tINPUTGROUP_SCRIPT_BUMPERS = 22,  \n\tINPUTGROUP_SCRIPT_TRIGGERS = 23,  \n\tINPUTGROUP_WEAPON_WHEEL_CYCLE = 24,  \n\tINPUTGROUP_FLY = 25,  \n\tINPUTGROUP_SUB = 26,  \n\tINPUTGROUP_VEH_MOVE_ALL = 27,  \n\tINPUTGROUP_CURSOR = 28,  \n\tINPUTGROUP_CURSOR_SCROLL = 29,  \n\tINPUTGROUP_SNIPER_ZOOM_SECONDARY = 30,  \n\tINPUTGROUP_VEH_HYDRAULICS_CONTROL = 31,  \n\tMAX_INPUTGROUPS = 32,  \n\tINPUTGROUP_INVALID = 33  \n};  \n0, 1 and 2 used in the scripts.  \n"
	},
	"GetLocalPlayerAimState()": {
	  "prefix": "GetLocalPlayerAimState",
	  "body": [
		"GetLocalPlayerAimState()"
	  ],
	  "description": "Namespace: PAD\nReturns: int\n"
	},
	"IsControlJustReleased()": {
	  "prefix": "IsControlJustReleased",
	  "body": [
		"IsControlJustReleased(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\nReturns whether a [control](https://docs.fivem.net/game-references/controls/) was newly released since the last check."
	},
	"IsControlJustPressed()": {
	  "prefix": "IsControlJustPressed",
	  "body": [
		"IsControlJustPressed(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\nReturns whether a [control](https://docs.fivem.net/game-references/controls/) was newly pressed since the last check."
	},
	"IsControlReleased()": {
	  "prefix": "IsControlReleased",
	  "body": [
		"IsControlReleased(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\nReturns whether a [control](https://docs.fivem.net/game-references/controls/) is currently _not_ pressed."
	},
	"IsDisabledControlJustReleased()": {
	  "prefix": "IsDisabledControlJustReleased",
	  "body": [
		"IsDisabledControlJustReleased(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"IsControlPressed()": {
	  "prefix": "IsControlPressed",
	  "body": [
		"IsControlPressed(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\nReturns whether a [control](https://docs.fivem.net/game-references/controls/) is currently pressed."
	},
	"N_0xfb6c4072e9a32e92()": {
	  "prefix": "N_0xfb6c4072e9a32e92",
	  "body": "N_0xfb6c4072e9a32e92",
	  "description": "OLD NAME, PLEASE USE IsDisabledControlReleased INSTEAD!"
	},
	"IsDisabledControlReleased()": {
	  "prefix": "IsDisabledControlReleased",
	  "body": [
		"IsDisabledControlReleased(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nOld name: N_0xfb6c4072e9a32e92"
	},
	"IsDisabledControlJustPressed()": {
	  "prefix": "IsDisabledControlJustPressed",
	  "body": [
		"IsDisabledControlJustPressed(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"IsLookInverted()": {
	  "prefix": "IsLookInverted",
	  "body": [
		"IsLookInverted()"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n"
	},
	"N_0x0f70731baccfbb96()": {
	  "prefix": "N_0x0f70731baccfbb96",
	  "body": [
		"N_0x0f70731baccfbb96()"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n"
	},
	"IsDisabledControlPressed()": {
	  "prefix": "IsDisabledControlPressed",
	  "body": [
		"IsDisabledControlPressed(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"N_0x14d29bb12d47f68c()": {
	  "prefix": "N_0x14d29bb12d47f68c",
	  "body": [
		"N_0x14d29bb12d47f68c(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"GetLastInputMethod()": {
	  "prefix": "GetLastInputMethod",
	  "body": "GetLastInputMethod",
	  "description": "OLD NAME, PLEASE USE IsInputDisabled INSTEAD!"
	},
	"IsInputDisabled()": {
	  "prefix": "IsInputDisabled",
	  "body": [
		"IsInputDisabled(${1:int inputGroup})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nSeems to return true if the input is currently disabled. \"_GET_LAST_INPUT_METHOD\" didn't seem very accurate, but I've left the original description below.  \n--  \nindex usually 2  \nreturns true if the last input method was made with mouse + keyboard, false if it was made with a gamepad  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n\nOld name: GetLastInputMethod"
	},
	"N_0x13337b38db572509()": {
	  "prefix": "N_0x13337b38db572509",
	  "body": "N_0x13337b38db572509",
	  "description": "OLD NAME, PLEASE USE IsInputJustDisabled INSTEAD!"
	},
	"IsInputJustDisabled()": {
	  "prefix": "IsInputJustDisabled",
	  "body": [
		"IsInputJustDisabled(${1:int inputGroup})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nI may be wrong with this one, but from the looks of the scripts, it sets keyboard related stuff as soon as this returns true.  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n\nOld name: N_0x13337b38db572509"
	},
	"N_0x3d42b92563939375()": {
	  "prefix": "N_0x3d42b92563939375",
	  "body": [
		"N_0x3d42b92563939375(${1:char* p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nUsed in carsteal3 script with p0 = \"Carsteal4_spycar\".  \n"
	},
	"N_0x4f8a26a890fd62fb()": {
	  "prefix": "N_0x4f8a26a890fd62fb",
	  "body": [
		"N_0x4f8a26a890fd62fb(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: float\n\nThe \"disabled\" variant of _0x5B84D09CEC5209C5.  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"N_0x23f09eadc01449d6()": {
	  "prefix": "N_0x23f09eadc01449d6",
	  "body": [
		"N_0x23f09eadc01449d6(${1:BOOL p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n"
	},
	"N_0x4683149ed1dde7a1()": {
	  "prefix": "N_0x4683149ed1dde7a1",
	  "body": [
		"N_0x4683149ed1dde7a1(${1:char* p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n"
	},
	"N_0x5b73c77d9eb66e24()": {
	  "prefix": "N_0x5b73c77d9eb66e24",
	  "body": [
		"N_0x5b73c77d9eb66e24(${1:BOOL p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"N_0x59b9a7af4c95133c()": {
	  "prefix": "N_0x59b9a7af4c95133c",
	  "body": [
		"N_0x59b9a7af4c95133c()"
	  ],
	  "description": "Namespace: PAD\nReturns: Any\n\nSame behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.  \n"
	},
	"N_0x643ed62d5ea3bebd()": {
	  "prefix": "N_0x643ed62d5ea3bebd",
	  "body": [
		"N_0x643ed62d5ea3bebd()"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"N_0x5b84d09cec5209c5()": {
	  "prefix": "N_0x5b84d09cec5209c5",
	  "body": [
		"N_0x5b84d09cec5209c5(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: float\n\nSeems to return values between -1 and 1 for controls like gas and steering.  \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"N_0x80c2fd58d720c801()": {
	  "prefix": "N_0x80c2fd58d720c801",
	  "body": [
		"N_0x80c2fd58d720c801(${1:int inputGroup}, ${2:int control}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PAD\nReturns: char*\n\n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n"
	},
	"N_0x6cd79468a1e595c6()": {
	  "prefix": "N_0x6cd79468a1e595c6",
	  "body": [
		"N_0x6cd79468a1e595c6(${1:int inputGroup})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n"
	},
	"N_0x8290252fff36acb5()": {
	  "prefix": "N_0x8290252fff36acb5",
	  "body": [
		"N_0x8290252fff36acb5(${1:int p0}, ${2:int red}, ${3:int green}, ${4:int blue})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n\nHUD_COLOUR_CONTROLLER_CHOP = 174;  \nUI::GET_HUD_COLOUR(174, &v_6, &v_7, &v_8, &v_9);  \nCONTROLS::_8290252FFF36ACB5(0, v_6, v_7, v_8);  \n"
	},
	"N_0xa0cefcea390aab9b()": {
	  "prefix": "N_0xa0cefcea390aab9b",
	  "body": [
		"N_0xa0cefcea390aab9b(${1:Any p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"N_0xcb0360efefb2580d()": {
	  "prefix": "N_0xcb0360efefb2580d",
	  "body": [
		"N_0xcb0360efefb2580d(${1:Any p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"N_0xe1615ec03b3bb4fd()": {
	  "prefix": "N_0xe1615ec03b3bb4fd",
	  "body": [
		"N_0xe1615ec03b3bb4fd()"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nUsed with IS_LOOK_INVERTED() and negates its affect.  \n--  \nNot sure how the person above got that description, but here's an actual example:  \nif (CONTROLS::_GET_LAST_INPUT_METHOD(2)) {  \n    if (a_5) {  \n        if (CONTROLS::IS_LOOK_INVERTED()) {  \n            a_3 *= -1;  \n        }  \n        if (CONTROLS::_E1615EC03B3BB4FD()) {  \n            a_3 *= -1;  \n        }  \n    }  \n}  \n"
	},
	"N_0xd7d22f5592aed8ba()": {
	  "prefix": "N_0xd7d22f5592aed8ba",
	  "body": [
		"N_0xd7d22f5592aed8ba(${1:int p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: int\n"
	},
	"N_0xf239400e16c23e08()": {
	  "prefix": "N_0xf239400e16c23e08",
	  "body": [
		"N_0xf239400e16c23e08(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"N_0xe8a25867fba3b05e()": {
	  "prefix": "N_0xe8a25867fba3b05e",
	  "body": "N_0xe8a25867fba3b05e",
	  "description": "OLD NAME, PLEASE USE SetControlNormal INSTEAD!"
	},
	"SetControlNormal()": {
	  "prefix": "SetControlNormal",
	  "body": [
		"SetControlNormal(${1:int inputGroup}, ${2:int control}, ${3:float amount})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nThis is for simulating player input.  \namount is a float value from 0   \n0, 1 and 2 used in the scripts. 0 is by far the most common of them.  \n\nOld name: N_0xe8a25867fba3b05e"
	},
	"N_0xfc859e2374407556()": {
	  "prefix": "N_0xfc859e2374407556",
	  "body": [
		"N_0xfc859e2374407556()"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n"
	},
	"N_0xfc695459d4d0e219()": {
	  "prefix": "N_0xfc695459d4d0e219",
	  "body": "N_0xfc695459d4d0e219",
	  "description": "OLD NAME, PLEASE USE SetCursorLocation INSTEAD!"
	},
	"SetCursorLocation()": {
	  "prefix": "SetCursorLocation",
	  "body": [
		"SetCursorLocation(${1:float x}, ${2:float y})"
	  ],
	  "description": "Namespace: PAD\nReturns: BOOL\n\nRenamed to SET_CURSOR_LOCATION (I previously named it _SET_CURSOR_POSTION) which is the correct name as far as I can tell.  \n\nOld name: N_0xfc695459d4d0e219"
	},
	"SetPadShake()": {
	  "prefix": "SetPadShake",
	  "body": [
		"SetPadShake(${1:int p0}, ${2:int duration}, ${3:int frequency})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n\np0 always seems to be 0  \nduration in milliseconds   \nfrequency should range from about 10 (slow vibration) to 255 (very fast)  \nappears to be a hash collision, though it does do what it says  \nexample:  \nSET_PAD_SHAKE(0, 100, 200);  \n"
	},
	"SetPlayerpadShakesWhenControllerDisabled()": {
	  "prefix": "SetPlayerpadShakesWhenControllerDisabled",
	  "body": [
		"SetPlayerpadShakesWhenControllerDisabled(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"SetInputExclusive()": {
	  "prefix": "SetInputExclusive",
	  "body": [
		"SetInputExclusive(${1:int inputGroup}, ${2:int control})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"StopPadShake()": {
	  "prefix": "StopPadShake",
	  "body": [
		"StopPadShake(${1:Any p0})"
	  ],
	  "description": "Namespace: PAD\nReturns: void\n"
	},
	"AddNavmeshRequiredRegion()": {
	  "prefix": "AddNavmeshRequiredRegion",
	  "body": [
		"AddNavmeshRequiredRegion(${1:float x}, ${2:float y}, ${3:float radius})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"CalculateTravelDistanceBetweenPoints()": {
	  "prefix": "CalculateTravelDistanceBetweenPoints",
	  "body": [
		"CalculateTravelDistanceBetweenPoints(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: float\n\nCalculates the travel distance between a set of points.  \nDoesn't seem to correlate with distance on gps sometimes.  \n"
	},
	"AddNavmeshBlockingObject()": {
	  "prefix": "AddNavmeshBlockingObject",
	  "body": [
		"AddNavmeshBlockingObject(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:BOOL p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"DisableNavmeshInArea()": {
	  "prefix": "DisableNavmeshInArea",
	  "body": [
		"DisableNavmeshInArea(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"AreAllNavmeshRegionsLoaded()": {
	  "prefix": "AreAllNavmeshRegionsLoaded",
	  "body": [
		"AreAllNavmeshRegionsLoaded()"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n"
	},
	"GetClosestMajorVehicleNode()": {
	  "prefix": "GetClosestMajorVehicleNode",
	  "body": [
		"GetClosestMajorVehicleNode(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vector3* outPosition}, ${5:float unknown1}, ${6:int unknown2})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nGet the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0  \n"
	},
	"N_0x2801d0012266df07()": {
	  "prefix": "N_0x2801d0012266df07",
	  "body": "N_0x2801d0012266df07",
	  "description": "OLD NAME, PLEASE USE ClearGpsDisabledZoneAtIndex INSTEAD!"
	},
	"ClearGpsDisabledZoneAtIndex()": {
	  "prefix": "ClearGpsDisabledZoneAtIndex",
	  "body": [
		"ClearGpsDisabledZoneAtIndex(${1:int index})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\nClears a disabled GPS route area from a certain index previously set using [`SET_GPS_DISABLED_ZONE_AT_INDEX`](#_0xD0BC1C6FB18EE154).\nOld name: N_0x2801d0012266df07"
	},
	"GenerateDirectionsToCoord()": {
	  "prefix": "GenerateDirectionsToCoord",
	  "body": [
		"GenerateDirectionsToCoord(${1:float x}, ${2:float y}, ${3:float z}, ${4:BOOL p3}, ${5:int* direction}, ${6:float* vehicle}, ${7:float* distToNxJunction})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: int\n\nUsage example:  \nPublic Function GenerateDirectionsToCoord(Pos As Vector3) As Tuple(Of String, Single, Single)  \n        Dim f4, f5, f6 As New OutputArgument()  \n        Native.Function.Call(Hash.GENERATE_DIRECTIONS_TO_COORD, Pos.X, Pos.Y, Pos.Z, True, f4, f5, f6)  \n        Dim direction As String = f4.GetResult(Of Single)()  \n        Return New Tuple(Of String, Single, Single)(direction.Substring(0, 1), f5.GetResult(Of Single)(), f6.GetResult(Of Single)())  \n    End Function  \np3 I use 1  \ndirection:  \n0 = You Have Arrived\n1 = Recalculating Route, Please make a u-turn where safe  \n2 = Please Proceed the Highlighted Route  \n3 = In (distToNxJunction) Turn Left  \n4 = In (distToNxJunction) Turn Right  \n5 = In (distToNxJunction) Go Straight  \n6 = In (distToNxJunction) Keep Left  \n7 = In (distToNxJunction) Keep Right\n8 = In (distToNxJunction) Join the freeway  \n9 = In (distToNxJunction) Exit Freeway  \nreturn value set to 0 always  \n"
	},
	"N_0x0eaeb0db4b132399()": {
	  "prefix": "N_0x0eaeb0db4b132399",
	  "body": "N_0x0eaeb0db4b132399",
	  "description": "OLD NAME, PLEASE USE DoesNavmeshBlockingObjectExist INSTEAD!"
	},
	"DoesNavmeshBlockingObjectExist()": {
	  "prefix": "DoesNavmeshBlockingObjectExist",
	  "body": [
		"DoesNavmeshBlockingObjectExist(${1:Any p0})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nOld name: N_0x0eaeb0db4b132399"
	},
	"GetClosestVehicleNode()": {
	  "prefix": "GetClosestVehicleNode",
	  "body": [
		"GetClosestVehicleNode(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vector3* outPosition}, ${5:int nodeType}, ${6:float p5}, ${7:float p6})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nFYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is <= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node.  \n----------  \nVector3 nodePos;  \nGET_CLOSEST_VEHICLE_NODE(x,y,z,&nodePos,...)  \np4 is either 0, 1 or 8. 1 means any path/road. 0 means node in the middle of the closest main (asphalt) road.  \np5, p6 are always the same:  \n0x40400000 (3.0), 0  \np5 can also be 100.0 and p6 can be 2.5:  \nPATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &v_5, v_9, 100.0, 2.5)  \nKnown node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.   \nThe node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.   \nStarting at 2, every fourth node is under the map, always same coords.  \nSame with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).   \ngtaforums.com/topic/843561-pathfind-node-types  \n"
	},
	"N_0x4f5070aa58f69279()": {
	  "prefix": "N_0x4f5070aa58f69279",
	  "body": "N_0x4f5070aa58f69279",
	  "description": "OLD NAME, PLEASE USE GetIsSlowRoadFlag INSTEAD!"
	},
	"GetIsSlowRoadFlag()": {
	  "prefix": "GetIsSlowRoadFlag",
	  "body": [
		"GetIsSlowRoadFlag(${1:int nodeID})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\np0 = VEHICLE_NODE_ID  \nReturns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.  \nNormal roads where plenty of Peds spawn will return false  \n\nOld name: N_0x4f5070aa58f69279"
	},
	"GetClosestRoad()": {
	  "prefix": "GetClosestRoad",
	  "body": [
		"GetClosestRoad(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:int p4}, ${6:Vector3* p5}, ${7:Vector3* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:float* p9}, ${11:BOOL p10})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n\np1 seems to be always 1.0f in the scripts  \n"
	},
	"N_0xd3a6a0ef48823a8c()": {
	  "prefix": "N_0xd3a6a0ef48823a8c",
	  "body": "N_0xd3a6a0ef48823a8c",
	  "description": "OLD NAME, PLEASE USE GetNextGpsDisabledZoneIndex INSTEAD!"
	},
	"GetNextGpsDisabledZoneIndex()": {
	  "prefix": "GetNextGpsDisabledZoneIndex",
	  "body": [
		"GetNextGpsDisabledZoneIndex(${1:int index})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: int\nGets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.\nOld name: N_0xd3a6a0ef48823a8c"
	},
	"GetClosestVehicleNodeWithHeading()": {
	  "prefix": "GetClosestVehicleNodeWithHeading",
	  "body": [
		"GetClosestVehicleNodeWithHeading(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vector3* outPosition}, ${5:float* outHeading}, ${6:int nodeType}, ${7:float p6}, ${8:int p7})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\np5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.  \np5 is either 1 or 12. 1 means any path/road. 12, 8, 0 means node in the middle of the closest main (asphalt) road.  \np6 is always 3.0  \np7 is always 0.  \nKnown node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.   \nThe node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.   \nStarting at 2, every fourth node is under the map, always same coords.  \nSame with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).  \ngtaforums.com/topic/843561-pathfind-node-types  \nExample of usage, moving vehicle to closest path/road:  \nVector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);  \nVector3 closestVehicleNodeCoords;   \nfloat roadHeading;   \nPATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);   \nENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);  \nENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);  \nVEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);  \n------------------------------------------------------------------  \nC# Example (ins1de) : pastebin.com/fxtMWAHD  \n"
	},
	"GetNthClosestVehicleNodeId()": {
	  "prefix": "GetNthClosestVehicleNodeId",
	  "body": [
		"GetNthClosestVehicleNodeId(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nth}, ${5:int nodetype}, ${6:float p5}, ${7:float p6})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: int\n\nReturns the id.  \n"
	},
	"GetNthClosestVehicleNodeIdWithHeading()": {
	  "prefix": "GetNthClosestVehicleNodeIdWithHeading",
	  "body": [
		"GetNthClosestVehicleNodeIdWithHeading(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nthClosest}, ${5:Vector3* outPosition}, ${6:float outHeading}, ${7:Any p6}, ${8:float p7}, ${9:float p8})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"GetNthClosestVehicleNode()": {
	  "prefix": "GetNthClosestVehicleNode",
	  "body": [
		"GetNthClosestVehicleNode(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nthClosest}, ${5:Vector3* outPosition}, ${6:Any unknown1}, ${7:Any unknown2}, ${8:Any unknown3})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n"
	},
	"GetNthClosestVehicleNodeFavourDirection()": {
	  "prefix": "GetNthClosestVehicleNodeFavourDirection",
	  "body": [
		"GetNthClosestVehicleNodeFavourDirection(${1:float x}, ${2:float y}, ${3:float z}, ${4:float desiredX}, ${5:float desiredY}, ${6:float desiredZ}, ${7:int nthClosest}, ${8:Vector3* outPosition}, ${9:float* outHeading}, ${10:int nodetype}, ${11:Any p10}, ${12:Any p11})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nSee gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water  \np10 always equal 0x40400000  \np11 always equal 0  \n"
	},
	"GetRandomVehicleNode()": {
	  "prefix": "GetRandomVehicleNode",
	  "body": [
		"GetRandomVehicleNode(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:Vector3* outPosition}, ${9:int* nodeId})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n"
	},
	"GetStreetNameAtCoord()": {
	  "prefix": "GetStreetNameAtCoord",
	  "body": [
		"GetStreetNameAtCoord(${1:float x}, ${2:float y}, ${3:float z}, ${4:Hash* streetName}, ${5:Hash* crossingRoad})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n\nDetermines the name of the street which is the closest to the given coordinates.  \nx,y,z - the coordinates of the street  \nstreetName - returns a hash to the name of the street the coords are on  \ncrossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road  \nNote: the names are returned as hashes, the strings can be returned using the function UI::GET_STREET_NAME_FROM_HASH_KEY.  \n"
	},
	"GetNthClosestVehicleNodeWithHeading()": {
	  "prefix": "GetNthClosestVehicleNodeWithHeading",
	  "body": [
		"GetNthClosestVehicleNodeWithHeading(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nthClosest}, ${5:Vector3* outPosition}, ${6:float* heading}, ${7:Any* unknown1}, ${8:int unknown2}, ${9:float unknown3}, ${10:float unknown4})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nGet the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, unknown4 = 2.5)  \n"
	},
	"GetVehicleNodePosition()": {
	  "prefix": "GetVehicleNodePosition",
	  "body": [
		"GetVehicleNodePosition(${1:int nodeId}, ${2:Vector3* outPosition})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n\nCalling this with an invalid node id, will crash the game.  \nNote that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.  \nEg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().  \nsfink: This native returns a pointer to a packed Vector3 struct in the RAX register, as do the following natives:  \nAI::WAYPOINT_RECORDING_GET_COORD  \nENTITY::GET_ENTITY_MATRIX  \nFIRE::GET_CLOSEST_FIRE_POS  \nGAMEPLAY::FIND_SPAWN_POINT_IN_DIRECTION  \nGAMEPLAY::GET_MODEL_DIMENSIONS  \nGAMEPLAY::OVERRIDE_SAVE_HOUSE  \nGAMEPLAY::_0x82FDE6A57EE4EE44  \nGAMEPLAY::_0x8BDC7BFC57A81E76  \nGAMEPLAY::_0x8D7A43EC6A5FEA45  \nGAMEPLAY::_0xA4A0065E39C9F25C  \nGAMEPLAY::_0xDFB4138EEFED7B81  \nMOBILE::GET_MOBILE_PHONE_POSITION  \nMOBILE::GET_MOBILE_PHONE_ROTATION  \nNETWORK::NETWORK_GET_RESPAWN_RESULT  \nOBJECT::_0x163F8B586BC95F2A  \nPATHFIND::GET_CLOSEST_MAJOR_VEHICLE_NODE  \nPATHFIND::GET_CLOSEST_ROAD  \nPATHFIND::GET_CLOSEST_VEHICLE_NODE  \nPATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING  \nPATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE  \nPATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION  \nPATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING  \nPATHFIND::GET_RANDOM_VEHICLE_NODE  \nPATHFIND::GET_SAFE_COORD_FOR_PED  \nPATHFIND::GET_VEHICLE_NODE_POSITION  \nPATHFIND::_0x16F46FB18C8009E4  \nVEHICLE::_0xA4822F1CF23F4810  \nVEHICLE::_0xDF7E3EEB29642C38  \nWATER::TEST_PROBE_AGAINST_ALL_WATER  \nWATER::TEST_PROBE_AGAINST_WATER  \nWEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD  \nWORLDPROBE::_0xFF6BE494C7987F34  \nWORLDPROBE::_GET_RAYCAST_RESULT  \n"
	},
	"IsNavmeshLoadedInArea()": {
	  "prefix": "IsNavmeshLoadedInArea",
	  "body": [
		"IsNavmeshLoadedInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nReturns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.  \nIf you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...  \n"
	},
	"GetSafeCoordForPed()": {
	  "prefix": "GetSafeCoordForPed",
	  "body": [
		"GetSafeCoordForPed(${1:float x}, ${2:float y}, ${3:float z}, ${4:BOOL onGround}, ${5:Vector3* outPosition}, ${6:int flags})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nWhen onGround == true outPosition is a position located on the nearest pavement.  \nWhen a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.  \nIn the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.   \n16 works for me, 0 crashed the script.  \n"
	},
	"N_0xa2ae5c478b96e3b6()": {
	  "prefix": "N_0xa2ae5c478b96e3b6",
	  "body": "N_0xa2ae5c478b96e3b6",
	  "description": "OLD NAME, PLEASE USE GetSupportsGpsRouteFlag INSTEAD!"
	},
	"GetSupportsGpsRouteFlag()": {
	  "prefix": "GetSupportsGpsRouteFlag",
	  "body": [
		"GetSupportsGpsRouteFlag(${1:int nodeID})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\np0 = VEHICLE_NODE_ID  \nReturns false for nodes that aren't used for GPS routes.  \nExample:  \nNodes in Fort Zancudo and LSIA are false  \n\nOld name: N_0xa2ae5c478b96e3b6"
	},
	"IsVehicleNodeIdValid()": {
	  "prefix": "IsVehicleNodeIdValid",
	  "body": [
		"IsVehicleNodeIdValid(${1:int vehicleNodeId})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nReturns true if the id is non zero.  \n"
	},
	"GetVehicleNodeProperties()": {
	  "prefix": "GetVehicleNodeProperties",
	  "body": [
		"GetVehicleNodeProperties(${1:float x}, ${2:float y}, ${3:float z}, ${4:int* density}, ${5:int* flags})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nMulleDK19: Gets the density and flags of the closest node to the specified position.  \nDensity is a value between 0 and 15, indicating how busy the road is.  \nFlags is a bit field.  \n"
	},
	"N_0x01708e8dd3ff8c65()": {
	  "prefix": "N_0x01708e8dd3ff8c65",
	  "body": [
		"N_0x01708e8dd3ff8c65(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"IsPointOnRoad()": {
	  "prefix": "IsPointOnRoad",
	  "body": [
		"IsPointOnRoad(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vehicle vehicle})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nGets a value indicating whether the specified position is on a road.  \nThe vehicle parameter is not implemented (ignored).  \n"
	},
	"N_0x07fb139b592fa687()": {
	  "prefix": "N_0x07fb139b592fa687",
	  "body": [
		"N_0x07fb139b592fa687(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n"
	},
	"LoadAllPathNodes()": {
	  "prefix": "LoadAllPathNodes",
	  "body": [
		"LoadAllPathNodes(${1:BOOL keepInMemory})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nLoads all path nodes.  \nIf keepInMemory is true, all path nodes will be loaded and be kept in memory; otherwise, all path nodes will be loaded, but unloaded as the game sees fit.  \n- MulleDK19.  \nAugust 29, 2017: This native has been removed in v1180.  \n"
	},
	"N_0x16f46fb18c8009e4()": {
	  "prefix": "N_0x16f46fb18c8009e4",
	  "body": [
		"N_0x16f46fb18c8009e4(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"N_0x0b919e1fb47cc4e0()": {
	  "prefix": "N_0x0b919e1fb47cc4e0",
	  "body": [
		"N_0x0b919e1fb47cc4e0(${1:float p0})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"N_0x228e5c6ad4d74bfd()": {
	  "prefix": "N_0x228e5c6ad4d74bfd",
	  "body": [
		"N_0x228e5c6ad4d74bfd(${1:BOOL p0})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n\nProbably the opposite of  0x80E4A6EDDB0BE8D9 / LOAD_ALL_PATH_NODES  \n"
	},
	"N_0x1fc289a0c3ff470f()": {
	  "prefix": "N_0x1fc289a0c3ff470f",
	  "body": [
		"N_0x1fc289a0c3ff470f(${1:BOOL p0})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"N_0x29c24bfbed8ab8fb()": {
	  "prefix": "N_0x29c24bfbed8ab8fb",
	  "body": [
		"N_0x29c24bfbed8ab8fb(${1:float p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: float\n"
	},
	"N_0x336511a34f2e5185()": {
	  "prefix": "N_0x336511a34f2e5185",
	  "body": [
		"N_0x336511a34f2e5185(${1:float left}, ${2:float right})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: float\n\ncalculates two distances  \n"
	},
	"N_0x3599d741c9ac6310()": {
	  "prefix": "N_0x3599d741c9ac6310",
	  "body": [
		"N_0x3599d741c9ac6310(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: float\n"
	},
	"N_0x705a844002b39dc0()": {
	  "prefix": "N_0x705a844002b39dc0",
	  "body": [
		"N_0x705a844002b39dc0()"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"N_0x8abe8608576d9ce3()": {
	  "prefix": "N_0x8abe8608576d9ce3",
	  "body": [
		"N_0x8abe8608576d9ce3(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: float\n"
	},
	"N_0x869daacbbe9fa006()": {
	  "prefix": "N_0x869daacbbe9fa006",
	  "body": [
		"N_0x869daacbbe9fa006()"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"N_0xaa76052dda9bfc3e()": {
	  "prefix": "N_0xaa76052dda9bfc3e",
	  "body": [
		"N_0xaa76052dda9bfc3e(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"N_0xbbb45c3cf5c8aa85()": {
	  "prefix": "N_0xbbb45c3cf5c8aa85",
	  "body": [
		"N_0xbbb45c3cf5c8aa85()"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"N_0xa0f8a7517a273c05()": {
	  "prefix": "N_0xa0f8a7517a273c05",
	  "body": [
		"N_0xa0f8a7517a273c05(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"N_0xf3162836c28f9da5()": {
	  "prefix": "N_0xf3162836c28f9da5",
	  "body": [
		"N_0xf3162836c28f9da5(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: Any\n"
	},
	"RemoveNavmeshBlockingObject()": {
	  "prefix": "RemoveNavmeshBlockingObject",
	  "body": [
		"RemoveNavmeshBlockingObject(${1:Any p0})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"N_0xf7b79a50b905a30d()": {
	  "prefix": "N_0xf7b79a50b905a30d",
	  "body": [
		"N_0xf7b79a50b905a30d(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: BOOL\n\nOnly did a quick disassembly, but this function seems to load all path nodes in the given area. Parameters appear to be start x, start y, end x, end y.  \n"
	},
	"SetGpsDisabledZone()": {
	  "prefix": "SetGpsDisabledZone",
	  "body": [
		"SetGpsDisabledZone(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"RemoveNavmeshRequiredRegions()": {
	  "prefix": "RemoveNavmeshRequiredRegions",
	  "body": [
		"RemoveNavmeshRequiredRegions()"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"SetIgnoreNoGpsFlag()": {
	  "prefix": "SetIgnoreNoGpsFlag",
	  "body": [
		"SetIgnoreNoGpsFlag(${1:BOOL ignore})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"N_0xd0bc1c6fb18ee154()": {
	  "prefix": "N_0xd0bc1c6fb18ee154",
	  "body": "N_0xd0bc1c6fb18ee154",
	  "description": "OLD NAME, PLEASE USE SetGpsDisabledZoneAtIndex INSTEAD!"
	},
	"SetGpsDisabledZoneAtIndex()": {
	  "prefix": "SetGpsDisabledZoneAtIndex",
	  "body": [
		"SetGpsDisabledZoneAtIndex(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int index})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\nDisables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.\n\nYou can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.\n\n**Setting a waypoint at the same coordinate:**\n\nDisabled Zone: <https://i.imgur.com/P9VUuxM.png>\n\nEnabled Zone (normal): <https://i.imgur.com/BPi24aw.png>\nOld name: N_0xd0bc1c6fb18ee154"
	},
	"SetPedPathsInArea()": {
	  "prefix": "SetPedPathsInArea",
	  "body": [
		"SetPedPathsInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL unknown})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"SetPedPathsBackToOriginal()": {
	  "prefix": "SetPedPathsBackToOriginal",
	  "body": [
		"SetPedPathsBackToOriginal(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"SetRoadsBackToOriginalInAngledArea()": {
	  "prefix": "SetRoadsBackToOriginalInAngledArea",
	  "body": [
		"SetRoadsBackToOriginalInAngledArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float p6})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n\nbool p7 - always 1  \n"
	},
	"SetRoadsBackToOriginal()": {
	  "prefix": "SetRoadsBackToOriginal",
	  "body": [
		"SetRoadsBackToOriginal(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n\nmissing a last parameter int p6  \n"
	},
	"SetRoadsInArea()": {
	  "prefix": "SetRoadsInArea",
	  "body": [
		"SetRoadsInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL unknown1}, ${8:BOOL unknown2})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n\n/* Corrected conflicting parameter names */  \n"
	},
	"UpdateNavmeshBlockingObject()": {
	  "prefix": "UpdateNavmeshBlockingObject",
	  "body": [
		"UpdateNavmeshBlockingObject(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n"
	},
	"SetRoadsInAngledArea()": {
	  "prefix": "SetRoadsInAngledArea",
	  "body": [
		"SetRoadsInAngledArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float angle}, ${8:BOOL unknown1}, ${9:BOOL unknown2}, ${10:BOOL unknown3})"
	  ],
	  "description": "Namespace: PATHFIND\nReturns: void\n\n/* Corrected conflicting parameter names */  \n"
	},
	"AddRelationshipGroup()": {
	  "prefix": "AddRelationshipGroup",
	  "body": [
		"AddRelationshipGroup(${1:char* name}, ${2:Hash* groupHash})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n\nCan't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.  \n"
	},
	"AddArmourToPed()": {
	  "prefix": "AddArmourToPed",
	  "body": [
		"AddArmourToPed(${1:Ped ped}, ${2:int amount})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSame as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.  \n"
	},
	"AddScenarioBlockingArea()": {
	  "prefix": "AddScenarioBlockingArea",
	  "body": [
		"AddScenarioBlockingArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"ApplyPedBlood()": {
	  "prefix": "ApplyPedBlood",
	  "body": [
		"ApplyPedBlood(${1:Ped ped}, ${2:int boneIndex}, ${3:float xRot}, ${4:float yRot}, ${5:float zRot}, ${6:char* woundType})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nFound one occurence in re_crashrescue.c4  \nPED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, \"wound_sheet\");  \n"
	},
	"N_0x816f6981c60bf53b()": {
	  "prefix": "N_0x816f6981c60bf53b",
	  "body": "N_0x816f6981c60bf53b",
	  "description": "OLD NAME, PLEASE USE ApplyPedBloodDamageByZone INSTEAD!"
	},
	"ApplyPedBloodDamageByZone()": {
	  "prefix": "ApplyPedBloodDamageByZone",
	  "body": [
		"ApplyPedBloodDamageByZone(${1:Ped ped}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0x816f6981c60bf53b"
	},
	"ApplyDamageToPed()": {
	  "prefix": "ApplyDamageToPed",
	  "body": [
		"ApplyDamageToPed(${1:Ped ped}, ${2:int damageAmount}, ${3:BOOL armorFirst})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\ndamages a ped with the given amount  \n----  \narmorFirst means it will damage/lower the armor first before damaging the player.  \nsetting damageAmount to a negative amount will cause the player or the armor (depending on armorFirst) to be healed by damageAmount instead.  \n"
	},
	"ApplyPedDamageDecal()": {
	  "prefix": "ApplyPedDamageDecal",
	  "body": [
		"ApplyPedDamageDecal(${1:Ped ped}, ${2:int p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:int p7}, ${9:BOOL p8}, ${10:char* p9})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nAPPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, \"blushing\");  \n"
	},
	"N_0x3311e47b91edcbbc()": {
	  "prefix": "N_0x3311e47b91edcbbc",
	  "body": "N_0x3311e47b91edcbbc",
	  "description": "OLD NAME, PLEASE USE ApplyPedBloodByZone INSTEAD!"
	},
	"ApplyPedBloodByZone()": {
	  "prefix": "ApplyPedBloodByZone",
	  "body": [
		"ApplyPedBloodByZone(${1:Ped ped}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0x3311e47b91edcbbc"
	},
	"ApplyPedDamagePack()": {
	  "prefix": "ApplyPedDamagePack",
	  "body": [
		"ApplyPedDamagePack(${1:Ped ped}, ${2:char* damagePack}, ${3:float damage}, ${4:float mult})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nDamage Packs:  \n\"SCR_TrevorTreeBang\"  \n\"HOSPITAL_0\"  \n\"HOSPITAL_1\"  \n\"HOSPITAL_2\"  \n\"HOSPITAL_3\"  \n\"HOSPITAL_4\"  \n\"HOSPITAL_5\"  \n\"HOSPITAL_6\"  \n\"HOSPITAL_7\"  \n\"HOSPITAL_8\"  \n\"HOSPITAL_9\"  \n\"SCR_Dumpster\"  \n\"BigHitByVehicle\"  \n\"SCR_Finale_Michael_Face\"  \n\"SCR_Franklin_finb\"  \n\"SCR_Finale_Michael\"  \n\"SCR_Franklin_finb2\"  \n\"Explosion_Med\"  \n\"SCR_Torture\"  \n\"SCR_TracySplash\"  \n\"Skin_Melee_0\"  \nAdditional damage packs:  \ngist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227  \n"
	},
	"CanCreateRandomBikeRider()": {
	  "prefix": "CanCreateRandomBikeRider",
	  "body": [
		"CanCreateRandomBikeRider()"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xef0d582cbf2d9b0f()": {
	  "prefix": "N_0xef0d582cbf2d9b0f",
	  "body": "N_0xef0d582cbf2d9b0f",
	  "description": "OLD NAME, PLEASE USE ApplyPedBloodSpecific INSTEAD!"
	},
	"ApplyPedBloodSpecific()": {
	  "prefix": "ApplyPedBloodSpecific",
	  "body": [
		"ApplyPedBloodSpecific(${1:Ped ped}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6}, ${8:float p7}, ${9:Any* p8})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0xef0d582cbf2d9b0f"
	},
	"CanCreateRandomDriver()": {
	  "prefix": "CanCreateRandomDriver",
	  "body": [
		"CanCreateRandomDriver()"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"CanKnockPedOffVehicle()": {
	  "prefix": "CanKnockPedOffVehicle",
	  "body": [
		"CanKnockPedOffVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"AttachSynchronizedSceneToEntity()": {
	  "prefix": "AttachSynchronizedSceneToEntity",
	  "body": [
		"AttachSynchronizedSceneToEntity(${1:int sceneID}, ${2:Entity entity}, ${3:int boneIndex})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"CanCreateRandomCops()": {
	  "prefix": "CanCreateRandomCops",
	  "body": [
		"CanCreateRandomCops()"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"CanPedRagdoll()": {
	  "prefix": "CanPedRagdoll",
	  "body": [
		"CanPedRagdoll(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nPrevents the ped from going limp.  \n[Example: Can prevent peds from falling when standing on moving vehicles.]  \n"
	},
	"CanCreateRandomPed()": {
	  "prefix": "CanCreateRandomPed",
	  "body": [
		"CanCreateRandomPed(${1:BOOL unk})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x6cd5a433374d4cfb()": {
	  "prefix": "N_0x6cd5a433374d4cfb",
	  "body": "N_0x6cd5a433374d4cfb",
	  "description": "OLD NAME, PLEASE USE CanPedSeePed INSTEAD!"
	},
	"CanPedSeePed()": {
	  "prefix": "CanPedSeePed",
	  "body": [
		"CanPedSeePed(${1:Ped ped1}, ${2:Ped ped2})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns true if ped1 can see ped2 in their line of vision  \n\nOld name: N_0x6cd5a433374d4cfb"
	},
	"CanPedInCombatSeeTarget()": {
	  "prefix": "CanPedInCombatSeeTarget",
	  "body": [
		"CanPedInCombatSeeTarget(${1:Ped ped}, ${2:Ped target})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"ClearFacialIdleAnimOverride()": {
	  "prefix": "ClearFacialIdleAnimOverride",
	  "body": [
		"ClearFacialIdleAnimOverride(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ClearAllPedProps()": {
	  "prefix": "ClearAllPedProps",
	  "body": [
		"ClearAllPedProps(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"ClearPedBloodDamage()": {
	  "prefix": "ClearPedBloodDamage",
	  "body": [
		"ClearPedBloodDamage(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x56e3b78c5408d9f4()": {
	  "prefix": "N_0x56e3b78c5408d9f4",
	  "body": "N_0x56e3b78c5408d9f4",
	  "description": "OLD NAME, PLEASE USE ClearPedBloodDamageByZone INSTEAD!"
	},
	"ClearPedBloodDamageByZone()": {
	  "prefix": "ClearPedBloodDamageByZone",
	  "body": [
		"ClearPedBloodDamageByZone(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSomehow related to changing ped's clothes.  \n\nOld name: N_0x56e3b78c5408d9f4"
	},
	"ClearPedAlternateMovementAnim()": {
	  "prefix": "ClearPedAlternateMovementAnim",
	  "body": [
		"ClearPedAlternateMovementAnim(${1:Ped ped}, ${2:int stance}, ${3:float p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ClearPedDecorations()": {
	  "prefix": "ClearPedDecorations",
	  "body": [
		"ClearPedDecorations(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ClearPedAlternateWalkAnim()": {
	  "prefix": "ClearPedAlternateWalkAnim",
	  "body": [
		"ClearPedAlternateWalkAnim(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xe3b27e70ceab9f0c()": {
	  "prefix": "N_0xe3b27e70ceab9f0c",
	  "body": "N_0xe3b27e70ceab9f0c",
	  "description": "OLD NAME, PLEASE USE ClearPedFacialDecorations INSTEAD!"
	},
	"ClearPedFacialDecorations()": {
	  "prefix": "ClearPedFacialDecorations",
	  "body": [
		"ClearPedFacialDecorations(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0xe3b27e70ceab9f0c"
	},
	"ClearPedLastDamageBone()": {
	  "prefix": "ClearPedLastDamageBone",
	  "body": [
		"ClearPedLastDamageBone(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x523c79aeefcc4a2a()": {
	  "prefix": "N_0x523c79aeefcc4a2a",
	  "body": "N_0x523c79aeefcc4a2a",
	  "description": "OLD NAME, PLEASE USE ClearPedDamageDecalByZone INSTEAD!"
	},
	"ClearPedDamageDecalByZone()": {
	  "prefix": "ClearPedDamageDecalByZone",
	  "body": [
		"ClearPedDamageDecalByZone(${1:Ped ped}, ${2:int p1}, ${3:char* p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np1: from 0 to 5 in the b617d scripts.  \np2: \"blushing\" and \"ALL\" found in the b617d scripts.  \n\nOld name: N_0x523c79aeefcc4a2a"
	},
	"ClearPedDriveByClipsetOverride()": {
	  "prefix": "ClearPedDriveByClipsetOverride",
	  "body": [
		"ClearPedDriveByClipsetOverride(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ClearPedProp()": {
	  "prefix": "ClearPedProp",
	  "body": [
		"ClearPedProp(${1:Ped ped}, ${2:int propId})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"ClearPedNonCreationArea()": {
	  "prefix": "ClearPedNonCreationArea",
	  "body": [
		"ClearPedNonCreationArea()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xb50eb4ccb29704ac()": {
	  "prefix": "N_0xb50eb4ccb29704ac",
	  "body": "N_0xb50eb4ccb29704ac",
	  "description": "OLD NAME, PLEASE USE ClearPedScubaGearVariation INSTEAD!"
	},
	"RemovePedScubaGearNow()": {
	  "prefix": "RemovePedScubaGearNow",
	  "body": "RemovePedScubaGearNow",
	  "description": "OLD NAME, PLEASE USE ClearPedScubaGearVariation INSTEAD!"
	},
	"ClearPedScubaGearVariation()": {
	  "prefix": "ClearPedScubaGearVariation",
	  "body": [
		"ClearPedScubaGearVariation(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nRemoves the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.\nOld name: N_0xb50eb4ccb29704ac\nOld name: RemovePedScubaGearNow"
	},
	"ClonePed()": {
	  "prefix": "ClonePed",
	  "body": [
		"ClonePed(${1:Ped ped}, ${2:float heading}, ${3:BOOL isNetwork}, ${4:BOOL thisScriptCheck})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n\nthisScriptCheck - can be destroyed if it belongs to the calling script.  \nExample of Cloning Your Player:  \nCLONE_PED(PLAYER_PED_ID(), GET_ENTITY_HEADING(PLAYER_PED_ID()), 0, 1);  \n"
	},
	"ClearPedWetness()": {
	  "prefix": "ClearPedWetness",
	  "body": [
		"ClearPedWetness(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nIt clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.  \n"
	},
	"N_0x668fd40bcba5de48()": {
	  "prefix": "N_0x668fd40bcba5de48",
	  "body": "N_0x668fd40bcba5de48",
	  "description": "OLD NAME, PLEASE USE ClonePed_2 INSTEAD!"
	},
	"ClonePed_2()": {
	  "prefix": "ClonePed_2",
	  "body": [
		"ClonePed_2(${1:Ped ped}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\nUsed one time in fmmc_launcher.c instead of ClonePed because ?\nOld name: N_0x668fd40bcba5de48"
	},
	"ClearRelationshipBetweenGroups()": {
	  "prefix": "ClearRelationshipBetweenGroups",
	  "body": [
		"ClearRelationshipBetweenGroups(${1:int relationship}, ${2:Hash group1}, ${3:Hash group2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nClears the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \n(Credits: Inco)  \nExample:  \nPED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);  \nPED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);  \n"
	},
	"CreateNmMessage()": {
	  "prefix": "CreateNmMessage",
	  "body": [
		"CreateNmMessage(${1:BOOL startImmediately}, ${2:int messageId})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nCreates a new NaturalMotion message.  \nstartImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.  \nmessageId: The ID of the NaturalMotion message.  \nIf a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.  \n"
	},
	"AssignPlayerToPed()": {
	  "prefix": "AssignPlayerToPed",
	  "body": "AssignPlayerToPed",
	  "description": "OLD NAME, PLEASE USE ClonePedToTarget INSTEAD!"
	},
	"ClonePedToTarget()": {
	  "prefix": "ClonePedToTarget",
	  "body": [
		"ClonePedToTarget(${1:Ped ped}, ${2:Ped targetPed})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nWhat exactly is the difference? What does this exactly do by chance?  \n^ Copies ped's components and props to targetPed.  \n---------------------------------------------------------------------------------  \n| Internally has a 3rd param (bool) which is set to true by default |  \n\nOld name: AssignPlayerToPed"
	},
	"CreatePedInsideVehicle()": {
	  "prefix": "CreatePedInsideVehicle",
	  "body": [
		"CreatePedInsideVehicle(${1:Vehicle vehicle}, ${2:int pedType}, ${3:Hash modelHash}, ${4:int seat}, ${5:BOOL isNetwork}, ${6:BOOL thisScriptCheck})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n\nthisScriptCheck - can be destroyed if it belongs to the calling script.  \np5 - last parameter does not mean ped handle is returned  \nmaybe a quick view in disassembly will tell us what is actually does  \nPed Types:  \nenum ePedType  \n{  \n\tPED_TYPE_PLAYER_0 = 0,  \n\tPED_TYPE_PLAYER_1 = 1,  \n\tPED_TYPE_PLAYER_2 = 3,  \n\tPED_TYPE_CIVMALE = 4,  \n\tPED_TYPE_CIVFEMALE = 5,  \n\tPED_TYPE_COP = 6,  \n\tPED_TYPE_UNKNOWN_7 = 7,  \n\tPED_TYPE_UNKNOWN_12 = 12, // gang member?  \n\tPED_TYPE_UNKNOWN_19 = 19,  \n\tPED_TYPE_MEDIC = 20,  \n\tPED_TYPE_FIREMAN = 21,  \n\tPED_TYPE_UNKNOWN_22 = 22,  \n\tPED_TYPE_UNKNOWN_25 = 25,  \n\tPED_TYPE_UNKNOWN_26 = 26,  \n\tPED_TYPE_SWAT = 27,  \n\tPED_TYPE_ANIMAL = 28,  \n\tPED_TYPE_ARMY = 29  \n};  \n"
	},
	"CreateGroup()": {
	  "prefix": "CreateGroup",
	  "body": [
		"CreateGroup(${1:int unused})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nCreates a new ped group.  \nGroups can contain up to 8 peds.  \nThe parameter is unused.  \nReturns a handle to the created group, or 0 if a group couldn't be created.  \n"
	},
	"CreateRandomPed()": {
	  "prefix": "CreateRandomPed",
	  "body": [
		"CreateRandomPed(${1:float posX}, ${2:float posY}, ${3:float posZ})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n\nvb.net  \nDim ped_handle As Integer  \n                    With Game.Player.Character  \n                        Dim pos As Vector3 = .Position + .ForwardVector * 3  \n                        ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)  \n                    End With  \nCreates a Ped at the specified location, returns the Ped Handle.    \nPed will not act until SET_PED_AS_NO_LONGER_NEEDED is called.  \n"
	},
	"CreatePed()": {
	  "prefix": "CreatePed",
	  "body": [
		"CreatePed(${1:int pedType}, ${2:Hash modelHash}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float heading}, ${7:BOOL isNetwork}, ${8:BOOL thisScriptCheck})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n\nthisScriptCheck - can be destroyed if it belongs to the calling script.  \np7 - last parameter does not mean ped handle is returned  \nmaybe a quick view in disassembly will tell us what is actually does  \n*Heading*: 0.0  \n*Heading* is the Z axis spawn rotation of the ped 0->5th parameter.  \nPed Types:  \nenum PedTypes  \n{  \n\tPED_TYPE_PLAYER_0,// michael  \n\tPED_TYPE_PLAYER_1,// franklin  \n\tPED_TYPE_NETWORK_PLAYER,\t// mp character  \n\tPED_TYPE_PLAYER_2,// trevor  \n\tPED_TYPE_CIVMALE,  \n\tPED_TYPE_CIVFEMALE,  \n\tPED_TYPE_COP,  \n\tPED_TYPE_GANG_ALBANIAN,  \n\tPED_TYPE_GANG_BIKER_1,  \n\tPED_TYPE_GANG_BIKER_2,  \n\tPED_TYPE_GANG_ITALIAN,  \n\tPED_TYPE_GANG_RUSSIAN,  \n\tPED_TYPE_GANG_RUSSIAN_2,  \n\tPED_TYPE_GANG_IRISH,  \n\tPED_TYPE_GANG_JAMAICAN,  \n\tPED_TYPE_GANG_AFRICAN_AMERICAN,  \n\tPED_TYPE_GANG_KOREAN,  \n\tPED_TYPE_GANG_CHINESE_JAPANESE,  \n\tPED_TYPE_GANG_PUERTO_RICAN,  \n\tPED_TYPE_DEALER,  \n\tPED_TYPE_MEDIC,  \n\tPED_TYPE_FIREMAN,  \n\tPED_TYPE_CRIMINAL,  \n\tPED_TYPE_BUM,  \n\tPED_TYPE_PROSTITUTE,  \n\tPED_TYPE_SPECIAL,  \n\tPED_TYPE_MISSION,  \n\tPED_TYPE_SWAT,  \n\tPED_TYPE_ANIMAL,  \n\tPED_TYPE_ARMY  \n};  \n"
	},
	"CreateSynchronizedScene()": {
	  "prefix": "CreateSynchronizedScene",
	  "body": [
		"CreateSynchronizedScene(${1:float x}, ${2:float y}, ${3:float z}, ${4:float roll}, ${5:float pitch}, ${6:float yaw}, ${7:int p6})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\np6 always 2 (but it doesnt seem to matter...)  \nroll and pitch 0  \nyaw to Ped.rotation  \n"
	},
	"CreateRandomPedAsDriver()": {
	  "prefix": "CreateRandomPedAsDriver",
	  "body": [
		"CreateRandomPedAsDriver(${1:Vehicle vehicle}, ${2:BOOL returnHandle})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n"
	},
	"DeletePed()": {
	  "prefix": "DeletePed",
	  "body": [
		"DeletePed(${1:Ped* ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nDeletes the specified ped, then sets the handle pointed to by the pointer to NULL.  \n"
	},
	"N_0x62ec273d00187dca()": {
	  "prefix": "N_0x62ec273d00187dca",
	  "body": "N_0x62ec273d00187dca",
	  "description": "OLD NAME, PLEASE USE CreateSynchronizedScene_2 INSTEAD!"
	},
	"CreateSynchronizedScene_2()": {
	  "prefix": "CreateSynchronizedScene_2",
	  "body": [
		"CreateSynchronizedScene_2(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash object})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nOld name: N_0x62ec273d00187dca"
	},
	"DetachSynchronizedScene()": {
	  "prefix": "DetachSynchronizedScene",
	  "body": [
		"DetachSynchronizedScene(${1:int sceneID})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xa21c118553bbdf02()": {
	  "prefix": "N_0xa21c118553bbdf02",
	  "body": "N_0xa21c118553bbdf02",
	  "description": "OLD NAME, PLEASE USE DisableHeadBlendPaletteColor INSTEAD!"
	},
	"DisableHeadBlendPaletteColor()": {
	  "prefix": "DisableHeadBlendPaletteColor",
	  "body": [
		"DisableHeadBlendPaletteColor(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0xa21c118553bbdf02"
	},
	"DoesGroupExist()": {
	  "prefix": "DoesGroupExist",
	  "body": [
		"DoesGroupExist(${1:int groupId})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xcd9cc7e200a52a6f()": {
	  "prefix": "N_0xcd9cc7e200a52a6f",
	  "body": "N_0xcd9cc7e200a52a6f",
	  "description": "OLD NAME, PLEASE USE DisposeSynchronizedScene INSTEAD!"
	},
	"DisposeSynchronizedScene()": {
	  "prefix": "DisposeSynchronizedScene",
	  "body": [
		"DisposeSynchronizedScene(${1:int scene})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0xcd9cc7e200a52a6f"
	},
	"ExplodePedHead()": {
	  "prefix": "ExplodePedHead",
	  "body": [
		"ExplodePedHead(${1:Ped ped}, ${2:Hash weaponHash})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nForces the ped to fall back and kills it.  \nIt doesn't really explode the ped's head but it kills the ped  \n"
	},
	"ForcePedMotionState()": {
	  "prefix": "ForcePedMotionState",
	  "body": [
		"ForcePedMotionState(${1:Ped ped}, ${2:Hash motionStateHash}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nSome motionstate hashes are  \n0xec17e58 (standing idle), 0xbac0f10b (nothing?), 0x3f67c6af (aiming with pistol 2-h), 0x422d7a25 (stealth), 0xbd8817db, 0x916e828c  \nand those for the strings  \n\"motionstate_idle\", \"motionstate_walk\", \"motionstate_run\", \"motionstate_actionmode_idle\", and \"motionstate_actionmode_walk\".  \nRegarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in the scripts. p4 is very rarely something other than 0.  \n [31/03/2017] ins1de :  \n        enum MotionState  \n        {  \n            StopRunning = -530524,  \n            StopWalking = -668482597,  \n            Idle = 247561816, // 1, 1, 0  \n            Idl2 = -1871534317,  \n            SkyDive =-1161760501, // 0, 1, 0  \n            Stealth = 1110276645,  \n            Sprint = -1115154469,  \n            Swim = -1855028596,  \n            Unknown1 = 1063765679,  \n            Unknown2 = -633298724,  \n        }  \n"
	},
	"ForcePedToOpenParachute()": {
	  "prefix": "ForcePedToOpenParachute",
	  "body": [
		"ForcePedToOpenParachute(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xff287323b0e2c69a()": {
	  "prefix": "N_0xff287323b0e2c69a",
	  "body": "N_0xff287323b0e2c69a",
	  "description": "OLD NAME, PLEASE USE FreezePedCameraRotation INSTEAD!"
	},
	"FreezePedCameraRotation()": {
	  "prefix": "FreezePedCameraRotation",
	  "body": [
		"FreezePedCameraRotation(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0xff287323b0e2c69a"
	},
	"GetAnimInitialOffsetPosition()": {
	  "prefix": "GetAnimInitialOffsetPosition",
	  "body": [
		"GetAnimInitialOffsetPosition(${1:char* animDict}, ${2:char* animName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float p8}, ${10:int p9})"
	  ],
	  "description": "Namespace: PED\nReturns: Vector3\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"GetAnimInitialOffsetRotation()": {
	  "prefix": "GetAnimInitialOffsetRotation",
	  "body": [
		"GetAnimInitialOffsetRotation(${1:char* animDict}, ${2:char* animName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float p8}, ${10:int p9})"
	  ],
	  "description": "Namespace: PED\nReturns: Vector3\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"GetCombatFloat()": {
	  "prefix": "GetCombatFloat",
	  "body": [
		"GetCombatFloat(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: PED\nReturns: float\n\np0: Ped Handle  \np1: int i | 0 <= i <= 27  \np1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:  \n<BlindFireChance value=\"0.1\"/>  \n<WeaponShootRateModifier value=\"1.0\"/>  \n<TimeBetweenBurstsInCover value=\"1.25\"/>  \n<BurstDurationInCover value=\"2.0\"/>  \n<TimeBetweenPeeks value=\"10.0\"/>  \n<WeaponAccuracy value=\"0.18\"/>  \n<FightProficiency value=\"0.8\"/>  \n<StrafeWhenMovingChance value=\"1.0\"/>  \n<WalkWhenStrafingChance value=\"0.0\"/>  \n<AttackWindowDistanceForCover value=\"55.0\"/>  \n<TimeToInvalidateInjuredTarget value=\"9.0\"/>  \n<TriggerChargeTime_Near value=\"4.0\"/>  \n<TriggerChargeTime_Far value=\"10.0\"/>  \n-------------Confirmed by editing combatbehavior.meta:  \np1:  \n0=BlindFireChance  \n1=BurstDurationInCover  \n3=TimeBetweenBurstsInCover  \n4=TimeBetweenPeeks  \n5=StrafeWhenMovingChance  \n8=WalkWhenStrafingChance  \n11=AttackWindowDistanceForCover  \n12=TimeToInvalidateInjuredTarget  \n16=OptimalCoverDistance  \n"
	},
	"GetClosestPed()": {
	  "prefix": "GetClosestPed",
	  "body": [
		"GetClosestPed(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:Ped* outPed}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:int pedType})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nGets the closest ped in a radius.  \nPed Types:  \nAny ped = -1  \nPlayer = 1  \nMale = 4   \nFemale = 5   \nCop = 6  \nHuman = 26  \nSWAT = 27   \nAnimal = 28  \nArmy = 29  \n------------------  \nP4 P5 P7 P8  \n1  0  x  x  = return nearest walking Ped  \n1  x  0  x  = return nearest walking Ped  \nx  1  1  x  = return Ped you are using  \n0  0  x  x  = no effect  \n0  x  0  x  = no effect  \nx = can be 1 or 0. Does not have any obvious changes.  \nThis function does not return ped who is:  \n1. Standing still  \n2. Driving  \n3. Fleeing  \n4. Attacking  \nThis function only work if the ped is:  \n1. walking normally.  \n2. waiting to cross a road.  \nNote: PED::GET_PED_NEARBY_PEDS works for more peds.  \n"
	},
	"GetFirstParentIdForPedType()": {
	  "prefix": "GetFirstParentIdForPedType",
	  "body": [
		"GetFirstParentIdForPedType(${1:int type})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nType equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.  \nUsed when calling SET_PED_HEAD_BLEND_DATA.  \n"
	},
	"GetDeadPedPickupCoords()": {
	  "prefix": "GetDeadPedPickupCoords",
	  "body": [
		"GetDeadPedPickupCoords(${1:Ped ped}, ${2:float p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: PED\nReturns: Vector3\n"
	},
	"N_0x4852fc386e2e1bb5()": {
	  "prefix": "N_0x4852fc386e2e1bb5",
	  "body": "N_0x4852fc386e2e1bb5",
	  "description": "OLD NAME, PLEASE USE GetHairRgbColor INSTEAD!"
	},
	"GetHairRgbColor()": {
	  "prefix": "GetHairRgbColor",
	  "body": [
		"GetHairRgbColor(${1:int hairColorIndex}, ${2:int* outR}, ${3:int* outG}, ${4:int* outB})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nInput: Haircolor index, value between 0 and 63 (inclusive).\nOutput: RGB values for the haircolor specified in the input.\n\nThis is used with the hair color swatches scaleform.\n\nUse [`_0x013E5CFC38CD5387`](#_0x013E5CFC38CD5387) to get the makeup colors.\nOld name: N_0x4852fc386e2e1bb5"
	},
	"GetGroupSize()": {
	  "prefix": "GetGroupSize",
	  "body": [
		"GetGroupSize(${1:int groupID}, ${2:Any* unknown}, ${3:int* sizeInMembers})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np1 may be a BOOL representing whether or not the group even exists  \n"
	},
	"N_0x013e5cfc38cd5387()": {
	  "prefix": "N_0x013e5cfc38cd5387",
	  "body": "N_0x013e5cfc38cd5387",
	  "description": "OLD NAME, PLEASE USE GetMakeupRgbColor INSTEAD!"
	},
	"GetMakeupRgbColor()": {
	  "prefix": "GetMakeupRgbColor",
	  "body": [
		"GetMakeupRgbColor(${1:int makeupColorIndex}, ${2:int* outR}, ${3:int* outG}, ${4:int* outB})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nInput: Makeup color index, value between 0 and 63 (inclusive).\nOutput: RGB values for the makeup color specified in the input.\n\nThis is used with the makeup color swatches scaleform.\n\nUse [`_0x4852FC386E2E1BB5`](#_0x4852FC386E2E1BB5) to get the hair colors.\nOld name: N_0x013e5cfc38cd5387"
	},
	"GetJackTarget()": {
	  "prefix": "GetJackTarget",
	  "body": [
		"GetJackTarget(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n"
	},
	"GetMount()": {
	  "prefix": "GetMount",
	  "body": [
		"GetMount(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n\nFunction just returns 0  \nvoid __fastcall ped__get_mount(NativeContext *a1)  \n{  \n  NativeContext *v1; // rbx@1  \n  v1 = a1;  \n  GetAddressOfPedFromScriptHandle(a1->Args->Arg1);  \n  v1->Returns->Item1= 0;  \n}  \n"
	},
	"GetMeleeTargetForPed()": {
	  "prefix": "GetMeleeTargetForPed",
	  "body": [
		"GetMeleeTargetForPed(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n"
	},
	"GetNumHeadOverlayValues()": {
	  "prefix": "GetNumHeadOverlayValues",
	  "body": [
		"GetNumHeadOverlayValues(${1:int overlayID})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nUsed with freemode (online) characters.  \n"
	},
	"GetNumParentPedsOfType()": {
	  "prefix": "GetNumParentPedsOfType",
	  "body": [
		"GetNumParentPedsOfType(${1:int type})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nType equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.  \n"
	},
	"GetNumHairColors()": {
	  "prefix": "GetNumHairColors",
	  "body": [
		"GetNumHairColors()"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nUsed for freemode (online) characters.  \n"
	},
	"GetNumberOfPedDrawableVariations()": {
	  "prefix": "GetNumberOfPedDrawableVariations",
	  "body": [
		"GetNumberOfPedDrawableVariations(${1:Ped ped}, ${2:int componentId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"N_0xd1f7ca1535d22818()": {
	  "prefix": "N_0xd1f7ca1535d22818",
	  "body": "N_0xd1f7ca1535d22818",
	  "description": "OLD NAME, PLEASE USE GetNumMakeupColors INSTEAD!"
	},
	"GetNumMakeupColors()": {
	  "prefix": "GetNumMakeupColors",
	  "body": [
		"GetNumMakeupColors()"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nOld name: N_0xd1f7ca1535d22818"
	},
	"GetNumberOfPedPropDrawableVariations()": {
	  "prefix": "GetNumberOfPedPropDrawableVariations",
	  "body": [
		"GetNumberOfPedPropDrawableVariations(${1:Ped ped}, ${2:int propId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"GetNumberOfPedTextureVariations()": {
	  "prefix": "GetNumberOfPedTextureVariations",
	  "body": [
		"GetNumberOfPedTextureVariations(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"GetPedAlertness()": {
	  "prefix": "GetPedAlertness",
	  "body": [
		"GetPedAlertness(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nReturns the ped's alertness (0-3).  \nValues :   \n0 : Neutral  \n1 : Heard something (gun shot, hit, etc)  \n2 : Knows (the origin of the event)  \n3 : Fully alerted (is facing the event?)  \nIf the Ped does not exist, returns -1.  \n"
	},
	"GetNumberOfPedPropTextureVariations()": {
	  "prefix": "GetNumberOfPedPropTextureVariations",
	  "body": [
		"GetNumberOfPedPropTextureVariations(${1:Ped ped}, ${2:int propId}, ${3:int drawableId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nNeed to check behavior when drawableId = -1  \n- Doofy.Ass  \nWhy this function doesn't work and return nill value?  \nGET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)  \ntick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)  \nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"GetPedAccuracy()": {
	  "prefix": "GetPedAccuracy",
	  "body": [
		"GetPedAccuracy(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"GetPedAsGroupMember()": {
	  "prefix": "GetPedAsGroupMember",
	  "body": [
		"GetPedAsGroupMember(${1:int groupID}, ${2:int memberNumber})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n\nfrom fm_mission_controller.c4 (variable names changed for clarity):  \nint groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());  \nPED::GET_GROUP_SIZE(group, &unused, &groupSize);  \nif (groupSize >= 1) {  \n. . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {  \n. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);  \n. . . . . . . . //and so on  \n"
	},
	"GetPedBoneIndex()": {
	  "prefix": "GetPedBoneIndex",
	  "body": [
		"GetPedBoneIndex(${1:Ped ped}, ${2:int boneId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nBone ID enum: pastebin.com/3pz17QGd  \n"
	},
	"GetPedAsGroupLeader()": {
	  "prefix": "GetPedAsGroupLeader",
	  "body": [
		"GetPedAsGroupLeader(${1:int groupID})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n"
	},
	"GetPedCombatMovement()": {
	  "prefix": "GetPedCombatMovement",
	  "body": [
		"GetPedCombatMovement(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"GetPedBoneCoords()": {
	  "prefix": "GetPedBoneCoords",
	  "body": [
		"GetPedBoneCoords(${1:Ped ped}, ${2:int boneId}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ})"
	  ],
	  "description": "Namespace: PED\nReturns: Vector3\n\nGets the position of the specified bone of the specified ped.  \nped: The ped to get the position of a bone from.  \nboneId: The ID of the bone to get the position from. This is NOT the index.  \noffsetX: The X-component of the offset to add to the position relative to the bone's rotation.  \noffsetY: The Y-component of the offset to add to the position relative to the bone's rotation.  \noffsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.  \n"
	},
	"GetPedConfigFlag()": {
	  "prefix": "GetPedConfigFlag",
	  "body": [
		"GetPedConfigFlag(${1:Ped ped}, ${2:int flagId}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\np2 is always 1 in the scripts.  \nif (GET_PED_CONFIG_FLAG(ped, 78, 1))  \n= returns true if ped is aiming/shooting a gun  \n"
	},
	"GetPedDefensiveAreaPosition()": {
	  "prefix": "GetPedDefensiveAreaPosition",
	  "body": [
		"GetPedDefensiveAreaPosition(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: Vector3\n"
	},
	"GetPedCombatRange()": {
	  "prefix": "GetPedCombatRange",
	  "body": [
		"GetPedCombatRange(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"GetPedDrawableVariation()": {
	  "prefix": "GetPedDrawableVariation",
	  "body": [
		"GetPedDrawableVariation(${1:Ped ped}, ${2:int componentId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nIds  \n1   \n2   \n3   \n4   \n5   \n6   \n7 - ------  \n8 - Accessories 1  \n9 - Accessories 2  \n10  \n11 - Auxiliary parts for torso  \n"
	},
	"GetPedExtractedDisplacement()": {
	  "prefix": "GetPedExtractedDisplacement",
	  "body": [
		"GetPedExtractedDisplacement(${1:Ped ped}, ${2:BOOL worldSpace})"
	  ],
	  "description": "Namespace: PED\nReturns: Vector3\n\nGets the offset the specified ped has moved since the previous tick.  \nIf worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.  \nIf worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.  \n"
	},
	"N_0x71eab450d86954a1()": {
	  "prefix": "N_0x71eab450d86954a1",
	  "body": "N_0x71eab450d86954a1",
	  "description": "OLD NAME, PLEASE USE GetPedDecorationsState INSTEAD!"
	},
	"GetPedDecorationsState()": {
	  "prefix": "GetPedDecorationsState",
	  "body": [
		"GetPedDecorationsState(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n\nOld name: N_0x71eab450d86954a1"
	},
	"GetPedEnveffScale()": {
	  "prefix": "GetPedEnveffScale",
	  "body": [
		"GetPedEnveffScale(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: float\n"
	},
	"GetPedHeadBlendData()": {
	  "prefix": "GetPedHeadBlendData",
	  "body": [
		"GetPedHeadBlendData(${1:Ped ped}, ${2:Any* headBlendData})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nThe pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.  \n(Edit) Console Hash: 0x44E1680C  \npass this struct in the second parameter   \ntypedef struct  \n{  \n        int shapeFirst, shapeSecond, shapeThird;   \n        int skinFirst, skinSecond, skinThird;   \n\tfloat shapeMix, skinMix, thirdMix;  \n} headBlendData;  \n"
	},
	"GetPedHeadOverlayValue()": {
	  "prefix": "GetPedHeadOverlayValue",
	  "body": [
		"GetPedHeadOverlayValue(${1:Ped ped}, ${2:int overlayID})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nLikely a char, if that overlay is not set, e.i. \"None\" option, returns 255;  \n"
	},
	"N_0x1461b28a06717d68()": {
	  "prefix": "N_0x1461b28a06717d68",
	  "body": "N_0x1461b28a06717d68",
	  "description": "OLD NAME, PLEASE USE GetPedIlluminatedClothingGlowIntensity INSTEAD!"
	},
	"GetPedIlluminatedClothingGlowIntensity()": {
	  "prefix": "GetPedIlluminatedClothingGlowIntensity",
	  "body": [
		"GetPedIlluminatedClothingGlowIntensity(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: float\nUse [`SetPedIlluminatedClothingGlowIntensity`](#_0x4E90D746056E273D) to set the illuminated clothing glow intensity for a specific ped.\nOld name: N_0x1461b28a06717d68"
	},
	"GetPedFloodInvincibility()": {
	  "prefix": "GetPedFloodInvincibility",
	  "body": [
		"GetPedFloodInvincibility(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nhash collision???  \n"
	},
	"GetPedMoney()": {
	  "prefix": "GetPedMoney",
	  "body": [
		"GetPedMoney(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"GetPedGroupIndex()": {
	  "prefix": "GetPedGroupIndex",
	  "body": [
		"GetPedGroupIndex(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nReturns the group id of which the specified ped is a member of.  \n"
	},
	"GetPedNearbyPeds()": {
	  "prefix": "GetPedNearbyPeds",
	  "body": [
		"GetPedNearbyPeds(${1:Ped ped}, ${2:int* sizeAndPeds}, ${3:int ignore})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nsizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.  \nignore - ped type to ignore  \nReturn value is the number of peds found and added to the array passed.  \n-----------------------------------  \nTo make this work in most menu bases at least in C++ do it like so,  \n Formatted Example: pastebin.com/D8an9wwp  \n-----------------------------------  \nExample: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687  \nHere's the right way to do it (console and pc):  \npastebin.com/SsFej963  \n"
	},
	"GetPedLastDamageBone()": {
	  "prefix": "GetPedLastDamageBone",
	  "body": [
		"GetPedLastDamageBone(${1:Ped ped}, ${2:int* outBone})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nPretty sure outBone is an int.  \n"
	},
	"GetPedPaletteVariation()": {
	  "prefix": "GetPedPaletteVariation",
	  "body": [
		"GetPedPaletteVariation(${1:Ped ped}, ${2:int componentId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"GetPedParachuteState()": {
	  "prefix": "GetPedParachuteState",
	  "body": [
		"GetPedParachuteState(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nReturns:  \n-1: Normal  \n0: Wearing parachute on back  \n1: Parachute opening  \n2: Parachute open  \n3: Falling to doom (e.g. after exiting parachute)  \nNormal means no parachute?  \n"
	},
	"GetPedNearbyVehicles()": {
	  "prefix": "GetPedNearbyVehicles",
	  "body": [
		"GetPedNearbyVehicles(${1:Ped ped}, ${2:int* sizeAndVehs})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nReturns size of array, passed into the second variable.  \nSee below for usage information.  \nThis function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.  \n//Setup the array  \n\tconst int numElements = 10;  \n\tconst int arrSize = numElements * 2 + 2;  \n\tAny veh[arrSize];  \n\t//0 index is the size of the array  \n\tveh[0] = numElements;  \n\tint count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);  \n\tif (veh != NULL)  \n\t{  \n//Simple loop to go through results  \nfor (int i = 0; i < count; i++)  \n{  \n\tint offsettedID = i * 2 + 2;  \n\t//Make sure it exists  \n\tif (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))  \n\t{  \n//Do something  \n\t}  \n}  \n\t}    \nHere's the right way to do it (console and pc):  \npastebin.com/SsFej963  \n"
	},
	"GetPedPropIndex()": {
	  "prefix": "GetPedPropIndex",
	  "body": [
		"GetPedPropIndex(${1:Ped ped}, ${2:int componentId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"GetPedRagdollBoneIndex()": {
	  "prefix": "GetPedRagdollBoneIndex",
	  "body": [
		"GetPedRagdollBoneIndex(${1:Ped ped}, ${2:int bone})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"GetPedParachuteLandingType()": {
	  "prefix": "GetPedParachuteLandingType",
	  "body": [
		"GetPedParachuteLandingType(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\n-1: no landing  \n0: landing on both feet  \n1: stumbling  \n2: rolling  \n3: ragdoll  \n"
	},
	"GetPedRelationshipGroupDefaultHash()": {
	  "prefix": "GetPedRelationshipGroupDefaultHash",
	  "body": [
		"GetPedRelationshipGroupDefaultHash(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Hash\n"
	},
	"GetPedParachuteTintIndex()": {
	  "prefix": "GetPedParachuteTintIndex",
	  "body": [
		"GetPedParachuteTintIndex(${1:Ped ped}, ${2:int* outTintIndex})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"GetPedKiller()": {
	  "prefix": "GetPedKiller",
	  "body": "GetPedKiller",
	  "description": "OLD NAME, PLEASE USE GetPedSourceOfDeath INSTEAD!"
	},
	"GetPedSourceOfDeath()": {
	  "prefix": "GetPedSourceOfDeath",
	  "body": [
		"GetPedSourceOfDeath(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Entity\n\nReturns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'  \nIs best to check if the Ped is dead before asking for its killer.  \n\nOld name: GetPedKiller"
	},
	"GetPedPropTextureIndex()": {
	  "prefix": "GetPedPropTextureIndex",
	  "body": [
		"GetPedPropTextureIndex(${1:Ped ped}, ${2:int componentId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"GetPedStealthMovement()": {
	  "prefix": "GetPedStealthMovement",
	  "body": [
		"GetPedStealthMovement(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns whether the entity is in stealth mode  \n"
	},
	"GetPedTextureVariation()": {
	  "prefix": "GetPedTextureVariation",
	  "body": [
		"GetPedTextureVariation(${1:Ped ped}, ${2:int componentId})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"GetPedRelationshipGroupHash()": {
	  "prefix": "GetPedRelationshipGroupHash",
	  "body": [
		"GetPedRelationshipGroupHash(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Hash\n"
	},
	"GetPedheadshotTxdString()": {
	  "prefix": "GetPedheadshotTxdString",
	  "body": [
		"GetPedheadshotTxdString(${1:int handle})"
	  ],
	  "description": "Namespace: PED\nReturns: char*\n\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n"
	},
	"GetPedResetFlag()": {
	  "prefix": "GetPedResetFlag",
	  "body": [
		"GetPedResetFlag(${1:Ped ped}, ${2:int flagId})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"GetPlayerPedIsFollowing()": {
	  "prefix": "GetPlayerPedIsFollowing",
	  "body": [
		"GetPlayerPedIsFollowing(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Player\n"
	},
	"GetPedType()": {
	  "prefix": "GetPedType",
	  "body": [
		"GetPedType(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nPed Types: (ordered by return priority)  \nMichael = 0  \nFranklin = 1  \nTrevor = 2  \nArmy = 29  \nAnimal = 28  \nSWAT = 27  \nLSFD = 21  \nParamedic = 20  \nCop = 6  \nMale = 4  \nFemale = 5   \nHuman = 26  \nNote/Exception  \nhc_gunman : 4 // Mix male and female  \nhc_hacker : 4 // Mix male and female  \nmp_f_misty_01 : 4 // Female character  \ns_f_y_ranger_01 : 5 // Ranger  \ns_m_y_ranger_01 : 4 // Ranger  \ns_m_y_uscg_01 : 6 // US Coast Guard  \n"
	},
	"GetRelationshipBetweenGroups()": {
	  "prefix": "GetRelationshipBetweenGroups",
	  "body": [
		"GetRelationshipBetweenGroups(${1:Hash group1}, ${2:Hash group2})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nGets the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \nExample:  \nPED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);  \nPED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);  \n"
	},
	"GetPedsJacker()": {
	  "prefix": "GetPedsJacker",
	  "body": [
		"GetPedsJacker(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n"
	},
	"GetSeatPedIsTryingToEnter()": {
	  "prefix": "GetSeatPedIsTryingToEnter",
	  "body": [
		"GetSeatPedIsTryingToEnter(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"GetSynchronizedSceneRate()": {
	  "prefix": "GetSynchronizedSceneRate",
	  "body": [
		"GetSynchronizedSceneRate(${1:int sceneID})"
	  ],
	  "description": "Namespace: PED\nReturns: float\n"
	},
	"GetRandomPedAtCoord()": {
	  "prefix": "GetRandomPedAtCoord",
	  "body": [
		"GetRandomPedAtCoord(${1:float x}, ${2:float y}, ${3:float z}, ${4:float xRadius}, ${5:float yRadius}, ${6:float zRadius}, ${7:int pedType})"
	  ],
	  "description": "Namespace: PED\nReturns: Ped\n\nGets a random ped in the x/y/zRadius near the x/y/z coordinates passed.   \nPed Types:  \nAny = -1  \nPlayer = 1  \nMale = 4   \nFemale = 5   \nCop = 6  \nHuman = 26  \nSWAT = 27   \nAnimal = 28  \nArmy = 29  \n"
	},
	"GetTattooZone()": {
	  "prefix": "GetTattooZone",
	  "body": [
		"GetTattooZone(${1:Hash collection}, ${2:Hash overlay})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nReturns the zoneID for the overlay if it is a member of collection.  \nenum TattooZoneData  \n{  \n\tZONE_TORSO = 0,  \n\tZONE_HEAD = 1,  \n\tZONE_LEFT_ARM = 2,  \n\tZONE_RIGHT_ARM = 3,  \n\tZONE_LEFT_LEG = 4,  \n\tZONE_RIGHT_LEG = 5,  \n\tZONE_UNKNOWN = 6,  \n\tZONE_NONE = 7,  \n};  \n"
	},
	"GetRelationshipBetweenPeds()": {
	  "prefix": "GetRelationshipBetweenPeds",
	  "body": [
		"GetRelationshipBetweenPeds(${1:Ped ped1}, ${2:Ped ped2})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nGets the relationship between two peds. This should be called twice (once for each ped).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \n(Credits: Inco)  \nExample:  \nPED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);  \nPED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);  \n"
	},
	"GetVehiclePedIsTryingToEnter()": {
	  "prefix": "GetVehiclePedIsTryingToEnter",
	  "body": [
		"GetVehiclePedIsTryingToEnter(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Vehicle\n\nShould be renamed GET_CAR_PED_IS_TRYING_TO_ENTER...  \nBecause this works only for cars, not for helis, planes,motorcycles or bicycles...  \nFrom Calderon  \nThis is what R* named it, deal with it.  \n"
	},
	"GetSynchronizedScenePhase()": {
	  "prefix": "GetSynchronizedScenePhase",
	  "body": [
		"GetSynchronizedScenePhase(${1:int sceneID})"
	  ],
	  "description": "Namespace: PED\nReturns: float\n"
	},
	"GivePedHelmet()": {
	  "prefix": "GivePedHelmet",
	  "body": [
		"GivePedHelmet(${1:Ped ped}, ${2:BOOL cannotRemove}, ${3:int helmetFlag}, ${4:int textureIndex})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nPoliceMotorcycleHelmet\t1024\t  \nRegularMotorcycleHelmet\t4096\t  \nFiremanHelmet\t16384\t  \nPilotHeadset\t32768\t  \nPilotHelmet\t65536  \n--  \np2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.  \n"
	},
	"HasActionModeAssetLoaded()": {
	  "prefix": "HasActionModeAssetLoaded",
	  "body": [
		"HasActionModeAssetLoaded(${1:char* asset})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"GetVehiclePedIsIn()": {
	  "prefix": "GetVehiclePedIsIn",
	  "body": [
		"GetVehiclePedIsIn(${1:Ped ped}, ${2:BOOL lastVehicle})"
	  ],
	  "description": "Namespace: PED\nReturns: Vehicle\nGets the vehicle the specified Ped is/was in depending on bool value."
	},
	"HasPedHeadBlendFinished()": {
	  "prefix": "HasPedHeadBlendFinished",
	  "body": [
		"HasPedHeadBlendFinished(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"GetVehiclePedIsUsing()": {
	  "prefix": "GetVehiclePedIsUsing",
	  "body": [
		"GetVehiclePedIsUsing(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Vehicle\n\nGets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.  \n"
	},
	"HasStealthModeAssetLoaded()": {
	  "prefix": "HasStealthModeAssetLoaded",
	  "body": [
		"HasStealthModeAssetLoaded(${1:char* asset})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"GivePedNmMessage()": {
	  "prefix": "GivePedNmMessage",
	  "body": [
		"GivePedNmMessage(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.  \nIf a message hasn't been created already, this function does nothing.  \nIf the Ped is not ragdolled with Euphoria enabled, this function does nothing.  \nThe following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);  \nCall order:  \nSET_PED_TO_RAGDOLL  \nCREATE_NM_MESSAGE  \nGIVE_PED_NM_MESSAGE  \nMultiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:  \nSET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);  \nCREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \nCREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \nCREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.  \nGIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.  \n"
	},
	"IsAnyPedNearPoint()": {
	  "prefix": "IsAnyPedNearPoint",
	  "body": [
		"IsAnyPedNearPoint(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"HasPedReceivedEvent()": {
	  "prefix": "HasPedReceivedEvent",
	  "body": [
		"HasPedReceivedEvent(${1:Ped ped}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsConversationPedDead()": {
	  "prefix": "IsConversationPedDead",
	  "body": [
		"IsConversationPedDead(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x62ab793144de75dc()": {
	  "prefix": "N_0x62ab793144de75dc",
	  "body": "N_0x62ab793144de75dc",
	  "description": "OLD NAME, PLEASE USE HidePedBloodDamageByZone INSTEAD!"
	},
	"HidePedBloodDamageByZone()": {
	  "prefix": "HidePedBloodDamageByZone",
	  "body": [
		"HidePedBloodDamageByZone(${1:Ped ped}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0x62ab793144de75dc"
	},
	"IsPedAPlayer()": {
	  "prefix": "IsPedAPlayer",
	  "body": [
		"IsPedAPlayer(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's it.  \n"
	},
	"IsPedAimingFromCover()": {
	  "prefix": "IsPedAimingFromCover",
	  "body": [
		"IsPedAimingFromCover(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsAnyPedShootingInArea()": {
	  "prefix": "IsAnyPedShootingInArea",
	  "body": [
		"IsAnyPedShootingInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedBeingStealthKilled()": {
	  "prefix": "IsPedBeingStealthKilled",
	  "body": [
		"IsPedBeingStealthKilled(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsCopPedInArea_3d()": {
	  "prefix": "IsCopPedInArea_3d",
	  "body": [
		"IsCopPedInArea_3d(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nxyz - relative to the world origin.  \n"
	},
	"N_0x604e810189ee3a59()": {
	  "prefix": "N_0x604e810189ee3a59",
	  "body": "N_0x604e810189ee3a59",
	  "description": "OLD NAME, PLEASE USE IsPedBlushColorValid INSTEAD!"
	},
	"IsPedBlushColorValid()": {
	  "prefix": "IsPedBlushColorValid",
	  "body": [
		"IsPedBlushColorValid(${1:int colorID})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nOld name: N_0x604e810189ee3a59"
	},
	"IsPedBeingJacked()": {
	  "prefix": "IsPedBeingJacked",
	  "body": [
		"IsPedBeingJacked(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedComponentVariationValid()": {
	  "prefix": "IsPedComponentVariationValid",
	  "body": [
		"IsPedComponentVariationValid(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int textureId})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nChecks if the component variation is valid, this works great for randomizing components using loops.  \nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"IsPedBeingStunned()": {
	  "prefix": "IsPedBeingStunned",
	  "body": [
		"IsPedBeingStunned(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\np1 is always 0  \n"
	},
	"IsPedDeadOrDying()": {
	  "prefix": "IsPedDeadOrDying",
	  "body": [
		"IsPedDeadOrDying(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nSeems to consistently return true if the ped is dead.  \np1 is always passed 1 in the scripts.  \nI suggest to remove \"OR_DYING\" part, because it does not detect dying phase.  \nThat's what the devs call it, cry about it.  \nlol  \nthat's a good meme right there.  \n"
	},
	"IsPedClimbing()": {
	  "prefix": "IsPedClimbing",
	  "body": [
		"IsPedClimbing(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedDoingDriveby()": {
	  "prefix": "IsPedDoingDriveby",
	  "body": [
		"IsPedDoingDriveby(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedEvasiveDiving()": {
	  "prefix": "IsPedEvasiveDiving",
	  "body": [
		"IsPedEvasiveDiving(${1:Ped ped}, ${2:Entity* evadingEntity})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nPresumably returns the Entity that the Ped is currently diving out of the way of.  \nvar num3;  \n    if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)  \n        if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)  \n"
	},
	"IsPedFalling()": {
	  "prefix": "IsPedFalling",
	  "body": [
		"IsPedFalling(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedDiving()": {
	  "prefix": "IsPedDiving",
	  "body": [
		"IsPedDiving(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedDucking()": {
	  "prefix": "IsPedDucking",
	  "body": [
		"IsPedDucking(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedFleeing()": {
	  "prefix": "IsPedFleeing",
	  "body": [
		"IsPedFleeing(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedGoingIntoCover()": {
	  "prefix": "IsPedGoingIntoCover",
	  "body": [
		"IsPedGoingIntoCover(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedFacingPed()": {
	  "prefix": "IsPedFacingPed",
	  "body": [
		"IsPedFacingPed(${1:Ped ped}, ${2:Ped otherPed}, ${3:float angle})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nangle is ped's view cone  \n"
	},
	"IsPedGroupMember()": {
	  "prefix": "IsPedGroupMember",
	  "body": [
		"IsPedGroupMember(${1:Ped ped}, ${2:int groupId})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedFatallyInjured()": {
	  "prefix": "IsPedFatallyInjured",
	  "body": [
		"IsPedFatallyInjured(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nGets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.  \nIf the handle is invalid, the function returns true.  \n"
	},
	"IsPedHangingOnToVehicle()": {
	  "prefix": "IsPedHangingOnToVehicle",
	  "body": [
		"IsPedHangingOnToVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedGettingIntoAVehicle()": {
	  "prefix": "IsPedGettingIntoAVehicle",
	  "body": [
		"IsPedGettingIntoAVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedHeadtrackingPed()": {
	  "prefix": "IsPedHeadtrackingPed",
	  "body": [
		"IsPedHeadtrackingPed(${1:Ped ped1}, ${2:Ped ped2})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xe0d36e5d9e99cc21()": {
	  "prefix": "N_0xe0d36e5d9e99cc21",
	  "body": "N_0xe0d36e5d9e99cc21",
	  "description": "OLD NAME, PLEASE USE IsPedHairColorValid INSTEAD!"
	},
	"IsPedHairColorValid()": {
	  "prefix": "IsPedHairColorValid",
	  "body": [
		"IsPedHairColorValid(${1:int colorID})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nOld name: N_0xe0d36e5d9e99cc21"
	},
	"IsPedHeadtrackingEntity()": {
	  "prefix": "IsPedHeadtrackingEntity",
	  "body": [
		"IsPedHeadtrackingEntity(${1:Ped ped}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInAnyBoat()": {
	  "prefix": "IsPedInAnyBoat",
	  "body": [
		"IsPedInAnyBoat(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedHuman()": {
	  "prefix": "IsPedHuman",
	  "body": [
		"IsPedHuman(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns true/false if the ped is/isn't humanoid.  \n"
	},
	"IsPedInAnyHeli()": {
	  "prefix": "IsPedInAnyHeli",
	  "body": [
		"IsPedInAnyHeli(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInAnyPlane()": {
	  "prefix": "IsPedInAnyPlane",
	  "body": [
		"IsPedInAnyPlane(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInAnyPoliceVehicle()": {
	  "prefix": "IsPedInAnyPoliceVehicle",
	  "body": [
		"IsPedInAnyPoliceVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInAnySub()": {
	  "prefix": "IsPedInAnySub",
	  "body": [
		"IsPedInAnySub(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInAnyTaxi()": {
	  "prefix": "IsPedInAnyTaxi",
	  "body": [
		"IsPedInAnyTaxi(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInAnyVehicle()": {
	  "prefix": "IsPedInAnyVehicle",
	  "body": [
		"IsPedInAnyVehicle(${1:Ped ped}, ${2:BOOL atGetIn})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\nReturns whether the specified ped is in any vehicle. If `atGetIn` is set to true, also returns true if the ped is\ncurrently in the process of entering a vehicle (a specific stage check for `CTaskEnterVehicle`)."
	},
	"IsPedInAnyTrain()": {
	  "prefix": "IsPedInAnyTrain",
	  "body": [
		"IsPedInAnyTrain(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInCombat()": {
	  "prefix": "IsPedInCombat",
	  "body": [
		"IsPedInCombat(${1:Ped ped}, ${2:Ped target})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nChecks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.  \np1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/*14*/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794  \n"
	},
	"IsPedInFlyingVehicle()": {
	  "prefix": "IsPedInFlyingVehicle",
	  "body": [
		"IsPedInFlyingVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInCover()": {
	  "prefix": "IsPedInCover",
	  "body": [
		"IsPedInCover(${1:Ped ped}, ${2:BOOL exceptUseWeapon})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\np1 is nearly always 0 in the scripts.  \n"
	},
	"IsPedInMeleeCombat()": {
	  "prefix": "IsPedInMeleeCombat",
	  "body": [
		"IsPedInMeleeCombat(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nNotes: The function only returns true while the ped is:   \nA.) Swinging a random melee attack (including pistol-whipping)  \nB.) Reacting to being hit by a melee attack (including pistol-whipping)  \nC.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).   \nYou don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds  \n"
	},
	"IsPedInCoverFacingLeft()": {
	  "prefix": "IsPedInCoverFacingLeft",
	  "body": [
		"IsPedInCoverFacingLeft(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInParachuteFreeFall()": {
	  "prefix": "IsPedInParachuteFreeFall",
	  "body": [
		"IsPedInParachuteFreeFall(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInjured()": {
	  "prefix": "IsPedInjured",
	  "body": [
		"IsPedInjured(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nGets a value indicating whether this ped's health is below its injured threshold.  \nThe default threshold is 100.  \n"
	},
	"IsPedInGroup()": {
	  "prefix": "IsPedInGroup",
	  "body": [
		"IsPedInGroup(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedJacking()": {
	  "prefix": "IsPedJacking",
	  "body": [
		"IsPedJacking(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInModel()": {
	  "prefix": "IsPedInModel",
	  "body": [
		"IsPedInModel(${1:Ped ped}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedJumpingOutOfVehicle()": {
	  "prefix": "IsPedJumpingOutOfVehicle",
	  "body": [
		"IsPedJumpingOutOfVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedInVehicle()": {
	  "prefix": "IsPedInVehicle",
	  "body": [
		"IsPedInVehicle(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:BOOL atGetIn})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nGets a value indicating whether the specified ped is in the specified vehicle.  \nIf 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.  \n"
	},
	"N_0x0525a2c2562f3cd4()": {
	  "prefix": "N_0x0525a2c2562f3cd4",
	  "body": "N_0x0525a2c2562f3cd4",
	  "description": "OLD NAME, PLEASE USE IsPedLipstickColorValid INSTEAD!"
	},
	"IsPedLipstickColorValid()": {
	  "prefix": "IsPedLipstickColorValid",
	  "body": [
		"IsPedLipstickColorValid(${1:int colorID})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nOld name: N_0x0525a2c2562f3cd4"
	},
	"IsPedModel()": {
	  "prefix": "IsPedModel",
	  "body": [
		"IsPedModel(${1:Ped ped}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedJumping()": {
	  "prefix": "IsPedJumping",
	  "body": [
		"IsPedJumping(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedMale()": {
	  "prefix": "IsPedMale",
	  "body": [
		"IsPedMale(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns true/false if the ped is/isn't male.  \n"
	},
	"IsPedOnMount()": {
	  "prefix": "IsPedOnMount",
	  "body": [
		"IsPedOnMount(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nSame function call as PED::GET_MOUNT, aka just returns 0  \n"
	},
	"IsPedOnVehicle()": {
	  "prefix": "IsPedOnVehicle",
	  "body": [
		"IsPedOnVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nGets a value indicating whether the specified ped is on top of any vehicle.  \nReturn 1 when ped is on vehicle.  \nReturn 0 when ped is not on a vehicle.  \n"
	},
	"IsPedOnAnyBike()": {
	  "prefix": "IsPedOnAnyBike",
	  "body": [
		"IsPedOnAnyBike(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedPerformingStealthKill()": {
	  "prefix": "IsPedPerformingStealthKill",
	  "body": [
		"IsPedPerformingStealthKill(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedOnFoot()": {
	  "prefix": "IsPedOnFoot",
	  "body": [
		"IsPedOnFoot(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedProne()": {
	  "prefix": "IsPedProne",
	  "body": [
		"IsPedProne(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedRagdoll()": {
	  "prefix": "IsPedRagdoll",
	  "body": [
		"IsPedRagdoll(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nIf the ped handle passed through the parenthesis is in a ragdoll state this will return true.  \n"
	},
	"IsPedOnSpecificVehicle()": {
	  "prefix": "IsPedOnSpecificVehicle",
	  "body": [
		"IsPedOnSpecificVehicle(${1:Ped ped}, ${2:Vehicle vehicle})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedReloading()": {
	  "prefix": "IsPedReloading",
	  "body": [
		"IsPedReloading(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns whether the specified ped is reloading.  \n"
	},
	"IsPedRunningMobilePhoneTask()": {
	  "prefix": "IsPedRunningMobilePhoneTask",
	  "body": [
		"IsPedRunningMobilePhoneTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedPlantingBomb()": {
	  "prefix": "IsPedPlantingBomb",
	  "body": [
		"IsPedPlantingBomb(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x2b16a3bff1fbce49()": {
	  "prefix": "N_0x2b16a3bff1fbce49",
	  "body": "N_0x2b16a3bff1fbce49",
	  "description": "OLD NAME, PLEASE USE IsPedPropValid INSTEAD!"
	},
	"IsPedPropValid()": {
	  "prefix": "IsPedPropValid",
	  "body": [
		"IsPedPropValid(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int TextureId})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n\nOld name: N_0x2b16a3bff1fbce49"
	},
	"IsPedShooting()": {
	  "prefix": "IsPedShooting",
	  "body": [
		"IsPedShooting(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns whether the specified ped is shooting.  \n"
	},
	"IsPedSittingInAnyVehicle()": {
	  "prefix": "IsPedSittingInAnyVehicle",
	  "body": [
		"IsPedSittingInAnyVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nDetect if ped is in any vehicle  \n[True/False]  \n"
	},
	"IsPedRespondingToEvent()": {
	  "prefix": "IsPedRespondingToEvent",
	  "body": [
		"IsPedRespondingToEvent(${1:Ped ped}, ${2:Any event})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedSittingInVehicle()": {
	  "prefix": "IsPedSittingInVehicle",
	  "body": [
		"IsPedSittingInVehicle(${1:Ped ped}, ${2:Vehicle vehicle})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nDetect if ped is sitting in the specified vehicle  \n[True/False]  \n"
	},
	"IsPedRunningRagdollTask()": {
	  "prefix": "IsPedRunningRagdollTask",
	  "body": [
		"IsPedRunningRagdollTask(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedShootingInArea()": {
	  "prefix": "IsPedShootingInArea",
	  "body": [
		"IsPedShootingInArea(${1:Ped ped}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:BOOL p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedSwimming()": {
	  "prefix": "IsPedSwimming",
	  "body": [
		"IsPedSwimming(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedSwimmingUnderWater()": {
	  "prefix": "IsPedSwimmingUnderWater",
	  "body": [
		"IsPedSwimmingUnderWater(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x6a03bf943d767c93()": {
	  "prefix": "N_0x6a03bf943d767c93",
	  "body": "N_0x6a03bf943d767c93",
	  "description": "OLD NAME, PLEASE USE IsPedStandingInCover INSTEAD!"
	},
	"IsPedStandingInCover()": {
	  "prefix": "IsPedStandingInCover",
	  "body": [
		"IsPedStandingInCover(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nConsole Hash: 0xDD5D08A7  \n\nOld name: N_0x6a03bf943d767c93"
	},
	"IsPedTryingToEnterALockedVehicle()": {
	  "prefix": "IsPedTryingToEnterALockedVehicle",
	  "body": [
		"IsPedTryingToEnterALockedVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedStopped()": {
	  "prefix": "IsPedStopped",
	  "body": [
		"IsPedStopped(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.  \n"
	},
	"IsPedTracked()": {
	  "prefix": "IsPedTracked",
	  "body": [
		"IsPedTracked(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedUsingAnyScenario()": {
	  "prefix": "IsPedUsingAnyScenario",
	  "body": [
		"IsPedUsingAnyScenario(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedUsingActionMode()": {
	  "prefix": "IsPedUsingActionMode",
	  "body": [
		"IsPedUsingActionMode(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedUsingScenario()": {
	  "prefix": "IsPedUsingScenario",
	  "body": [
		"IsPedUsingScenario(${1:Ped ped}, ${2:char* scenario})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedVaulting()": {
	  "prefix": "IsPedVaulting",
	  "body": [
		"IsPedVaulting(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nDefinition of vaulting?  \n"
	},
	"IsPedWearingHelmet()": {
	  "prefix": "IsPedWearingHelmet",
	  "body": [
		"IsPedWearingHelmet(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns true if the ped passed through the parenthesis is wearing a helmet.  \n"
	},
	"IsPedheadshotValid()": {
	  "prefix": "IsPedheadshotValid",
	  "body": [
		"IsPedheadshotValid(${1:int handle})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n"
	},
	"IsPedheadshotReady()": {
	  "prefix": "IsPedheadshotReady",
	  "body": [
		"IsPedheadshotReady(${1:int handle})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n"
	},
	"IsScriptedScenarioPedUsingConditionalAnim()": {
	  "prefix": "IsScriptedScenarioPedUsingConditionalAnim",
	  "body": [
		"IsScriptedScenarioPedUsingConditionalAnim(${1:Ped ped}, ${2:char* animDict}, ${3:char* anim})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"IsSynchronizedSceneLooped()": {
	  "prefix": "IsSynchronizedSceneLooped",
	  "body": [
		"IsSynchronizedSceneLooped(${1:int sceneID})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsSynchronizedSceneRunning()": {
	  "prefix": "IsSynchronizedSceneRunning",
	  "body": [
		"IsSynchronizedSceneRunning(${1:int sceneId})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns true if a synchronized scene is running  \n"
	},
	"IsTrackedPedVisible()": {
	  "prefix": "IsTrackedPedVisible",
	  "body": [
		"IsTrackedPedVisible(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nreturns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.  \nTarget needs to be tracked.. won't work otherwise.  \n"
	},
	"KnockOffPedProp()": {
	  "prefix": "KnockOffPedProp",
	  "body": [
		"KnockOffPedProp(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"KnockPedOffVehicle()": {
	  "prefix": "KnockPedOffVehicle",
	  "body": [
		"KnockPedOffVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x06087579e7aa85a9()": {
	  "prefix": "N_0x06087579e7aa85a9",
	  "body": [
		"N_0x06087579e7aa85a9(${1:Any p0}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x03ea03af85a85cb7()": {
	  "prefix": "N_0x03ea03af85a85cb7",
	  "body": [
		"N_0x03ea03af85a85cb7(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x061cb768363d6424()": {
	  "prefix": "N_0x061cb768363d6424",
	  "body": [
		"N_0x061cb768363d6424(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x0f62619393661d6e()": {
	  "prefix": "N_0x0f62619393661d6e",
	  "body": [
		"N_0x0f62619393661d6e(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x0b3e35ac043707d9()": {
	  "prefix": "N_0x0b3e35ac043707d9",
	  "body": [
		"N_0x0b3e35ac043707d9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x1280804f7cfd2d6c()": {
	  "prefix": "N_0x1280804f7cfd2d6c",
	  "body": [
		"N_0x1280804f7cfd2d6c(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x110f526ab784111f()": {
	  "prefix": "N_0x110f526ab784111f",
	  "body": [
		"N_0x110f526ab784111f(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nIn agency_heist3b.c4, its like this 90% of the time:  \nPED::_110F526AB784111F(ped, 0.099);  \nPED::SET_PED_ENVEFF_SCALE(ped, 1.0);  \nPED::_D69411AA0CEBF9E9(ped, 87, 81, 68);  \nPED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);  \nand its like this 10% of the time:  \nPED::_110F526AB784111F(ped, 0.2);  \nPED::SET_PED_ENVEFF_SCALE(ped, 0.65);  \nPED::_D69411AA0CEBF9E9(ped, 74, 69, 60);  \nPED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);  \n"
	},
	"N_0x14590ddbedb1ec85()": {
	  "prefix": "N_0x14590ddbedb1ec85",
	  "body": [
		"N_0x14590ddbedb1ec85(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x1216e0bfa72cc703()": {
	  "prefix": "N_0x1216e0bfa72cc703",
	  "body": [
		"N_0x1216e0bfa72cc703(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x1a330d297aac6bc1()": {
	  "prefix": "N_0x1a330d297aac6bc1",
	  "body": [
		"N_0x1a330d297aac6bc1(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOnly appears in lamar1 script.  \n"
	},
	"GetPedTimeOfDeath()": {
	  "prefix": "GetPedTimeOfDeath",
	  "body": "GetPedTimeOfDeath",
	  "description": "OLD NAME, PLEASE USE N_0x1e98817b311ae98a INSTEAD!"
	},
	"N_0x1e98817b311ae98a()": {
	  "prefix": "N_0x1e98817b311ae98a",
	  "body": [
		"N_0x1e98817b311ae98a(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\nConsole Hash: 0xDF6D5D54  \nName was _GET_PED_TIME_OF_DEATH  \n-----------------------------------------------------------------  \nThere is no way this is the correct name. The only time this is called it's compared with the game timer and I used this to test something and noticed when I was killed by no matter what it was my 'Time Of Death' via this native was always 0, but my friends was some random big number like so, 147591.  \nRetreives [CPed + 15CC] (as of 944)  \n\nOld name: GetPedTimeOfDeath"
	},
	"N_0x129466ed55140f8d()": {
	  "prefix": "N_0x129466ed55140f8d",
	  "body": [
		"N_0x129466ed55140f8d(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x2208438012482a1a()": {
	  "prefix": "N_0x2208438012482a1a",
	  "body": [
		"N_0x2208438012482a1a(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nFunction.Call(Hash._0x2208438012482A1A, ped, 0, 0);  \nThis makes the ped have faster animations  \n"
	},
	"N_0x148b08c2d2acb884()": {
	  "prefix": "N_0x148b08c2d2acb884",
	  "body": [
		"N_0x148b08c2d2acb884(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x25361a96e0f7e419()": {
	  "prefix": "N_0x25361a96e0f7e419",
	  "body": [
		"N_0x25361a96e0f7e419(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x2735233a786b1bef()": {
	  "prefix": "N_0x2735233a786b1bef",
	  "body": [
		"N_0x2735233a786b1bef(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x1e77fa7a62ee6c4c()": {
	  "prefix": "N_0x1e77fa7a62ee6c4c",
	  "body": [
		"N_0x1e77fa7a62ee6c4c(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x2016c603d6b8987c()": {
	  "prefix": "N_0x2016c603d6b8987c",
	  "body": [
		"N_0x2016c603d6b8987c(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x288df530c92dad6f()": {
	  "prefix": "N_0x288df530c92dad6f",
	  "body": [
		"N_0x288df530c92dad6f(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x2b694afcf64e6994()": {
	  "prefix": "N_0x2b694afcf64e6994",
	  "body": [
		"N_0x2b694afcf64e6994(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x26af0e8e30bd2a2c()": {
	  "prefix": "N_0x26af0e8e30bd2a2c",
	  "body": [
		"N_0x26af0e8e30bd2a2c(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x280c7e3ac7f56e90()": {
	  "prefix": "N_0x280c7e3ac7f56e90",
	  "body": [
		"N_0x280c7e3ac7f56e90(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x2df9038c90ad5264()": {
	  "prefix": "N_0x2df9038c90ad5264",
	  "body": [
		"N_0x2df9038c90ad5264(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:int interiorFlags}, ${7:float scale}, ${8:int duration})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x2b5aa717a181fb4c()": {
	  "prefix": "N_0x2b5aa717a181fb4c",
	  "body": [
		"N_0x2b5aa717a181fb4c(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x2f074c904d85129e()": {
	  "prefix": "N_0x2f074c904d85129e",
	  "body": [
		"N_0x2f074c904d85129e(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x336b3d200ab007cb()": {
	  "prefix": "N_0x336b3d200ab007cb",
	  "body": [
		"N_0x336b3d200ab007cb(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x2dfc81c9b9608549()": {
	  "prefix": "N_0x2dfc81c9b9608549",
	  "body": [
		"N_0x2dfc81c9b9608549(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x2f3c3d9f50681de4()": {
	  "prefix": "N_0x2f3c3d9f50681de4",
	  "body": [
		"N_0x2f3c3d9f50681de4(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x3795688a307e1eb6()": {
	  "prefix": "N_0x3795688a307e1eb6",
	  "body": [
		"N_0x3795688a307e1eb6(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x39d55a620fcb6a3a()": {
	  "prefix": "N_0x39d55a620fcb6a3a",
	  "body": [
		"N_0x39d55a620fcb6a3a(${1:Ped ped}, ${2:int slot}, ${3:int drawableId}, ${4:int textureId})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n\nfrom extreme3.c4  \nPED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));  \np1 is probably componentId  \n"
	},
	"N_0x36b77bb84687c318()": {
	  "prefix": "N_0x36b77bb84687c318",
	  "body": [
		"N_0x36b77bb84687c318(${1:Ped ped}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n\nGET_TIME_SINCE_???  \n"
	},
	"N_0x3e802f11fbe27674()": {
	  "prefix": "N_0x3e802f11fbe27674",
	  "body": [
		"N_0x3e802f11fbe27674(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x3c67506996001f5e()": {
	  "prefix": "N_0x3c67506996001f5e",
	  "body": [
		"N_0x3c67506996001f5e()"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x3f7325574e41b44d()": {
	  "prefix": "N_0x3f7325574e41b44d",
	  "body": [
		"N_0x3f7325574e41b44d(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x3e9679c1dfcf422c()": {
	  "prefix": "N_0x3e9679c1dfcf422c",
	  "body": [
		"N_0x3e9679c1dfcf422c(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x412f1364fa066cfb()": {
	  "prefix": "N_0x412f1364fa066cfb",
	  "body": [
		"N_0x412f1364fa066cfb(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x425aecf167663f48()": {
	  "prefix": "N_0x425aecf167663f48",
	  "body": [
		"N_0x425aecf167663f48(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x451d05012ccec234()": {
	  "prefix": "N_0x451d05012ccec234",
	  "body": [
		"N_0x451d05012ccec234(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x451294e859ecc018()": {
	  "prefix": "N_0x451294e859ecc018",
	  "body": [
		"N_0x451294e859ecc018(${1:int p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nyoga.ysc  \nif (PED::IS_PED_WEARING_HELMET(iParam0) && PED::_0x451294E859ECC018(iParam0) != -1)  \n{  \n\t*uParam2 = PED::_0x451294E859ECC018(iParam0);  \n\t*uParam3 = PED::_0x9D728C1E12BF5518(iParam0);  \n}  \n"
	},
	"N_0x4668d80430d6c299()": {
	  "prefix": "N_0x4668d80430d6c299",
	  "body": [
		"N_0x4668d80430d6c299(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x49e50bdb8ba4dab2()": {
	  "prefix": "N_0x49e50bdb8ba4dab2",
	  "body": [
		"N_0x49e50bdb8ba4dab2(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x46b05bcae43856b0()": {
	  "prefix": "N_0x46b05bcae43856b0",
	  "body": [
		"N_0x46b05bcae43856b0(${1:Ped ped}, ${2:int flag})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nChecks if the specified unknown flag is set in the ped's model.  \nThe engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags).  \nGame scripts exclusively check for flags 1 and 4.  \n"
	},
	"N_0x4759cc730f947c81()": {
	  "prefix": "N_0x4759cc730f947c81",
	  "body": [
		"N_0x4759cc730f947c81()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x52d59ab61ddc05dd()": {
	  "prefix": "N_0x52d59ab61ddc05dd",
	  "body": [
		"N_0x52d59ab61ddc05dd(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x5407b7288d0478b7()": {
	  "prefix": "N_0x5407b7288d0478b7",
	  "body": [
		"N_0x5407b7288d0478b7(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"N_0x511f1a683387c7e2()": {
	  "prefix": "N_0x511f1a683387c7e2",
	  "body": [
		"N_0x511f1a683387c7e2(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x576594e8d64375e2()": {
	  "prefix": "N_0x576594e8d64375e2",
	  "body": [
		"N_0x576594e8d64375e2(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x5a7f62fda59759bd()": {
	  "prefix": "N_0x5a7f62fda59759bd",
	  "body": [
		"N_0x5a7f62fda59759bd()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x5615e0c5eb2bc6e2()": {
	  "prefix": "N_0x5615e0c5eb2bc6e2",
	  "body": [
		"N_0x5615e0c5eb2bc6e2(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x570389d1c3de3c6b()": {
	  "prefix": "N_0x570389d1c3de3c6b",
	  "body": [
		"N_0x570389d1c3de3c6b(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x5b6010b3cbc29095()": {
	  "prefix": "N_0x5b6010b3cbc29095",
	  "body": [
		"N_0x5b6010b3cbc29095(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x600048c60d5c2c51()": {
	  "prefix": "N_0x600048c60d5c2c51",
	  "body": [
		"N_0x600048c60d5c2c51(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x5aab586ffec0fd96()": {
	  "prefix": "N_0x5aab586ffec0fd96",
	  "body": [
		"N_0x5aab586ffec0fd96(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x6585d955a68452a5()": {
	  "prefix": "N_0x6585d955a68452a5",
	  "body": [
		"N_0x6585d955a68452a5(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n\nSomething related to clearing the ped because always used with CLEAR_PED_WETNESS, CLEAR_PED_BLOOD_DAMAGE and RESET_PED_VISIBLE_DAMAGE.  \n"
	},
	"N_0x5d517b27cf6ecd04()": {
	  "prefix": "N_0x5d517b27cf6ecd04",
	  "body": [
		"N_0x5d517b27cf6ecd04(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x66680a92700f43df()": {
	  "prefix": "N_0x66680a92700f43df",
	  "body": [
		"N_0x66680a92700f43df(${1:Ped p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nNormally returns true. Returns false briefly whilst getting into a plane. This is probably a check to see if the ped model and all its components/drawables are properly loaded yet.  \n"
	},
	"N_0x61767f73eaceed21()": {
	  "prefix": "N_0x61767f73eaceed21",
	  "body": [
		"N_0x61767f73eaceed21(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x687c0b594907d2e8()": {
	  "prefix": "N_0x687c0b594907d2e8",
	  "body": [
		"N_0x687c0b594907d2e8(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x6b0e6172c9a4d902()": {
	  "prefix": "N_0x6b0e6172c9a4d902",
	  "body": [
		"N_0x6b0e6172c9a4d902(${1:BOOL p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x6647c5f6f5792496()": {
	  "prefix": "N_0x6647c5f6f5792496",
	  "body": [
		"N_0x6647c5f6f5792496(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x7350823473013c02()": {
	  "prefix": "N_0x7350823473013c02",
	  "body": [
		"N_0x7350823473013c02(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x68772db2b2526f9f()": {
	  "prefix": "N_0x68772db2b2526f9f",
	  "body": [
		"N_0x68772db2b2526f9f(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float range})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x75ba1cb3b7d40caf()": {
	  "prefix": "N_0x75ba1cb3b7d40caf",
	  "body": [
		"N_0x75ba1cb3b7d40caf(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x711794453cfd692b()": {
	  "prefix": "N_0x711794453cfd692b",
	  "body": [
		"N_0x711794453cfd692b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x781de8fa214e87d2()": {
	  "prefix": "N_0x781de8fa214e87d2",
	  "body": [
		"N_0x781de8fa214e87d2(${1:Ped ped}, ${2:char* p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np1: \"MP_FEMALE_ACTION\" found multiple times in the b617d scripts.  \nConsole Hash: 0x83BAE814  \n"
	},
	"N_0x733c87d4ce22bea2()": {
	  "prefix": "N_0x733c87d4ce22bea2",
	  "body": [
		"N_0x733c87d4ce22bea2(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x784002a632822099()": {
	  "prefix": "N_0x784002a632822099",
	  "body": [
		"N_0x784002a632822099(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nNormally returns true. Returns false briefly whilst putting on a helmet after getting onto a motorbike. Not sure what that's about.  \n"
	},
	"N_0x76bba2cee66d47e9()": {
	  "prefix": "N_0x76bba2cee66d47e9",
	  "body": [
		"N_0x76bba2cee66d47e9(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x7f2f4f13ac5257ef()": {
	  "prefix": "N_0x7f2f4f13ac5257ef",
	  "body": [
		"N_0x7f2f4f13ac5257ef(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x78c4e9961db3eb5b()": {
	  "prefix": "N_0x78c4e9961db3eb5b",
	  "body": [
		"N_0x78c4e9961db3eb5b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x80054d7fcc70eec6()": {
	  "prefix": "N_0x80054d7fcc70eec6",
	  "body": [
		"N_0x80054d7fcc70eec6(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x7d7a2e43e74e2eb8()": {
	  "prefix": "N_0x7d7a2e43e74e2eb8",
	  "body": [
		"N_0x7d7a2e43e74e2eb8(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\ni found this function just like VEHICLE::TRACK_VEHICLE_VISIBILITY   \nexample:  \nPED::_0x7D7A2E43E74E2EB8(ped);// TRACK_PED_VISIBILITY  \nif (PED::IS_TRACKED_PED_VISIBLE(ped))  \n{  \n}  \n"
	},
	"N_0x820e9892a77e97cd()": {
	  "prefix": "N_0x820e9892a77e97cd",
	  "body": [
		"N_0x820e9892a77e97cd(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x81aa517fbba05d39()": {
	  "prefix": "N_0x81aa517fbba05d39",
	  "body": [
		"N_0x81aa517fbba05d39(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x83a169eabcdb10a2()": {
	  "prefix": "N_0x83a169eabcdb10a2",
	  "body": [
		"N_0x83a169eabcdb10a2(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x876928dddfccc9cd()": {
	  "prefix": "N_0x876928dddfccc9cd",
	  "body": [
		"N_0x876928dddfccc9cd()"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x87ddeb611b329a9c()": {
	  "prefix": "N_0x87ddeb611b329a9c",
	  "body": [
		"N_0x87ddeb611b329a9c(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x8a24b067d175a7bd()": {
	  "prefix": "N_0x8a24b067d175a7bd",
	  "body": [
		"N_0x8a24b067d175a7bd(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x952f06beecd775cc()": {
	  "prefix": "N_0x952f06beecd775cc",
	  "body": [
		"N_0x952f06beecd775cc(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x8c4f3bf23b6237db()": {
	  "prefix": "N_0x8c4f3bf23b6237db",
	  "body": [
		"N_0x8c4f3bf23b6237db(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: Entity\n"
	},
	"N_0x9a77dfd295e29b09()": {
	  "prefix": "N_0x9a77dfd295e29b09",
	  "body": [
		"N_0x9a77dfd295e29b09(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x9911f4a24485f653()": {
	  "prefix": "N_0x9911f4a24485f653",
	  "body": [
		"N_0x9911f4a24485f653(${1:BOOL p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x9c6a6c19b6c0c496()": {
	  "prefix": "N_0x9c6a6c19b6c0c496",
	  "body": [
		"N_0x9c6a6c19b6c0c496(${1:Ped p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"IsPedHurt()": {
	  "prefix": "IsPedHurt",
	  "body": [
		"IsPedHurt(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturns whether the specified ped is hurt.  \n"
	},
	"N_0x9dba107b4937f809()": {
	  "prefix": "N_0x9dba107b4937f809",
	  "body": [
		"N_0x9dba107b4937f809(${1:Any p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nFound in the b617d scripts:  \nPED::_9DBA107B4937F809(v_7, \"trevor_heist_cover_2h\");  \n"
	},
	"N_0xa3a9299c4f2adb98()": {
	  "prefix": "N_0xa3a9299c4f2adb98",
	  "body": [
		"N_0xa3a9299c4f2adb98(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x9d728c1e12bf5518()": {
	  "prefix": "N_0x9d728c1e12bf5518",
	  "body": [
		"N_0x9d728c1e12bf5518(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0x9e30e91fb03a2caf()": {
	  "prefix": "N_0x9e30e91fb03a2caf",
	  "body": [
		"N_0x9e30e91fb03a2caf(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xa52d5247a4227e14()": {
	  "prefix": "N_0xa52d5247a4227e14",
	  "body": [
		"N_0xa52d5247a4227e14(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xa635c11b8c44afc2()": {
	  "prefix": "N_0xa635c11b8c44afc2",
	  "body": [
		"N_0xa635c11b8c44afc2()"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xa9b61a329bfdcbea()": {
	  "prefix": "N_0xa9b61a329bfdcbea",
	  "body": [
		"N_0xa9b61a329bfdcbea(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xa3f3564a5b3646c0()": {
	  "prefix": "N_0xa3f3564a5b3646c0",
	  "body": [
		"N_0xa3f3564a5b3646c0(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nOnly called once in the scripts:  \nif (sub_1abd() && (!PED::_A3F3564A5B3646C0(l_8C))) {  \n    if (sub_52e3(\"RESNA_CELLR\", 0)) {  \n        PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(l_8C, 1);  \n        PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(l_8C, 1);  \n        PED::SET_PED_CAN_PLAY_VISEME_ANIMS(l_8C, 1, 0);  \n        l_184 += 1;  \n    }  \n}  \n"
	},
	"N_0xa586fbeb32a53dbb()": {
	  "prefix": "N_0xa586fbeb32a53dbb",
	  "body": [
		"N_0xa586fbeb32a53dbb()"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xaaa6a3698a69e048()": {
	  "prefix": "N_0xaaa6a3698a69e048",
	  "body": [
		"N_0xaaa6a3698a69e048(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xa660faf550eb37e5()": {
	  "prefix": "N_0xa660faf550eb37e5",
	  "body": [
		"N_0xa660faf550eb37e5(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xaff4710e2a0a6c12()": {
	  "prefix": "N_0xaff4710e2a0a6c12",
	  "body": [
		"N_0xaff4710e2a0a6c12(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xb2aff10216defa2f()": {
	  "prefix": "N_0xb2aff10216defa2f",
	  "body": [
		"N_0xb2aff10216defa2f(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:int interiorFlags}, ${9:float scale}, ${10:int duration})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xafc976fd0580c7b3()": {
	  "prefix": "N_0xafc976fd0580c7b3",
	  "body": [
		"N_0xafc976fd0580c7b3(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xb8b52e498014f5b0()": {
	  "prefix": "N_0xb8b52e498014f5b0",
	  "body": [
		"N_0xb8b52e498014f5b0(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nif (!$B8B52E498014F5B0(PLAYER::PLAYER_PED_ID())) {  \n"
	},
	"N_0xb282749d5e028163()": {
	  "prefix": "N_0xb282749d5e028163",
	  "body": [
		"N_0xb282749d5e028163(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0xba63d9fe45412247()": {
	  "prefix": "N_0xba63d9fe45412247",
	  "body": [
		"N_0xba63d9fe45412247(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xb782f8238512bad5()": {
	  "prefix": "N_0xb782f8238512bad5",
	  "body": [
		"N_0xb782f8238512bad5(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xc1f6ebf9a3d55538()": {
	  "prefix": "N_0xc1f6ebf9a3d55538",
	  "body": [
		"N_0xc1f6ebf9a3d55538(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xc2ee020f5fb4db53()": {
	  "prefix": "N_0xc2ee020f5fb4db53",
	  "body": [
		"N_0xc2ee020f5fb4db53(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xb9496ce47546db2c()": {
	  "prefix": "N_0xb9496ce47546db2c",
	  "body": [
		"N_0xb9496ce47546db2c(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xba8805a1108a2515()": {
	  "prefix": "N_0xba8805a1108a2515",
	  "body": [
		"N_0xba8805a1108a2515(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xcb968b53fc7f916d()": {
	  "prefix": "N_0xcb968b53fc7f916d",
	  "body": [
		"N_0xcb968b53fc7f916d(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xc56fbf2f228e1dac()": {
	  "prefix": "N_0xc56fbf2f228e1dac",
	  "body": [
		"N_0xc56fbf2f228e1dac(${1:Hash modelHash}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xcc6e3b6bb69501f1()": {
	  "prefix": "N_0xcc6e3b6bb69501f1",
	  "body": [
		"N_0xcc6e3b6bb69501f1(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xcd018c591f94cb43()": {
	  "prefix": "N_0xcd018c591f94cb43",
	  "body": [
		"N_0xcd018c591f94cb43(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xc79196dcb36f6121()": {
	  "prefix": "N_0xc79196dcb36f6121",
	  "body": [
		"N_0xc79196dcb36f6121(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xd33daa36272177c4()": {
	  "prefix": "N_0xd33daa36272177c4",
	  "body": [
		"N_0xd33daa36272177c4(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xceda60a74219d064()": {
	  "prefix": "N_0xceda60a74219d064",
	  "body": [
		"N_0xceda60a74219d064(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xd8c3be3ee94caf2d()": {
	  "prefix": "N_0xd8c3be3ee94caf2d",
	  "body": [
		"N_0xd8c3be3ee94caf2d(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xd1871251f3b5acd7()": {
	  "prefix": "N_0xd1871251f3b5acd7",
	  "body": [
		"N_0xd1871251f3b5acd7(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xdcca191df9980fd7()": {
	  "prefix": "N_0xdcca191df9980fd7",
	  "body": [
		"N_0xdcca191df9980fd7(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xd69411aa0cebf9e9()": {
	  "prefix": "N_0xd69411aa0cebf9e9",
	  "body": [
		"N_0xd69411aa0cebf9e9(${1:Ped ped}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSomething related to the environmental effects natives.  \nIn the \"agency_heist3b\" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}  \n"
	},
	"N_0xe43a13c9e4cccbcf()": {
	  "prefix": "N_0xe43a13c9e4cccbcf",
	  "body": [
		"N_0xe43a13c9e4cccbcf(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xe6ca85e7259ce16b()": {
	  "prefix": "N_0xe6ca85e7259ce16b",
	  "body": [
		"N_0xe6ca85e7259ce16b(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xded5af5a0ea4b297()": {
	  "prefix": "N_0xded5af5a0ea4b297",
	  "body": [
		"N_0xded5af5a0ea4b297(${1:Ped driver}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nScripts use 0.2, 0.5 and 1.0.  \nSET_DRIVER_*  \n"
	},
	"N_0xe8a169e666cbc541()": {
	  "prefix": "N_0xe8a169e666cbc541",
	  "body": [
		"N_0xe8a169e666cbc541()"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xe906ec930f5fe7c8()": {
	  "prefix": "N_0xe906ec930f5fe7c8",
	  "body": [
		"N_0xe906ec930f5fe7c8(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xe4723db6e736ccff()": {
	  "prefix": "N_0xe4723db6e736ccff",
	  "body": [
		"N_0xe4723db6e736ccff(${1:Ped ped}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xe861d0b05c7662b8()": {
	  "prefix": "N_0xe861d0b05c7662b8",
	  "body": [
		"N_0xe861d0b05c7662b8(${1:Pickup p0}, ${2:Any p1}, ${3:Blip* p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xebd0edba5be957cf()": {
	  "prefix": "N_0xebd0edba5be957cf",
	  "body": [
		"N_0xebd0edba5be957cf(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xea9960d07dadcf10()": {
	  "prefix": "N_0xea9960d07dadcf10",
	  "body": [
		"N_0xea9960d07dadcf10(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n"
	},
	"N_0xec6935ebe0847b90()": {
	  "prefix": "N_0xec6935ebe0847b90",
	  "body": [
		"N_0xec6935ebe0847b90(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xebb376779a760aa8()": {
	  "prefix": "N_0xebb376779a760aa8",
	  "body": [
		"N_0xebb376779a760aa8()"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xed3c76adfa6d07c4()": {
	  "prefix": "N_0xed3c76adfa6d07c4",
	  "body": [
		"N_0xed3c76adfa6d07c4(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xec4b4b3b9908052a()": {
	  "prefix": "N_0xec4b4b3b9908052a",
	  "body": [
		"N_0xec4b4b3b9908052a(${1:Ped ped}, ${2:float unk})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSET_PED_*  \nHas most likely to do with some shooting attributes as it sets the float which is in the same range as shootRate.  \n"
	},
	"N_0xeeed8fafec331a70()": {
	  "prefix": "N_0xeeed8fafec331a70",
	  "body": [
		"N_0xeeed8fafec331a70(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xf0daef2f545bee25()": {
	  "prefix": "N_0xf0daef2f545bee25",
	  "body": [
		"N_0xf0daef2f545bee25(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xed6d8e27a43b8cde()": {
	  "prefix": "N_0xed6d8e27a43b8cde",
	  "body": [
		"N_0xed6d8e27a43b8cde(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xf2385935bffd4d92()": {
	  "prefix": "N_0xf2385935bffd4d92",
	  "body": [
		"N_0xf2385935bffd4d92(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xf033419d1b81fae8()": {
	  "prefix": "N_0xf033419d1b81fae8",
	  "body": [
		"N_0xf033419d1b81fae8(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xf41b5d290c99a3d6()": {
	  "prefix": "N_0xf41b5d290c99a3d6",
	  "body": [
		"N_0xf41b5d290c99a3d6(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xf1c03a5352243a30()": {
	  "prefix": "N_0xf1c03a5352243a30",
	  "body": [
		"N_0xf1c03a5352243a30(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xf445de8da80a1792()": {
	  "prefix": "N_0xf445de8da80a1792",
	  "body": [
		"N_0xf445de8da80a1792()"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xf2bebcdfafdaa19e()": {
	  "prefix": "N_0xf2bebcdfafdaa19e",
	  "body": [
		"N_0xf2bebcdfafdaa19e(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\ntoggle was always 0 except in one instance (b678).  \nThe one time this is set to true seems to do with when you fail the mission.  \n"
	},
	"N_0xf60165e1d2c5370b()": {
	  "prefix": "N_0xf60165e1d2c5370b",
	  "body": [
		"N_0xf60165e1d2c5370b(${1:Ped ped}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0xf79f9def0aade61a()": {
	  "prefix": "N_0xf79f9def0aade61a",
	  "body": [
		"N_0xf79f9def0aade61a(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xf5846edb26a98a24()": {
	  "prefix": "N_0xf5846edb26a98a24",
	  "body": [
		"N_0xf5846edb26a98a24(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xfe07ff6495d52e2a()": {
	  "prefix": "N_0xfe07ff6495d52e2a",
	  "body": [
		"N_0xfe07ff6495d52e2a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"N_0xf9acf4a08098ea25()": {
	  "prefix": "N_0xf9acf4a08098ea25",
	  "body": [
		"N_0xf9acf4a08098ea25(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np1 was always 1 (true).  \nKicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.  \nActual name begins with 'S'  \n"
	},
	"N_0xfee4a5459472a9f8()": {
	  "prefix": "N_0xfee4a5459472a9f8",
	  "body": [
		"N_0xfee4a5459472a9f8()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"PlayFacialAnim()": {
	  "prefix": "PlayFacialAnim",
	  "body": [
		"PlayFacialAnim(${1:Ped ped}, ${2:char* animName}, ${3:char* animDict})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nLook at facials@gen_male@base and facials@gen_female@base for some common facial animations.   \n!!!NOTE!!!  \nUnlike most animation natives, the animation comes BEFORE the animation dictionary here. So you could call e.g.   \nPLAY_FACIAL_ANIM(ped, \"dead_1\", \"facials@gen_male@base\")  \n"
	},
	"N_0xfcf37a457cb96dc0()": {
	  "prefix": "N_0xfcf37a457cb96dc0",
	  "body": [
		"N_0xfcf37a457cb96dc0(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"RegisterPedheadshot()": {
	  "prefix": "RegisterPedheadshot",
	  "body": [
		"RegisterPedheadshot(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\n\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n"
	},
	"N_0xfec9a3b1820f3331()": {
	  "prefix": "N_0xfec9a3b1820f3331",
	  "body": [
		"N_0xfec9a3b1820f3331(${1:Any p0})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"N_0x953563ce563143af()": {
	  "prefix": "N_0x953563ce563143af",
	  "body": "N_0x953563ce563143af",
	  "description": "OLD NAME, PLEASE USE RegisterPedheadshotTransparent INSTEAD!"
	},
	"RegisterPedheadshotTransparent()": {
	  "prefix": "RegisterPedheadshotTransparent",
	  "body": [
		"RegisterPedheadshotTransparent(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: int\nSimilar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black.\n\n**Result of the example code:**\n<https://i.imgur.com/iHz8ztn.png>\nOld name: N_0x953563ce563143af"
	},
	"N_0xff4803bc019852d9()": {
	  "prefix": "N_0xff4803bc019852d9",
	  "body": [
		"N_0xff4803bc019852d9(${1:float p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RemoveActionModeAsset()": {
	  "prefix": "RemoveActionModeAsset",
	  "body": [
		"RemoveActionModeAsset(${1:char* asset})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RegisterHatedTargetsAroundPed()": {
	  "prefix": "RegisterHatedTargetsAroundPed",
	  "body": [
		"RegisterHatedTargetsAroundPed(${1:Ped ped}, ${2:float radius})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nBased on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).  \n"
	},
	"RemovePedDefensiveArea()": {
	  "prefix": "RemovePedDefensiveArea",
	  "body": [
		"RemovePedDefensiveArea(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nPed will no longer get angry when you stay near him.  \n"
	},
	"RegisterTarget()": {
	  "prefix": "RegisterTarget",
	  "body": [
		"RegisterTarget(${1:Ped ped}, ${2:Ped target})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nPED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.  \nl_216 = RECSBRobber1  \n"
	},
	"RemovePedFromGroup()": {
	  "prefix": "RemovePedFromGroup",
	  "body": [
		"RemovePedFromGroup(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xfddb234cf74073d9()": {
	  "prefix": "N_0xfddb234cf74073d9",
	  "body": "N_0xfddb234cf74073d9",
	  "description": "OLD NAME, PLEASE USE RemovePedPreferredCoverSet INSTEAD!"
	},
	"RemovePedPreferredCoverSet()": {
	  "prefix": "RemovePedPreferredCoverSet",
	  "body": [
		"RemovePedPreferredCoverSet(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0xfddb234cf74073d9"
	},
	"RemoveGroup()": {
	  "prefix": "RemoveGroup",
	  "body": [
		"RemoveGroup(${1:int groupId})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RemoveRelationshipGroup()": {
	  "prefix": "RemoveRelationshipGroup",
	  "body": [
		"RemoveRelationshipGroup(${1:Hash groupHash})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RemovePedElegantly()": {
	  "prefix": "RemovePedElegantly",
	  "body": [
		"RemovePedElegantly(${1:Ped* ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nJudging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..  \n"
	},
	"RemovePedHelmet()": {
	  "prefix": "RemovePedHelmet",
	  "body": [
		"RemovePedHelmet(${1:Ped ped}, ${2:BOOL instantly})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RemoveScenarioBlockingAreas()": {
	  "prefix": "RemoveScenarioBlockingAreas",
	  "body": [
		"RemoveScenarioBlockingAreas()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RequestActionModeAsset()": {
	  "prefix": "RequestActionModeAsset",
	  "body": [
		"RequestActionModeAsset(${1:char* asset})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RequestStealthModeAsset()": {
	  "prefix": "RequestStealthModeAsset",
	  "body": [
		"RequestStealthModeAsset(${1:char* asset})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RemoveScenarioBlockingArea()": {
	  "prefix": "RemoveScenarioBlockingArea",
	  "body": [
		"RemoveScenarioBlockingArea(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"RemoveStealthModeAsset()": {
	  "prefix": "RemoveStealthModeAsset",
	  "body": [
		"RemoveStealthModeAsset(${1:char* asset})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ResetAiWeaponDamageModifier()": {
	  "prefix": "ResetAiWeaponDamageModifier",
	  "body": [
		"ResetAiWeaponDamageModifier()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ResetPedInVehicleContext()": {
	  "prefix": "ResetPedInVehicleContext",
	  "body": [
		"ResetPedInVehicleContext(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ResetAiMeleeWeaponDamageModifier()": {
	  "prefix": "ResetAiMeleeWeaponDamageModifier",
	  "body": [
		"ResetAiMeleeWeaponDamageModifier()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ResetPedMovementClipset()": {
	  "prefix": "ResetPedMovementClipset",
	  "body": [
		"ResetPedMovementClipset(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nIf p1 is 0.0, I believe you are back to normal.   \nIf p1 is 1.0, it looks like you can only rotate the ped, not walk.  \nUsing the following code to reset back to normal  \nPED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);  \n"
	},
	"ResetGroupFormationDefaultSpacing()": {
	  "prefix": "ResetGroupFormationDefaultSpacing",
	  "body": [
		"ResetGroupFormationDefaultSpacing(${1:int groupHandle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ResetPedRagdollTimer()": {
	  "prefix": "ResetPedRagdollTimer",
	  "body": [
		"ResetPedRagdollTimer(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"ResetPedLastVehicle()": {
	  "prefix": "ResetPedLastVehicle",
	  "body": [
		"ResetPedLastVehicle(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nResets the value for the last vehicle driven by the Ped.  \n"
	},
	"ResetPedVisibleDamage()": {
	  "prefix": "ResetPedVisibleDamage",
	  "body": [
		"ResetPedVisibleDamage(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"ResetPedWeaponMovementClipset()": {
	  "prefix": "ResetPedWeaponMovementClipset",
	  "body": [
		"ResetPedWeaponMovementClipset(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xd86d101fcfd00a4b()": {
	  "prefix": "N_0xd86d101fcfd00a4b",
	  "body": "N_0xd86d101fcfd00a4b",
	  "description": "OLD NAME, PLEASE USE ResetPedRagdollBlockingFlags INSTEAD!"
	},
	"ResetPedRagdollBlockingFlags()": {
	  "prefix": "ResetPedRagdollBlockingFlags",
	  "body": [
		"ResetPedRagdollBlockingFlags(${1:Ped ped}, ${2:int flags})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThere seem to be 26 flags  \n\nOld name: N_0xd86d101fcfd00a4b"
	},
	"ReviveInjuredPed()": {
	  "prefix": "ReviveInjuredPed",
	  "body": [
		"ReviveInjuredPed(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nIt will revive/cure the injured ped. The condition is ped must not be dead.  \nUpon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).  \nThis function is well suited there.  \n"
	},
	"ResetPedStrafeClipset()": {
	  "prefix": "ResetPedStrafeClipset",
	  "body": [
		"ResetPedStrafeClipset(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetBlockingOfNonTemporaryEvents()": {
	  "prefix": "SetBlockingOfNonTemporaryEvents",
	  "body": [
		"SetBlockingOfNonTemporaryEvents(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nworks with AI::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him  \n"
	},
	"ResurrectPed()": {
	  "prefix": "ResurrectPed",
	  "body": [
		"ResurrectPed(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThis function will simply bring the dead person back to life.  \nTry not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).  \nInstead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)   \nAlso, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.  \n"
	},
	"SetCanAttackFriendly()": {
	  "prefix": "SetCanAttackFriendly",
	  "body": [
		"SetCanAttackFriendly(${1:Ped ped}, ${2:BOOL toggle}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSetting ped to true allows the ped to shoot \"friendlies\".  \np2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.  \np1 = false & p2 = false for unable to aim at.  \np1 = true & p2 = false for able to aim at.  \n"
	},
	"SetAiMeleeWeaponDamageModifier()": {
	  "prefix": "SetAiMeleeWeaponDamageModifier",
	  "body": [
		"SetAiMeleeWeaponDamageModifier(${1:float modifier})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetCombatFloat()": {
	  "prefix": "SetCombatFloat",
	  "body": [
		"SetCombatFloat(${1:Ped ped}, ${2:int combatType}, ${3:float p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\ncombatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.  \n"
	},
	"SetAiWeaponDamageModifier()": {
	  "prefix": "SetAiWeaponDamageModifier",
	  "body": [
		"SetAiWeaponDamageModifier(${1:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetCreateRandomCopsOnScenarios()": {
	  "prefix": "SetCreateRandomCopsOnScenarios",
	  "body": [
		"SetCreateRandomCopsOnScenarios(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetDriverAbility()": {
	  "prefix": "SetDriverAbility",
	  "body": [
		"SetDriverAbility(${1:Ped driver}, ${2:float ability})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThe function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.  \n"
	},
	"SetCreateRandomCops()": {
	  "prefix": "SetCreateRandomCops",
	  "body": [
		"SetCreateRandomCops(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetEnableBoundAnkles()": {
	  "prefix": "SetEnableBoundAnkles",
	  "body": [
		"SetEnableBoundAnkles(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nUsed with [SET_ENABLE_HANDCUFFS](#_0xDF1AF8B5D56542FA) in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend."
	},
	"SetCreateRandomCopsNotOnScenarios()": {
	  "prefix": "SetCreateRandomCopsNotOnScenarios",
	  "body": [
		"SetCreateRandomCopsNotOnScenarios(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetEnablePedEnveffScale()": {
	  "prefix": "SetEnablePedEnveffScale",
	  "body": [
		"SetEnablePedEnveffScale(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetDriverAggressiveness()": {
	  "prefix": "SetDriverAggressiveness",
	  "body": [
		"SetDriverAggressiveness(${1:Ped driver}, ${2:float aggressiveness})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nrange 0.0f - 1.0f  \n"
	},
	"SetExclusivePhoneRelationships()": {
	  "prefix": "SetExclusivePhoneRelationships",
	  "body": [
		"SetExclusivePhoneRelationships(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Vehicle\n\nIn appcamera.c4, Line 106:  \nif (VEHICLE::IS_VEHICLE_DRIVEABLE(PED::SET_EXCLUSIVE_PHONE_RELATIONSHIPS(PLAYER::PLAYER_PED_ID()), 0))  \nSo return type could be a vehicle?  \n!Hash collision - gets the vehicle handle from ped which is about entering the vehicle!  \nsfink: agreed, 100%  \nProper name is GET_VEHICLE_PED_IS_ENTERING  \n"
	},
	"SetFacialIdleAnimOverride()": {
	  "prefix": "SetFacialIdleAnimOverride",
	  "body": [
		"SetFacialIdleAnimOverride(${1:Ped ped}, ${2:char* animName}, ${3:char* animDict})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetEnableHandcuffs()": {
	  "prefix": "SetEnableHandcuffs",
	  "body": [
		"SetEnableHandcuffs(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nped can not pull out a weapon when true  \n"
	},
	"SetGroupFormationSpacing()": {
	  "prefix": "SetGroupFormationSpacing",
	  "body": [
		"SetGroupFormationSpacing(${1:int groupId}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetEnableScuba()": {
	  "prefix": "SetEnableScuba",
	  "body": [
		"SetEnableScuba(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nEnables diving motion when underwater.  \n"
	},
	"SetGroupFormation()": {
	  "prefix": "SetGroupFormation",
	  "body": [
		"SetGroupFormation(${1:int groupId}, ${2:int formationType})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\n0: Default  \n1: Circle Around Leader  \n2: Alternative Circle Around Leader  \n3: Line, with Leader at center  \n"
	},
	"N_0xcc9682b8951c5229()": {
	  "prefix": "N_0xcc9682b8951c5229",
	  "body": "N_0xcc9682b8951c5229",
	  "description": "OLD NAME, PLEASE USE SetHeadBlendPaletteColor INSTEAD!"
	},
	"SetHeadBlendPaletteColor()": {
	  "prefix": "SetHeadBlendPaletteColor",
	  "body": [
		"SetHeadBlendPaletteColor(${1:Ped ped}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int id})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nPreview: <https://gfycat.com/MaleRareAmazonparrot>\nOld name: N_0xcc9682b8951c5229"
	},
	"SetGroupSeparationRange()": {
	  "prefix": "SetGroupSeparationRange",
	  "body": [
		"SetGroupSeparationRange(${1:int groupHandle}, ${2:float separationRange})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSets the range at which members will automatically leave the group.  \n"
	},
	"SetPedAccuracy()": {
	  "prefix": "SetPedAccuracy",
	  "body": [
		"SetPedAccuracy(${1:Ped ped}, ${2:int accuracy})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n\naccuracy = 0-100, 100 being perfectly accurate  \n"
	},
	"SetPedAllowVehiclesOverride()": {
	  "prefix": "SetPedAllowVehiclesOverride",
	  "body": [
		"SetPedAllowVehiclesOverride(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetIkTarget()": {
	  "prefix": "SetIkTarget",
	  "body": [
		"SetIkTarget(${1:Ped ped}, ${2:int ikIndex}, ${3:Entity entityLookAt}, ${4:int boneLookAt}, ${5:float offsetX}, ${6:float offsetY}, ${7:float offsetZ}, ${8:Any p7}, ${9:int blendInDuration}, ${10:int blendOutDuration})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nNo other indices work...  \nIK Index ---------  \n1 = head  \n3 = left arm  \n4 = right arm  \n------------------  \nEntityLookAt can be null (0 handle)  \n"
	},
	"SetPedAlternateMovementAnim()": {
	  "prefix": "SetPedAlternateMovementAnim",
	  "body": [
		"SetPedAlternateMovementAnim(${1:Ped ped}, ${2:int stance}, ${3:char* animDictionary}, ${4:char* animationName}, ${5:float p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nstance:  \n0 = idle  \n1 = walk  \n2 = running  \np5 = usually set to true  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"SetPedAlertness()": {
	  "prefix": "SetPedAlertness",
	  "body": [
		"SetPedAlertness(${1:Ped ped}, ${2:int value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nvalue ranges from 0 to 3.  \n"
	},
	"SetPedAlternateWalkAnim()": {
	  "prefix": "SetPedAlternateWalkAnim",
	  "body": [
		"SetPedAlternateWalkAnim(${1:Ped ped}, ${2:char* animDict}, ${3:char* animName}, ${4:float p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"SetPedAllowedToDuck()": {
	  "prefix": "SetPedAllowedToDuck",
	  "body": [
		"SetPedAllowedToDuck(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedArmour()": {
	  "prefix": "SetPedArmour",
	  "body": [
		"SetPedArmour(${1:Ped ped}, ${2:int amount})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSets the armor of the specified ped.  \nped: The Ped to set the armor of.  \namount: A value between 0 and 100 indicating the value to set the Ped's armor to.  \n"
	},
	"SetPedAsEnemy()": {
	  "prefix": "SetPedAsEnemy",
	  "body": [
		"SetPedAsEnemy(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedAngledDefensiveArea()": {
	  "prefix": "SetPedAngledDefensiveArea",
	  "body": [
		"SetPedAngledDefensiveArea(${1:Ped ped}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:BOOL p8}, ${10:BOOL p9})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedAsGroupMember()": {
	  "prefix": "SetPedAsGroupMember",
	  "body": [
		"SetPedAsGroupMember(${1:Ped ped}, ${2:int groupId})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedAsCop()": {
	  "prefix": "SetPedAsCop",
	  "body": [
		"SetPedAsCop(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nTurns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as \"false\" has no effect; you must change p0's ped model to disable the effect.  \n"
	},
	"SetPedBlendFromParents()": {
	  "prefix": "SetPedBlendFromParents",
	  "body": [
		"SetPedBlendFromParents(${1:Ped ped}, ${2:Ped father}, ${3:Ped mother}, ${4:float fathersSide}, ${5:float mothersSide})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedAsGroupLeader()": {
	  "prefix": "SetPedAsGroupLeader",
	  "body": [
		"SetPedAsGroupLeader(${1:Ped ped}, ${2:int groupId})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanArmIk()": {
	  "prefix": "SetPedCanArmIk",
	  "body": [
		"SetPedCanArmIk(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedBoundsOrientation()": {
	  "prefix": "SetPedBoundsOrientation",
	  "body": [
		"SetPedBoundsOrientation(${1:Ped ped}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanBeDraggedOut()": {
	  "prefix": "SetPedCanBeDraggedOut",
	  "body": [
		"SetPedCanBeDraggedOut(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanBeShotInVehicle()": {
	  "prefix": "SetPedCanBeShotInVehicle",
	  "body": [
		"SetPedCanBeShotInVehicle(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanBeTargetedWithoutLos()": {
	  "prefix": "SetPedCanBeTargetedWithoutLos",
	  "body": [
		"SetPedCanBeTargetedWithoutLos(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanBeKnockedOffVehicle()": {
	  "prefix": "SetPedCanBeKnockedOffVehicle",
	  "body": [
		"SetPedCanBeKnockedOffVehicle(${1:Ped ped}, ${2:int state})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\n0 = can (bike)  \n1 = can't (bike)  \n2 = unk   \n3 = unk  \n"
	},
	"SetPedCanBeTargetted()": {
	  "prefix": "SetPedCanBeTargetted",
	  "body": [
		"SetPedCanBeTargetted(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanBeTargetedWhenInjured()": {
	  "prefix": "SetPedCanBeTargetedWhenInjured",
	  "body": [
		"SetPedCanBeTargetedWhenInjured(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanBeTargettedByTeam()": {
	  "prefix": "SetPedCanBeTargettedByTeam",
	  "body": [
		"SetPedCanBeTargettedByTeam(${1:Ped ped}, ${2:int team}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanEvasiveDive()": {
	  "prefix": "SetPedCanEvasiveDive",
	  "body": [
		"SetPedCanEvasiveDive(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanBeTargettedByPlayer()": {
	  "prefix": "SetPedCanBeTargettedByPlayer",
	  "body": [
		"SetPedCanBeTargettedByPlayer(${1:Ped ped}, ${2:Player player}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanCowerInCover()": {
	  "prefix": "SetPedCanCowerInCover",
	  "body": [
		"SetPedCanCowerInCover(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nIt simply makes the said ped to cower behind cover object(wall, desk, car)  \nPeds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.  \n"
	},
	"SetPedCanLegIk()": {
	  "prefix": "SetPedCanLegIk",
	  "body": [
		"SetPedCanLegIk(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanPeekInCover()": {
	  "prefix": "SetPedCanPeekInCover",
	  "body": [
		"SetPedCanPeekInCover(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanHeadIk()": {
	  "prefix": "SetPedCanHeadIk",
	  "body": [
		"SetPedCanHeadIk(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanPlayAmbientBaseAnims()": {
	  "prefix": "SetPedCanPlayAmbientBaseAnims",
	  "body": [
		"SetPedCanPlayAmbientBaseAnims(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanPlayAmbientAnims()": {
	  "prefix": "SetPedCanPlayAmbientAnims",
	  "body": [
		"SetPedCanPlayAmbientAnims(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x33a60d8bdd6e508c()": {
	  "prefix": "N_0x33a60d8bdd6e508c",
	  "body": "N_0x33a60d8bdd6e508c",
	  "description": "OLD NAME, PLEASE USE SetPedCanPlayInjuredAnims INSTEAD!"
	},
	"SetPedCanPlayInjuredAnims()": {
	  "prefix": "SetPedCanPlayInjuredAnims",
	  "body": [
		"SetPedCanPlayInjuredAnims(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0x33a60d8bdd6e508c"
	},
	"SetPedCanRagdoll()": {
	  "prefix": "SetPedCanRagdoll",
	  "body": [
		"SetPedCanRagdoll(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanPlayGestureAnims()": {
	  "prefix": "SetPedCanPlayGestureAnims",
	  "body": [
		"SetPedCanPlayGestureAnims(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanPlayVisemeAnims()": {
	  "prefix": "SetPedCanPlayVisemeAnims",
	  "body": [
		"SetPedCanPlayVisemeAnims(${1:Ped ped}, ${2:BOOL toggle}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np2 usually 0  \n"
	},
	"SetPedCanSwitchWeapon()": {
	  "prefix": "SetPedCanSwitchWeapon",
	  "body": [
		"SetPedCanSwitchWeapon(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanRagdollFromPlayerImpact()": {
	  "prefix": "SetPedCanRagdollFromPlayerImpact",
	  "body": [
		"SetPedCanRagdollFromPlayerImpact(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanTeleportToGroupLeader()": {
	  "prefix": "SetPedCanTeleportToGroupLeader",
	  "body": [
		"SetPedCanTeleportToGroupLeader(${1:Ped pedHandle}, ${2:int groupHandle}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThis only will teleport the ped to the group leader if the group leader teleports (sets coords).  \nOnly works in singleplayer  \n"
	},
	"SetPedCanUseAutoConversationLookat()": {
	  "prefix": "SetPedCanUseAutoConversationLookat",
	  "body": [
		"SetPedCanUseAutoConversationLookat(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCanSmashGlass()": {
	  "prefix": "SetPedCanSmashGlass",
	  "body": [
		"SetPedCanSmashGlass(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x82a3d6d9cc2cb8e3()": {
	  "prefix": "N_0x82a3d6d9cc2cb8e3",
	  "body": "N_0x82a3d6d9cc2cb8e3",
	  "description": "OLD NAME, PLEASE USE SetPedClothProne INSTEAD!"
	},
	"SetPedClothProne()": {
	  "prefix": "SetPedClothProne",
	  "body": [
		"SetPedClothProne(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0x82a3d6d9cc2cb8e3"
	},
	"SetPedCanTorsoIk()": {
	  "prefix": "SetPedCanTorsoIk",
	  "body": [
		"SetPedCanTorsoIk(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedCombatAbility()": {
	  "prefix": "SetPedCombatAbility",
	  "body": [
		"SetPedCombatAbility(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\n100 would equal attack  \nless then 50ish would mean run away  \nOnly the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta:  \n0: CA_Poor  \n1: CA_Average  \n2: CA_Professional  \nTested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.  \n"
	},
	"SetPedCapsule()": {
	  "prefix": "SetPedCapsule",
	  "body": [
		"SetPedCapsule(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOverrides the ped's collision capsule radius for the current tick.  \nMust be called every tick to be effective.  \nSetting this to 0.001 will allow warping through some objects.  \n"
	},
	"SetPedCombatRange()": {
	  "prefix": "SetPedCombatRange",
	  "body": [
		"SetPedCombatRange(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOnly the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described as AttackRange in combatbehaviour.meta:  \n0: CR_Near  \n1: CR_Medium  \n2: CR_Far  \n"
	},
	"SetPedComponentVariation()": {
	  "prefix": "SetPedComponentVariation",
	  "body": [
		"SetPedComponentVariation(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int textureId}, ${5:int paletteId})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nThis native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model. \n\n### MP Freemode list of components\n\n**0**: Face  \n**1**: Mask  \n**2**: Hair  \n**3**: Torso  \n**4**: Leg  \n**5**: Parachute / bag  \n**6**: Shoes  \n**7**: Accessory  \n**8**: Undershirt  \n**9**: Kevlar  \n**10**: Badge  \n**11**: Torso 2  \n\n### Related and useful natives\n\n[GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#_0x27561561732A7842)  \n[GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#_0x8F7156A3142A6BAD)  \n\n[List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples"
	},
	"SetPedCombatAttributes()": {
	  "prefix": "SetPedCombatAttributes",
	  "body": [
		"SetPedCombatAttributes(${1:Ped ped}, ${2:int attributeIndex}, ${3:BOOL enabled})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThese combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta.  \nSo far, these are the equivalents found:  \nenum CombatAttributes  \n{  \n\tBF_CanUseCover = 0,  \n\tBF_CanUseVehicles = 1,  \n\tBF_CanDoDrivebys = 2,  \n\tBF_CanLeaveVehicle = 3,  \n\tBF_CanFightArmedPedsWhenNotArmed = 5,  \n\tBF_CanTauntInVehicle = 20,  \n\tBF_AlwaysFight = 46,  \n\tBF_IgnoreTrafficWhenDriving = 52,  \n        BF_FreezeMovement = 292,  \n        BF_PlayerCanUseFiringWeapons = 1424  \n};  \n8 = ?  \n9 = ?  \n13 = ?  \n14 ?  \nResearch thread: gtaforums.com/topic/833391-researchguide-combat-behaviour-flags/  \n"
	},
	"SetPedCombatMovement()": {
	  "prefix": "SetPedCombatMovement",
	  "body": [
		"SetPedCombatMovement(${1:Ped ped}, ${2:int combatMovement})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\n0 - Stationary (Will just stand in place)  \n1 - Defensive (Will try to find cover and very likely to blind fire)  \n2 - Offensive (Will attempt to charge at enemy but take cover as well)  \n3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)  \n"
	},
	"SetPedConfigFlag()": {
	  "prefix": "SetPedConfigFlag",
	  "body": [
		"SetPedConfigFlag(${1:Ped ped}, ${2:int flagId}, ${3:BOOL value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nResearch help : pastebin.com/fPL1cSwB  \nNew items added with underscore as first char  \n-----------------------------------------------------------------------  \nenum PedConfigFlags  \n{  \n\tPED_FLAG_CAN_FLY_THRU_WINDSCREEN = 32,  \n        PED_FLAG_DIES_BY_RAGDOLL = 33,  \n\t_PED_FLAG_PUT_ON_MOTORCYCLE_HELMET = 35,  \n\tPED_FLAG_NO_COLLISION = 52,  \n        _PED_FLAG_IS_SHOOTING = 58,  \n        _PED_FLAG_IS_ON_GROUND = 60,  \n\tPED_FLAG_NO_COLLIDE = 62,  \n\tPED_FLAG_DEAD = 71,  \n        PED_FLAG_IS_SNIPER_SCOPE_ACTIVE = 72,  \n\tPED_FLAG_SUPER_DEAD = 73,  \n        _PED_FLAG_IS_IN_AIR = 76,  \n\tPED_FLAG_IS_AIMING = 78,  \n\tPED_FLAG_DRUNK = 100,  \n        _PED_FLAG_IS_NOT_RAGDOLL_AND_NOT_PLAYING_ANIM = 104,  \n        PED_FLAG_NO_PLAYER_MELEE = 122,  \n\tPED_FLAG_NM_MESSAGE_466 = 125,  \n\tPED_FLAG_INJURED_LIMP = 166,  \n\tPED_FLAG_INJURED_LIMP_2 = 170,  \n\t_PED_FLAG_DISABLE_SHUFFLING_TO_DRIVER_SEAT = 184,  \n\tPED_FLAG_INJURED_DOWN = 187,  \n\tPED_FLAG_SHRINK = 223,  \n        PED_FLAG_MELEE_COMBAT = 224,  \n        _PED_FLAG_IS_ON_STAIRS = 253,  \n        _PED_FLAG_HAS_ONE_LEG_ON_GROUND = 276,  \n\tPED_FLAG_NO_WRITHE = 281,  \n\tPED_FLAG_FREEZE = 292,  \n\tPED_FLAG_IS_STILL = 301,  \n        PED_FLAG_NO_PED_MELEE = 314,  \n        _PED_SWITCHING_WEAPON = 331,  \n\tPED_FLAG_ALPHA = 410,  \n\t_PED_FLAG_DISABLE_STARTING_VEH_ENGINE = 429,  \n};  \n(*) When flagId is set to 33 and the bool value to true, peds will die by starting ragdoll, so you should set this flag to false when you resurrect a ped.  \nWhen flagId is set to 62 and the boolvalue to false this happens: Ped is taken out of vehicle and can't get back in when jacking their empty vehicle. If in a plane it falls from the sky and crashes. Sometimes peds vehicle continue to drive the route without its driver who's running after.   \n(*)  \nJUMPING CHANGES  60,61,104 TO FALSE  \nBEING ON WATER CHANGES 60,61 TO FALSE AND 65,66,168 TO TRUE  \nFALLING CHANGES 60,61,104,276 TO FALSE AND TO 76 TRUE  \nDYING CHANGES 60,61,104,276* TO FALSE AND (NONE) TO TRUE  \nDYING MAKES 60,61,104 TO FALSE  \nBEING IN A CAR CHANGES 60,79,104 TO FALSE AND 62 TO TRUE  \n(*)Maximum value for flagId is 0x1AA (426) in b944.  \nID 0xF0 (240) appears to be a special flag which is handled different compared to the others IDs.  \n"
	},
	"SetPedCoordsKeepVehicle()": {
	  "prefix": "SetPedCoordsKeepVehicle",
	  "body": [
		"SetPedCoordsKeepVehicle(${1:Ped ped}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nteleports ped to coords along with the vehicle ped is in  \n"
	},
	"SetPedCowerHash()": {
	  "prefix": "SetPedCowerHash",
	  "body": [
		"SetPedCowerHash(${1:Ped ped}, ${2:char* p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np1: Only \"CODE_HUMAN_STAND_COWER\" found in the b617d scripts.  \n"
	},
	"SetPedCoordsNoGang()": {
	  "prefix": "SetPedCoordsNoGang",
	  "body": [
		"SetPedCoordsNoGang(${1:Ped ped}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedDefaultComponentVariation()": {
	  "prefix": "SetPedDefaultComponentVariation",
	  "body": [
		"SetPedDefaultComponentVariation(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSets Ped Default Clothes  \n"
	},
	"ApplyPedOverlay()": {
	  "prefix": "ApplyPedOverlay",
	  "body": "ApplyPedOverlay",
	  "description": "OLD NAME, PLEASE USE SetPedDecoration INSTEAD!"
	},
	"SetPedDecoration()": {
	  "prefix": "SetPedDecoration",
	  "body": [
		"SetPedDecoration(${1:Ped ped}, ${2:Hash collection}, ${3:Hash overlay})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nApplies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.  \ncollection - PedDecorationCollection filename hash  \noverlay - Item name hash  \nExample:  \nEntry inside \"mpbeach_overlays.xml\" -  \n<Item>  \n  <uvPos x=\"0.500000\" y=\"0.500000\" />  \n  <scale x=\"0.600000\" y=\"0.500000\" />  \n  <rotation value=\"0.000000\" />  \n  <nameHash>FM_Hair_Fuzz</nameHash>  \n  <txdHash>mp_hair_fuzz</txdHash>  \n  <txtHash>mp_hair_fuzz</txtHash>  \n  <zone>ZONE_HEAD</zone>  \n  <type>TYPE_TATTOO</type>  \n  <faction>FM</faction>  \n  <garment>All</garment>  \n  <gender>GENDER_DONTCARE</gender>  \n  <award />  \n  <awardLevel />  \n</Item>  \nCode:  \nPED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"mpbeach_overlays\"), GAMEPLAY::GET_HASH_KEY(\"fm_hair_fuzz\"))  \n\nOld name: ApplyPedOverlay"
	},
	"SetPedDefensiveAreaAttachedToPed()": {
	  "prefix": "SetPedDefensiveAreaAttachedToPed",
	  "body": [
		"SetPedDefensiveAreaAttachedToPed(${1:Ped ped}, ${2:Ped attachPed}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:BOOL p9}, ${11:BOOL p10})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedDefensiveAreaDirection()": {
	  "prefix": "SetPedDefensiveAreaDirection",
	  "body": [
		"SetPedDefensiveAreaDirection(${1:Ped ped}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0xf9b8f91aad3b953e()": {
	  "prefix": "N_0xf9b8f91aad3b953e",
	  "body": "N_0xf9b8f91aad3b953e",
	  "description": "OLD NAME, PLEASE USE SetPedDefensiveSphereAttachedToPed INSTEAD!"
	},
	"SetPedDefensiveSphereAttachedToPed()": {
	  "prefix": "SetPedDefensiveSphereAttachedToPed",
	  "body": [
		"SetPedDefensiveSphereAttachedToPed(${1:Ped ped}, ${2:Ped target}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float radius}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0xf9b8f91aad3b953e"
	},
	"SetPedDiesInSinkingVehicle()": {
	  "prefix": "SetPedDiesInSinkingVehicle",
	  "body": [
		"SetPedDiesInSinkingVehicle(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedDensityMultiplierThisFrame()": {
	  "prefix": "SetPedDensityMultiplierThisFrame",
	  "body": [
		"SetPedDensityMultiplierThisFrame(${1:float multiplier})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\n• Usage  \n→ Use this native inside a looped function.  \n→ Values:  \n→ 0.0 = no peds on streets  \n→ 1.0 = normal peds on streets  \n"
	},
	"SetPedDesiredHeading()": {
	  "prefix": "SetPedDesiredHeading",
	  "body": [
		"SetPedDesiredHeading(${1:Ped ped}, ${2:float heading})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedDiesInWater()": {
	  "prefix": "SetPedDiesInWater",
	  "body": [
		"SetPedDiesInWater(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedDiesInVehicle()": {
	  "prefix": "SetPedDiesInVehicle",
	  "body": [
		"SetPedDiesInVehicle(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedDiesWhenInjured()": {
	  "prefix": "SetPedDiesWhenInjured",
	  "body": [
		"SetPedDiesWhenInjured(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"SetPedDiesInstantlyInWater()": {
	  "prefix": "SetPedDiesInstantlyInWater",
	  "body": [
		"SetPedDiesInstantlyInWater(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedEnableWeaponBlocking()": {
	  "prefix": "SetPedEnableWeaponBlocking",
	  "body": [
		"SetPedEnableWeaponBlocking(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"SetPedEnveffScale()": {
	  "prefix": "SetPedEnveffScale",
	  "body": [
		"SetPedEnveffScale(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nValues look to be between 0.0 and 1.0  \nFrom decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0  \nYou are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.  \n"
	},
	"SetPedDriveByClipsetOverride()": {
	  "prefix": "SetPedDriveByClipsetOverride",
	  "body": [
		"SetPedDriveByClipsetOverride(${1:Ped ped}, ${2:char* clipset})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedDucking()": {
	  "prefix": "SetPedDucking",
	  "body": [
		"SetPedDucking(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThis is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.  \n"
	},
	"SetPedEyeColor()": {
	  "prefix": "SetPedEyeColor",
	  "body": [
		"SetPedEyeColor(${1:Ped ped}, ${2:int index})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nUsed for freemode (online) characters.  \nFor some reason, the scripts use a rounded float for the index.  \n"
	},
	"SetPedFaceFeature()": {
	  "prefix": "SetPedFaceFeature",
	  "body": [
		"SetPedFaceFeature(${1:Ped ped}, ${2:int index}, ${3:float scale})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.  \nIndex can be 0   \nEdit:---->Thanks to the first user.  \n    Enum Face_Feature  \n        Nose_Width  \n        Nose_Peak_Hight  \n        Nose_Peak_Lenght  \n        Nose_Bone_High  \n        Nose_Peak_Lowering  \n        Nose_Bone_Twist  \n        EyeBrown_High  \n        EyeBrown_Forward  \n        Cheeks_Bone_High  \n        Cheeks_Bone_Width  \n        Cheeks_Width  \n        Eyes_Openning  \n        Lips_Thickness  \n        Jaw_Bone_Width 'Bone size to sides  \n        Jaw_Bone_Back_Lenght 'Bone size to back  \n        Chimp_Bone_Lowering 'Go Down  \n        Chimp_Bone_Lenght 'Go forward  \n        Chimp_Bone_Width  \n        Chimp_Hole  \n        Neck_Thikness  \n    End Enum  \nExample in VB.Net  \nPublic Shared Sub SET_PED_FACE_FEATURE(FreemodePed As Ped, Index As Face_Feature, Scale As Single)  \nNative.Function.Call(Native.Hash._SET_PED_FACE_FEATURE, FreemodePed, Index, Scale)  \nEnd Sub  \n"
	},
	"SetPedFiringPattern()": {
	  "prefix": "SetPedFiringPattern",
	  "body": [
		"SetPedFiringPattern(${1:Ped ped}, ${2:Hash patternHash})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nFIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )  \nFIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )  \nFIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )  \nFIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )  \nFIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )  \nFIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )  \nFIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )  \nFIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )  \nFIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )  \nFIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )  \nFIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )  \nFIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )  \nFIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )  \nFIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )  \nFIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )  \nFIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )  \nif anyone is interested firing pattern info: pastebin.com/Px036isB  \n"
	},
	"N_0x5619bfa07cfd7833()": {
	  "prefix": "N_0x5619bfa07cfd7833",
	  "body": "N_0x5619bfa07cfd7833",
	  "description": "OLD NAME, PLEASE USE SetPedFacialDecoration INSTEAD!"
	},
	"SetPedFacialDecoration()": {
	  "prefix": "SetPedFacialDecoration",
	  "body": [
		"SetPedFacialDecoration(${1:Ped ped}, ${2:Hash collection}, ${3:Hash overlay})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nConsole Hash: 0x8CD3E487  \n\nOld name: N_0x5619bfa07cfd7833"
	},
	"SetPedFleeAttributes()": {
	  "prefix": "SetPedFleeAttributes",
	  "body": [
		"SetPedFleeAttributes(${1:Ped ped}, ${2:int attributes}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nBool probably has something to do with vehicles, maybe if the ped can use vehicle to flee?  \nValues used as attributes are those in sequence of powers of two, 1, 2, 4, 8, 16, 32, 64.... 65536.  \njedijosh920: Setting attribute \"2\" to true will make the ped steal a vehicle.  \n"
	},
	"SetPedGeneratesDeadBodyEvents()": {
	  "prefix": "SetPedGeneratesDeadBodyEvents",
	  "body": [
		"SetPedGeneratesDeadBodyEvents(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedGestureGroup()": {
	  "prefix": "SetPedGestureGroup",
	  "body": [
		"SetPedGestureGroup(${1:Ped ped}, ${2:char* animGroupGesture})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nFrom the scripts:  \nPED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),  \n\"ANIM_GROUP_GESTURE_MISS_FRA0\");  \nPED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),  \n\"ANIM_GROUP_GESTURE_MISS_DocksSetup1\");  \n"
	},
	"SetPedGetOutUpsideDownVehicle()": {
	  "prefix": "SetPedGetOutUpsideDownVehicle",
	  "body": [
		"SetPedGetOutUpsideDownVehicle(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedGravity()": {
	  "prefix": "SetPedGravity",
	  "body": [
		"SetPedGravity(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nenable or disable the gravity of a ped  \nExamples:  \nPED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);  \nPED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);  \n"
	},
	"SetPedGroupMemberPassengerIndex()": {
	  "prefix": "SetPedGroupMemberPassengerIndex",
	  "body": [
		"SetPedGroupMemberPassengerIndex(${1:Ped ped}, ${2:int index})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedHairColor()": {
	  "prefix": "SetPedHairColor",
	  "body": [
		"SetPedHairColor(${1:Ped ped}, ${2:int colorID}, ${3:int highlightColorID})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nUsed for freemode (online) characters.  \n"
	},
	"SetPedHeadBlendData()": {
	  "prefix": "SetPedHeadBlendData",
	  "body": [
		"SetPedHeadBlendData(${1:Ped ped}, ${2:int shapeFirstID}, ${3:int shapeSecondID}, ${4:int shapeThirdID}, ${5:int skinFirstID}, ${6:int skinSecondID}, ${7:int skinThirdID}, ${8:float shapeMix}, ${9:float skinMix}, ${10:float thirdMix}, ${11:BOOL isParent})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThe \"shape\" parameters control the shape of the ped's face. The \"skin\" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for \"children\" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.  \nThe IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.  \n!!!Can someone add working example for this???  \ntry this:  \nheadBlendData headData;  \n_GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);  \nSET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond  \n\t, headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);  \nFor more info please refer to this topic.   \ngtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained  \n"
	},
	"SetPedHeadOverlay()": {
	  "prefix": "SetPedHeadOverlay",
	  "body": [
		"SetPedHeadOverlay(${1:Ped ped}, ${2:int overlayID}, ${3:int index}, ${4:float opacity})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.   \noverlayID       Part                  Index, to disable  \n0               Blemishes             0 - 23, 255  \n1               Facial Hair           0 - 28, 255  \n2               Eyebrows              0 - 33, 255  \n3               Ageing                0 - 14, 255  \n4               Makeup                0 - 74, 255  \n5               Blush                 0 - 6, 255  \n6               Complexion            0 - 11, 255  \n7               Sun Damage            0 - 10, 255  \n8               Lipstick              0 - 9, 255  \n9               Moles/Freckles        0 - 17, 255  \n10              Chest Hair            0 - 16, 255  \n11              Body Blemishes        0 - 11, 255  \n12              Add Body Blemishes    0 - 1, 255  \n"
	},
	"SetPedHearingRange()": {
	  "prefix": "SetPedHearingRange",
	  "body": [
		"SetPedHearingRange(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedHeadOverlayColor()": {
	  "prefix": "SetPedHeadOverlayColor",
	  "body": [
		"SetPedHeadOverlayColor(${1:Ped ped}, ${2:int overlayID}, ${3:int colorType}, ${4:int colorID}, ${5:int secondColorID})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nUsed for freemode (online) characters.  \nColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.  \nCalled after SET_PED_HEAD_OVERLAY().  \n"
	},
	"SetPedHelmet()": {
	  "prefix": "SetPedHelmet",
	  "body": [
		"SetPedHelmet(${1:Ped ped}, ${2:BOOL canWearHelmet})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedHelmetFlag()": {
	  "prefix": "SetPedHelmetFlag",
	  "body": [
		"SetPedHelmetFlag(${1:Ped ped}, ${2:int helmetFlag})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedHelmetPropIndex()": {
	  "prefix": "SetPedHelmetPropIndex",
	  "body": [
		"SetPedHelmetPropIndex(${1:Ped ped}, ${2:int propIndex})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"SetPedHelmetTextureIndex()": {
	  "prefix": "SetPedHelmetTextureIndex",
	  "body": [
		"SetPedHelmetTextureIndex(${1:Ped ped}, ${2:int textureIndex})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x4e90d746056e273d()": {
	  "prefix": "N_0x4e90d746056e273d",
	  "body": "N_0x4e90d746056e273d",
	  "description": "OLD NAME, PLEASE USE SetPedIlluminatedClothingGlowIntensity INSTEAD!"
	},
	"SetPedIlluminatedClothingGlowIntensity()": {
	  "prefix": "SetPedIlluminatedClothingGlowIntensity",
	  "body": [
		"SetPedIlluminatedClothingGlowIntensity(${1:Ped ped}, ${2:float intensity})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nThis native sets the glow intensity of illuminated clothing items.\n\nThis native does **NOT** need to be executed every tick.\nThis native is **NOT** synced with other connected players, you will have to set the opacity on the ped on all clients individually.\n\nGlow intensity is a value between `0.0` and `1.0`.\n\nIn some older decompiled scripts this is known as `_SET_PED_REFLECTION_INTENSITY`.\nSince there's no joaat hash for this, I find `_SET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY` more descriptive than `_SET_PED_REFLECTION_INTENSITY`.\n\nUse [`GetPedIlluminatedClothingGlowIntensity`](#_0x1461B28A06717D68) to get the illuminated clothing glow intensity of a specific ped.\n\nIntensity: `1.0`:\n![](https://www.vespura.com/hi/i/2018-11-13_17-03_c2e23_229.png)\n\nIntensity: `0.0`:\n![](https://www.vespura.com/hi/i/2018-11-13_17-03_35c33_230.png)\n\n**Examples code result**:\n![](https://www.vespura.com/hi/i/2018-11-13_17-11_10199_232.gif)\n\n(Direct link if embed doesn't work: [here](https://www.vespura.com/hi/i/2018-11-13_17-11_10199_232.gif))\nOld name: N_0x4e90d746056e273d"
	},
	"SetPedIdRange()": {
	  "prefix": "SetPedIdRange",
	  "body": [
		"SetPedIdRange(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedInVehicleContext()": {
	  "prefix": "SetPedInVehicleContext",
	  "body": [
		"SetPedInVehicleContext(${1:Ped ped}, ${2:Hash context})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nPED::SET_PED_IN_VEHICLE_CONTEXT(l_128, GAMEPLAY::GET_HASH_KEY(\"MINI_PROSTITUTE_LOW_PASSENGER\"));  \nPED::SET_PED_IN_VEHICLE_CONTEXT(l_128, GAMEPLAY::GET_HASH_KEY(\"MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER\"));  \nPED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, GAMEPLAY::GET_HASH_KEY(\"MISS_FAMILY1_JIMMY_SIT\"));  \nPED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, GAMEPLAY::GET_HASH_KEY(\"MISS_FAMILY1_JIMMY_SIT_REAR\"));  \nPED::SET_PED_IN_VEHICLE_CONTEXT(l_95, GAMEPLAY::GET_HASH_KEY(\"MISS_FAMILY2_JIMMY_BICYCLE\"));  \nPED::SET_PED_IN_VEHICLE_CONTEXT(num3, GAMEPLAY::GET_HASH_KEY(\"MISSFBI2_MICHAEL_DRIVEBY\"));  \nPED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"MISS_ARMENIAN3_FRANKLIN_TENSE\"));  \nPED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"MISSFBI5_TREVOR_DRIVING\"));  \n"
	},
	"SetPedIntoVehicle()": {
	  "prefix": "SetPedIntoVehicle",
	  "body": [
		"SetPedIntoVehicle(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int seatIndex})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nPed: The ped to warp.  \nvehicle: The vehicle to warp the ped into.  \nSeat_Index: [-1 is driver seat, -2 first free passenger seat]  \nMoreinfo of Seat Index  \nDriverSeat = -1  \nPassenger = 0  \nLeft Rear = 1  \nRightRear = 2  \n"
	},
	"SetPedKeepTask()": {
	  "prefix": "SetPedKeepTask",
	  "body": [
		"SetPedKeepTask(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedLegIkMode()": {
	  "prefix": "SetPedLegIkMode",
	  "body": [
		"SetPedLegIkMode(${1:Ped ped}, ${2:int mode})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\n\"IK\" stands for \"Inverse kinematics.\" I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1  \n"
	},
	"SetPedMaxHealth()": {
	  "prefix": "SetPedMaxHealth",
	  "body": [
		"SetPedMaxHealth(${1:Ped ped}, ${2:int value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nsets the maximum health of a ped  \nI think it's never been used in any script  \n"
	},
	"SetPedLodMultiplier()": {
	  "prefix": "SetPedLodMultiplier",
	  "body": [
		"SetPedLodMultiplier(${1:Ped ped}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMaxTimeInWater()": {
	  "prefix": "SetPedMaxTimeInWater",
	  "body": [
		"SetPedMaxTimeInWater(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMaxTimeUnderwater()": {
	  "prefix": "SetPedMaxTimeUnderwater",
	  "body": [
		"SetPedMaxTimeUnderwater(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMaxMoveBlendRatio()": {
	  "prefix": "SetPedMaxMoveBlendRatio",
	  "body": [
		"SetPedMaxMoveBlendRatio(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMinGroundTimeForStungun()": {
	  "prefix": "SetPedMinGroundTimeForStungun",
	  "body": [
		"SetPedMinGroundTimeForStungun(${1:Ped ped}, ${2:int ms})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nPed will stay on the ground after being stunned for at lest ms time. (in milliseconds)  \n"
	},
	"SetPedModelIsSuppressed()": {
	  "prefix": "SetPedModelIsSuppressed",
	  "body": [
		"SetPedModelIsSuppressed(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMinMoveBlendRatio()": {
	  "prefix": "SetPedMinMoveBlendRatio",
	  "body": [
		"SetPedMinMoveBlendRatio(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMoney()": {
	  "prefix": "SetPedMoney",
	  "body": [
		"SetPedMoney(${1:Ped ped}, ${2:int amount})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nMaximum possible amount of money on MP is 2000. ~JX  \n-----------------------------------------------------------------------------  \nMaximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.  \n"
	},
	"SetPedMotionBlur()": {
	  "prefix": "SetPedMotionBlur",
	  "body": [
		"SetPedMotionBlur(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMoveAnimsBlendOut()": {
	  "prefix": "SetPedMoveAnimsBlendOut",
	  "body": [
		"SetPedMoveAnimsBlendOut(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedMoveRateOverride()": {
	  "prefix": "SetPedMoveRateOverride",
	  "body": [
		"SetPedMoveRateOverride(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nMin: 0.00  \nMax: 10.00  \nCan be used in combo with fast run cheat.  \nWhen value is set to 10.00:  \nSprinting without fast run cheat: 66 m/s  \nSprinting with fast run cheat: 77 m/s  \nNeeds to be looped!  \nNote: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.  \n"
	},
	"SetPedMovementClipset()": {
	  "prefix": "SetPedMovementClipset",
	  "body": [
		"SetPedMovementClipset(${1:Ped ped}, ${2:char* clipSet}, ${3:float p2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np2 is usually 1.0f  \nEDIT 12/24/16:   \np2 does absolutely nothing no matter what the value is.   \nEDIT 08/16/17:  \np2 is the time for a smooth changing to the new clipset.  \nList of movement clipsets:  \nThanks to elsewhat for list.  \n \"ANIM_GROUP_MOVE_BALLISTIC\"  \n \"ANIM_GROUP_MOVE_LEMAR_ALLEY\"  \n \"clipset@move@trash_fast_turn\"  \n \"FEMALE_FAST_RUNNER\"  \n \"missfbi4prepp1_garbageman\"  \n \"move_characters@franklin@fire\"  \n \"move_characters@Jimmy@slow@\"  \n \"move_characters@michael@fire\"  \n \"move_f@flee@a\"  \n \"move_f@scared\"  \n \"move_f@sexy@a\"  \n \"move_heist_lester\"  \n \"move_injured_generic\"  \n \"move_lester_CaneUp\"  \n \"move_m@bag\"  \n \"MOVE_M@BAIL_BOND_NOT_TAZERED\"  \n \"MOVE_M@BAIL_BOND_TAZERED\"  \n \"move_m@brave\"  \n \"move_m@casual@d\"  \n \"move_m@drunk@moderatedrunk\"  \n \"MOVE_M@DRUNK@MODERATEDRUNK\"  \n \"MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP\"  \n \"MOVE_M@DRUNK@SLIGHTLYDRUNK\"  \n \"MOVE_M@DRUNK@VERYDRUNK\"  \n \"move_m@fire\"  \n \"move_m@gangster@var_e\"  \n \"move_m@gangster@var_f\"  \n \"move_m@gangster@var_i\"  \n \"move_m@JOG@\"  \n \"MOVE_M@PRISON_GAURD\"  \n \"MOVE_P_M_ONE\"  \n \"MOVE_P_M_ONE_BRIEFCASE\"  \n \"move_p_m_zero_janitor\"  \n \"move_p_m_zero_slow\"  \n \"move_ped_bucket\"  \n \"move_ped_crouched\"  \n \"move_ped_mop\"  \n \"MOVE_M@FEMME@\"  \n \"MOVE_F@FEMME@\"  \n \"MOVE_M@GANGSTER@NG\"  \n \"MOVE_F@GANGSTER@NG\"  \n \"MOVE_M@POSH@\"  \n \"MOVE_F@POSH@\"  \n \"MOVE_M@TOUGH_GUY@\"  \n \"MOVE_F@TOUGH_GUY@\"  \n~ NotCrunchyTaco  \n"
	},
	"SetPedNameDebug()": {
	  "prefix": "SetPedNameDebug",
	  "body": [
		"SetPedNameDebug(${1:Ped ped}, ${2:char* name})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n*untested but char *name could also be a hash for a localized string  \n"
	},
	"SetPedNeverLeavesGroup()": {
	  "prefix": "SetPedNeverLeavesGroup",
	  "body": [
		"SetPedNeverLeavesGroup(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedNonCreationArea()": {
	  "prefix": "SetPedNonCreationArea",
	  "body": [
		"SetPedNonCreationArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThe distance between these points, is the diagonal of a box (remember it's 3D).  \n"
	},
	"SetPedParachuteTintIndex()": {
	  "prefix": "SetPedParachuteTintIndex",
	  "body": [
		"SetPedParachuteTintIndex(${1:Ped ped}, ${2:int tintIndex})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedPinnedDown()": {
	  "prefix": "SetPedPinnedDown",
	  "body": [
		"SetPedPinnedDown(${1:Ped ped}, ${2:BOOL pinned}, ${3:int p2})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n\np2 could be time. Only example in the decompiled scripts uses it as -1.  \n"
	},
	"SetPedPlaysHeadOnHornAnimWhenDiesInVehicle()": {
	  "prefix": "SetPedPlaysHeadOnHornAnimWhenDiesInVehicle",
	  "body": [
		"SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n**This native does absolutely nothing, just a nullsub**\n\n\nPoints to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.  \n"
	},
	"N_0x8421eb4da7e391b9()": {
	  "prefix": "N_0x8421eb4da7e391b9",
	  "body": "N_0x8421eb4da7e391b9",
	  "description": "OLD NAME, PLEASE USE SetPedPreferredCoverSet INSTEAD!"
	},
	"SetPedPreferredCoverSet()": {
	  "prefix": "SetPedPreferredCoverSet",
	  "body": [
		"SetPedPreferredCoverSet(${1:Ped ped}, ${2:Any itemSet})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0x8421eb4da7e391b9"
	},
	"SetPedPropIndex()": {
	  "prefix": "SetPedPropIndex",
	  "body": [
		"SetPedPropIndex(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int textureId}, ${5:BOOL attach})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nThis native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model. \n\n### MP Freemode list of props\n\n**0**: Hat  \n**1**: Glass  \n**2**: Ear  \n**6**: Watch  \n**7**: Bracelet  \n\n### Related and useful natives\n\n[GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#_0x5FAF9754E789FB47)  \n[GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#_0xA6E7F1CEB523E171)  \n\n[List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples"
	},
	"SetPedPrimaryLookat()": {
	  "prefix": "SetPedPrimaryLookat",
	  "body": [
		"SetPedPrimaryLookat(${1:Ped ped}, ${2:Ped lookAt})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThis is only called once in the scripts.  \nsub_1CD9(&l_49, 0, getElem(3, &l_34, 4), \"MICHAEL\", 0, 1);  \n                    sub_1CA8(\"WORLD_HUMAN_SMOKING\", 2);  \n                    PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());  \n"
	},
	"N_0x26695ec767728d84()": {
	  "prefix": "N_0x26695ec767728d84",
	  "body": "N_0x26695ec767728d84",
	  "description": "OLD NAME, PLEASE USE SetPedRagdollBlockingFlags INSTEAD!"
	},
	"SetPedRagdollBlockingFlags()": {
	  "prefix": "SetPedRagdollBlockingFlags",
	  "body": [
		"SetPedRagdollBlockingFlags(${1:Ped ped}, ${2:int flags})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nWorks for both player and peds, but some flags don't seem to work for the player (1, for example)  \n1 - Blocks ragdolling when shot.  \n2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.  \n4 - Blocks ragdolling when set on fire.  \n-----------------------------------------------------------------------  \nThere seem to be 26 flags  \n\nOld name: N_0x26695ec767728d84"
	},
	"SetPedRagdollOnCollision()": {
	  "prefix": "SetPedRagdollOnCollision",
	  "body": [
		"SetPedRagdollOnCollision(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nCauses Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.  \n"
	},
	"SetPedRagdollForceFall()": {
	  "prefix": "SetPedRagdollForceFall",
	  "body": [
		"SetPedRagdollForceFall(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: Any\n"
	},
	"SetPedRandomComponentVariation()": {
	  "prefix": "SetPedRandomComponentVariation",
	  "body": [
		"SetPedRandomComponentVariation(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np1 is always false in R* scripts.  \nQuick disassembly seems to indicate that p1 is unused.  \nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"SetPedRelationshipGroupDefaultHash()": {
	  "prefix": "SetPedRelationshipGroupDefaultHash",
	  "body": [
		"SetPedRelationshipGroupDefaultHash(${1:Ped ped}, ${2:Hash hash})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedRandomProps()": {
	  "prefix": "SetPedRandomProps",
	  "body": [
		"SetPedRandomProps(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nList of component/props ID  \ngtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html  \n"
	},
	"SetPedRelationshipGroupHash()": {
	  "prefix": "SetPedRelationshipGroupHash",
	  "body": [
		"SetPedRelationshipGroupHash(${1:Ped ped}, ${2:Hash hash})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedReserveParachuteTintIndex()": {
	  "prefix": "SetPedReserveParachuteTintIndex",
	  "body": [
		"SetPedReserveParachuteTintIndex(${1:Ped ped}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedResetFlag()": {
	  "prefix": "SetPedResetFlag",
	  "body": [
		"SetPedResetFlag(${1:Ped ped}, ${2:int flagId}, ${3:BOOL doReset})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nPED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);  \n"
	},
	"N_0x36c6984c3ed0c911()": {
	  "prefix": "N_0x36c6984c3ed0c911",
	  "body": "N_0x36c6984c3ed0c911",
	  "description": "OLD NAME, PLEASE USE SetPedScubaGearVariation INSTEAD!"
	},
	"SetPedScubaGearVariation()": {
	  "prefix": "SetPedScubaGearVariation",
	  "body": [
		"SetPedScubaGearVariation(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\nThis native sets a scuba mask for freemode models and an oxygen bottle for player_\\* models.\nIt works on freemode and player_\\* models.\nOld name: N_0x36c6984c3ed0c911"
	},
	"SetPedSeeingRange()": {
	  "prefix": "SetPedSeeingRange",
	  "body": [
		"SetPedSeeingRange(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedShootRate()": {
	  "prefix": "SetPedShootRate",
	  "body": [
		"SetPedShootRate(${1:Ped ped}, ${2:int shootRate})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nshootRate 0-1000  \n"
	},
	"SetPedShootsAtCoord()": {
	  "prefix": "SetPedShootsAtCoord",
	  "body": [
		"SetPedShootsAtCoord(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedSphereDefensiveArea()": {
	  "prefix": "SetPedSphereDefensiveArea",
	  "body": [
		"SetPedSphereDefensiveArea(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:BOOL p5}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedStealthMovement()": {
	  "prefix": "SetPedStealthMovement",
	  "body": [
		"SetPedStealthMovement(${1:Ped ped}, ${2:BOOL p1}, ${3:char* action})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np1 is usually 0 in the scripts. action is either 0 or a pointer to \"DEFAULT_ACTION\".  \n"
	},
	"SetPedStayInVehicleWhenJacked()": {
	  "prefix": "SetPedStayInVehicleWhenJacked",
	  "body": [
		"SetPedStayInVehicleWhenJacked(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedSteersAroundObjects()": {
	  "prefix": "SetPedSteersAroundObjects",
	  "body": [
		"SetPedSteersAroundObjects(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedSteersAroundPeds()": {
	  "prefix": "SetPedSteersAroundPeds",
	  "body": [
		"SetPedSteersAroundPeds(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedSteersAroundVehicles()": {
	  "prefix": "SetPedSteersAroundVehicles",
	  "body": [
		"SetPedSteersAroundVehicles(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedStrafeClipset()": {
	  "prefix": "SetPedStrafeClipset",
	  "body": [
		"SetPedStrafeClipset(${1:Ped ped}, ${2:char* clipSet})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedSuffersCriticalHits()": {
	  "prefix": "SetPedSuffersCriticalHits",
	  "body": [
		"SetPedSuffersCriticalHits(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nped cannot be headshot if this is set to false  \n"
	},
	"SetPedSweat()": {
	  "prefix": "SetPedSweat",
	  "body": [
		"SetPedSweat(${1:Ped ped}, ${2:float sweat})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSweat is set to 100.0 or 0.0 in the decompiled scripts.  \n"
	},
	"SetPedTargetLossResponse()": {
	  "prefix": "SetPedTargetLossResponse",
	  "body": [
		"SetPedTargetLossResponse(${1:Ped ped}, ${2:int responseType})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOnly 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.  \n"
	},
	"SetPedToInformRespectedFriends()": {
	  "prefix": "SetPedToInformRespectedFriends",
	  "body": [
		"SetPedToInformRespectedFriends(${1:Ped ped}, ${2:float radius}, ${3:int maxFriends})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedToLoadCover()": {
	  "prefix": "SetPedToLoadCover",
	  "body": [
		"SetPedToLoadCover(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedToRagdoll()": {
	  "prefix": "SetPedToRagdoll",
	  "body": [
		"SetPedToRagdoll(${1:Ped ped}, ${2:int time1}, ${3:int time2}, ${4:int ragdollType}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\ntime1- Time Ped is in ragdoll mode(ms)  \ntime2- Unknown time, in milliseconds  \nragdollType-  \n0 : Normal ragdoll  \n1 : Falls with stiff legs/body  \n2 : Narrow leg stumble(may not fall)  \n3 : Wide leg stumble(may not fall)  \np4, p5, p6- No idea. In R*'s scripts they are usually either \"true, true, false\" or \"false, false, false\".  \nEDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob  \nEdit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.  \n"
	},
	"SetPedToRagdollWithFall()": {
	  "prefix": "SetPedToRagdollWithFall",
	  "body": [
		"SetPedToRagdollWithFall(${1:Ped ped}, ${2:int time}, ${3:int p2}, ${4:int ragdollType}, ${5:float x}, ${6:float y}, ${7:float z}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float p11}, ${13:float p12}, ${14:float p13})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nReturn variable is never used in R*'s scripts.  \nNot sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.  \nx, y, and z are coordinates, most likely to where the ped will fall.  \np7 is probably the force of the fall, but untested, so I left the variable name the same.  \np8 to p13 are always 0f in R*'s scripts.  \n(Simplified) Example of the usage of the function from R*'s scripts:  \nped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);  \n"
	},
	"SetPedUsingActionMode()": {
	  "prefix": "SetPedUsingActionMode",
	  "body": [
		"SetPedUsingActionMode(${1:Ped ped}, ${2:BOOL p1}, ${3:Any p2}, ${4:char* action})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np2 is usually -1 in the scripts. action is either 0 or \"DEFAULT_ACTION\".  \n"
	},
	"SetPedVisualFieldCenterAngle()": {
	  "prefix": "SetPedVisualFieldCenterAngle",
	  "body": [
		"SetPedVisualFieldCenterAngle(${1:Ped ped}, ${2:float angle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedVisualFieldMaxAngle()": {
	  "prefix": "SetPedVisualFieldMaxAngle",
	  "body": [
		"SetPedVisualFieldMaxAngle(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedVisualFieldMaxElevationAngle()": {
	  "prefix": "SetPedVisualFieldMaxElevationAngle",
	  "body": [
		"SetPedVisualFieldMaxElevationAngle(${1:Ped ped}, ${2:float angle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThis native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.  \n"
	},
	"SetPedVisualFieldMinAngle()": {
	  "prefix": "SetPedVisualFieldMinAngle",
	  "body": [
		"SetPedVisualFieldMinAngle(${1:Ped ped}, ${2:float value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedVisualFieldPeripheralRange()": {
	  "prefix": "SetPedVisualFieldPeripheralRange",
	  "body": [
		"SetPedVisualFieldPeripheralRange(${1:Ped ped}, ${2:float range})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetPedVisualFieldMinElevationAngle()": {
	  "prefix": "SetPedVisualFieldMinElevationAngle",
	  "body": [
		"SetPedVisualFieldMinElevationAngle(${1:Ped ped}, ${2:float angle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nThis native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.  \n"
	},
	"SetPedWetnessEnabledThisFrame()": {
	  "prefix": "SetPedWetnessEnabledThisFrame",
	  "body": [
		"SetPedWetnessEnabledThisFrame(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\ncombined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function  \n"
	},
	"SetPedWetnessHeight()": {
	  "prefix": "SetPedWetnessHeight",
	  "body": [
		"SetPedWetnessHeight(${1:Ped ped}, ${2:float height})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nIt adds the wetness level to the player clothing/outfit. As if player just got out from water surface.  \n"
	},
	"SetPedWeaponMovementClipset()": {
	  "prefix": "SetPedWeaponMovementClipset",
	  "body": [
		"SetPedWeaponMovementClipset(${1:Ped ped}, ${2:char* clipSet})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetRelationshipBetweenGroups()": {
	  "prefix": "SetRelationshipBetweenGroups",
	  "body": [
		"SetRelationshipBetweenGroups(${1:int relationship}, ${2:Hash group1}, ${3:Hash group2})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSets the relationship between two groups. This should be called twice (once for each group).  \nRelationship types:  \n0 = Companion  \n1 = Respect  \n2 = Like  \n3 = Neutral  \n4 = Dislike  \n5 = Hate  \n255 = Pedestrians  \nExample:  \nPED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);  \nPED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);  \n"
	},
	"SetScenarioPedDensityMultiplierThisFrame()": {
	  "prefix": "SetScenarioPedDensityMultiplierThisFrame",
	  "body": [
		"SetScenarioPedDensityMultiplierThisFrame(${1:float p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\np0 and p1 are always the same  \n"
	},
	"SetScenarioPedsSpawnInSphereArea()": {
	  "prefix": "SetScenarioPedsSpawnInSphereArea",
	  "body": [
		"SetScenarioPedsSpawnInSphereArea(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range}, ${5:int p4})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetScriptedAnimSeatOffset()": {
	  "prefix": "SetScriptedAnimSeatOffset",
	  "body": [
		"SetScriptedAnimSeatOffset(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetScenarioPedsToBeReturnedByNextCommand()": {
	  "prefix": "SetScenarioPedsToBeReturnedByNextCommand",
	  "body": [
		"SetScenarioPedsToBeReturnedByNextCommand(${1:BOOL value})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.  \n"
	},
	"SetSynchronizedSceneLooped()": {
	  "prefix": "SetSynchronizedSceneLooped",
	  "body": [
		"SetSynchronizedSceneLooped(${1:int sceneID}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetScriptedConversionCoordThisFrame()": {
	  "prefix": "SetScriptedConversionCoordThisFrame",
	  "body": [
		"SetScriptedConversionCoordThisFrame(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"N_0x394b9cd12435c981()": {
	  "prefix": "N_0x394b9cd12435c981",
	  "body": "N_0x394b9cd12435c981",
	  "description": "OLD NAME, PLEASE USE SetSynchronizedSceneOcclusionPortal INSTEAD!"
	},
	"SetSynchronizedSceneOcclusionPortal()": {
	  "prefix": "SetSynchronizedSceneOcclusionPortal",
	  "body": [
		"SetSynchronizedSceneOcclusionPortal(${1:Any sceneID}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nOld name: N_0x394b9cd12435c981"
	},
	"SetSynchronizedSceneOrigin()": {
	  "prefix": "SetSynchronizedSceneOrigin",
	  "body": [
		"SetSynchronizedSceneOrigin(${1:int sceneID}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float roll}, ${6:float pitch}, ${7:float yaw}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetSynchronizedSceneRate()": {
	  "prefix": "SetSynchronizedSceneRate",
	  "body": [
		"SetSynchronizedSceneRate(${1:int sceneID}, ${2:float rate})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetSynchronizedScenePhase()": {
	  "prefix": "SetSynchronizedScenePhase",
	  "body": [
		"SetSynchronizedScenePhase(${1:int sceneID}, ${2:float phase})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"SetTimeExclusiveDisplayTexture()": {
	  "prefix": "SetTimeExclusiveDisplayTexture",
	  "body": [
		"SetTimeExclusiveDisplayTexture(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nHash collision. Please change back to _0x_  \n"
	},
	"StopAnyPedModelBeingSuppressed()": {
	  "prefix": "StopAnyPedModelBeingSuppressed",
	  "body": [
		"StopAnyPedModelBeingSuppressed()"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"UnregisterPedheadshot()": {
	  "prefix": "UnregisterPedheadshot",
	  "body": [
		"UnregisterPedheadshot(${1:int handle})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\ngtaforums.com/topic/885580-ped-headshotmugshot-txd/  \n"
	},
	"StopPedWeaponFiringWhenDropped()": {
	  "prefix": "StopPedWeaponFiringWhenDropped",
	  "body": [
		"StopPedWeaponFiringWhenDropped(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n"
	},
	"UpdatePedHeadBlendData()": {
	  "prefix": "UpdatePedHeadBlendData",
	  "body": [
		"UpdatePedHeadBlendData(${1:Ped ped}, ${2:float shapeMix}, ${3:float skinMix}, ${4:float thirdMix})"
	  ],
	  "description": "Namespace: PED\nReturns: void\n\nSee SET_PED_HEAD_BLEND_DATA().  \n"
	},
	"WasPedKilledByStealth()": {
	  "prefix": "WasPedKilledByStealth",
	  "body": [
		"WasPedKilledByStealth(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"WasPedKilledByTakedown()": {
	  "prefix": "WasPedKilledByTakedown",
	  "body": [
		"WasPedKilledByTakedown(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n"
	},
	"WasPedSkeletonUpdated()": {
	  "prefix": "WasPedSkeletonUpdated",
	  "body": [
		"WasPedSkeletonUpdated(${1:Ped ped})"
	  ],
	  "description": "Namespace: PED\nReturns: BOOL\n\nDespite this function's name, it simply returns whether the specified handle is a Ped.  \n"
	},
	"ActivatePhysics()": {
	  "prefix": "ActivatePhysics",
	  "body": [
		"ActivatePhysics(${1:Entity entity})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n\nseems to be frequently used with the NETWORK::NET_TO_x natives, particularly with vehicles. It is often the only ROPE:: native in a script.  \n"
	},
	"ApplyImpulseToCloth()": {
	  "prefix": "ApplyImpulseToCloth",
	  "body": [
		"ApplyImpulseToCloth(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float vecX}, ${5:float vecY}, ${6:float vecZ}, ${7:float impulse})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"AddRope()": {
	  "prefix": "AddRope",
	  "body": [
		"AddRope(${1:float x}, ${2:float y}, ${3:float z}, ${4:float rotX}, ${5:float rotY}, ${6:float rotZ}, ${7:float length}, ${8:int ropeType}, ${9:float maxLength}, ${10:float minLength}, ${11:float p10}, ${12:BOOL p11}, ${13:BOOL p12}, ${14:BOOL rigid}, ${15:float p14}, ${16:BOOL breakWhenShot}, ${17:Any* unkPtr})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Object\n\nCreates a rope at the specific position, that extends in the specified direction when not attached to any entities.  \n__  \nAdd_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)  \nWhen attached, Position<vector> does not matter  \nWhen attached, Angle<vector> does not matter  \nRope Type:  \n4 and bellow is a thick rope  \n5 and up are small metal wires  \n0 crashes the game  \nMax_length - Rope is forced to this length, generally best to keep this the same as your rope length.  \nRigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).  \nbreakable - Whether or not shooting the rope will break it.  \nunkPtr - unknown ptr, always 0 in orig scripts  \n__  \nLengths can be calculated like so:  \nfloat distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length  \nNOTES:  \nRope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).  \nRope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.  \n"
	},
	"AttachEntitiesToRope()": {
	  "prefix": "AttachEntitiesToRope",
	  "body": [
		"AttachEntitiesToRope(${1:Object rope}, ${2:Entity ent1}, ${3:Entity ent2}, ${4:float ent1_x}, ${5:float ent1_y}, ${6:float ent1_z}, ${7:float ent2_x}, ${8:float ent2_y}, ${9:float ent2_z}, ${10:float length}, ${11:BOOL p10}, ${12:BOOL p11}, ${13:char* boneName1}, ${14:char* boneName2})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n\nAttaches entity 1 to entity 2.  \n"
	},
	"AttachRopeToEntity()": {
	  "prefix": "AttachRopeToEntity",
	  "body": [
		"AttachRopeToEntity(${1:Object rope}, ${2:Entity entity}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n\nThe position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.  \n"
	},
	"DeleteChildRope()": {
	  "prefix": "DeleteChildRope",
	  "body": [
		"DeleteChildRope(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n"
	},
	"BreakEntityGlass()": {
	  "prefix": "BreakEntityGlass",
	  "body": [
		"BreakEntityGlass(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:Any p9}, ${11:BOOL p10})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"DetachRopeFromEntity()": {
	  "prefix": "DetachRopeFromEntity",
	  "body": [
		"DetachRopeFromEntity(${1:Object rope}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"DeleteRope()": {
	  "prefix": "DeleteRope",
	  "body": [
		"DeleteRope(${1:Object* rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"DoesRopeExist()": {
	  "prefix": "DoesRopeExist",
	  "body": [
		"DoesRopeExist(${1:Object* rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: BOOL\n\nPtr is correct  \n"
	},
	"GetCgoffset()": {
	  "prefix": "GetCgoffset",
	  "body": [
		"GetCgoffset(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Vector3\n"
	},
	"GetRopeLastVertexCoord()": {
	  "prefix": "GetRopeLastVertexCoord",
	  "body": [
		"GetRopeLastVertexCoord(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n"
	},
	"GetRopeLength()": {
	  "prefix": "GetRopeLength",
	  "body": [
		"GetRopeLength(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: float\n\nGet a rope's length.  Can be modified with ROPE_FORCE_LENGTH  \n"
	},
	"GetRopeVertexCoord()": {
	  "prefix": "GetRopeVertexCoord",
	  "body": [
		"GetRopeVertexCoord(${1:Object rope}, ${2:int vertex})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Vector3\n"
	},
	"GetRopeVertexCount()": {
	  "prefix": "GetRopeVertexCount",
	  "body": [
		"GetRopeVertexCount(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: int\n"
	},
	"LoadRopeData()": {
	  "prefix": "LoadRopeData",
	  "body": [
		"LoadRopeData(${1:Object rope}, ${2:char* rope_preset})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n\nRope presets can be found in the gamefiles. One example is \"ropeFamily3\", it is NOT a hash but rather a string.  \n"
	},
	"N_0x0c112765300c7e1e()": {
	  "prefix": "N_0x0c112765300c7e1e",
	  "body": [
		"N_0x0c112765300c7e1e(${1:Any p0})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n"
	},
	"N_0x15f944730c832252()": {
	  "prefix": "N_0x15f944730c832252",
	  "body": [
		"N_0x15f944730c832252(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"N_0x271c9d3aca5d6409()": {
	  "prefix": "N_0x271c9d3aca5d6409",
	  "body": [
		"N_0x271c9d3aca5d6409(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: BOOL\n"
	},
	"N_0x84de3b5fb3e666f0()": {
	  "prefix": "N_0x84de3b5fb3e666f0",
	  "body": [
		"N_0x84de3b5fb3e666f0(${1:Any* p0})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: BOOL\n"
	},
	"N_0x36ccb9be67b970fd()": {
	  "prefix": "N_0x36ccb9be67b970fd",
	  "body": [
		"N_0x36ccb9be67b970fd(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"N_0x9ebd751e5787baf2()": {
	  "prefix": "N_0x9ebd751e5787baf2",
	  "body": [
		"N_0x9ebd751e5787baf2(${1:Any p0})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"N_0xb1b6216ca2e7b55e()": {
	  "prefix": "N_0xb1b6216ca2e7b55e",
	  "body": [
		"N_0xb1b6216ca2e7b55e(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"N_0xb743f735c03d7810()": {
	  "prefix": "N_0xb743f735c03d7810",
	  "body": [
		"N_0xb743f735c03d7810(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"N_0xbc0ce682d4d05650()": {
	  "prefix": "N_0xbc0ce682d4d05650",
	  "body": [
		"N_0xbc0ce682d4d05650(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11}, ${13:Any p12}, ${14:Any p13})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n\nMost likely ROPE_ATTACH_*  \n"
	},
	"N_0xcc6e963682533882()": {
	  "prefix": "N_0xcc6e963682533882",
	  "body": [
		"N_0xcc6e963682533882(${1:Any p0})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n\nRESET_*  \n"
	},
	"N_0xdc57a637a20006ed()": {
	  "prefix": "N_0xdc57a637a20006ed",
	  "body": [
		"N_0xdc57a637a20006ed(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"PinRopeVertex()": {
	  "prefix": "PinRopeVertex",
	  "body": [
		"PinRopeVertex(${1:Object rope}, ${2:int vertex}, ${3:float x}, ${4:float y}, ${5:float z})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"RopeAreTexturesLoaded()": {
	  "prefix": "RopeAreTexturesLoaded",
	  "body": [
		"RopeAreTexturesLoaded()"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: BOOL\n"
	},
	"RopeDrawShadowEnabled()": {
	  "prefix": "RopeDrawShadowEnabled",
	  "body": [
		"RopeDrawShadowEnabled(${1:Object* rope}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"RopeLoadTextures()": {
	  "prefix": "RopeLoadTextures",
	  "body": [
		"RopeLoadTextures()"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n\nLoads rope textures for all ropes in the current scene.  \n"
	},
	"RopeConvertToSimple()": {
	  "prefix": "RopeConvertToSimple",
	  "body": [
		"RopeConvertToSimple(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"RopeForceLength()": {
	  "prefix": "RopeForceLength",
	  "body": [
		"RopeForceLength(${1:Object rope}, ${2:float length})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n\nForces a rope to a certain length.  \n"
	},
	"RopeSetUpdatePinverts()": {
	  "prefix": "RopeSetUpdatePinverts",
	  "body": [
		"RopeSetUpdatePinverts(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"RopeResetLength()": {
	  "prefix": "RopeResetLength",
	  "body": [
		"RopeResetLength(${1:Object rope}, ${2:float length})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n\nReset a rope to a certain length.  \n"
	},
	"SetCgAtBoundcenter()": {
	  "prefix": "SetCgAtBoundcenter",
	  "body": [
		"SetCgAtBoundcenter(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"RopeUnloadTextures()": {
	  "prefix": "RopeUnloadTextures",
	  "body": [
		"RopeUnloadTextures()"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n\nUnloads rope textures for all ropes in the current scene.  \n"
	},
	"SetDamping()": {
	  "prefix": "SetDamping",
	  "body": [
		"SetDamping(${1:Object rope}, ${2:int vertex}, ${3:float value})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"SetCgoffset()": {
	  "prefix": "SetCgoffset",
	  "body": [
		"SetCgoffset(${1:Object rope}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"SetDisableBreaking()": {
	  "prefix": "SetDisableBreaking",
	  "body": [
		"SetDisableBreaking(${1:Object rope}, ${2:BOOL enabled})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n"
	},
	"StartRopeUnwindingFront()": {
	  "prefix": "StartRopeUnwindingFront",
	  "body": [
		"StartRopeUnwindingFront(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"SetDisableFragDamage()": {
	  "prefix": "SetDisableFragDamage",
	  "body": [
		"SetDisableFragDamage(${1:Object object}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n\nsometimes used used with NET_TO_OBJ  \nhash collision last 2 words  \n"
	},
	"StartRopeWinding()": {
	  "prefix": "StartRopeWinding",
	  "body": [
		"StartRopeWinding(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"StopRopeUnwindingFront()": {
	  "prefix": "StopRopeUnwindingFront",
	  "body": [
		"StopRopeUnwindingFront(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"StopRopeWinding()": {
	  "prefix": "StopRopeWinding",
	  "body": [
		"StopRopeWinding(${1:Object rope})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: void\n"
	},
	"UnpinRopeVertex()": {
	  "prefix": "UnpinRopeVertex",
	  "body": [
		"UnpinRopeVertex(${1:Object rope}, ${2:int vertex})"
	  ],
	  "description": "Namespace: PHYSICS\nReturns: Any\n"
	},
	"ArePlayerFlashingStarsAboutToDrop()": {
	  "prefix": "ArePlayerFlashingStarsAboutToDrop",
	  "body": [
		"ArePlayerFlashingStarsAboutToDrop(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"ArePlayerStarsGreyedOut()": {
	  "prefix": "ArePlayerStarsGreyedOut",
	  "body": [
		"ArePlayerStarsGreyedOut(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"AssistedMovementCloseRoute()": {
	  "prefix": "AssistedMovementCloseRoute",
	  "body": [
		"AssistedMovementCloseRoute()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"AssistedMovementFlushRoute()": {
	  "prefix": "AssistedMovementFlushRoute",
	  "body": [
		"AssistedMovementFlushRoute()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"CanPlayerStartMission()": {
	  "prefix": "CanPlayerStartMission",
	  "body": [
		"CanPlayerStartMission(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"CanPedHearPlayer()": {
	  "prefix": "CanPedHearPlayer",
	  "body": [
		"CanPedHearPlayer(${1:Player player}, ${2:Ped ped})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"ChangePlayerPed()": {
	  "prefix": "ChangePlayerPed",
	  "body": [
		"ChangePlayerPed(${1:Player Player}, ${2:Ped ped}, ${3:BOOL b2}, ${4:BOOL b3})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nb2 and/or b3 maybe got something to do with keeping values from the last ped. Both of them set to 1 works great. <br/><br/>Examples from the decompiled scripts:<br/><br/>PLAYER::CHANGE_PLAYER_PED(PLAYER::PLAYER_ID(), l_5C0[4/*14*/], 0, 1);<br/>PLAYER::CHANGE_PLAYER_PED(PLAYER::PLAYER_ID(), a_0[a_0._f7/*1*/], a_2, 0);<br/><br/><br/>===========================================================<br/>The only way I ever got this to work in GTA Online once is by setting both to 0, 0. However, when you switch from your online character to whomever, your character will start walking away 'as if you left the game.' If from there you attempt to call this native once more to switch back to you online ped. You will freeze or if you try changing to another ped. I've tried all posibilities so far.<br/>1, 1 (Freeze), 0, 0(Works Once), 1, 0 & 0, 1 (Freeze). Note of course trying to call this on another online player will crash. Anyone have any idea if implementing a blr within the xex itself on a possible check if it would prevent this freezing?<br/>===========================================================  \n"
	},
	"ClearPlayerHasDamagedAtLeastOneNonAnimalPed()": {
	  "prefix": "ClearPlayerHasDamagedAtLeastOneNonAnimalPed",
	  "body": [
		"ClearPlayerHasDamagedAtLeastOneNonAnimalPed(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ClearPlayerHasDamagedAtLeastOnePed()": {
	  "prefix": "ClearPlayerHasDamagedAtLeastOnePed",
	  "body": [
		"ClearPlayerHasDamagedAtLeastOnePed(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ClearPlayerParachuteModelOverride()": {
	  "prefix": "ClearPlayerParachuteModelOverride",
	  "body": [
		"ClearPlayerParachuteModelOverride(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ClearPlayerParachutePackModelOverride()": {
	  "prefix": "ClearPlayerParachutePackModelOverride",
	  "body": [
		"ClearPlayerParachutePackModelOverride(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ClearPlayerParachuteVariationOverride()": {
	  "prefix": "ClearPlayerParachuteVariationOverride",
	  "body": [
		"ClearPlayerParachuteVariationOverride(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ClearPlayerWantedLevel()": {
	  "prefix": "ClearPlayerWantedLevel",
	  "body": [
		"ClearPlayerWantedLevel(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nThis executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);  \nPLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.  \n"
	},
	"DisablePlayerFiring()": {
	  "prefix": "DisablePlayerFiring",
	  "body": [
		"DisablePlayerFiring(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nInhibits the player from using any method of combat including melee and firearms.  \nNOTE: Only disables the firing for one frame  \n"
	},
	"DisablePlayerVehicleRewards()": {
	  "prefix": "DisablePlayerVehicleRewards",
	  "body": [
		"DisablePlayerVehicleRewards(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"DisplaySystemSigninUi()": {
	  "prefix": "DisplaySystemSigninUi",
	  "body": [
		"DisplaySystemSigninUi(${1:BOOL unk})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nPurpose of the BOOL currently unknown.  \nBoth, true and false, work  \n"
	},
	"EnableSpecialAbility()": {
	  "prefix": "EnableSpecialAbility",
	  "body": [
		"EnableSpecialAbility(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ForceCleanup()": {
	  "prefix": "ForceCleanup",
	  "body": [
		"ForceCleanup(${1:int cleanupFlags})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nused with 1,2,8,64,128 in the scripts  \n"
	},
	"N_0x5006d96c995a5827()": {
	  "prefix": "N_0x5006d96c995a5827",
	  "body": "N_0x5006d96c995a5827",
	  "description": "OLD NAME, PLEASE USE ExpandWorldLimits INSTEAD!"
	},
	"ExpandWorldLimits()": {
	  "prefix": "ExpandWorldLimits",
	  "body": [
		"ExpandWorldLimits(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nWill change world AABB so that given point will be inside of the world limits.  \nExample:  \nYou want world limits to be -9000<X<10000 -11000<Y<12000 and leave Z limits as is.  \nYou should call this function two times:  \n_EXPAND_WORLD_LIMITS(-9000.0,-11000.0,30.0)  \n_EXPAND_WORLD_LIMITS(10000.0,12000.0,30.0)  \nAppears only 3 times in the scripts, more specifically in michael1.ysc  \nConsole hash: 0x64ddb07d  \n-  \nThis can be used to prevent dying if you are \"out of the world\"  \n\nOld name: N_0x5006d96c995a5827"
	},
	"ForceCleanupForAllThreadsWithThisName()": {
	  "prefix": "ForceCleanupForAllThreadsWithThisName",
	  "body": [
		"ForceCleanupForAllThreadsWithThisName(${1:char* name}, ${2:int cleanupFlags})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nPLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(\"pb_prostitute\", 1); // Found in decompilation  \n"
	},
	"N_0x1c186837d0619335()": {
	  "prefix": "N_0x1c186837d0619335",
	  "body": "N_0x1c186837d0619335",
	  "description": "OLD NAME, PLEASE USE GetAchievementProgression INSTEAD!"
	},
	"GetAchievementProgression()": {
	  "prefix": "GetAchievementProgression",
	  "body": [
		"GetAchievementProgression(${1:int achId})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\np0 = int (?)  \nDr. Underscore (1/6/18):  \nThis gets the progression of an achievement. Returns 0 if the achievement cannot be progressed.  \n\nOld name: N_0x1c186837d0619335"
	},
	"ForceCleanupForThreadWithThisId()": {
	  "prefix": "ForceCleanupForThreadWithThisId",
	  "body": [
		"ForceCleanupForThreadWithThisId(${1:int id}, ${2:int cleanupFlags})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"GetCauseOfMostRecentForceCleanup()": {
	  "prefix": "GetCauseOfMostRecentForceCleanup",
	  "body": [
		"GetCauseOfMostRecentForceCleanup()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetEntityPlayerIsFreeAimingAt()": {
	  "prefix": "GetEntityPlayerIsFreeAimingAt",
	  "body": [
		"GetEntityPlayerIsFreeAimingAt(${1:Player player}, ${2:Entity* entity})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.  \nReturns false if no entity found.  \n"
	},
	"GetMaxWantedLevel()": {
	  "prefix": "GetMaxWantedLevel",
	  "body": [
		"GetMaxWantedLevel()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nGets the maximum wanted level the player can get.  \nRanges from 0 to 5.  \n"
	},
	"GetNumberOfPlayers()": {
	  "prefix": "GetNumberOfPlayers",
	  "body": [
		"GetNumberOfPlayers()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetPlayerCurrentStealthNoise()": {
	  "prefix": "GetPlayerCurrentStealthNoise",
	  "body": [
		"GetPlayerCurrentStealthNoise(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: float\n"
	},
	"GetPlayerGroup()": {
	  "prefix": "GetPlayerGroup",
	  "body": [
		"GetPlayerGroup(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nReturns the group ID the player is member of.  \n"
	},
	"GetPlayerIndex()": {
	  "prefix": "GetPlayerIndex",
	  "body": [
		"GetPlayerIndex()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Player\n\nReturns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT  \n"
	},
	"GetPlayerHasReserveParachute()": {
	  "prefix": "GetPlayerHasReserveParachute",
	  "body": [
		"GetPlayerHasReserveParachute(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"GetPlayerMaxArmour()": {
	  "prefix": "GetPlayerMaxArmour",
	  "body": [
		"GetPlayerMaxArmour(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetPlayerInvincible()": {
	  "prefix": "GetPlayerInvincible",
	  "body": [
		"GetPlayerInvincible(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturns the Player's Invincible status.  \nThis function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:  \n\tbool IsPlayerInvincible(Player player)  \n\t{  \nauto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));\t  \nif (addr)  \n{  \n\tDWORD flag = *(DWORD *)(addr + 0x188);  \n\treturn ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);  \n}  \nreturn false;  \n\t}  \n============================================================  \nThis has bothered me for too long, whoever may come across this, where did anyone ever come up with this made up hash? 0x733A643B5B0C53C1 I've looked all over old hash list, and this nativedb I can not find that PC hash anywhere. What native name is it now or was it?  \n"
	},
	"GetPlayerParachutePackTintIndex()": {
	  "prefix": "GetPlayerParachutePackTintIndex",
	  "body": [
		"GetPlayerParachutePackTintIndex(${1:Player player}, ${2:int* tintIndex})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"GetPlayerParachuteSmokeTrailColor()": {
	  "prefix": "GetPlayerParachuteSmokeTrailColor",
	  "body": [
		"GetPlayerParachuteSmokeTrailColor(${1:Player player}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"GetPlayerParachuteTintIndex()": {
	  "prefix": "GetPlayerParachuteTintIndex",
	  "body": [
		"GetPlayerParachuteTintIndex(${1:Player player}, ${2:int* tintIndex})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n"
	},
	"GetPlayerPedScriptIndex()": {
	  "prefix": "GetPlayerPedScriptIndex",
	  "body": [
		"GetPlayerPedScriptIndex(${1:Player Player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Ped\n\nDoes the same like PLAYER::GET_PLAYER_PED<br/>  \n"
	},
	"GetPlayerRgbColour()": {
	  "prefix": "GetPlayerRgbColour",
	  "body": [
		"GetPlayerRgbColour(${1:Player Player}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nReturns RGB color of the player  \n"
	},
	"GetPlayerReserveParachuteTintIndex()": {
	  "prefix": "GetPlayerReserveParachuteTintIndex",
	  "body": [
		"GetPlayerReserveParachuteTintIndex(${1:Player player}, ${2:int* index})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n"
	},
	"GetPlayerSprintStaminaRemaining()": {
	  "prefix": "GetPlayerSprintStaminaRemaining",
	  "body": [
		"GetPlayerSprintStaminaRemaining(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: float\n"
	},
	"GetPlayerSprintTimeRemaining()": {
	  "prefix": "GetPlayerSprintTimeRemaining",
	  "body": [
		"GetPlayerSprintTimeRemaining(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: float\n"
	},
	"GetPlayerTeam()": {
	  "prefix": "GetPlayerTeam",
	  "body": [
		"GetPlayerTeam(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nGets the player's team.  \nDoes nothing in singleplayer.  \n"
	},
	"GetPlayerTargetEntity()": {
	  "prefix": "GetPlayerTargetEntity",
	  "body": [
		"GetPlayerTargetEntity(${1:Player player}, ${2:Entity* entity})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nAssigns the handle of locked-on melee target to *entity that you pass it.  \nReturns false if no entity found.  \n"
	},
	"GetPlayerWantedCentrePosition()": {
	  "prefix": "GetPlayerWantedCentrePosition",
	  "body": [
		"GetPlayerWantedCentrePosition(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Vector3\n"
	},
	"GetPlayerUnderwaterTimeRemaining()": {
	  "prefix": "GetPlayerUnderwaterTimeRemaining",
	  "body": [
		"GetPlayerUnderwaterTimeRemaining(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: float\n"
	},
	"GetPlayersLastVehicle()": {
	  "prefix": "GetPlayersLastVehicle",
	  "body": [
		"GetPlayersLastVehicle()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Vehicle\n\nAlternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);  \n"
	},
	"GetPlayerWantedLevel()": {
	  "prefix": "GetPlayerWantedLevel",
	  "body": [
		"GetPlayerWantedLevel(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetTimeSinceLastArrest()": {
	  "prefix": "GetTimeSinceLastArrest",
	  "body": [
		"GetTimeSinceLastArrest()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nReturns the time since the character was arrested in (ms) milliseconds.  \nexample  \nvar time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();  \nUI.DrawSubtitle(time.ToString());  \nif player has not been arrested, the int returned will be -1.  \n"
	},
	"GetTimeSinceLastDeath()": {
	  "prefix": "GetTimeSinceLastDeath",
	  "body": [
		"GetTimeSinceLastDeath()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nReturns the time since the character died in (ms) milliseconds.  \nexample  \nvar time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();  \nUI.DrawSubtitle(time.ToString());  \nif player has not died, the int returned will be -1.  \n"
	},
	"GetTimeSincePlayerDroveAgainstTraffic()": {
	  "prefix": "GetTimeSincePlayerDroveAgainstTraffic",
	  "body": [
		"GetTimeSincePlayerDroveAgainstTraffic(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetTimeSincePlayerDroveOnPavement()": {
	  "prefix": "GetTimeSincePlayerDroveOnPavement",
	  "body": [
		"GetTimeSincePlayerDroveOnPavement(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetTimeSincePlayerHitVehicle()": {
	  "prefix": "GetTimeSincePlayerHitVehicle",
	  "body": [
		"GetTimeSincePlayerHitVehicle(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetTimeSincePlayerHitPed()": {
	  "prefix": "GetTimeSincePlayerHitPed",
	  "body": [
		"GetTimeSincePlayerHitPed(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n"
	},
	"GetWantedLevelRadius()": {
	  "prefix": "GetWantedLevelRadius",
	  "body": [
		"GetWantedLevelRadius(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n\nRemnant from GTA IV. Does nothing in GTA V.  \n"
	},
	"GetWantedLevelThreshold()": {
	  "prefix": "GetWantedLevelThreshold",
	  "body": [
		"GetWantedLevelThreshold(${1:int wantedLevel})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nDrft  \n"
	},
	"GiveAchievementToPlayer()": {
	  "prefix": "GiveAchievementToPlayer",
	  "body": [
		"GiveAchievementToPlayer(${1:int achId})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n\nAchievements from 0-57  \nmore achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.  \n"
	},
	"GivePlayerRagdollControl()": {
	  "prefix": "GivePlayerRagdollControl",
	  "body": [
		"GivePlayerRagdollControl(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"HasForceCleanupOccurred()": {
	  "prefix": "HasForceCleanupOccurred",
	  "body": [
		"HasForceCleanupOccurred(${1:int cleanupFlags})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"HasAchievementBeenPassed()": {
	  "prefix": "HasAchievementBeenPassed",
	  "body": [
		"HasAchievementBeenPassed(${1:int achievement})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"HasPlayerBeenSpottedInStolenVehicle()": {
	  "prefix": "HasPlayerBeenSpottedInStolenVehicle",
	  "body": [
		"HasPlayerBeenSpottedInStolenVehicle(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"HasPlayerDamagedAtLeastOneNonAnimalPed()": {
	  "prefix": "HasPlayerDamagedAtLeastOneNonAnimalPed",
	  "body": [
		"HasPlayerDamagedAtLeastOneNonAnimalPed(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"HasPlayerDamagedAtLeastOnePed()": {
	  "prefix": "HasPlayerDamagedAtLeastOnePed",
	  "body": [
		"HasPlayerDamagedAtLeastOnePed(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"HasPlayerLeftTheWorld()": {
	  "prefix": "HasPlayerLeftTheWorld",
	  "body": [
		"HasPlayerLeftTheWorld(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nGets the player's info and calls a function that checks the player's ped position.  \nHere's the decompiled function that checks the position: pastebin.com/ZdHG2E7n  \n"
	},
	"N_0xe23d5873c2394c61()": {
	  "prefix": "N_0xe23d5873c2394c61",
	  "body": "N_0xe23d5873c2394c61",
	  "description": "OLD NAME, PLEASE USE HasPlayerTeleportFinished INSTEAD!"
	},
	"HasPlayerTeleportFinished()": {
	  "prefix": "HasPlayerTeleportFinished",
	  "body": [
		"HasPlayerTeleportFinished(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nOld name: N_0xe23d5873c2394c61"
	},
	"IntToParticipantindex()": {
	  "prefix": "IntToParticipantindex",
	  "body": [
		"IntToParticipantindex(${1:int value})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n--------------------------------------------------------  \nif (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))  \n"
	},
	"IsPlayerBeingArrested()": {
	  "prefix": "IsPlayerBeingArrested",
	  "body": [
		"IsPlayerBeingArrested(${1:Player player}, ${2:BOOL atArresting})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturn true while player is being arrested / busted.  \nIf atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)  \nIf atArresting is set to 0, this function will return 1 only when the busted screen is shown.  \n"
	},
	"IntToPlayerindex()": {
	  "prefix": "IntToPlayerindex",
	  "body": [
		"IntToPlayerindex(${1:int value})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Player\n\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n"
	},
	"N_0x7c814d2fb49f40c0()": {
	  "prefix": "N_0x7c814d2fb49f40c0",
	  "body": "N_0x7c814d2fb49f40c0",
	  "description": "OLD NAME, PLEASE USE IsPlayerCamControlDisabled INSTEAD!"
	},
	"IsPlayerCamControlDisabled()": {
	  "prefix": "IsPlayerCamControlDisabled",
	  "body": [
		"IsPlayerCamControlDisabled()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.  \nNote: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.  \n\nOld name: N_0x7c814d2fb49f40c0"
	},
	"IsPlayerClimbing()": {
	  "prefix": "IsPlayerClimbing",
	  "body": [
		"IsPlayerClimbing(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturns TRUE if the player ('s ped) is climbing at the moment.  \n"
	},
	"IsPlayerControlOn()": {
	  "prefix": "IsPlayerControlOn",
	  "body": [
		"IsPlayerControlOn(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nCan the player control himself, used to disable controls for player for things like a cutscene.  \n---  \nYou can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.  \n"
	},
	"IsPlayerDead()": {
	  "prefix": "IsPlayerDead",
	  "body": [
		"IsPlayerDead(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerFreeAimingAtEntity()": {
	  "prefix": "IsPlayerFreeAimingAtEntity",
	  "body": [
		"IsPlayerFreeAimingAtEntity(${1:Player player}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nGets a value indicating whether the specified player is currently aiming freely at the specified entity.  \n"
	},
	"IsPlayerFreeAiming()": {
	  "prefix": "IsPlayerFreeAiming",
	  "body": [
		"IsPlayerFreeAiming(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nGets a value indicating whether the specified player is currently aiming freely.  \n"
	},
	"IsPlayerFreeForAmbientTask()": {
	  "prefix": "IsPlayerFreeForAmbientTask",
	  "body": [
		"IsPlayerFreeForAmbientTask(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerLoggingInNp()": {
	  "prefix": "IsPlayerLoggingInNp",
	  "body": [
		"IsPlayerLoggingInNp()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nthis function is hard-coded to always return 0.  \n"
	},
	"IsPlayerPlaying()": {
	  "prefix": "IsPlayerPlaying",
	  "body": [
		"IsPlayerPlaying(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nChecks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.  \n"
	},
	"IsPlayerOnline()": {
	  "prefix": "IsPlayerOnline",
	  "body": [
		"IsPlayerOnline()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturns TRUE if the game is in online mode and FALSE if in offline mode.  \nThis is an alias for NETWORK_IS_SIGNED_ONLINE.  \n"
	},
	"IsPlayerPressingHorn()": {
	  "prefix": "IsPlayerPressingHorn",
	  "body": [
		"IsPlayerPressingHorn(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerReadyForCutscene()": {
	  "prefix": "IsPlayerReadyForCutscene",
	  "body": [
		"IsPlayerReadyForCutscene(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerRidingTrain()": {
	  "prefix": "IsPlayerRidingTrain",
	  "body": [
		"IsPlayerRidingTrain(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturns true if the player is riding a train.  \n"
	},
	"IsPlayerScriptControlOn()": {
	  "prefix": "IsPlayerScriptControlOn",
	  "body": [
		"IsPlayerScriptControlOn(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerTargettingEntity()": {
	  "prefix": "IsPlayerTargettingEntity",
	  "body": [
		"IsPlayerTargettingEntity(${1:Player player}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerTargettingAnything()": {
	  "prefix": "IsPlayerTargettingAnything",
	  "body": [
		"IsPlayerTargettingAnything(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerTeleportActive()": {
	  "prefix": "IsPlayerTeleportActive",
	  "body": [
		"IsPlayerTeleportActive()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsPlayerWantedLevelGreater()": {
	  "prefix": "IsPlayerWantedLevelGreater",
	  "body": [
		"IsPlayerWantedLevelGreater(${1:Player player}, ${2:int wantedLevel})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsSpecialAbilityActive()": {
	  "prefix": "IsSpecialAbilityActive",
	  "body": [
		"IsSpecialAbilityActive(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsSpecialAbilityEnabled()": {
	  "prefix": "IsSpecialAbilityEnabled",
	  "body": [
		"IsSpecialAbilityEnabled(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsSpecialAbilityMeterFull()": {
	  "prefix": "IsSpecialAbilityMeterFull",
	  "body": [
		"IsSpecialAbilityMeterFull(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"IsSpecialAbilityUnlocked()": {
	  "prefix": "IsSpecialAbilityUnlocked",
	  "body": [
		"IsSpecialAbilityUnlocked(${1:Hash playerModel})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"N_0x0032a6dba562c518()": {
	  "prefix": "N_0x0032a6dba562c518",
	  "body": [
		"N_0x0032a6dba562c518()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n2 matches in 1 script   \nUsed in multiplayer scripts?  \n"
	},
	"IsSystemUiBeingDisplayed()": {
	  "prefix": "IsSystemUiBeingDisplayed",
	  "body": [
		"IsSystemUiBeingDisplayed()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n"
	},
	"N_0x2382ab11450ae7ba()": {
	  "prefix": "N_0x2382ab11450ae7ba",
	  "body": [
		"N_0x2382ab11450ae7ba(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x17f7471eaca78290()": {
	  "prefix": "N_0x17f7471eaca78290",
	  "body": [
		"N_0x17f7471eaca78290(${1:Any p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x2f41a3bae005e5fa()": {
	  "prefix": "N_0x2f41a3bae005e5fa",
	  "body": [
		"N_0x2f41a3bae005e5fa(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x2f7ceb6520288061()": {
	  "prefix": "N_0x2f7ceb6520288061",
	  "body": [
		"N_0x2f7ceb6520288061(${1:BOOL p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nUsed with radios:  \nvoid sub_cf383(auto _a0) {  \n    if ((a_0)==1) {  \n        if (GAMEPLAY::IS_BIT_SET((g_240005._f1), 3)) {  \n            PLAYER::_2F7CEB6520288061(0);  \n            AUDIO::SET_AUDIO_FLAG(\"AllowRadioDuringSwitch\", 0);  \n            AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);  \n            AUDIO::SET_AUDIO_FLAG(\"MobileRadioInGame\", 0);  \n        }  \n        sub_cf3f6(1);  \n    } else {   \n        if (GAMEPLAY::IS_BIT_SET((g_240005._f1), 3)) {  \n            PLAYER::_2F7CEB6520288061(1);  \n            AUDIO::SET_AUDIO_FLAG(\"AllowRadioDuringSwitch\", 1);  \n            AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);  \n            AUDIO::SET_AUDIO_FLAG(\"MobileRadioInGame\", 1);  \n        }  \n        sub_cf3f6(0);  \n    }  \n}  \nSET_PLAYER_S*  \n"
	},
	"N_0x31e90b8873a4cd3b()": {
	  "prefix": "N_0x31e90b8873a4cd3b",
	  "body": [
		"N_0x31e90b8873a4cd3b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x36f1b38855f2a8df()": {
	  "prefix": "N_0x36f1b38855f2a8df",
	  "body": [
		"N_0x36f1b38855f2a8df(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x38d28da81e4e9bf9()": {
	  "prefix": "N_0x38d28da81e4e9bf9",
	  "body": [
		"N_0x38d28da81e4e9bf9(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nReturns true if an unk value is greater than 0.0f  \n"
	},
	"N_0x4669b3ed80f24b4e()": {
	  "prefix": "N_0x4669b3ed80f24b4e",
	  "body": [
		"N_0x4669b3ed80f24b4e(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n\nThis has been found in use in the decompiled files.  \n"
	},
	"N_0x55fcc0c390620314()": {
	  "prefix": "N_0x55fcc0c390620314",
	  "body": [
		"N_0x55fcc0c390620314(${1:Player player1}, ${2:Player player2}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nOrder of player1 and player2 are not interchangable, it was called for both orders.  \n"
	},
	"N_0x5501b7a5cdb79d37()": {
	  "prefix": "N_0x5501b7a5cdb79d37",
	  "body": [
		"N_0x5501b7a5cdb79d37(${1:Player p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nDISABLE_*  \np0 seems to be Player or int  \nDr. Underscore (1/6/18):  \np0 is Player.  \nCalled after/near _DISABLE_FIRST_PERSON_CAMERA_THIS_FRAME quite often, but not always.  \nAlso called near DISABLE_CONTROL_ACTION.  \n"
	},
	"N_0x56105e599cab0efa()": {
	  "prefix": "N_0x56105e599cab0efa",
	  "body": [
		"N_0x56105e599cab0efa(${1:int* p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Player\n\nGET_PLAYER_*  \nSeems to do something with network (?)  \nPLAYER::_56105E599CAB0EFA(NETWORK::NETWORK_GET_PLAYER_INDEX_FROM_PED(ped))  \n"
	},
	"N_0x5702b917b99db1cd()": {
	  "prefix": "N_0x5702b917b99db1cd",
	  "body": [
		"N_0x5702b917b99db1cd(${1:int p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nJenkins hash: 0x772DA539  \np0 looks like Player or int (found in \"am_pi_menu\")  \nDr. Underscore (1/6/18):  \nIt isn't Player, it is an int.  \nOnly two references anywhere, both in am_pi_menu.  \nOne uses globals, the other one uses a helper function that is passing in the outValue of \"STATS::STAT_GET_INT\"; I have no clue what is being passed in for the stat hash.  \n"
	},
	"N_0x5fc472c501ccadb3()": {
	  "prefix": "N_0x5fc472c501ccadb3",
	  "body": [
		"N_0x5fc472c501ccadb3(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nAppears once in \"re_dealgonewrong\"  \n"
	},
	"N_0x5dc40a8869c22141()": {
	  "prefix": "N_0x5dc40a8869c22141",
	  "body": [
		"N_0x5dc40a8869c22141(${1:BOOL p0}, ${2:ScrHandle p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x65faee425de637b0()": {
	  "prefix": "N_0x65faee425de637b0",
	  "body": [
		"N_0x65faee425de637b0(${1:Player p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nIS_PLAYER_*  \n"
	},
	"N_0x690a61a6d13583f6()": {
	  "prefix": "N_0x690a61a6d13583f6",
	  "body": [
		"N_0x690a61a6d13583f6(${1:Ped p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\np0 seems to be Ped  \nDr. Underscore (1/6/18):  \nHas to do something with vehicles and teams. (same teams don't jack each other out of vehicles?)  \n"
	},
	"N_0x6e4361ff3e8cd7ca()": {
	  "prefix": "N_0x6e4361ff3e8cd7ca",
	  "body": [
		"N_0x6e4361ff3e8cd7ca(${1:Any p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n"
	},
	"N_0x6bc97f4f4bb3c04b()": {
	  "prefix": "N_0x6bc97f4f4bb3c04b",
	  "body": [
		"N_0x6bc97f4f4bb3c04b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x7e07c78925d5fd96()": {
	  "prefix": "N_0x7e07c78925d5fd96",
	  "body": [
		"N_0x7e07c78925d5fd96(${1:Any p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n"
	},
	"N_0x8bc515bae4aaf8ff()": {
	  "prefix": "N_0x8bc515bae4aaf8ff",
	  "body": [
		"N_0x8bc515bae4aaf8ff(${1:Any p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n"
	},
	"N_0x821fdc827d6f4090()": {
	  "prefix": "N_0x821fdc827d6f4090",
	  "body": [
		"N_0x821fdc827d6f4090(${1:Any p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x8d768602adef2245()": {
	  "prefix": "N_0x8d768602adef2245",
	  "body": [
		"N_0x8d768602adef2245(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0x9edd76e87d5d51ba()": {
	  "prefix": "N_0x9edd76e87d5d51ba",
	  "body": [
		"N_0x9edd76e87d5d51ba(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xa0d3e4f7aafb7e78()": {
	  "prefix": "N_0xa0d3e4f7aafb7e78",
	  "body": [
		"N_0xa0d3e4f7aafb7e78(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n"
	},
	"N_0xad73ce5a09e42d12()": {
	  "prefix": "N_0xad73ce5a09e42d12",
	  "body": [
		"N_0xad73ce5a09e42d12(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n\nThis has been found in use in the decompiled files.  \n"
	},
	"N_0xb214d570ead7f81a()": {
	  "prefix": "N_0xb214d570ead7f81a",
	  "body": [
		"N_0xb214d570ead7f81a(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xb45eff719d8427a6()": {
	  "prefix": "N_0xb45eff719d8427a6",
	  "body": [
		"N_0xb45eff719d8427a6(${1:float p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nPLAYER::0xBF6993C7(rPtr((&l_122) + 71)); // Found in decompilation  \n***  \nIn \"am_hold_up.ysc\" used once:  \nl_8d._f47 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);  \nPLAYER::_B45EFF719D8427A6((l_8d._f47));  \n"
	},
	"N_0xb885852c39cc265d()": {
	  "prefix": "N_0xb885852c39cc265d",
	  "body": [
		"N_0xb885852c39cc265d()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nOld Gen: 0x47D6004E  \nDisables something. Used only once in R* scripts (freemode.ysc).  \n"
	},
	"N_0xb9cf1f793a9f1bf1()": {
	  "prefix": "N_0xb9cf1f793a9f1bf1",
	  "body": [
		"N_0xb9cf1f793a9f1bf1()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nSeem to return bool  \nDr. Underscore (1/6/18):  \nIt does return bool.  \n"
	},
	"N_0xbc0753c9ca14b506()": {
	  "prefix": "N_0xbc0753c9ca14b506",
	  "body": [
		"N_0xbc0753c9ca14b506(${1:Player player}, ${2:int p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nvar num3 = PLAYER::GET_PLAYER_PED(l_2171); // proof l_2171 is a player  \nvar num17 = PLAYER::0x9DF75B2A(l_2171, 100, 0); // l_2171  \n.ysc:  \n    if (PLAYER::GET_PLAYER_WANTED_LEVEL(l_6EF) < v_4) { // l_6EF is a player  \n        PLAYER::SET_PLAYER_WANTED_LEVEL(l_6EF, v_4, 0); // l_6EF  \n        PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(l_6EF, 0); // l_6EF  \n    } else {   \n        PLAYER::_4669B3ED80F24B4E(l_6EF); // l_6EF  \n        UI::_BA8D65C1C65702E5(1);  \n        a_0 = 1;  \n    }  \n        if (l_4B24[l_6F2/*156*/]._f8C != PLAYER::_BC0753C9CA14B506(l_6EF, 100, 0)) { // l_6EF  \n            l_4B24[l_6F2/*156*/]._f8C = PLAYER::_BC0753C9CA14B506(l_6EF, 100, 0); // l_6EF  \n        }  \nBoth was taken from fm_mission_controller  \nGET_PLAYER_*  \n"
	},
	"N_0xbc9490ca15aea8fb()": {
	  "prefix": "N_0xbc9490ca15aea8fb",
	  "body": [
		"N_0xbc9490ca15aea8fb(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nSeems to only appear in scripts used in Singleplayer.  \nAI_PHONE_ARGS is a hash collision!!!  \nAlways used like this in scripts  \nPLAYER::_BC9490CA15AEA8FB(PLAYER::PLAYER_ID());  \n"
	},
	"N_0xbcfde9ede4cf27dc()": {
	  "prefix": "N_0xbcfde9ede4cf27dc",
	  "body": [
		"N_0xbcfde9ede4cf27dc(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetAreasGeneratorOrientation()": {
	  "prefix": "SetAreasGeneratorOrientation",
	  "body": "SetAreasGeneratorOrientation",
	  "description": "OLD NAME, PLEASE USE N_0xc3376f42b1faccc6 INSTEAD!"
	},
	"N_0xc3376f42b1faccc6()": {
	  "prefix": "N_0xc3376f42b1faccc6",
	  "body": [
		"N_0xc3376f42b1faccc6(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n- This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME  \nhash collision  \n0xc3376f42b1faccc6, 0xd5d0d2853191399c, // set_areas_generator_orientation  \n\nOld name: SetAreasGeneratorOrientation"
	},
	"N_0xc388a0f065f5bc34()": {
	  "prefix": "N_0xc388a0f065f5bc34",
	  "body": [
		"N_0xc388a0f065f5bc34(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xc9a763d8fe87436a()": {
	  "prefix": "N_0xc9a763d8fe87436a",
	  "body": [
		"N_0xc9a763d8fe87436a(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xcac57395b151135f()": {
	  "prefix": "N_0xcac57395b151135f",
	  "body": [
		"N_0xcac57395b151135f(${1:Player player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nFound in \"director_mode\", \"fm_bj_race_controler\", \"fm_deathmatch_controler\", \"fm_impromptu_dm_controler\", \"fm_race_controler\", \"gb_deathmatch\".  \n"
	},
	"N_0xcb645e85e97ea48b()": {
	  "prefix": "N_0xcb645e85e97ea48b",
	  "body": [
		"N_0xcb645e85e97ea48b()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n"
	},
	"N_0xd2b315b6689d537d()": {
	  "prefix": "N_0xd2b315b6689d537d",
	  "body": [
		"N_0xd2b315b6689d537d(${1:Player player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n"
	},
	"N_0xd821056b9acf8052()": {
	  "prefix": "N_0xd821056b9acf8052",
	  "body": [
		"N_0xd821056b9acf8052(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xdc64d2c53493ed12()": {
	  "prefix": "N_0xdc64d2c53493ed12",
	  "body": [
		"N_0xdc64d2c53493ed12(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nHas something to do with police.  \n"
	},
	"N_0xdd2620b7b9d16ff1()": {
	  "prefix": "N_0xdd2620b7b9d16ff1",
	  "body": [
		"N_0xdd2620b7b9d16ff1(${1:Player player}, ${2:float p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\n2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.  \n"
	},
	"SetHudAnimStopLevel()": {
	  "prefix": "SetHudAnimStopLevel",
	  "body": "SetHudAnimStopLevel",
	  "description": "OLD NAME, PLEASE USE N_0xde45d1a1ef45ee61 INSTEAD!"
	},
	"N_0xde45d1a1ef45ee61()": {
	  "prefix": "N_0xde45d1a1ef45ee61",
	  "body": [
		"N_0xde45d1a1ef45ee61(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n\n\nOld name: SetHudAnimStopLevel"
	},
	"N_0xf10b44fd479d69f3()": {
	  "prefix": "N_0xf10b44fd479d69f3",
	  "body": [
		"N_0xf10b44fd479d69f3(${1:Player player}, ${2:int p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nOnly 1 occurrence. p1 was 2.  \n"
	},
	"N_0xefd79fa81dfba9cb()": {
	  "prefix": "N_0xefd79fa81dfba9cb",
	  "body": [
		"N_0xefd79fa81dfba9cb(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xfac75988a7d078d3()": {
	  "prefix": "N_0xfac75988a7d078d3",
	  "body": [
		"N_0xfac75988a7d078d3(${1:Any p0})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xffee8fa29ab9a18e()": {
	  "prefix": "N_0xffee8fa29ab9a18e",
	  "body": [
		"N_0xffee8fa29ab9a18e(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xff300c7649724a0b()": {
	  "prefix": "N_0xff300c7649724a0b",
	  "body": [
		"N_0xff300c7649724a0b(${1:Player player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\ngets byte at offset 0x862 in the specified players data (ped data + 0xbd0) and stores the bool p1 in it.  \nlwz       r3, 0xBD0(r3) ;r3 is player data  \nlbz       r4, 0x862(r3) ;r4 is now the byte  \ninsrwi    r4, r31, 1,28 ;stores p1 as a bit in place 28 idk  \nstb       r4, 0x862(r3) ; puts the newly modified one back in  \nSET_PLAYER_*  \n"
	},
	"PlayerAttachVirtualBound()": {
	  "prefix": "PlayerAttachVirtualBound",
	  "body": [
		"PlayerAttachVirtualBound(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nOnly 1 match. ob_sofa_michael.  \nPLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n"
	},
	"NetworkPlayerIdToInt()": {
	  "prefix": "NetworkPlayerIdToInt",
	  "body": [
		"NetworkPlayerIdToInt()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: int\n\nDoes exactly the same thing as PLAYER_ID()  \n"
	},
	"PlayerId()": {
	  "prefix": "PlayerId",
	  "body": [
		"PlayerId()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Player\n\nThis returns YOUR 'identity' as a Player type.  \nAlways returns 0 in story mode.  \n"
	},
	"PlayerDetachVirtualBound()": {
	  "prefix": "PlayerDetachVirtualBound",
	  "body": [
		"PlayerDetachVirtualBound()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n"
	},
	"RemovePlayerHelmet()": {
	  "prefix": "RemovePlayerHelmet",
	  "body": [
		"RemovePlayerHelmet(${1:Player player}, ${2:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n"
	},
	"PlayerPedId()": {
	  "prefix": "PlayerPedId",
	  "body": [
		"PlayerPedId()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Ped\n\nReturns current player ped  \n"
	},
	"ResetPlayerArrestState()": {
	  "prefix": "ResetPlayerArrestState",
	  "body": [
		"ResetPlayerArrestState(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ReportCrime()": {
	  "prefix": "ReportCrime",
	  "body": [
		"ReportCrime(${1:Player player}, ${2:int crimeType}, ${3:int wantedLvlThresh})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nPLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));  \nFrom am_armybase.ysc.c4:  \nPLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));  \n-----  \nThis was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7   \n-----  \ncrimeType:  \n1: Firearms possession  \n2: Person running a red light (\"5-0-5\")  \n3: Reckless driver  \n4: Speeding vehicle (a \"5-10\")  \n5: Traffic violation (a \"5-0-5\")  \n6: Motorcycle rider without a helmet  \n7: Vehicle theft (a \"5-0-3\")  \n8: Grand Theft Auto  \n9: ???  \n10: ???  \n11: Assault on a civilian (a \"2-40\")  \n12: Assault on an officer  \n13: Assault with a deadly weapon (a \"2-45\")  \n14: Officer shot (a \"2-45\")  \n15: Pedestrian struck by a vehicle  \n16: Officer struck by a vehicle  \n17: Helicopter down (an \"AC\"?)  \n18: Civilian on fire (a \"2-40\")  \n19: Officer set on fire (a \"10-99\")  \n20: Car on fire  \n21: Air unit down (an \"AC\"?)  \n22: An explosion (a \"9-96\")  \n23: A stabbing (a \"2-45\") (also something else I couldn't understand)  \n24: Officer stabbed (also something else I couldn't understand)  \n25: Attack on a vehicle (\"MDV\"?)  \n26: Damage to property  \n27: Suspect threatening officer with a firearm  \n28: Shots fired  \n29: ???  \n30: ???  \n31: ???  \n32: ???  \n33: ???  \n34: A \"2-45\"  \n35: ???  \n36: A \"9-25\"  \n37: ???  \n38: ???  \n39: ???  \n40: ???  \n41: ???  \n42: ???  \n43: Possible disturbance  \n44: Civilian in need of assistance  \n45: ???  \n46: ???  \n"
	},
	"ResetPlayerStamina()": {
	  "prefix": "ResetPlayerStamina",
	  "body": [
		"ResetPlayerStamina(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ResetPlayerInputGait()": {
	  "prefix": "ResetPlayerInputGait",
	  "body": [
		"ResetPlayerInputGait(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"RestorePlayerStamina()": {
	  "prefix": "RestorePlayerStamina",
	  "body": [
		"RestorePlayerStamina(${1:Player player}, ${2:float p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"ResetWantedLevelDifficulty()": {
	  "prefix": "ResetWantedLevelDifficulty",
	  "body": [
		"ResetWantedLevelDifficulty(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"N_0xc2afffdabbdc2c5c()": {
	  "prefix": "N_0xc2afffdabbdc2c5c",
	  "body": "N_0xc2afffdabbdc2c5c",
	  "description": "OLD NAME, PLEASE USE SetAchievementProgression INSTEAD!"
	},
	"SetAchievementProgression()": {
	  "prefix": "SetAchievementProgression",
	  "body": [
		"SetAchievementProgression(${1:int achId}, ${2:int progression})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: BOOL\n\nThis seems to be related to Steam achievements.  \np0 and p1 are int (?)  \n------  \nCan't say anything about the Steam version but it is hardcoded to always return false in the retail version.  \nDr. Underscore (1/6/18):  \nThis has to do with achievement progression. If this achievement has progression, it will set the progression of it to this value.  \nOnly tested on un-achieved achievements, Steamworks probably just rejects it if it has already been achieved.  \nSteamworks also seems to not like reversing achievement progression.  \n\nOld name: N_0xc2afffdabbdc2c5c"
	},
	"SetAirDragMultiplierForPlayersVehicle()": {
	  "prefix": "SetAirDragMultiplierForPlayersVehicle",
	  "body": [
		"SetAirDragMultiplierForPlayersVehicle(${1:Player player}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nThis can be between 1.0f - 14.9f   \nYou can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.  \nOn PC the multiplier can be between 0.0f and 50.0f (inclusive).  \n"
	},
	"SetAllRandomPedsFleeThisFrame()": {
	  "prefix": "SetAllRandomPedsFleeThisFrame",
	  "body": [
		"SetAllRandomPedsFleeThisFrame(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetAllRandomPedsFlee()": {
	  "prefix": "SetAllRandomPedsFlee",
	  "body": [
		"SetAllRandomPedsFlee(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetDisableAmbientMeleeMove()": {
	  "prefix": "SetDisableAmbientMeleeMove",
	  "body": [
		"SetDisableAmbientMeleeMove(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetAutoGiveParachuteWhenEnterPlane()": {
	  "prefix": "SetAutoGiveParachuteWhenEnterPlane",
	  "body": [
		"SetAutoGiveParachuteWhenEnterPlane(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetDispatchCopsForPlayer()": {
	  "prefix": "SetDispatchCopsForPlayer",
	  "body": [
		"SetDispatchCopsForPlayer(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetEveryoneIgnorePlayer()": {
	  "prefix": "SetEveryoneIgnorePlayer",
	  "body": [
		"SetEveryoneIgnorePlayer(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetIgnoreLowPriorityShockingEvents()": {
	  "prefix": "SetIgnoreLowPriorityShockingEvents",
	  "body": [
		"SetIgnoreLowPriorityShockingEvents(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerCanBeHassledByGangs()": {
	  "prefix": "SetPlayerCanBeHassledByGangs",
	  "body": [
		"SetPlayerCanBeHassledByGangs(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nSets whether this player can be hassled by gangs.  \n"
	},
	"SetMaxWantedLevel()": {
	  "prefix": "SetMaxWantedLevel",
	  "body": [
		"SetMaxWantedLevel(${1:int maxWantedLevel})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerCanDoDriveBy()": {
	  "prefix": "SetPlayerCanDoDriveBy",
	  "body": [
		"SetPlayerCanDoDriveBy(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nSet whether this player should be able to do drive-bys.  \n\"A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick.\"  \n"
	},
	"SetPlayerCanLeaveParachuteSmokeTrail()": {
	  "prefix": "SetPlayerCanLeaveParachuteSmokeTrail",
	  "body": [
		"SetPlayerCanLeaveParachuteSmokeTrail(${1:Player player}, ${2:BOOL enabled})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerClothLockCounter()": {
	  "prefix": "SetPlayerClothLockCounter",
	  "body": [
		"SetPlayerClothLockCounter(${1:int value})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n6 matches across 4 scripts. 5 occurrences were 240. The other was 255.  \n"
	},
	"SetPlayerCanUseCover()": {
	  "prefix": "SetPlayerCanUseCover",
	  "body": [
		"SetPlayerCanUseCover(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: Any\n\nSets whether this player can take cover.  \n"
	},
	"SetPlayerClothPackageIndex()": {
	  "prefix": "SetPlayerClothPackageIndex",
	  "body": [
		"SetPlayerClothPackageIndex(${1:int index})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nEvery occurrence was either 0 or 2.  \n"
	},
	"SetPlayerClothPinFrames()": {
	  "prefix": "SetPlayerClothPinFrames",
	  "body": [
		"SetPlayerClothPinFrames(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nEvery occurrence of p1 I found was true.1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;  \n"
	},
	"SetPlayerForceSkipAimIntro()": {
	  "prefix": "SetPlayerForceSkipAimIntro",
	  "body": [
		"SetPlayerForceSkipAimIntro(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerControl()": {
	  "prefix": "SetPlayerControl",
	  "body": [
		"SetPlayerControl(${1:Player player}, ${2:BOOL toggle}, ${3:int flags})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nFlags used in the scripts: 0,4,16,24,32,56,60,64,128,134,256,260,384,512,640,768,896,900,952,1024,1280,2048,2560  \nNote to people who needs this with camera mods, etc.:   \nFlags(0, 4, 16, 24, 32, 56, 60, 64, 128, 134, 512, 640, 1024, 2048, 2560)  \n- Disables camera rotation as well.  \nFlags(256, 260, 384, 768, 896, 900, 952, 1280)  \n[ translation: cameraRotation = flags & (1 << 8) - sfink]  \n"
	},
	"SetPlayerForcedZoom()": {
	  "prefix": "SetPlayerForcedZoom",
	  "body": [
		"SetPlayerForcedZoom(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerForcedAim()": {
	  "prefix": "SetPlayerForcedAim",
	  "body": [
		"SetPlayerForcedAim(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerHealthRechargeMultiplier()": {
	  "prefix": "SetPlayerHealthRechargeMultiplier",
	  "body": [
		"SetPlayerHealthRechargeMultiplier(${1:Player player}, ${2:float regenRate})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerHasReserveParachute()": {
	  "prefix": "SetPlayerHasReserveParachute",
	  "body": [
		"SetPlayerHasReserveParachute(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerLockon()": {
	  "prefix": "SetPlayerLockon",
	  "body": [
		"SetPlayerLockon(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nExample from fm_mission_controler.ysc.c4:  \nPLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);  \nAll other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.  \nNo need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.  \n"
	},
	"SetPlayerInvincible()": {
	  "prefix": "SetPlayerInvincible",
	  "body": [
		"SetPlayerInvincible(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nSimply sets you as invincible (Health will not deplete).  \nUse 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:  \n*(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);  \n"
	},
	"SetPlayerMaxArmour()": {
	  "prefix": "SetPlayerMaxArmour",
	  "body": [
		"SetPlayerMaxArmour(${1:Player player}, ${2:int value})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nDefault is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4  \n"
	},
	"SetPlayerLockonRangeOverride()": {
	  "prefix": "SetPlayerLockonRangeOverride",
	  "body": [
		"SetPlayerLockonRangeOverride(${1:Player player}, ${2:float range})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nAffects the range of auto aim target.  \n"
	},
	"SetPlayerMayOnlyEnterThisVehicle()": {
	  "prefix": "SetPlayerMayOnlyEnterThisVehicle",
	  "body": [
		"SetPlayerMayOnlyEnterThisVehicle(${1:Player player}, ${2:Vehicle vehicle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerMeleeWeaponDamageModifier()": {
	  "prefix": "SetPlayerMeleeWeaponDamageModifier",
	  "body": [
		"SetPlayerMeleeWeaponDamageModifier(${1:Player player}, ${2:float modifier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerMayNotEnterAnyVehicle()": {
	  "prefix": "SetPlayerMayNotEnterAnyVehicle",
	  "body": [
		"SetPlayerMayNotEnterAnyVehicle(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerMeleeWeaponDefenseModifier()": {
	  "prefix": "SetPlayerMeleeWeaponDefenseModifier",
	  "body": [
		"SetPlayerMeleeWeaponDefenseModifier(${1:Player player}, ${2:float modifier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerNoiseMultiplier()": {
	  "prefix": "SetPlayerNoiseMultiplier",
	  "body": [
		"SetPlayerNoiseMultiplier(${1:Player player}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerModel()": {
	  "prefix": "SetPlayerModel",
	  "body": [
		"SetPlayerModel(${1:Player player}, ${2:Hash model})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\nSet the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any\nreference to the old ped should be reset (by using the GetPlayerPed native).\n\n\nMake sure to request the model first and wait until it has loaded.  \n"
	},
	"SetPlayerParachuteModelOverride()": {
	  "prefix": "SetPlayerParachuteModelOverride",
	  "body": [
		"SetPlayerParachuteModelOverride(${1:Player player}, ${2:Hash model})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nexample:  \nPLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);  \n"
	},
	"SetPlayerParachutePackModelOverride()": {
	  "prefix": "SetPlayerParachutePackModelOverride",
	  "body": [
		"SetPlayerParachutePackModelOverride(${1:Player player}, ${2:Hash model})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerParachuteSmokeTrailColor()": {
	  "prefix": "SetPlayerParachuteSmokeTrailColor",
	  "body": [
		"SetPlayerParachuteSmokeTrailColor(${1:Player player}, ${2:int r}, ${3:int g}, ${4:int b})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerParachutePackTintIndex()": {
	  "prefix": "SetPlayerParachutePackTintIndex",
	  "body": [
		"SetPlayerParachutePackTintIndex(${1:Player player}, ${2:int tintIndex})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\ntints 0  \n1   \n2   \n3   \n4  \n"
	},
	"SetPlayerParachuteTintIndex()": {
	  "prefix": "SetPlayerParachuteTintIndex",
	  "body": [
		"SetPlayerParachuteTintIndex(${1:Player player}, ${2:int tintIndex})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n"
	},
	"SetPlayerReserveParachuteTintIndex()": {
	  "prefix": "SetPlayerReserveParachuteTintIndex",
	  "body": [
		"SetPlayerReserveParachuteTintIndex(${1:Player player}, ${2:int index})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nTints:  \nNone = -1,  \nRainbow = 0,  \nRed = 1,  \nSeasideStripes = 2,  \nWidowMaker = 3,  \nPatriot = 4,  \nBlue = 5,  \nBlack = 6,  \nHornet = 7,  \nAirFocce = 8,  \nDesert = 9,  \nShadow = 10,  \nHighAltitude = 11,  \nAirbone = 12,  \nSunrise = 13,  \n"
	},
	"SetPlayerParachuteVariationOverride()": {
	  "prefix": "SetPlayerParachuteVariationOverride",
	  "body": [
		"SetPlayerParachuteVariationOverride(${1:Player player}, ${2:int p1}, ${3:Any p2}, ${4:Any p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\np1 was always 5.  \np4 was always false.  \n"
	},
	"SetPlayerResetFlagPreferRearSeats()": {
	  "prefix": "SetPlayerResetFlagPreferRearSeats",
	  "body": [
		"SetPlayerResetFlagPreferRearSeats(${1:Player player}, ${2:int flags})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nexample:  \nflags: 0-6  \nPLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);  \nwouldnt the flag be the seatIndex?  \n"
	},
	"SetPlayerSimulateAiming()": {
	  "prefix": "SetPlayerSimulateAiming",
	  "body": [
		"SetPlayerSimulateAiming(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerSprint()": {
	  "prefix": "SetPlayerSprint",
	  "body": [
		"SetPlayerSprint(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n77  \n"
	},
	"SetPlayerSneakingNoiseMultiplier()": {
	  "prefix": "SetPlayerSneakingNoiseMultiplier",
	  "body": [
		"SetPlayerSneakingNoiseMultiplier(${1:Player player}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nValues around 1.0f to 2.0f used in game scripts.  \n"
	},
	"SetPlayerTargetingMode()": {
	  "prefix": "SetPlayerTargetingMode",
	  "body": [
		"SetPlayerTargetingMode(${1:int targetMode})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nSets your targeting mode.  \n0 = Traditional GTA  \n1 = Assisted Aiming  \n2 = Free Aim  \nEven tho gtaforums nor Alexander B supports this, if you're online in freemode already it's nice to have this since retail or otherwise you have to go to SP to change it.  \n"
	},
	"SetPlayerStealthPerceptionModifier()": {
	  "prefix": "SetPlayerStealthPerceptionModifier",
	  "body": [
		"SetPlayerStealthPerceptionModifier(${1:Player player}, ${2:float value})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerTeam()": {
	  "prefix": "SetPlayerTeam",
	  "body": [
		"SetPlayerTeam(${1:Player player}, ${2:int team})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nSet player team on deathmatch and last team standing..  \n"
	},
	"SetPlayerVehicleDamageModifier()": {
	  "prefix": "SetPlayerVehicleDamageModifier",
	  "body": [
		"SetPlayerVehicleDamageModifier(${1:Player player}, ${2:float damageAmount})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerVehicleDefenseModifier()": {
	  "prefix": "SetPlayerVehicleDefenseModifier",
	  "body": [
		"SetPlayerVehicleDefenseModifier(${1:Player player}, ${2:float modifier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetPlayerWantedCentrePosition()": {
	  "prefix": "SetPlayerWantedCentrePosition",
	  "body": [
		"SetPlayerWantedCentrePosition(${1:Player player}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n# Predominant call signatures  \nPLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));  \n# Parameter value ranges  \nP0: PLAYER::PLAYER_ID()  \nP1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)  \nP2: Not set by any call  \n"
	},
	"SetPlayerWantedLevelNoDrop()": {
	  "prefix": "SetPlayerWantedLevelNoDrop",
	  "body": [
		"SetPlayerWantedLevelNoDrop(${1:Player player}, ${2:int wantedLevel}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\np2 is always false in R* scripts  \n"
	},
	"SetPlayerWantedLevel()": {
	  "prefix": "SetPlayerWantedLevel",
	  "body": [
		"SetPlayerWantedLevel(${1:Player player}, ${2:int wantedLevel}, ${3:BOOL disableNoMission})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nCall SET_PLAYER_WANTED_LEVEL_NOW for immediate effect  \nwantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files  \ndisableNoMission-  Disables When Off Mission- appears to always be false  \n"
	},
	"SetPlayerWeaponDamageModifier()": {
	  "prefix": "SetPlayerWeaponDamageModifier",
	  "body": [
		"SetPlayerWeaponDamageModifier(${1:Player player}, ${2:float damageAmount})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nThis modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.   \nBased on tests, it is unlikely to be a multiplier.  \n"
	},
	"SetPlayerWantedLevelNow()": {
	  "prefix": "SetPlayerWantedLevelNow",
	  "body": [
		"SetPlayerWantedLevelNow(${1:Player player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nForces any pending wanted level to be applied to the specified player immediately.  \nCall SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.  \nSecond parameter is unknown (always false).  \n"
	},
	"SetPoliceIgnorePlayer()": {
	  "prefix": "SetPoliceIgnorePlayer",
	  "body": [
		"SetPoliceIgnorePlayer(${1:Player player}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nThe player will be ignored by the police if toggle is set to true  \n"
	},
	"SetPlayerWeaponDefenseModifier()": {
	  "prefix": "SetPlayerWeaponDefenseModifier",
	  "body": [
		"SetPlayerWeaponDefenseModifier(${1:Player player}, ${2:ScrHandle modifier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetRunSprintMultiplierForPlayer()": {
	  "prefix": "SetRunSprintMultiplierForPlayer",
	  "body": [
		"SetRunSprintMultiplierForPlayer(${1:Player player}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nMultiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.  \nJust call it one time, it is not required to be called once every tick.  \nNote: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.  \nIt is not possible to \"decrease\" speed. Anything below 1 will be ignored.  \n"
	},
	"SetPoliceRadarBlips()": {
	  "prefix": "SetPoliceRadarBlips",
	  "body": [
		"SetPoliceRadarBlips(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nIf toggle is set to false:  \nThe police won't be shown on the (mini)map  \n\t\tIf toggle is set to true:  \nThe police will be shown on the (mini)map  \n"
	},
	"SetSpecialAbilityMultiplier()": {
	  "prefix": "SetSpecialAbilityMultiplier",
	  "body": [
		"SetSpecialAbilityMultiplier(${1:float multiplier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetSwimMultiplierForPlayer()": {
	  "prefix": "SetSwimMultiplierForPlayer",
	  "body": [
		"SetSwimMultiplierForPlayer(${1:Player player}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nSwim speed multiplier.  \nMultiplier goes up to 1.49  \nJust call it one time, it is not required to be called once every tick. - Note copied from below native.  \nNote: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.  \n"
	},
	"SetWantedLevelMultiplier()": {
	  "prefix": "SetWantedLevelMultiplier",
	  "body": [
		"SetWantedLevelMultiplier(${1:float multiplier})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SetWantedLevelDifficulty()": {
	  "prefix": "SetWantedLevelDifficulty",
	  "body": [
		"SetWantedLevelDifficulty(${1:Player player}, ${2:float difficulty})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nMax value is 1.0  \n"
	},
	"SimulatePlayerInputGait()": {
	  "prefix": "SimulatePlayerInputGait",
	  "body": [
		"SimulatePlayerInputGait(${1:Player control}, ${2:float amount}, ${3:int gaitType}, ${4:float speed}, ${5:BOOL p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nThis is to make the player walk without accepting input from INPUT.  \ngaitType is in increments of 100s. 2000, 500, 300, 200, etc.  \np4 is always 1 and p5 is always 0.  \nC# Example :  \nFunction.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms  \n"
	},
	"SpecialAbilityChargeAbsolute()": {
	  "prefix": "SpecialAbilityChargeAbsolute",
	  "body": [
		"SpecialAbilityChargeAbsolute(${1:Player player}, ${2:int p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\np1 appears as 5, 10, 15, 25, or 30. p2 is always true.  \n"
	},
	"SpecialAbilityChargeContinuous()": {
	  "prefix": "SpecialAbilityChargeContinuous",
	  "body": [
		"SpecialAbilityChargeContinuous(${1:Player player}, ${2:Ped p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\np1 appears to always be 1 (only comes up twice)  \n"
	},
	"SpecialAbilityChargeLarge()": {
	  "prefix": "SpecialAbilityChargeLarge",
	  "body": [
		"SpecialAbilityChargeLarge(${1:Player player}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\n2 matches. p1 was always true.  \n"
	},
	"SpecialAbilityChargeMedium()": {
	  "prefix": "SpecialAbilityChargeMedium",
	  "body": [
		"SpecialAbilityChargeMedium(${1:Player player}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nOnly 1 match. Both p1 & p2 were true.  \n"
	},
	"ResetSpecialAbilityControlsCinematic()": {
	  "prefix": "ResetSpecialAbilityControlsCinematic",
	  "body": "ResetSpecialAbilityControlsCinematic",
	  "description": "OLD NAME, PLEASE USE SpecialAbilityChargeNormalized INSTEAD!"
	},
	"SpecialAbilityChargeNormalized()": {
	  "prefix": "SpecialAbilityChargeNormalized",
	  "body": [
		"SpecialAbilityChargeNormalized(${1:Player player}, ${2:float normalizedValue}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nnormalizedValue is from 0.0 - 1.0  \np2 is always 1  \n\nOld name: ResetSpecialAbilityControlsCinematic"
	},
	"SpecialAbilityChargeSmall()": {
	  "prefix": "SpecialAbilityChargeSmall",
	  "body": [
		"SpecialAbilityChargeSmall(${1:Player player}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nEvery occurrence of p1 & p2 were both true.  \n"
	},
	"SpecialAbilityDeactivate()": {
	  "prefix": "SpecialAbilityDeactivate",
	  "body": [
		"SpecialAbilityDeactivate(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SpecialAbilityDeactivateFast()": {
	  "prefix": "SpecialAbilityDeactivateFast",
	  "body": [
		"SpecialAbilityDeactivateFast(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SpecialAbilityDepleteMeter()": {
	  "prefix": "SpecialAbilityDepleteMeter",
	  "body": [
		"SpecialAbilityDepleteMeter(${1:Player player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\np1 was always true.  \n"
	},
	"SpecialAbilityFillMeter()": {
	  "prefix": "SpecialAbilityFillMeter",
	  "body": [
		"SpecialAbilityFillMeter(${1:Player player}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nAlso known as _RECHARGE_SPECIAL_ABILITY  \n"
	},
	"SpecialAbilityLock()": {
	  "prefix": "SpecialAbilityLock",
	  "body": [
		"SpecialAbilityLock(${1:Hash playerModel})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SpecialAbilityUnlock()": {
	  "prefix": "SpecialAbilityUnlock",
	  "body": [
		"SpecialAbilityUnlock(${1:Hash playerModel})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"SpecialAbilityReset()": {
	  "prefix": "SpecialAbilityReset",
	  "body": [
		"SpecialAbilityReset(${1:Player player})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"StartFiringAmnesty()": {
	  "prefix": "StartFiringAmnesty",
	  "body": [
		"StartFiringAmnesty(${1:int duration})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"StartPlayerTeleport()": {
	  "prefix": "StartPlayerTeleport",
	  "body": [
		"StartPlayerTeleport(${1:Player player}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:BOOL p5}, ${7:BOOL findCollisionLand}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n"
	},
	"StopPlayerTeleport()": {
	  "prefix": "StopPlayerTeleport",
	  "body": [
		"StopPlayerTeleport()"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nDisables the player's teleportation  \n"
	},
	"N_0x9a987297ed8bd838()": {
	  "prefix": "N_0x9a987297ed8bd838",
	  "body": "N_0x9a987297ed8bd838",
	  "description": "OLD NAME, PLEASE USE SwitchCrimeType INSTEAD!"
	},
	"SwitchCrimeType()": {
	  "prefix": "SwitchCrimeType",
	  "body": [
		"SwitchCrimeType(${1:Player player}, ${2:int p1})"
	  ],
	  "description": "Namespace: PLAYER\nReturns: void\n\nThis was previously named as \"RESERVE_ENTITY_EXPLODES_ON_HIGH_EXPLOSION_COMBO\"  \nwhich is obviously incorrect.  \nSeems to only appear in scripts used in Singleplayer. p1 ranges from 2 - 46.  \nI assume this switches the crime type  \n\nOld name: N_0x9a987297ed8bd838"
	},
	"IsRecording()": {
	  "prefix": "IsRecording",
	  "body": [
		"IsRecording()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: BOOL\n\nChecks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)  \nmov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944  \nretn  \n"
	},
	"N_0x13b350b8ad0eee10()": {
	  "prefix": "N_0x13b350b8ad0eee10",
	  "body": [
		"N_0x13b350b8ad0eee10()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n"
	},
	"N_0x208784099002bc30()": {
	  "prefix": "N_0x208784099002bc30",
	  "body": [
		"N_0x208784099002bc30(${1:char* missionNameLabel}, ${2:Any p1})"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n\n-This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -  \nfirst one seems to be a string of a mission name, second one seems to be a bool/toggle  \np1 was always 0.  \n"
	},
	"N_0x293220da1b46cebc()": {
	  "prefix": "N_0x293220da1b46cebc",
	  "body": [
		"N_0x293220da1b46cebc(${1:float p0}, ${2:float p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n"
	},
	"N_0x33d47e85b476abcd()": {
	  "prefix": "N_0x33d47e85b476abcd",
	  "body": [
		"N_0x33d47e85b476abcd(${1:BOOL* p0})"
	  ],
	  "description": "Namespace: RECORDING\nReturns: BOOL\n"
	},
	"N_0x4282e08174868be3()": {
	  "prefix": "N_0x4282e08174868be3",
	  "body": [
		"N_0x4282e08174868be3()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: Any\n"
	},
	"N_0x644546ec5287471b()": {
	  "prefix": "N_0x644546ec5287471b",
	  "body": [
		"N_0x644546ec5287471b()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: BOOL\n"
	},
	"N_0x48621c9fca3ebd28()": {
	  "prefix": "N_0x48621c9fca3ebd28",
	  "body": [
		"N_0x48621c9fca3ebd28(${1:BOOL p0})"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n"
	},
	"N_0x66972397e0757e7a()": {
	  "prefix": "N_0x66972397e0757e7a",
	  "body": [
		"N_0x66972397e0757e7a(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x81cbae94390f9f89()": {
	  "prefix": "N_0x81cbae94390f9f89",
	  "body": [
		"N_0x81cbae94390f9f89()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n"
	},
	"N_0xaf66dcee6609b148()": {
	  "prefix": "N_0xaf66dcee6609b148",
	  "body": [
		"N_0xaf66dcee6609b148()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n"
	},
	"N_0xdf4b952f7d381b95()": {
	  "prefix": "N_0xdf4b952f7d381b95",
	  "body": [
		"N_0xdf4b952f7d381b95()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: Any\n"
	},
	"N_0xf854439efbb3b583()": {
	  "prefix": "N_0xf854439efbb3b583",
	  "body": [
		"N_0xf854439efbb3b583()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n"
	},
	"N_0xc3ac2fff9612ac81()": {
	  "prefix": "N_0xc3ac2fff9612ac81",
	  "body": "N_0xc3ac2fff9612ac81",
	  "description": "OLD NAME, PLEASE USE StartRecording INSTEAD!"
	},
	"StartRecording()": {
	  "prefix": "StartRecording",
	  "body": [
		"StartRecording(${1:int mode})"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n\nStarts recording a replay.  \nIf mode is 0, turns on action replay.  \nIf mode is 1, starts recording.  \nIf already recording a replay, does nothing.  \n\nOld name: N_0xc3ac2fff9612ac81"
	},
	"StopRecording()": {
	  "prefix": "StopRecording",
	  "body": "StopRecording",
	  "description": "OLD NAME, PLEASE USE StopRecordingAndSaveClip INSTEAD!"
	},
	"StopRecordingAndSaveClip()": {
	  "prefix": "StopRecordingAndSaveClip",
	  "body": [
		"StopRecordingAndSaveClip()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n\nStops recording and saves the recorded clip.  \n\nOld name: StopRecording"
	},
	"N_0xeb2d525b57f42b40()": {
	  "prefix": "N_0xeb2d525b57f42b40",
	  "body": "N_0xeb2d525b57f42b40",
	  "description": "OLD NAME, PLEASE USE StopRecordingThisFrame INSTEAD!"
	},
	"StopRecordingThisFrame()": {
	  "prefix": "StopRecordingThisFrame",
	  "body": [
		"StopRecordingThisFrame()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\nThis disable the recording feature and has to be called every frame.\nOld name: N_0xeb2d525b57f42b40"
	},
	"N_0x88bb3507ed41a240()": {
	  "prefix": "N_0x88bb3507ed41a240",
	  "body": "N_0x88bb3507ed41a240",
	  "description": "OLD NAME, PLEASE USE StopRecordingAndDiscardClip INSTEAD!"
	},
	"StopRecordingAndDiscardClip()": {
	  "prefix": "StopRecordingAndDiscardClip",
	  "body": [
		"StopRecordingAndDiscardClip()"
	  ],
	  "description": "Namespace: RECORDING\nReturns: void\n\nStops recording and discards the recorded clip.  \n\nOld name: N_0x88bb3507ed41a240"
	},
	"IsInteriorRenderingDisabled()": {
	  "prefix": "IsInteriorRenderingDisabled",
	  "body": [
		"IsInteriorRenderingDisabled()"
	  ],
	  "description": "Namespace: RENDERING\nReturns: BOOL\n\nReturns a bool if interior rendering is disabled, if yes, all \"normal\" rendered interiors are invisible  \n"
	},
	"N_0x49da8145672b2725()": {
	  "prefix": "N_0x49da8145672b2725",
	  "body": "N_0x49da8145672b2725",
	  "description": "OLD NAME, PLEASE USE ActivateRockstarEditor INSTEAD!"
	},
	"ActivateRockstarEditor()": {
	  "prefix": "ActivateRockstarEditor",
	  "body": [
		"ActivateRockstarEditor()"
	  ],
	  "description": "Namespace: RENDERING\nReturns: void\n\nShow Rockstar Editor Menu  \nby I'm Not MentaL  \n----------  \n\"new_editor\" menu  \n\nOld name: N_0x49da8145672b2725"
	},
	"N_0x5ad3932daeb1e5d3()": {
	  "prefix": "N_0x5ad3932daeb1e5d3",
	  "body": [
		"N_0x5ad3932daeb1e5d3()"
	  ],
	  "description": "Namespace: RENDERING\nReturns: void\n\nDisables some other rendering (internal)  \n"
	},
	"N_0x7e2bd3ef6c205f09()": {
	  "prefix": "N_0x7e2bd3ef6c205f09",
	  "body": [
		"N_0x7e2bd3ef6c205f09(${1:char* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: RENDERING\nReturns: void\n**This native does absolutely nothing, just a nullsub**\n\n\nSomething to do with phone cameras.  \nstartup.c4:  \nvoid sub_2a3d() {  \n    UNK2::_7E2BD3EF6C205F09(\"No_Filter\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam1\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam2\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam3\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam4\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam5\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam6\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam7\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam9\", 1);  \n    UNK2::_7E2BD3EF6C205F09(\"phone_cam12\", 0);  \n}  \n"
	},
	"N_0xe058175f8eafe79a()": {
	  "prefix": "N_0xe058175f8eafe79a",
	  "body": [
		"N_0xe058175f8eafe79a(${1:BOOL p0})"
	  ],
	  "description": "Namespace: RENDERING\nReturns: void\n"
	},
	"N_0x3353d13f09307691()": {
	  "prefix": "N_0x3353d13f09307691",
	  "body": "N_0x3353d13f09307691",
	  "description": "OLD NAME, PLEASE USE ResetEditorValues INSTEAD!"
	},
	"ResetEditorValues()": {
	  "prefix": "ResetEditorValues",
	  "body": [
		"ResetEditorValues()"
	  ],
	  "description": "Namespace: RENDERING\nReturns: void\n\nSets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.  \n\nOld name: N_0x3353d13f09307691"
	},
	"N_0xdadfada5a20143a8()": {
	  "prefix": "N_0xdadfada5a20143a8",
	  "body": "N_0xdadfada5a20143a8",
	  "description": "OLD NAME, PLEASE USE BeginEnumeratingThreads INSTEAD!"
	},
	"BeginEnumeratingThreads()": {
	  "prefix": "BeginEnumeratingThreads",
	  "body": [
		"BeginEnumeratingThreads()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n\nMulleDK19: Starts a new enumeration of the current threads.  \nCall this first, then _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION (0x30B4FA1C82DD4B9F)  \nsee _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION (0x30B4FA1C82DD4B9F) for an example  \n\nOld name: N_0xdadfada5a20143a8"
	},
	"N_0xf86aa3c56ba31381()": {
	  "prefix": "N_0xf86aa3c56ba31381",
	  "body": "N_0xf86aa3c56ba31381",
	  "description": "OLD NAME, PLEASE USE DoesScriptWithNameHashExist INSTEAD!"
	},
	"DoesScriptWithNameHashExist()": {
	  "prefix": "DoesScriptWithNameHashExist",
	  "body": [
		"DoesScriptWithNameHashExist(${1:Hash scriptHash})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n\nformerly _IS_STREAMED_SCRIPT_RUNNING  \nJenkins hash: 0x19EAE282  \n\nOld name: N_0xf86aa3c56ba31381"
	},
	"DoesScriptExist()": {
	  "prefix": "DoesScriptExist",
	  "body": [
		"DoesScriptExist(${1:char* scriptName})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n\nFor a full list, see here: pastebin.com/yLNWicUi  \n"
	},
	"GetEventData()": {
	  "prefix": "GetEventData",
	  "body": [
		"GetEventData(${1:int eventGroup}, ${2:int eventIndex}, ${3:int* argStruct}, ${4:int argStructSize})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n\neventGroup: 0 = CEventGroupScriptAI, 1 = CEventGroupScriptNetwork  \n"
	},
	"GetEventAtIndex()": {
	  "prefix": "GetEventAtIndex",
	  "body": [
		"GetEventAtIndex(${1:int eventGroup}, ${2:int eventIndex})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: int\n\neventGroup: 0 = CEventGroupScriptAI, 1 = CEventGroupScriptNetwork  \n"
	},
	"GetEventExists()": {
	  "prefix": "GetEventExists",
	  "body": [
		"GetEventExists(${1:int eventGroup}, ${2:int eventIndex})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n\neventGroup: 0 = CEventGroupScriptAI, 1 = CEventGroupScriptNetwork  \n"
	},
	"GetThisScriptHash()": {
	  "prefix": "GetThisScriptHash",
	  "body": "GetThisScriptHash",
	  "description": "OLD NAME, PLEASE USE GetHashOfThisScriptName INSTEAD!"
	},
	"GetHashOfThisScriptName()": {
	  "prefix": "GetHashOfThisScriptName",
	  "body": [
		"GetHashOfThisScriptName()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: Hash\n\nOld name: GetThisScriptHash"
	},
	"N_0x30b4fa1c82dd4b9f()": {
	  "prefix": "N_0x30b4fa1c82dd4b9f",
	  "body": "N_0x30b4fa1c82dd4b9f",
	  "description": "OLD NAME, PLEASE USE GetIdOfNextThreadInEnumeration INSTEAD!"
	},
	"GetIdOfNextThreadInEnumeration()": {
	  "prefix": "GetIdOfNextThreadInEnumeration",
	  "body": [
		"GetIdOfNextThreadInEnumeration()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: int\n\nMulleDK19: Gets the ID of the next active thread.  \nFirst call _BEGIN_ENUMERATE_THREADS (0xDADFADA5A20143A8).  \nAny subsequent call to this function will then return the ID of the next active thread.  \nIf the function returns 0, the end of the enumeration has been reached.  \n-----------------------------------------------------------------------  \nHere's an example:  \n\tstd::vector<int> vecCurrentThreads;  \n\tvoid update_current_threads_list()  \n\t{  \nvecCurrentThreads.clear();  \n_BEGIN_ENUMERATING_THREADS();  \nint id = _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION();  \nwhile (id != 0)  \n{  \n\tid = _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION();  \n\tvecCurrentThreads.push_back(id);  \n}  \n\t}  \n\nOld name: N_0x30b4fa1c82dd4b9f"
	},
	"GetIdOfThisThread()": {
	  "prefix": "GetIdOfThisThread",
	  "body": [
		"GetIdOfThisThread()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: int\n"
	},
	"GetThreadName()": {
	  "prefix": "GetThreadName",
	  "body": "GetThreadName",
	  "description": "OLD NAME, PLEASE USE GetNameOfThread INSTEAD!"
	},
	"GetNameOfThread()": {
	  "prefix": "GetNameOfThread",
	  "body": [
		"GetNameOfThread(${1:int threadId})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: char*\n\nThe reversed code looks like this (Sasuke78200)  \n//  \nchar g_szScriptName[64];  \nchar* _0xBE7ACD89(int a_iThreadID)  \n{  \n\tscrThread* l_pThread;  \n\t// Get the script thread  \n\tl_pThread = GetThreadByID(a_iThreadID);\t  \n\tif(l_pThread == 0 || l_pThread->m_iThreadState == 2)  \n\t{  \nstrncpy(g_szScriptName, \"\", 64);  \n\t}  \n\telse  \n\t{  \nstrncpy(g_szScriptName, l_pThread->m_szScriptName, 64);  \n\t}\t  \n\treturn g_szScriptName;  \n}  \n\nOld name: GetThreadName"
	},
	"GetNoLoadingScreen()": {
	  "prefix": "GetNoLoadingScreen",
	  "body": [
		"GetNoLoadingScreen()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n"
	},
	"GetNumberOfEvents()": {
	  "prefix": "GetNumberOfEvents",
	  "body": [
		"GetNumberOfEvents(${1:int eventGroup})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: int\n\neventGroup: 0 = CEventGroupScriptAI, 1 = CEventGroupScriptNetwork  \n"
	},
	"GetThisScriptName()": {
	  "prefix": "GetThisScriptName",
	  "body": [
		"GetThisScriptName()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: char*\n"
	},
	"GetNumberOfInstancesOfStreamedScript()": {
	  "prefix": "GetNumberOfInstancesOfStreamedScript",
	  "body": "GetNumberOfInstancesOfStreamedScript",
	  "description": "OLD NAME, PLEASE USE GetNumberOfInstancesOfScriptWithNameHash INSTEAD!"
	},
	"GetNumberOfInstancesOfScriptWithNameHash()": {
	  "prefix": "GetNumberOfInstancesOfScriptWithNameHash",
	  "body": [
		"GetNumberOfInstancesOfScriptWithNameHash(${1:Hash scriptHash})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: int\n\nGets the number of instances of the specified script is currently running.  \nActually returns numInstances - 1.  \nif (scriptPtr)  \n    v3 = GetNumberOfInstancesOfScript(scriptPtr) - 1;  \nreturn v3;  \n\nOld name: GetNumberOfInstancesOfStreamedScript"
	},
	"HasScriptLoaded()": {
	  "prefix": "HasScriptLoaded",
	  "body": [
		"HasScriptLoaded(${1:char* scriptName})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n\nReturns if a script has been loaded into the game. Used to see if a script was loaded after requesting.  \nFor a full list, see here: pastebin.com/yLNWicUi  \n"
	},
	"HasStreamedScriptLoaded()": {
	  "prefix": "HasStreamedScriptLoaded",
	  "body": "HasStreamedScriptLoaded",
	  "description": "OLD NAME, PLEASE USE HasScriptWithNameHashLoaded INSTEAD!"
	},
	"HasScriptWithNameHashLoaded()": {
	  "prefix": "HasScriptWithNameHashLoaded",
	  "body": [
		"HasScriptWithNameHashLoaded(${1:Hash scriptHash})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n\nOld name: HasStreamedScriptLoaded"
	},
	"IsThreadActive()": {
	  "prefix": "IsThreadActive",
	  "body": [
		"IsThreadActive(${1:int threadId})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: BOOL\n"
	},
	"N_0xa40cc53df8e50837()": {
	  "prefix": "N_0xa40cc53df8e50837",
	  "body": [
		"N_0xa40cc53df8e50837(${1:BOOL p0}, ${2:Any args}, ${3:int argCount}, ${4:int bit})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n"
	},
	"N_0xb1577667c3708f9b()": {
	  "prefix": "N_0xb1577667c3708f9b",
	  "body": [
		"N_0xb1577667c3708f9b()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n"
	},
	"RequestStreamedScript()": {
	  "prefix": "RequestStreamedScript",
	  "body": "RequestStreamedScript",
	  "description": "OLD NAME, PLEASE USE RequestScriptWithNameHash INSTEAD!"
	},
	"RequestScriptWithNameHash()": {
	  "prefix": "RequestScriptWithNameHash",
	  "body": [
		"RequestScriptWithNameHash(${1:Hash scriptHash})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n\nformerly _REQUEST_STREAMED_SCRIPT  \n\nOld name: RequestStreamedScript"
	},
	"SetScriptAsNoLongerNeeded()": {
	  "prefix": "SetScriptAsNoLongerNeeded",
	  "body": [
		"SetScriptAsNoLongerNeeded(${1:char* scriptName})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n\nFor a full list, see here: pastebin.com/yLNWicUi  \n"
	},
	"RequestScript()": {
	  "prefix": "RequestScript",
	  "body": [
		"RequestScript(${1:char* scriptName})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n\nFor a full list, see here: pastebin.com/yLNWicUi  \n"
	},
	"ShutdownLoadingScreen()": {
	  "prefix": "ShutdownLoadingScreen",
	  "body": [
		"ShutdownLoadingScreen()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n"
	},
	"TerminateThisThread()": {
	  "prefix": "TerminateThisThread",
	  "body": [
		"TerminateThisThread()"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n"
	},
	"SetNoLoadingScreen()": {
	  "prefix": "SetNoLoadingScreen",
	  "body": [
		"SetNoLoadingScreen(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n"
	},
	"TriggerScriptEvent()": {
	  "prefix": "TriggerScriptEvent",
	  "body": [
		"TriggerScriptEvent(${1:int eventGroup}, ${2:int* args}, ${3:int argCount}, ${4:int bit})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n\nyis  \neventGroup: 0 = CEventGroupScriptAI, 1 = CEventGroupScriptNetwork  \n^^ I'm assuming it's like the rest with this parameter.  \n"
	},
	"SetStreamedScriptAsNoLongerNeeded()": {
	  "prefix": "SetStreamedScriptAsNoLongerNeeded",
	  "body": "SetStreamedScriptAsNoLongerNeeded",
	  "description": "OLD NAME, PLEASE USE SetScriptWithNameHashAsNoLongerNeeded INSTEAD!"
	},
	"SetScriptWithNameHashAsNoLongerNeeded()": {
	  "prefix": "SetScriptWithNameHashAsNoLongerNeeded",
	  "body": [
		"SetScriptWithNameHashAsNoLongerNeeded(${1:Hash scriptHash})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n\nOld name: SetStreamedScriptAsNoLongerNeeded"
	},
	"TerminateThread()": {
	  "prefix": "TerminateThread",
	  "body": [
		"TerminateThread(${1:int threadId})"
	  ],
	  "description": "Namespace: SCRIPT\nReturns: void\n"
	},
	"N_0x65287525d951f6be()": {
	  "prefix": "N_0x65287525d951f6be",
	  "body": "N_0x65287525d951f6be",
	  "description": "OLD NAME, PLEASE USE GetShapeTestResultEx INSTEAD!"
	},
	"GetShapeTestResultEx()": {
	  "prefix": "GetShapeTestResultEx",
	  "body": [
		"GetShapeTestResultEx(${1:int rayHandle}, ${2:BOOL* hit}, ${3:Vector3* endCoords}, ${4:Vector3* surfaceNormal}, ${5:Hash* materialHash}, ${6:Entity* entityHit})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nbehaves exactly the same way as GET_SHAPE_TEST_RESULT except it has one extra parameter (_materialHash).  \nQuick disassembly seems to indicate that the unknown is a hash. EDIT: Seems to be the hash of the hit material or surface type.  \nfound a materialFX.dat list of them but not sure if it has to do with this native yet.  \nmaterials (full list): pastebin.com/gyHjsYBK  \n\nOld name: N_0x65287525d951f6be"
	},
	"N_0x37181417ce7c8900()": {
	  "prefix": "N_0x37181417ce7c8900",
	  "body": "N_0x37181417ce7c8900",
	  "description": "OLD NAME, PLEASE USE StartShapeTestBound INSTEAD!"
	},
	"StartShapeTestBound()": {
	  "prefix": "StartShapeTestBound",
	  "body": [
		"StartShapeTestBound(${1:Entity entity}, ${2:int flags1}, ${3:int flags2})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nOld name: N_0x37181417ce7c8900"
	},
	"GetRaycastResult()": {
	  "prefix": "GetRaycastResult",
	  "body": "GetRaycastResult",
	  "description": "OLD NAME, PLEASE USE GetShapeTestResult INSTEAD!"
	},
	"GetShapeTestResult()": {
	  "prefix": "GetShapeTestResult",
	  "body": [
		"GetShapeTestResult(${1:int rayHandle}, ${2:BOOL* hit}, ${3:Vector3* endCoords}, ${4:Vector3* surfaceNormal}, ${5:Entity* entityHit})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nParameters:  \nrayHandle - Ray Handle from a casted ray, as returned by CAST_RAY_POINT_TO_POINT  \nhit - Where to store whether or not it hit anything. False is when the ray reached its destination.  \nendCoords - Where to store the world-coords of where the ray was stopped (by hitting its desired max range or by colliding with an entity/the map)  \nsurfaceNormal - Where to store the surface-normal coords (NOT relative to the game world) of where the entity was hit by the ray  \nentityHit - Where to store the handle of the entity hit by the ray  \nReturns:  \nResult? Some type of enum.  \nNOTE: To get the offset-coords of where the ray hit relative to the entity that it hit (which is NOT the same as surfaceNormal), you can use these two natives:  \nVector3 offset = ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entityHit, endCoords.x, endCoords.y, endCoords.z);  \nVector3 entitySpotCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entityHit, offset.x, offset.y, offset.z);  \nUse ENTITY::GET_ENTITY_TYPE(entityHit) to quickly distinguish what type of entity you hit (ped/vehicle/object - 1/2/3)  \n\nOld name: GetRaycastResult"
	},
	"N_0xfe466162c4401d18()": {
	  "prefix": "N_0xfe466162c4401d18",
	  "body": "N_0xfe466162c4401d18",
	  "description": "OLD NAME, PLEASE USE StartShapeTestBox INSTEAD!"
	},
	"StartShapeTestBox()": {
	  "prefix": "StartShapeTestBox",
	  "body": [
		"StartShapeTestBox(${1:float x}, ${2:float y}, ${3:float z}, ${4:float x1}, ${5:float y2}, ${6:float z2}, ${7:float rotX}, ${8:float rotY}, ${9:float rotZ}, ${10:Any p9}, ${11:Any p10}, ${12:Any entity}, ${13:Any p12})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nOld name: N_0xfe466162c4401d18"
	},
	"N_0x2b3334bca57cd799()": {
	  "prefix": "N_0x2b3334bca57cd799",
	  "body": "N_0x2b3334bca57cd799",
	  "description": "OLD NAME, PLEASE USE ShapeTestResultEntity INSTEAD!"
	},
	"ShapeTestResultEntity()": {
	  "prefix": "ShapeTestResultEntity",
	  "body": [
		"ShapeTestResultEntity(${1:Entity entityHit})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: void\n\nOld name: N_0x2b3334bca57cd799"
	},
	"Cast_3dRayPointToPoint()": {
	  "prefix": "Cast_3dRayPointToPoint",
	  "body": "Cast_3dRayPointToPoint",
	  "description": "OLD NAME, PLEASE USE StartShapeTestCapsule INSTEAD!"
	},
	"StartShapeTestCapsule()": {
	  "prefix": "StartShapeTestCapsule",
	  "body": [
		"StartShapeTestCapsule(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float radius}, ${8:int flags}, ${9:Entity entity}, ${10:int p9})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nRaycast from point to point, where the ray has a radius.   \nflags:  \nvehicles=10  \npeds =12  \nIterating through flags yields many ped / vehicle/ object combinations  \np9 = 7, but no idea what it does  \nEntity is an entity to ignore  \n\nOld name: Cast_3dRayPointToPoint"
	},
	"N_0x052837721a854ec7()": {
	  "prefix": "N_0x052837721a854ec7",
	  "body": "N_0x052837721a854ec7",
	  "description": "OLD NAME, PLEASE USE StartShapeTestBoundingBox INSTEAD!"
	},
	"StartShapeTestBoundingBox()": {
	  "prefix": "StartShapeTestBoundingBox",
	  "body": [
		"StartShapeTestBoundingBox(${1:Entity entity}, ${2:int flags1}, ${3:int flags2})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nOld name: N_0x052837721a854ec7"
	},
	"N_0xe6ac6c45fbe83004()": {
	  "prefix": "N_0xe6ac6c45fbe83004",
	  "body": "N_0xe6ac6c45fbe83004",
	  "description": "OLD NAME, PLEASE USE StartShapeTestCapsule_2 INSTEAD!"
	},
	"StartShapeTestCapsule_2()": {
	  "prefix": "StartShapeTestCapsule_2",
	  "body": [
		"StartShapeTestCapsule_2(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float radius}, ${8:int flags}, ${9:Entity entity}, ${10:Any p9})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nPerforms the same type of trace as START_SHAPE_TEST_CAPSULE, but with some different hardcoded parameters.  \n\nOld name: N_0xe6ac6c45fbe83004"
	},
	"CastRayPointToPoint()": {
	  "prefix": "CastRayPointToPoint",
	  "body": "CastRayPointToPoint",
	  "description": "OLD NAME, PLEASE USE StartShapeTestRay INSTEAD!"
	},
	"StartShapeTestRay()": {
	  "prefix": "StartShapeTestRay",
	  "body": [
		"StartShapeTestRay(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int flags}, ${8:Entity entity}, ${9:int p8})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nNot sure how or why this differs from 0x7EE9F5D83DD4F90E, but it does.  \nThis function casts a ray from Point1 to Point2 and returns it's ray handle.  A simple ray cast will 'shoot' a line from point A to point B, and return whether or not the ray reached it's destination or if it hit anything and if it did hit anything, will return the handle of what it hit (entity handle) and coordinates of where the ray reached.  \nYou can use _GET_RAYCAST_RESULT to get the result of the raycast  \nEntity is an entity to ignore, such as the player.  \nFlags are intersection bit flags.  They tell the ray what to care about and what not to care about when casting. Passing -1 will intersect with everything, presumably.  \nFlags:  \n1: Intersect with map  \n2: Intersect with vehicles (used to be mission entities?) (includes train)  \n4: Intersect with peds? (same as 8)  \n8: Intersect with peds? (same as 4)  \n16: Intersect with objects  \n32: Water?  \n64: Unknown  \n128: Unknown  \n256: Intersect with vegetation (plants, coral. trees not included)  \nNOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres.  \n\nOld name: CastRayPointToPoint"
	},
	"N_0x7ee9f5d83dd4f90e()": {
	  "prefix": "N_0x7ee9f5d83dd4f90e",
	  "body": "N_0x7ee9f5d83dd4f90e",
	  "description": "OLD NAME, PLEASE USE StartShapeTestLosProbe INSTEAD!"
	},
	"StartShapeTestLosProbe()": {
	  "prefix": "StartShapeTestLosProbe",
	  "body": [
		"StartShapeTestLosProbe(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int flags}, ${8:Entity ent}, ${9:int p8})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nReturns a ray (?) going from x1, y1, z1 to x2, y2, z2.  \nentity = 0 most of the time.  \np8 = 7 most of the time.  \nResult of this function is passed to WORLDPROBE::_GET_RAYCAST_RESULT as a first argument.  \n\nOld name: N_0x7ee9f5d83dd4f90e"
	},
	"N_0xff6be494c7987f34()": {
	  "prefix": "N_0xff6be494c7987f34",
	  "body": "N_0xff6be494c7987f34",
	  "description": "OLD NAME, PLEASE USE StartShapeTestSurroundingCoords INSTEAD!"
	},
	"StartShapeTestSurroundingCoords()": {
	  "prefix": "StartShapeTestSurroundingCoords",
	  "body": [
		"StartShapeTestSurroundingCoords(${1:Vector3* pVec1}, ${2:Vector3* pVec2}, ${3:int flag}, ${4:Entity entity}, ${5:int flag2})"
	  ],
	  "description": "Namespace: SHAPETEST\nReturns: int\n\nit returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.  \nIn its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7  \n\nOld name: N_0xff6be494c7987f34"
	},
	"N_0x03a93ff1a2ca0864()": {
	  "prefix": "N_0x03a93ff1a2ca0864",
	  "body": "N_0x03a93ff1a2ca0864",
	  "description": "OLD NAME, PLEASE USE GetTotalScInboxIds INSTEAD!"
	},
	"GetTotalScInboxIds()": {
	  "prefix": "GetTotalScInboxIds",
	  "body": [
		"GetTotalScInboxIds()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: int\n\nOld name: N_0x03a93ff1a2ca0864"
	},
	"N_0x93028f1db42bfd08()": {
	  "prefix": "N_0x93028f1db42bfd08",
	  "body": "N_0x93028f1db42bfd08",
	  "description": "OLD NAME, PLEASE USE IsScInboxValid INSTEAD!"
	},
	"IsScInboxValid()": {
	  "prefix": "IsScInboxValid",
	  "body": [
		"IsScInboxValid(${1:int p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nOld name: N_0x93028f1db42bfd08"
	},
	"N_0x07dbd622d9533857()": {
	  "prefix": "N_0x07dbd622d9533857",
	  "body": [
		"N_0x07dbd622d9533857(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x07c61676e5bb52cd()": {
	  "prefix": "N_0x07c61676e5bb52cd",
	  "body": [
		"N_0x07c61676e5bb52cd(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x0f73393bac7e6730()": {
	  "prefix": "N_0x0f73393bac7e6730",
	  "body": [
		"N_0x0f73393bac7e6730(${1:Any* p0}, ${2:int* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x116fb94dc4b79f17()": {
	  "prefix": "N_0x116fb94dc4b79f17",
	  "body": [
		"N_0x116fb94dc4b79f17(${1:char* p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n"
	},
	"N_0x16da8172459434aa()": {
	  "prefix": "N_0x16da8172459434aa",
	  "body": [
		"N_0x16da8172459434aa()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x1989c6e6f67e76a8()": {
	  "prefix": "N_0x1989c6e6f67e76a8",
	  "body": [
		"N_0x1989c6e6f67e76a8(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x19853b5b17d77bca()": {
	  "prefix": "N_0x19853b5b17d77bca",
	  "body": [
		"N_0x19853b5b17d77bca(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x1f1e9682483697c7()": {
	  "prefix": "N_0x1f1e9682483697c7",
	  "body": [
		"N_0x1f1e9682483697c7(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x1d4446a62d35b0d0()": {
	  "prefix": "N_0x1d4446a62d35b0d0",
	  "body": [
		"N_0x1d4446a62d35b0d0(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x287f1f75d2803595()": {
	  "prefix": "N_0x287f1f75d2803595",
	  "body": [
		"N_0x287f1f75d2803595(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x225798743970412b()": {
	  "prefix": "N_0x225798743970412b",
	  "body": [
		"N_0x225798743970412b(${1:int* p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x3001bef2feca3680()": {
	  "prefix": "N_0x3001bef2feca3680",
	  "body": [
		"N_0x3001bef2feca3680()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x2e89990ddff670c3()": {
	  "prefix": "N_0x2e89990ddff670c3",
	  "body": [
		"N_0x2e89990ddff670c3(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x4737980e8a283806()": {
	  "prefix": "N_0x4737980e8a283806",
	  "body": [
		"N_0x4737980e8a283806(${1:int p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x418dc16fae452c1c()": {
	  "prefix": "N_0x418dc16fae452c1c",
	  "body": [
		"N_0x418dc16fae452c1c(${1:int p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x487912fd248efddf()": {
	  "prefix": "N_0x487912fd248efddf",
	  "body": [
		"N_0x487912fd248efddf(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x44aca259d67651db()": {
	  "prefix": "N_0x44aca259d67651db",
	  "body": [
		"N_0x44aca259d67651db(${1:Any* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n"
	},
	"N_0x5c4ebffa98bdb41c()": {
	  "prefix": "N_0x5c4ebffa98bdb41c",
	  "body": [
		"N_0x5c4ebffa98bdb41c(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x4a7d6e727f941747()": {
	  "prefix": "N_0x4a7d6e727f941747",
	  "body": [
		"N_0x4a7d6e727f941747(${1:Any* p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x699e4a5c8c893a18()": {
	  "prefix": "N_0x699e4a5c8c893a18",
	  "body": [
		"N_0x699e4a5c8c893a18(${1:int p0}, ${2:char* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x675721c9f644d161()": {
	  "prefix": "N_0x675721c9f644d161",
	  "body": [
		"N_0x675721c9f644d161()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n"
	},
	"N_0x6bfb12ce158e3dd4()": {
	  "prefix": "N_0x6bfb12ce158e3dd4",
	  "body": [
		"N_0x6bfb12ce158e3dd4(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x6afd2cd753feef83()": {
	  "prefix": "N_0x6afd2cd753feef83",
	  "body": [
		"N_0x6afd2cd753feef83(${1:char* playerName})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nI put the argument as 'playerName' as when it's called in freemode.c TU27 X360 scripts. It's given a var that has GET_PLAYER_NAME stored in it via StringCopy.  \n"
	},
	"N_0x7db18ca8cad5b098()": {
	  "prefix": "N_0x7db18ca8cad5b098",
	  "body": [
		"N_0x7db18ca8cad5b098()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x700569dba175a77c()": {
	  "prefix": "N_0x700569dba175a77c",
	  "body": [
		"N_0x700569dba175a77c(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x8147fff6a718e1ad()": {
	  "prefix": "N_0x8147fff6a718e1ad",
	  "body": [
		"N_0x8147fff6a718e1ad(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x8416fe4e4629d7d7()": {
	  "prefix": "N_0x8416fe4e4629d7d7",
	  "body": [
		"N_0x8416fe4e4629d7d7(${1:char* p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nsfink: from scripts:  \nfunc_720(socialclub::_0x8416FE4E4629D7D7(\"bIgnoreCheaterOverride\"));  \nfunc_719(socialclub::_0x8416FE4E4629D7D7(\"bIgnoreBadSportOverride\"));  \n"
	},
	"N_0x85535acf97fc0969()": {
	  "prefix": "N_0x85535acf97fc0969",
	  "body": [
		"N_0x85535acf97fc0969(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x8cc469ab4d349b7c()": {
	  "prefix": "N_0x8cc469ab4d349b7c",
	  "body": [
		"N_0x8cc469ab4d349b7c(${1:int p0}, ${2:char* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x87e0052f08bd64e6()": {
	  "prefix": "N_0x87e0052f08bd64e6",
	  "body": [
		"N_0x87e0052f08bd64e6(${1:Any p0}, ${2:int* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x92da6e70ef249bd1()": {
	  "prefix": "N_0x92da6e70ef249bd1",
	  "body": [
		"N_0x92da6e70ef249bd1(${1:char* p0}, ${2:int* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x9237e334f6e43156()": {
	  "prefix": "N_0x9237e334f6e43156",
	  "body": [
		"N_0x9237e334f6e43156(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0x930de22f07b1cce3()": {
	  "prefix": "N_0x930de22f07b1cce3",
	  "body": [
		"N_0x930de22f07b1cce3(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: int\n\nUnknown.  \nSeems to return either 0, 1, or -1.  \n"
	},
	"N_0xa68d3d229f4f3b06()": {
	  "prefix": "N_0xa68d3d229f4f3b06",
	  "body": [
		"N_0xa68d3d229f4f3b06(${1:char* p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n"
	},
	"N_0xbc1cc91205ec8d6e()": {
	  "prefix": "N_0xbc1cc91205ec8d6e",
	  "body": [
		"N_0xbc1cc91205ec8d6e()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0xbfa0a56a817c6c7d()": {
	  "prefix": "N_0xbfa0a56a817c6c7d",
	  "body": [
		"N_0xbfa0a56a817c6c7d(${1:BOOL p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n"
	},
	"N_0xd0ee05fe193646ea()": {
	  "prefix": "N_0xd0ee05fe193646ea",
	  "body": [
		"N_0xd0ee05fe193646ea(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0xd302e99edf0449cf()": {
	  "prefix": "N_0xd302e99edf0449cf",
	  "body": [
		"N_0xd302e99edf0449cf(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0xd8122c407663b995()": {
	  "prefix": "N_0xd8122c407663b995",
	  "body": [
		"N_0xd8122c407663b995()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0xda024bdbd600f44a()": {
	  "prefix": "N_0xda024bdbd600f44a",
	  "body": [
		"N_0xda024bdbd600f44a(${1:int* networkHandle})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n\nIn scripts it's used with a var, that is used elsewhere in a check regarding if the given networkHandle is valid.  \n"
	},
	"N_0xdf649c4e9afdd788()": {
	  "prefix": "N_0xdf649c4e9afdd788",
	  "body": [
		"N_0xdf649c4e9afdd788()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0xeb2bf817463dfa28()": {
	  "prefix": "N_0xeb2bf817463dfa28",
	  "body": [
		"N_0xeb2bf817463dfa28(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"N_0xf22ca0fd74b80e7a()": {
	  "prefix": "N_0xf22ca0fd74b80e7a",
	  "body": [
		"N_0xf22ca0fd74b80e7a(${1:Any p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0xfe4c1d0d3b9cc17e()": {
	  "prefix": "N_0xfe4c1d0d3b9cc17e",
	  "body": [
		"N_0xfe4c1d0d3b9cc17e(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0xf6baaaf762e1bf40()": {
	  "prefix": "N_0xf6baaaf762e1bf40",
	  "body": [
		"N_0xf6baaaf762e1bf40(${1:char* p0}, ${2:int* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0x55df6db45179236e()": {
	  "prefix": "N_0x55df6db45179236e",
	  "body": "N_0x55df6db45179236e",
	  "description": "OLD NAME, PLEASE USE ScEmailMessageClearRecipList INSTEAD!"
	},
	"ScEmailMessageClearRecipList()": {
	  "prefix": "ScEmailMessageClearRecipList",
	  "body": [
		"ScEmailMessageClearRecipList()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n\nOld name: N_0x55df6db45179236e"
	},
	"N_0xff8f3a92b75ed67a()": {
	  "prefix": "N_0xff8f3a92b75ed67a",
	  "body": [
		"N_0xff8f3a92b75ed67a()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Any\n"
	},
	"ScEmailMessagePushGamerToRecipList()": {
	  "prefix": "ScEmailMessagePushGamerToRecipList",
	  "body": [
		"ScEmailMessagePushGamerToRecipList(${1:Player* player})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n"
	},
	"ScGetNickname()": {
	  "prefix": "ScGetNickname",
	  "body": [
		"ScGetNickname()"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Entity\n\nReturns the nickname of the logged-in Rockstar Social Club account.  \n"
	},
	"N_0x82e4a58babc15ae7()": {
	  "prefix": "N_0x82e4a58babc15ae7",
	  "body": "N_0x82e4a58babc15ae7",
	  "description": "OLD NAME, PLEASE USE ScGetCheckStringStatus INSTEAD!"
	},
	"ScGetCheckStringStatus()": {
	  "prefix": "ScGetCheckStringStatus",
	  "body": [
		"ScGetCheckStringStatus(${1:int taskHandle})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: int\n\nReturns the status of a _SC_START_CHECK_STRING_TASK task.  \nPossible return values:  \n0: not a profane string  \n1: a profane string  \n3: server error occurred  \n\nOld name: N_0x82e4a58babc15ae7"
	},
	"N_0x040addcbafa1018a()": {
	  "prefix": "N_0x040addcbafa1018a",
	  "body": "N_0x040addcbafa1018a",
	  "description": "OLD NAME, PLEASE USE ScInboxGetEmails INSTEAD!"
	},
	"ScInboxGetEmails()": {
	  "prefix": "ScInboxGetEmails",
	  "body": [
		"ScInboxGetEmails(${1:int offset}, ${2:int limit})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: void\n\nOld name: N_0x040addcbafa1018a"
	},
	"N_0xffe5c16f402d851d()": {
	  "prefix": "N_0xffe5c16f402d851d",
	  "body": "N_0xffe5c16f402d851d",
	  "description": "OLD NAME, PLEASE USE ScInboxMessageGetDataBool INSTEAD!"
	},
	"ScInboxMessageGetDataBool()": {
	  "prefix": "ScInboxMessageGetDataBool",
	  "body": [
		"ScInboxMessageGetDataBool(${1:int p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nOld name: N_0xffe5c16f402d851d"
	},
	"N_0x1753344c770358ae()": {
	  "prefix": "N_0x1753344c770358ae",
	  "body": "N_0x1753344c770358ae",
	  "description": "OLD NAME, PLEASE USE ScHasCheckStringTaskCompleted INSTEAD!"
	},
	"ScHasCheckStringTaskCompleted()": {
	  "prefix": "ScHasCheckStringTaskCompleted",
	  "body": [
		"ScHasCheckStringTaskCompleted(${1:int taskHandle})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nReturns whether or not a task started with _SC_START_CHECK_STRING_TASK has completed.  \n\nOld name: N_0x1753344c770358ae"
	},
	"ScInboxMessageGetDataString()": {
	  "prefix": "ScInboxMessageGetDataString",
	  "body": [
		"ScInboxMessageGetDataString(${1:int p0}, ${2:char* context}, ${3:char* out})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"ScInboxMessageGetDataInt()": {
	  "prefix": "ScInboxMessageGetDataInt",
	  "body": [
		"ScInboxMessageGetDataInt(${1:int p0}, ${2:char* context}, ${3:int* out})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"ScInboxMessageGetUgcdata()": {
	  "prefix": "ScInboxMessageGetUgcdata",
	  "body": [
		"ScInboxMessageGetUgcdata(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n"
	},
	"N_0xf3e31d16cbdcb304()": {
	  "prefix": "N_0xf3e31d16cbdcb304",
	  "body": "N_0xf3e31d16cbdcb304",
	  "description": "OLD NAME, PLEASE USE ScInboxMessageGetString INSTEAD!"
	},
	"ScInboxMessageGetString()": {
	  "prefix": "ScInboxMessageGetString",
	  "body": [
		"ScInboxMessageGetString(${1:int p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: char*\n\nOld name: N_0xf3e31d16cbdcb304"
	},
	"N_0xbb8ea16ecbc976c4()": {
	  "prefix": "N_0xbb8ea16ecbc976c4",
	  "body": "N_0xbb8ea16ecbc976c4",
	  "description": "OLD NAME, PLEASE USE ScInboxMessageInit INSTEAD!"
	},
	"ScInboxMessageInit()": {
	  "prefix": "ScInboxMessageInit",
	  "body": [
		"ScInboxMessageInit(${1:int p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: Hash\n\nOld name: N_0xbb8ea16ecbc976c4"
	},
	"N_0x2c015348cf19ca1d()": {
	  "prefix": "N_0x2c015348cf19ca1d",
	  "body": "N_0x2c015348cf19ca1d",
	  "description": "OLD NAME, PLEASE USE ScInboxMessagePop INSTEAD!"
	},
	"ScInboxMessagePop()": {
	  "prefix": "ScInboxMessagePop",
	  "body": [
		"ScInboxMessagePop(${1:int p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nOld name: N_0x2c015348cf19ca1d"
	},
	"N_0x75632c5ecd7ed843()": {
	  "prefix": "N_0x75632c5ecd7ed843",
	  "body": "N_0x75632c5ecd7ed843",
	  "description": "OLD NAME, PLEASE USE ScStartCheckStringTask INSTEAD!"
	},
	"ScStartCheckStringTask()": {
	  "prefix": "ScStartCheckStringTask",
	  "body": [
		"ScStartCheckStringTask(${1:char* string}, ${2:int* taskHandle})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nStarts a task to check an entered string for profanity on the ROS/Social Club services.  \nSee also: 1753344C770358AE, 82E4A58BABC15AE7.  \n\nOld name: N_0x75632c5ecd7ed843"
	},
	"N_0x9a2c8064b6c1e41a()": {
	  "prefix": "N_0x9a2c8064b6c1e41a",
	  "body": "N_0x9a2c8064b6c1e41a",
	  "description": "OLD NAME, PLEASE USE ScInboxMessagePush INSTEAD!"
	},
	"ScInboxMessagePush()": {
	  "prefix": "ScInboxMessagePush",
	  "body": [
		"ScInboxMessagePush(${1:int p0})"
	  ],
	  "description": "Namespace: SOCIALCLUB\nReturns: BOOL\n\nOld name: N_0x9a2c8064b6c1e41a"
	},
	"N_0xba52ff538ed2bc71()": {
	  "prefix": "N_0xba52ff538ed2bc71",
	  "body": "N_0xba52ff538ed2bc71",
	  "description": "OLD NAME, PLEASE USE GetNgstatBoolHash INSTEAD!"
	},
	"GetNgstatBoolHash()": {
	  "prefix": "GetNgstatBoolHash",
	  "body": [
		"GetNgstatBoolHash(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character}, ${5:char* section})"
	  ],
	  "description": "Namespace: STATS\nReturns: Hash\n\nNeeds more research. Gets the stat name of a masked bool?  \np4 - Usually \"_NGPSTAT_BOOL\" or \"_NGTATPSTAT_BOOL\". There may be more that I missed.  \n\nOld name: N_0xba52ff538ed2bc71"
	},
	"N_0x2b4cdca6f07ff3da()": {
	  "prefix": "N_0x2b4cdca6f07ff3da",
	  "body": "N_0x2b4cdca6f07ff3da",
	  "description": "OLD NAME, PLEASE USE GetNgstatIntHash INSTEAD!"
	},
	"GetNgstatIntHash()": {
	  "prefix": "GetNgstatIntHash",
	  "body": [
		"GetNgstatIntHash(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character}, ${5:char* section})"
	  ],
	  "description": "Namespace: STATS\nReturns: Hash\n\nNeeds more research. Gets the stat name of a masked int?  \np4 - Usually one of the following (there may be more that I missed):  \n-----> \"_APAPSTAT_INT\"  \n-----> \"_LRPSTAT_INT\"  \n-----> \"_NGPSTAT_INT\"  \n-----> \"_MP_APAPSTAT_INT\"  \n-----> \"_MP_LRPSTAT_INT\"  \n\nOld name: N_0x2b4cdca6f07ff3da"
	},
	"N_0x80c75307b1c42837()": {
	  "prefix": "N_0x80c75307b1c42837",
	  "body": "N_0x80c75307b1c42837",
	  "description": "OLD NAME, PLEASE USE GetPstatBoolHash INSTEAD!"
	},
	"GetPstatBoolHash()": {
	  "prefix": "GetPstatBoolHash",
	  "body": [
		"GetPstatBoolHash(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character})"
	  ],
	  "description": "Namespace: STATS\nReturns: Hash\n\nOld name: N_0x80c75307b1c42837"
	},
	"N_0x61e111e323419e07()": {
	  "prefix": "N_0x61e111e323419e07",
	  "body": "N_0x61e111e323419e07",
	  "description": "OLD NAME, PLEASE USE GetPstatIntHash INSTEAD!"
	},
	"GetPstatIntHash()": {
	  "prefix": "GetPstatIntHash",
	  "body": [
		"GetPstatIntHash(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character})"
	  ],
	  "description": "Namespace: STATS\nReturns: Hash\n\nOld name: N_0x61e111e323419e07"
	},
	"N_0xc4bb08ee7907471e()": {
	  "prefix": "N_0xc4bb08ee7907471e",
	  "body": "N_0xc4bb08ee7907471e",
	  "description": "OLD NAME, PLEASE USE GetTupstatBoolHash INSTEAD!"
	},
	"GetTupstatBoolHash()": {
	  "prefix": "GetTupstatBoolHash",
	  "body": [
		"GetTupstatBoolHash(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character})"
	  ],
	  "description": "Namespace: STATS\nReturns: Hash\n\nOld name: N_0xc4bb08ee7907471e"
	},
	"N_0xd16c2ad6b8e32854()": {
	  "prefix": "N_0xd16c2ad6b8e32854",
	  "body": "N_0xd16c2ad6b8e32854",
	  "description": "OLD NAME, PLEASE USE GetTupstatIntHash INSTEAD!"
	},
	"GetTupstatIntHash()": {
	  "prefix": "GetTupstatIntHash",
	  "body": [
		"GetTupstatIntHash(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character})"
	  ],
	  "description": "Namespace: STATS\nReturns: Hash\n\nOld name: N_0xd16c2ad6b8e32854"
	},
	"Leaderboards_2ReadByRadius()": {
	  "prefix": "Leaderboards_2ReadByRadius",
	  "body": [
		"Leaderboards_2ReadByRadius(${1:Any* p0}, ${2:Any p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"Leaderboards_2ReadByHandle()": {
	  "prefix": "Leaderboards_2ReadByHandle",
	  "body": [
		"Leaderboards_2ReadByHandle(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"Leaderboards_2ReadByRank()": {
	  "prefix": "Leaderboards_2ReadByRank",
	  "body": [
		"Leaderboards_2ReadByRank(${1:Any* p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"Leaderboards_2ReadByRow()": {
	  "prefix": "Leaderboards_2ReadByRow",
	  "body": [
		"Leaderboards_2ReadByRow(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any* p3}, ${5:Any p4}, ${6:Any* p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"Leaderboards_2ReadByScoreInt()": {
	  "prefix": "Leaderboards_2ReadByScoreInt",
	  "body": [
		"Leaderboards_2ReadByScoreInt(${1:Any* p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"Leaderboards_2ReadByScoreFloat()": {
	  "prefix": "Leaderboards_2ReadByScoreFloat",
	  "body": [
		"Leaderboards_2ReadByScoreFloat(${1:Any* p0}, ${2:float p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"Leaderboards_2WriteData()": {
	  "prefix": "Leaderboards_2WriteData",
	  "body": [
		"Leaderboards_2WriteData(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"Leaderboards_2ReadFriendsByRow()": {
	  "prefix": "Leaderboards_2ReadFriendsByRow",
	  "body": [
		"Leaderboards_2ReadFriendsByRow(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"LeaderboardsClearCacheData()": {
	  "prefix": "LeaderboardsClearCacheData",
	  "body": [
		"LeaderboardsClearCacheData()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"LeaderboardsCacheDataRow()": {
	  "prefix": "LeaderboardsCacheDataRow",
	  "body": [
		"LeaderboardsCacheDataRow(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x428eaf89e24f6c36()": {
	  "prefix": "N_0x428eaf89e24f6c36",
	  "body": "N_0x428eaf89e24f6c36",
	  "description": "OLD NAME, PLEASE USE LeaderboardsDeaths INSTEAD!"
	},
	"LeaderboardsDeaths()": {
	  "prefix": "LeaderboardsDeaths",
	  "body": [
		"LeaderboardsDeaths(${1:Hash statName}, ${2:float value})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nOld name: N_0x428eaf89e24f6c36"
	},
	"LeaderboardsGetCacheDataRow()": {
	  "prefix": "LeaderboardsGetCacheDataRow",
	  "body": [
		"LeaderboardsGetCacheDataRow(${1:Any p0}, ${2:Any p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"LeaderboardsGetCacheTime()": {
	  "prefix": "LeaderboardsGetCacheTime",
	  "body": [
		"LeaderboardsGetCacheTime(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"LeaderboardsGetCacheExists()": {
	  "prefix": "LeaderboardsGetCacheExists",
	  "body": [
		"LeaderboardsGetCacheExists(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"LeaderboardsGetColumnId()": {
	  "prefix": "LeaderboardsGetColumnId",
	  "body": [
		"LeaderboardsGetColumnId(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"LeaderboardsGetColumnType()": {
	  "prefix": "LeaderboardsGetColumnType",
	  "body": [
		"LeaderboardsGetColumnType(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"LeaderboardsGetNumberOfColumns()": {
	  "prefix": "LeaderboardsGetNumberOfColumns",
	  "body": [
		"LeaderboardsGetNumberOfColumns(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"LeaderboardsReadClear()": {
	  "prefix": "LeaderboardsReadClear",
	  "body": [
		"LeaderboardsReadClear(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"LeaderboardsReadPending()": {
	  "prefix": "LeaderboardsReadPending",
	  "body": [
		"LeaderboardsReadPending(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"LeaderboardsReadClearAll()": {
	  "prefix": "LeaderboardsReadClearAll",
	  "body": [
		"LeaderboardsReadClearAll()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x015b03ee1c43e6ec()": {
	  "prefix": "N_0x015b03ee1c43e6ec",
	  "body": [
		"N_0x015b03ee1c43e6ec(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"LeaderboardsReadSuccessful()": {
	  "prefix": "LeaderboardsReadSuccessful",
	  "body": [
		"LeaderboardsReadSuccessful(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x03c2eebb04b3fb72()": {
	  "prefix": "N_0x03c2eebb04b3fb72",
	  "body": [
		"N_0x03c2eebb04b3fb72(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x047cbed6f6f8b63c()": {
	  "prefix": "N_0x047cbed6f6f8b63c",
	  "body": [
		"N_0x047cbed6f6f8b63c()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x04d90ba8207ada2d()": {
	  "prefix": "N_0x04d90ba8207ada2d",
	  "body": [
		"N_0x04d90ba8207ada2d(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x06eaf70ae066441e()": {
	  "prefix": "N_0x06eaf70ae066441e",
	  "body": [
		"N_0x06eaf70ae066441e(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x0a50d2604e05cb94()": {
	  "prefix": "N_0x0a50d2604e05cb94",
	  "body": [
		"N_0x0a50d2604e05cb94(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x098760c7461724cd()": {
	  "prefix": "N_0x098760c7461724cd",
	  "body": [
		"N_0x098760c7461724cd()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x0b565b0aae56a0e8()": {
	  "prefix": "N_0x0b565b0aae56a0e8",
	  "body": [
		"N_0x0b565b0aae56a0e8(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x0a9c7f36e5d7b683()": {
	  "prefix": "N_0x0a9c7f36e5d7b683",
	  "body": [
		"N_0x0a9c7f36e5d7b683(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x0b8b7f74bf061c6d()": {
	  "prefix": "N_0x0b8b7f74bf061c6d",
	  "body": [
		"N_0x0b8b7f74bf061c6d()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x0bca1d2c47b0d269()": {
	  "prefix": "N_0x0bca1d2c47b0d269",
	  "body": [
		"N_0x0bca1d2c47b0d269(${1:Any p0}, ${2:Any p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x0d01d20616fc73fb()": {
	  "prefix": "N_0x0d01d20616fc73fb",
	  "body": [
		"N_0x0d01d20616fc73fb(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x0eacdf8487d5155a()": {
	  "prefix": "N_0x0eacdf8487d5155a",
	  "body": [
		"N_0x0eacdf8487d5155a(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x11ff1c80276097ed()": {
	  "prefix": "N_0x11ff1c80276097ed",
	  "body": [
		"N_0x11ff1c80276097ed(${1:char* p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x121fb4dddc2d5291()": {
	  "prefix": "N_0x121fb4dddc2d5291",
	  "body": [
		"N_0x121fb4dddc2d5291(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x14eda9ee27bd1626()": {
	  "prefix": "N_0x14eda9ee27bd1626",
	  "body": [
		"N_0x14eda9ee27bd1626(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x14e0b2d1ad1044e0()": {
	  "prefix": "N_0x14e0b2d1ad1044e0",
	  "body": [
		"N_0x14e0b2d1ad1044e0(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x164c5ff663790845()": {
	  "prefix": "N_0x164c5ff663790845",
	  "body": [
		"N_0x164c5ff663790845(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x1a7ce7cd3e653485()": {
	  "prefix": "N_0x1a7ce7cd3e653485",
	  "body": [
		"N_0x1a7ce7cd3e653485(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x1a8ea222f9c67dbb()": {
	  "prefix": "N_0x1a8ea222f9c67dbb",
	  "body": [
		"N_0x1a8ea222f9c67dbb(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x1cae5d2e3f9a07f0()": {
	  "prefix": "N_0x1cae5d2e3f9a07f0",
	  "body": [
		"N_0x1cae5d2e3f9a07f0(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x203b381133817079()": {
	  "prefix": "N_0x203b381133817079",
	  "body": [
		"N_0x203b381133817079(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x2605663bd4f23b5d()": {
	  "prefix": "N_0x2605663bd4f23b5d",
	  "body": [
		"N_0x2605663bd4f23b5d(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x26d7399b9587fe89()": {
	  "prefix": "N_0x26d7399b9587fe89",
	  "body": [
		"N_0x26d7399b9587fe89(${1:int p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nSTATS::0x343B27E2(0);  \nSTATS::0x343B27E2(1);  \nSTATS::0x343B27E2(2);  \nSTATS::0x343B27E2(3);  \nSTATS::0x343B27E2(4);  \nSTATS::0x343B27E2(5);  \nSTATS::0x343B27E2(6);  \nSTATS::0x343B27E2(7);  \nIdentical in ingamehud & maintransition.  \n"
	},
	"N_0x27aa1c973cacfe63()": {
	  "prefix": "N_0x27aa1c973cacfe63",
	  "body": [
		"N_0x27aa1c973cacfe63(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x28ecb8ac2f607db2()": {
	  "prefix": "N_0x28ecb8ac2f607db2",
	  "body": [
		"N_0x28ecb8ac2f607db2(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x282b6739644f4347()": {
	  "prefix": "N_0x282b6739644f4347",
	  "body": [
		"N_0x282b6739644f4347(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x2cd90358f67d0aa8()": {
	  "prefix": "N_0x2cd90358f67d0aa8",
	  "body": [
		"N_0x2cd90358f67d0aa8(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x2b69f5074c894811()": {
	  "prefix": "N_0x2b69f5074c894811",
	  "body": [
		"N_0x2b69f5074c894811(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x2e65248609523599()": {
	  "prefix": "N_0x2e65248609523599",
	  "body": [
		"N_0x2e65248609523599(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x30a6614c1f7799b8()": {
	  "prefix": "N_0x30a6614c1f7799b8",
	  "body": [
		"N_0x30a6614c1f7799b8(${1:Any p0}, ${2:float p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x3270f67eed31fbc1()": {
	  "prefix": "N_0x3270f67eed31fbc1",
	  "body": [
		"N_0x3270f67eed31fbc1(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x32cac93c9de73d32()": {
	  "prefix": "N_0x32cac93c9de73d32",
	  "body": [
		"N_0x32cac93c9de73d32()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x33d72899e24c3365()": {
	  "prefix": "N_0x33d72899e24c3365",
	  "body": [
		"N_0x33d72899e24c3365(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x34770b9ce0e03b91()": {
	  "prefix": "N_0x34770b9ce0e03b91",
	  "body": [
		"N_0x34770b9ce0e03b91(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x38491439b6ba7f7d()": {
	  "prefix": "N_0x38491439b6ba7f7d",
	  "body": [
		"N_0x38491439b6ba7f7d(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: float\n"
	},
	"N_0x38baaa5dd4c9d19f()": {
	  "prefix": "N_0x38baaa5dd4c9d19f",
	  "body": [
		"N_0x38baaa5dd4c9d19f(${1:int value})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nSets profile setting 934  \n"
	},
	"N_0x3de3aa516fb126a4()": {
	  "prefix": "N_0x3de3aa516fb126a4",
	  "body": [
		"N_0x3de3aa516fb126a4(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x3ebeac6c3f81f6bd()": {
	  "prefix": "N_0x3ebeac6c3f81f6bd",
	  "body": [
		"N_0x3ebeac6c3f81f6bd(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x419615486bbf1956()": {
	  "prefix": "N_0x419615486bbf1956",
	  "body": [
		"N_0x419615486bbf1956(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x46326e13da4e0546()": {
	  "prefix": "N_0x46326e13da4e0546",
	  "body": [
		"N_0x46326e13da4e0546(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x44919cc079bb60bf()": {
	  "prefix": "N_0x44919cc079bb60bf",
	  "body": [
		"N_0x44919cc079bb60bf(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x4c89fe2bdeb3f169()": {
	  "prefix": "N_0x4c89fe2bdeb3f169",
	  "body": [
		"N_0x4c89fe2bdeb3f169()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x47b32f5611e6e483()": {
	  "prefix": "N_0x47b32f5611e6e483",
	  "body": [
		"N_0x47b32f5611e6e483(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x4fef53183c3c6414()": {
	  "prefix": "N_0x4fef53183c3c6414",
	  "body": [
		"N_0x4fef53183c3c6414()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x5009dfd741329729()": {
	  "prefix": "N_0x5009dfd741329729",
	  "body": [
		"N_0x5009dfd741329729(${1:char* p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x501478855a6074ce()": {
	  "prefix": "N_0x501478855a6074ce",
	  "body": [
		"N_0x501478855a6074ce(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x516fc96eb88eefe5()": {
	  "prefix": "N_0x516fc96eb88eefe5",
	  "body": [
		"N_0x516fc96eb88eefe5(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x53cae13e9b426993()": {
	  "prefix": "N_0x53cae13e9b426993",
	  "body": [
		"N_0x53cae13e9b426993(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x55384438fc55ad8e()": {
	  "prefix": "N_0x55384438fc55ad8e",
	  "body": [
		"N_0x55384438fc55ad8e(${1:int value})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nSets profile setting 935  \n"
	},
	"N_0x55a8becaf28a4eb7()": {
	  "prefix": "N_0x55a8becaf28a4eb7",
	  "body": [
		"N_0x55a8becaf28a4eb7()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x567384dfa67029e6()": {
	  "prefix": "N_0x567384dfa67029e6",
	  "body": [
		"N_0x567384dfa67029e6()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x5688585e6d563cd8()": {
	  "prefix": "N_0x5688585e6d563cd8",
	  "body": [
		"N_0x5688585e6d563cd8(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x58a651cd201d89ad()": {
	  "prefix": "N_0x58a651cd201d89ad",
	  "body": [
		"N_0x58a651cd201d89ad(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n\nLEADERBOARDS_GET_CACHE_???  \n"
	},
	"N_0x5a556b229a169402()": {
	  "prefix": "N_0x5a556b229a169402",
	  "body": [
		"N_0x5a556b229a169402()"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x5da3a8de8cb6226f()": {
	  "prefix": "N_0x5da3a8de8cb6226f",
	  "body": [
		"N_0x5da3a8de8cb6226f(${1:int time})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nlongest time being ilde?  \n"
	},
	"N_0x5bd5f255321c4aaf()": {
	  "prefix": "N_0x5bd5f255321c4aaf",
	  "body": [
		"N_0x5bd5f255321c4aaf(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x5ff2c33b13a02a11()": {
	  "prefix": "N_0x5ff2c33b13a02a11",
	  "body": [
		"N_0x5ff2c33b13a02a11(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x5ead2bf6484852e4()": {
	  "prefix": "N_0x5ead2bf6484852e4",
	  "body": [
		"N_0x5ead2bf6484852e4()"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\nexample from completionpercentage_controller.ysc.c4  \nif (STATS::_5EAD2BF6484852E4()) {  \n            GAMEPLAY::SET_BIT(g_17b95._f20df._ff10, 15);  \n            STATS::_11FF1C80276097ED(0xe9ec4dd1, 200, 0);  \n        }  \n"
	},
	"N_0x60eedc12af66e846()": {
	  "prefix": "N_0x60eedc12af66e846",
	  "body": [
		"N_0x60eedc12af66e846(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x6483c25849031c4f()": {
	  "prefix": "N_0x6483c25849031c4f",
	  "body": [
		"N_0x6483c25849031c4f(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x629526aba383bcaa()": {
	  "prefix": "N_0x629526aba383bcaa",
	  "body": [
		"N_0x629526aba383bcaa()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x678f86d8fc040bdb()": {
	  "prefix": "N_0x678f86d8fc040bdb",
	  "body": [
		"N_0x678f86d8fc040bdb(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x6551b1f7f6cd46ea()": {
	  "prefix": "N_0x6551b1f7f6cd46ea",
	  "body": [
		"N_0x6551b1f7f6cd46ea(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x6a60e43998228229()": {
	  "prefix": "N_0x6a60e43998228229",
	  "body": [
		"N_0x6a60e43998228229(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x6bccf9948492fd85()": {
	  "prefix": "N_0x6bccf9948492fd85",
	  "body": [
		"N_0x6bccf9948492fd85(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x6bc0acd0673acebe()": {
	  "prefix": "N_0x6bc0acd0673acebe",
	  "body": [
		"N_0x6bc0acd0673acebe(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x6e0a5253375c4584()": {
	  "prefix": "N_0x6e0a5253375c4584",
	  "body": [
		"N_0x6e0a5253375c4584()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x6dee77aff8c21bd1()": {
	  "prefix": "N_0x6dee77aff8c21bd1",
	  "body": [
		"N_0x6dee77aff8c21bd1(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x6f361b8889a792a3()": {
	  "prefix": "N_0x6f361b8889a792a3",
	  "body": [
		"N_0x6f361b8889a792a3()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x7033eefd9b28088e()": {
	  "prefix": "N_0x7033eefd9b28088e",
	  "body": [
		"N_0x7033eefd9b28088e(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x71b008056e5692d6()": {
	  "prefix": "N_0x71b008056e5692d6",
	  "body": [
		"N_0x71b008056e5692d6()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x71862b1d855f32e1()": {
	  "prefix": "N_0x71862b1d855f32e1",
	  "body": [
		"N_0x71862b1d855f32e1(${1:Any* p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x723c1ce13fbfdb67()": {
	  "prefix": "N_0x723c1ce13fbfdb67",
	  "body": [
		"N_0x723c1ce13fbfdb67(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x73001e34f85137f8()": {
	  "prefix": "N_0x73001e34f85137f8",
	  "body": [
		"N_0x73001e34f85137f8(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x792271ab35c356a4()": {
	  "prefix": "N_0x792271ab35c356a4",
	  "body": [
		"N_0x792271ab35c356a4(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x79ab33f0fbfac40c()": {
	  "prefix": "N_0x79ab33f0fbfac40c",
	  "body": [
		"N_0x79ab33f0fbfac40c(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x7b18da61f6bae9d5()": {
	  "prefix": "N_0x7b18da61f6bae9d5",
	  "body": [
		"N_0x7b18da61f6bae9d5(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x7d36291161859389()": {
	  "prefix": "N_0x7d36291161859389",
	  "body": [
		"N_0x7d36291161859389(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x7e6946f68a38b74f()": {
	  "prefix": "N_0x7e6946f68a38b74f",
	  "body": [
		"N_0x7e6946f68a38b74f(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x7d8ba05688ad64c7()": {
	  "prefix": "N_0x7d8ba05688ad64c7",
	  "body": [
		"N_0x7d8ba05688ad64c7(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x7f2c4cdf2e82df4c()": {
	  "prefix": "N_0x7f2c4cdf2e82df4c",
	  "body": [
		"N_0x7f2c4cdf2e82df4c(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x7eec2a316c250073()": {
	  "prefix": "N_0x7eec2a316c250073",
	  "body": [
		"N_0x7eec2a316c250073(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\n_PLAYSTATS_ROB_ARMOURD_TRUCK  \n"
	},
	"N_0x84a810b375e69c0e()": {
	  "prefix": "N_0x84a810b375e69c0e",
	  "body": [
		"N_0x84a810b375e69c0e()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x848b66100ee33b05()": {
	  "prefix": "N_0x848b66100ee33b05",
	  "body": [
		"N_0x848b66100ee33b05(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x84dfc579c2fc214c()": {
	  "prefix": "N_0x84dfc579c2fc214c",
	  "body": [
		"N_0x84dfc579c2fc214c(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x88087ee1f28024ae()": {
	  "prefix": "N_0x88087ee1f28024ae",
	  "body": [
		"N_0x88087ee1f28024ae(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x88578f6ec36b4a3a()": {
	  "prefix": "N_0x88578f6ec36b4a3a",
	  "body": [
		"N_0x88578f6ec36b4a3a(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x886913bbeaca68c1()": {
	  "prefix": "N_0x886913bbeaca68c1",
	  "body": [
		"N_0x886913bbeaca68c1(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x8989cbd7b4e82534()": {
	  "prefix": "N_0x8989cbd7b4e82534",
	  "body": [
		"N_0x8989cbd7b4e82534(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x8a800daccc0da55d()": {
	  "prefix": "N_0x8a800daccc0da55d",
	  "body": [
		"N_0x8a800daccc0da55d()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x8c9d11605e59d955()": {
	  "prefix": "N_0x8c9d11605e59d955",
	  "body": [
		"N_0x8c9d11605e59d955(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x8b9cdbd6c566c38c()": {
	  "prefix": "N_0x8b9cdbd6c566c38c",
	  "body": [
		"N_0x8b9cdbd6c566c38c()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x8d8adb562f09a245()": {
	  "prefix": "N_0x8d8adb562f09a245",
	  "body": [
		"N_0x8d8adb562f09a245(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x928dbfb892638ef3()": {
	  "prefix": "N_0x928dbfb892638ef3",
	  "body": [
		"N_0x928dbfb892638ef3()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x8ec74ceb042e7cff()": {
	  "prefix": "N_0x8ec74ceb042e7cff",
	  "body": [
		"N_0x8ec74ceb042e7cff(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x94f12abf9c79e339()": {
	  "prefix": "N_0x94f12abf9c79e339",
	  "body": [
		"N_0x94f12abf9c79e339(${1:int p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: int\n\nNeeds more research. Possibly used to calculate the \"mask\" when calling \"STAT_SET_MASKED_INT\"?  \n"
	},
	"N_0x90d0622866e80445()": {
	  "prefix": "N_0x90d0622866e80445",
	  "body": [
		"N_0x90d0622866e80445(${1:int p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x98e2bc1ca26287c3()": {
	  "prefix": "N_0x98e2bc1ca26287c3",
	  "body": [
		"N_0x98e2bc1ca26287c3()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x930f504203f561c9()": {
	  "prefix": "N_0x930f504203f561c9",
	  "body": [
		"N_0x930f504203f561c9(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x9b4bd21d69b1e609()": {
	  "prefix": "N_0x9b4bd21d69b1e609",
	  "body": [
		"N_0x9b4bd21d69b1e609()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xa071e0ed98f91286()": {
	  "prefix": "N_0xa071e0ed98f91286",
	  "body": [
		"N_0xa071e0ed98f91286(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0x96e6d5150dbf1c09()": {
	  "prefix": "N_0x96e6d5150dbf1c09",
	  "body": [
		"N_0x96e6d5150dbf1c09(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xa31fd15197b192bd()": {
	  "prefix": "N_0xa31fd15197b192bd",
	  "body": [
		"N_0xa31fd15197b192bd()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0x9a62ec95ae10e011()": {
	  "prefix": "N_0x9a62ec95ae10e011",
	  "body": [
		"N_0x9a62ec95ae10e011()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xa5c80d8e768a9e66()": {
	  "prefix": "N_0xa5c80d8e768a9e66",
	  "body": [
		"N_0xa5c80d8e768a9e66(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x9ec8858184cd253a()": {
	  "prefix": "N_0x9ec8858184cd253a",
	  "body": [
		"N_0x9ec8858184cd253a()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xa6f54bb2ffca35ea()": {
	  "prefix": "N_0xa6f54bb2ffca35ea",
	  "body": [
		"N_0xa6f54bb2ffca35ea(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xa0f93d5465b3094d()": {
	  "prefix": "N_0xa0f93d5465b3094d",
	  "body": [
		"N_0xa0f93d5465b3094d(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0xa761d4ac6115623d()": {
	  "prefix": "N_0xa761d4ac6115623d",
	  "body": [
		"N_0xa761d4ac6115623d()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xa8733668d1047b51()": {
	  "prefix": "N_0xa8733668d1047b51",
	  "body": [
		"N_0xa8733668d1047b51(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xa3c53804bdb68ed2()": {
	  "prefix": "N_0xa3c53804bdb68ed2",
	  "body": [
		"N_0xa3c53804bdb68ed2(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xa943fd1722e11efd()": {
	  "prefix": "N_0xa943fd1722e11efd",
	  "body": [
		"N_0xa943fd1722e11efd()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xa736cf7fb7c5bff4()": {
	  "prefix": "N_0xa736cf7fb7c5bff4",
	  "body": [
		"N_0xa736cf7fb7c5bff4(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xaddd1c754e2e2914()": {
	  "prefix": "N_0xaddd1c754e2e2914",
	  "body": [
		"N_0xaddd1c754e2e2914(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xa78b8fa58200da56()": {
	  "prefix": "N_0xa78b8fa58200da56",
	  "body": [
		"N_0xa78b8fa58200da56(${1:int p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nSTATS::0xE3247582(0);  \nSTATS::0xE3247582(1);  \nSTATS::0xE3247582(2);  \nSTATS::0xE3247582(3);  \nSTATS::0xE3247582(4);  \nSTATS::0xE3247582(5);  \nSTATS::0xE3247582(6);  \n"
	},
	"N_0xb1d2bb1e1631f5b1()": {
	  "prefix": "N_0xb1d2bb1e1631f5b1",
	  "body": [
		"N_0xb1d2bb1e1631f5b1()"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0xb475f27c6a994d65()": {
	  "prefix": "N_0xb475f27c6a994d65",
	  "body": [
		"N_0xb475f27c6a994d65()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xaa525dff66bb82f5()": {
	  "prefix": "N_0xaa525dff66bb82f5",
	  "body": [
		"N_0xaa525dff66bb82f5(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xb7257ba2550ea10a()": {
	  "prefix": "N_0xb7257ba2550ea10a",
	  "body": [
		"N_0xb7257ba2550ea10a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xaff47709f1d5dcce()": {
	  "prefix": "N_0xaff47709f1d5dcce",
	  "body": [
		"N_0xaff47709f1d5dcce()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xb3da2606774a8e2d()": {
	  "prefix": "N_0xb3da2606774a8e2d",
	  "body": [
		"N_0xb3da2606774a8e2d()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n\nThis function is hard-coded to always return 1.  \n"
	},
	"N_0xbaa2f0490e146be8()": {
	  "prefix": "N_0xbaa2f0490e146be8",
	  "body": [
		"N_0xbaa2f0490e146be8(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xbe509b0a3693de8b()": {
	  "prefix": "N_0xbe509b0a3693de8b",
	  "body": [
		"N_0xbe509b0a3693de8b(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xbf371cd2b64212fd()": {
	  "prefix": "N_0xbf371cd2b64212fd",
	  "body": [
		"N_0xbf371cd2b64212fd(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xba9749cc94c1fd85()": {
	  "prefix": "N_0xba9749cc94c1fd85",
	  "body": [
		"N_0xba9749cc94c1fd85()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xc0e0d686ddfc6eae()": {
	  "prefix": "N_0xc0e0d686ddfc6eae",
	  "body": [
		"N_0xc0e0d686ddfc6eae()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xbe3db208333d9844()": {
	  "prefix": "N_0xbe3db208333d9844",
	  "body": [
		"N_0xbe3db208333d9844()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xc141b8917e0017ec()": {
	  "prefix": "N_0xc141b8917e0017ec",
	  "body": [
		"N_0xc141b8917e0017ec()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xbed9f5693f34ed17()": {
	  "prefix": "N_0xbed9f5693f34ed17",
	  "body": [
		"N_0xbed9f5693f34ed17(${1:Hash statName}, ${2:int p1}, ${3:float* outValue})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0xc5be134ec7ba96a0()": {
	  "prefix": "N_0xc5be134ec7ba96a0",
	  "body": [
		"N_0xc5be134ec7ba96a0(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xc70ddce56d0d3a99()": {
	  "prefix": "N_0xc70ddce56d0d3a99",
	  "body": [
		"N_0xc70ddce56d0d3a99()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xbfafdb5faaa5c5ab()": {
	  "prefix": "N_0xbfafdb5faaa5c5ab",
	  "body": [
		"N_0xbfafdb5faaa5c5ab(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xc847b43f369ac0b5()": {
	  "prefix": "N_0xc847b43f369ac0b5",
	  "body": [
		"N_0xc847b43f369ac0b5()"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xc38dc1e90d22547c()": {
	  "prefix": "N_0xc38dc1e90d22547c",
	  "body": [
		"N_0xc38dc1e90d22547c(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0xc980e62e33df1d5c()": {
	  "prefix": "N_0xc980e62e33df1d5c",
	  "body": [
		"N_0xc980e62e33df1d5c(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0xcc25a4553dfbf9ea()": {
	  "prefix": "N_0xcc25a4553dfbf9ea",
	  "body": [
		"N_0xcc25a4553dfbf9ea(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xc6e0e2616a7576bb()": {
	  "prefix": "N_0xc6e0e2616a7576bb",
	  "body": [
		"N_0xc6e0e2616a7576bb()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xc729991a9065376e()": {
	  "prefix": "N_0xc729991a9065376e",
	  "body": [
		"N_0xc729991a9065376e(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xcb00196b31c39eb1()": {
	  "prefix": "N_0xcb00196b31c39eb1",
	  "body": [
		"N_0xcb00196b31c39eb1(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xd1032e482629049e()": {
	  "prefix": "N_0xd1032e482629049e",
	  "body": [
		"N_0xd1032e482629049e(${1:BOOL p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xce5aa445aba8dee0()": {
	  "prefix": "N_0xce5aa445aba8dee0",
	  "body": [
		"N_0xce5aa445aba8dee0(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xd1a1ee3b4fa8e760()": {
	  "prefix": "N_0xd1a1ee3b4fa8e760",
	  "body": [
		"N_0xd1a1ee3b4fa8e760(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xd1c9b92bdd3f151d()": {
	  "prefix": "N_0xd1c9b92bdd3f151d",
	  "body": [
		"N_0xd1c9b92bdd3f151d(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xcea553e35c2246e1()": {
	  "prefix": "N_0xcea553e35c2246e1",
	  "body": [
		"N_0xcea553e35c2246e1(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xd6781e42755531f7()": {
	  "prefix": "N_0xd6781e42755531f7",
	  "body": [
		"N_0xd6781e42755531f7(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xdaf80797fc534bec()": {
	  "prefix": "N_0xdaf80797fc534bec",
	  "body": [
		"N_0xdaf80797fc534bec(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xd558bec0bba7e8d2()": {
	  "prefix": "N_0xd558bec0bba7e8d2",
	  "body": [
		"N_0xd558bec0bba7e8d2(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xe3261d791eb44acb()": {
	  "prefix": "N_0xe3261d791eb44acb",
	  "body": [
		"N_0xe3261d791eb44acb(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xdac073c7901f9e15()": {
	  "prefix": "N_0xdac073c7901f9e15",
	  "body": [
		"N_0xdac073c7901f9e15(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nSet profile setting 866  \n"
	},
	"N_0xe496a53ba5f50a56()": {
	  "prefix": "N_0xe496a53ba5f50a56",
	  "body": [
		"N_0xe496a53ba5f50a56(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xdeaaf77eb3687e97()": {
	  "prefix": "N_0xdeaaf77eb3687e97",
	  "body": [
		"N_0xdeaaf77eb3687e97(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xe95c8a1875a02ca4()": {
	  "prefix": "N_0xe95c8a1875a02ca4",
	  "body": [
		"N_0xe95c8a1875a02ca4(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xe8853fbce7d8d0d6()": {
	  "prefix": "N_0xe8853fbce7d8d0d6",
	  "body": [
		"N_0xe8853fbce7d8d0d6()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xedbf6c9b0d2c65c8()": {
	  "prefix": "N_0xedbf6c9b0d2c65c8",
	  "body": [
		"N_0xedbf6c9b0d2c65c8(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xecb41ac6ab754401()": {
	  "prefix": "N_0xecb41ac6ab754401",
	  "body": [
		"N_0xecb41ac6ab754401()"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0xf06a6f41cb445443()": {
	  "prefix": "N_0xf06a6f41cb445443",
	  "body": [
		"N_0xf06a6f41cb445443(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xf11f01d98113536a()": {
	  "prefix": "N_0xf11f01d98113536a",
	  "body": [
		"N_0xf11f01d98113536a(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xf1a1803d3476f215()": {
	  "prefix": "N_0xf1a1803d3476f215",
	  "body": [
		"N_0xf1a1803d3476f215(${1:int value})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nSets profile setting 933  \n"
	},
	"N_0xf434a10ba01c37d0()": {
	  "prefix": "N_0xf434a10ba01c37d0",
	  "body": [
		"N_0xf434a10ba01c37d0(${1:BOOL p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xf4ff020a08bc8863()": {
	  "prefix": "N_0xf4ff020a08bc8863",
	  "body": [
		"N_0xf4ff020a08bc8863(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xf1ae5dcdbfca2721()": {
	  "prefix": "N_0xf1ae5dcdbfca2721",
	  "body": [
		"N_0xf1ae5dcdbfca2721(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\nLEADERBOARDS2_READ_BY_???  \n"
	},
	"N_0xf534d94dfa2ead26()": {
	  "prefix": "N_0xf534d94dfa2ead26",
	  "body": [
		"N_0xf534d94dfa2ead26(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xf4d8e7ac2a27758c()": {
	  "prefix": "N_0xf4d8e7ac2a27758c",
	  "body": [
		"N_0xf4d8e7ac2a27758c(${1:int p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: int\n\nNeeds more research. Possibly used to calculate the \"mask\" when calling \"STAT_SET_BOOL_MASKED\"?  \n"
	},
	"N_0xf5bb8dac426a52c0()": {
	  "prefix": "N_0xf5bb8dac426a52c0",
	  "body": [
		"N_0xf5bb8dac426a52c0(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xf6792800ac95350d()": {
	  "prefix": "N_0xf6792800ac95350d",
	  "body": [
		"N_0xf6792800ac95350d(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nSet profile setting 501  \n"
	},
	"N_0xf8c54a461c3e11dc()": {
	  "prefix": "N_0xf8c54a461c3e11dc",
	  "body": [
		"N_0xf8c54a461c3e11dc(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xf9f2922717b819ec()": {
	  "prefix": "N_0xf9f2922717b819ec",
	  "body": [
		"N_0xf9f2922717b819ec()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"N_0xfcc228e07217fcac()": {
	  "prefix": "N_0xfcc228e07217fcac",
	  "body": [
		"N_0xfcc228e07217fcac(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xafc7e5e075a96f46()": {
	  "prefix": "N_0xafc7e5e075a96f46",
	  "body": "N_0xafc7e5e075a96f46",
	  "description": "OLD NAME, PLEASE USE PlaystatsAmbientMissionCrateCreated INSTEAD!"
	},
	"PlaystatsAmbientMissionCrateCreated()": {
	  "prefix": "PlaystatsAmbientMissionCrateCreated",
	  "body": [
		"PlaystatsAmbientMissionCrateCreated(${1:float p0}, ${2:float p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nOld name: N_0xafc7e5e075a96f46"
	},
	"PlaystatsAwardXp()": {
	  "prefix": "PlaystatsAwardXp",
	  "body": [
		"PlaystatsAwardXp(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsCheatApplied()": {
	  "prefix": "PlaystatsCheatApplied",
	  "body": [
		"PlaystatsCheatApplied(${1:char* cheat})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsFriendActivity()": {
	  "prefix": "PlaystatsFriendActivity",
	  "body": [
		"PlaystatsFriendActivity(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsClothChange()": {
	  "prefix": "PlaystatsClothChange",
	  "body": [
		"PlaystatsClothChange(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsMissionCheckpoint()": {
	  "prefix": "PlaystatsMissionCheckpoint",
	  "body": [
		"PlaystatsMissionCheckpoint(${1:Any* p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsMatchStarted()": {
	  "prefix": "PlaystatsMatchStarted",
	  "body": [
		"PlaystatsMatchStarted(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsMissionStarted()": {
	  "prefix": "PlaystatsMissionStarted",
	  "body": [
		"PlaystatsMissionStarted(${1:Any* p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsMissionOver()": {
	  "prefix": "PlaystatsMissionOver",
	  "body": [
		"PlaystatsMissionOver(${1:Any* p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsNpcInvite()": {
	  "prefix": "PlaystatsNpcInvite",
	  "body": [
		"PlaystatsNpcInvite(${1:Any* p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsRaceCheckpoint()": {
	  "prefix": "PlaystatsRaceCheckpoint",
	  "body": [
		"PlaystatsRaceCheckpoint(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsOddjobDone()": {
	  "prefix": "PlaystatsOddjobDone",
	  "body": [
		"PlaystatsOddjobDone(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"PlaystatsShopItem()": {
	  "prefix": "PlaystatsShopItem",
	  "body": [
		"PlaystatsShopItem(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"PlaystatsPropChange()": {
	  "prefix": "PlaystatsPropChange",
	  "body": [
		"PlaystatsPropChange(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"N_0xddf24d535060f811()": {
	  "prefix": "N_0xddf24d535060f811",
	  "body": "N_0xddf24d535060f811",
	  "description": "OLD NAME, PLEASE USE PlaystatsWebsiteVisited INSTEAD!"
	},
	"PlaystatsWebsiteVisited()": {
	  "prefix": "PlaystatsWebsiteVisited",
	  "body": [
		"PlaystatsWebsiteVisited(${1:Hash scaleformHash}, ${2:int p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nOld name: N_0xddf24d535060f811"
	},
	"PlaystatsRankUp()": {
	  "prefix": "PlaystatsRankUp",
	  "body": [
		"PlaystatsRankUp(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"StatClearSlotForReload()": {
	  "prefix": "StatClearSlotForReload",
	  "body": [
		"StatClearSlotForReload(${1:int statSlot})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n\nPlease change to \"void\"!  \n---------------------------------  \nExample:  \nfor (v_2 = 0; v_2 <= 4; v_2 += 1) {  \n    STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);  \n}  \n"
	},
	"StatGetBool()": {
	  "prefix": "StatGetBool",
	  "body": [
		"StatGetBool(${1:Hash statHash}, ${2:BOOL* outValue}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatDeleteSlot()": {
	  "prefix": "StatDeleteSlot",
	  "body": [
		"StatDeleteSlot(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"StatGetDate()": {
	  "prefix": "StatGetDate",
	  "body": [
		"StatGetDate(${1:Hash statHash}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatGetInt()": {
	  "prefix": "StatGetInt",
	  "body": [
		"StatGetInt(${1:Hash statHash}, ${2:int* outValue}, ${3:int p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\np2 appears to always be -1  \n"
	},
	"StatGetBoolMasked()": {
	  "prefix": "StatGetBoolMasked",
	  "body": [
		"StatGetBoolMasked(${1:Hash statName}, ${2:int mask}, ${3:int p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\np2 - Default value? Seems to be -1 most of the time.  \n"
	},
	"StatGetLicensePlate()": {
	  "prefix": "StatGetLicensePlate",
	  "body": [
		"StatGetLicensePlate(${1:Hash statName})"
	  ],
	  "description": "Namespace: STATS\nReturns: char*\n"
	},
	"StatGetFloat()": {
	  "prefix": "StatGetFloat",
	  "body": [
		"StatGetFloat(${1:Hash statHash}, ${2:float* outValue}, ${3:Any p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0xe0e854f5280fb769()": {
	  "prefix": "N_0xe0e854f5280fb769",
	  "body": "N_0xe0e854f5280fb769",
	  "description": "OLD NAME, PLEASE USE StatGetNumberOfDays INSTEAD!"
	},
	"StatGetNumberOfDays()": {
	  "prefix": "StatGetNumberOfDays",
	  "body": [
		"StatGetNumberOfDays(${1:Hash statName})"
	  ],
	  "description": "Namespace: STATS\nReturns: int\n\nOld name: N_0xe0e854f5280fb769"
	},
	"StatGetMaskedInt()": {
	  "prefix": "StatGetMaskedInt",
	  "body": [
		"StatGetMaskedInt(${1:Any p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x7583b4be4c5a41b5()": {
	  "prefix": "N_0x7583b4be4c5a41b5",
	  "body": "N_0x7583b4be4c5a41b5",
	  "description": "OLD NAME, PLEASE USE StatGetNumberOfMinutes INSTEAD!"
	},
	"StatGetNumberOfMinutes()": {
	  "prefix": "StatGetNumberOfMinutes",
	  "body": [
		"StatGetNumberOfMinutes(${1:Hash statName})"
	  ],
	  "description": "Namespace: STATS\nReturns: int\n\nOld name: N_0x7583b4be4c5a41b5"
	},
	"N_0xf2d4b2fe415aafc3()": {
	  "prefix": "N_0xf2d4b2fe415aafc3",
	  "body": "N_0xf2d4b2fe415aafc3",
	  "description": "OLD NAME, PLEASE USE StatGetNumberOfHours INSTEAD!"
	},
	"StatGetNumberOfHours()": {
	  "prefix": "StatGetNumberOfHours",
	  "body": [
		"StatGetNumberOfHours(${1:Hash statName})"
	  ],
	  "description": "Namespace: STATS\nReturns: int\n\nOld name: N_0xf2d4b2fe415aafc3"
	},
	"StatGetPos()": {
	  "prefix": "StatGetPos",
	  "body": [
		"StatGetPos(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x2ce056ff3723f00b()": {
	  "prefix": "N_0x2ce056ff3723f00b",
	  "body": "N_0x2ce056ff3723f00b",
	  "description": "OLD NAME, PLEASE USE StatGetNumberOfSeconds INSTEAD!"
	},
	"StatGetNumberOfSeconds()": {
	  "prefix": "StatGetNumberOfSeconds",
	  "body": [
		"StatGetNumberOfSeconds(${1:Hash statName})"
	  ],
	  "description": "Namespace: STATS\nReturns: int\n\nOld name: N_0x2ce056ff3723f00b"
	},
	"StatGetString()": {
	  "prefix": "StatGetString",
	  "body": [
		"StatGetString(${1:Hash statHash}, ${2:int p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: char*\n\np1 is always -1 in the script files  \n"
	},
	"StatGetUserId()": {
	  "prefix": "StatGetUserId",
	  "body": [
		"StatGetUserId(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: char*\n\nNeeds more research. Seems to return \"STAT_UNKNOWN\" if no such user id exists.  \n"
	},
	"StatIncrement()": {
	  "prefix": "StatIncrement",
	  "body": [
		"StatIncrement(${1:Hash statName}, ${2:float value})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n"
	},
	"StatLoadPending()": {
	  "prefix": "StatLoadPending",
	  "body": [
		"StatLoadPending(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatLoad()": {
	  "prefix": "StatLoad",
	  "body": [
		"StatLoad(${1:int p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSave()": {
	  "prefix": "StatSave",
	  "body": [
		"StatSave(${1:int p0}, ${2:BOOL p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSavePendingOrRequested()": {
	  "prefix": "StatSavePendingOrRequested",
	  "body": [
		"StatSavePendingOrRequested()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"StatSavePending()": {
	  "prefix": "StatSavePending",
	  "body": [
		"StatSavePending()"
	  ],
	  "description": "Namespace: STATS\nReturns: Any\n"
	},
	"StatSetBoolMasked()": {
	  "prefix": "StatSetBoolMasked",
	  "body": [
		"StatSetBoolMasked(${1:Hash statName}, ${2:BOOL value}, ${3:int mask}, ${4:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSetBool()": {
	  "prefix": "StatSetBool",
	  "body": [
		"StatSetBool(${1:Hash statName}, ${2:BOOL value}, ${3:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSetCurrentPosixTime()": {
	  "prefix": "StatSetCurrentPosixTime",
	  "body": [
		"StatSetCurrentPosixTime(${1:Hash statName}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\np1 always true.  \n"
	},
	"StatSetDate()": {
	  "prefix": "StatSetDate",
	  "body": [
		"StatSetDate(${1:Hash statName}, ${2:Any* value}, ${3:int numFields}, ${4:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\n'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).  \nThe structure looks like this:  \nint year  \nint month  \nint day  \nint hour  \nint minute  \nint second  \nint millisecond  \nThe decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.  \n"
	},
	"StatSetFloat()": {
	  "prefix": "StatSetFloat",
	  "body": [
		"StatSetFloat(${1:Hash statName}, ${2:float value}, ${3:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSetGxtLabel()": {
	  "prefix": "StatSetGxtLabel",
	  "body": [
		"StatSetGxtLabel(${1:Hash statName}, ${2:char* value}, ${3:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\nThe following values have been found in the decompiled scripts:  \n\"RC_ABI1\"  \n\"RC_ABI2\"  \n\"RC_BA1\"  \n\"RC_BA2\"  \n\"RC_BA3\"  \n\"RC_BA3A\"  \n\"RC_BA3C\"  \n\"RC_BA4\"  \n\"RC_DRE1\"  \n\"RC_EPS1\"  \n\"RC_EPS2\"  \n\"RC_EPS3\"  \n\"RC_EPS4\"  \n\"RC_EPS5\"  \n\"RC_EPS6\"  \n\"RC_EPS7\"  \n\"RC_EPS8\"  \n\"RC_EXT1\"  \n\"RC_EXT2\"  \n\"RC_EXT3\"  \n\"RC_EXT4\"  \n\"RC_FAN1\"  \n\"RC_FAN2\"  \n\"RC_FAN3\"  \n\"RC_HAO1\"  \n\"RC_HUN1\"  \n\"RC_HUN2\"  \n\"RC_JOS1\"  \n\"RC_JOS2\"  \n\"RC_JOS3\"  \n\"RC_JOS4\"  \n\"RC_MAU1\"  \n\"RC_MIN1\"  \n\"RC_MIN2\"  \n\"RC_MIN3\"  \n\"RC_MRS1\"  \n\"RC_MRS2\"  \n\"RC_NI1\"  \n\"RC_NI1A\"  \n\"RC_NI1B\"  \n\"RC_NI1C\"  \n\"RC_NI1D\"  \n\"RC_NI2\"  \n\"RC_NI3\"  \n\"RC_OME1\"  \n\"RC_OME2\"  \n\"RC_PA1\"  \n\"RC_PA2\"  \n\"RC_PA3\"  \n\"RC_PA3A\"  \n\"RC_PA3B\"  \n\"RC_PA4\"  \n\"RC_RAM1\"  \n\"RC_RAM2\"  \n\"RC_RAM3\"  \n\"RC_RAM4\"  \n\"RC_RAM5\"  \n\"RC_SAS1\"  \n\"RC_TON1\"  \n\"RC_TON2\"  \n\"RC_TON3\"  \n\"RC_TON4\"  \n\"RC_TON5\"  \n"
	},
	"StatSetInt()": {
	  "prefix": "StatSetInt",
	  "body": [
		"StatSetInt(${1:Hash statName}, ${2:int value}, ${3:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n\nAdd Cash example:  \nfor (int i = 0; i < 3; i++)  \n{  \nchar statNameFull[32];  \nsprintf_s(statNameFull, \"SP%d_TOTAL_CASH\", i);  \nHash hash = GAMEPLAY::GET_HASH_KEY(statNameFull);  \nint val;  \nSTATS::STAT_GET_INT(hash, &val, -1);  \nval += 1000000;  \nSTATS::STAT_SET_INT(hash, val, 1);  \n}  \n"
	},
	"StatSetLicensePlate()": {
	  "prefix": "StatSetLicensePlate",
	  "body": [
		"StatSetLicensePlate(${1:Hash statName}, ${2:char* str})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSetMaskedInt()": {
	  "prefix": "StatSetMaskedInt",
	  "body": [
		"StatSetMaskedInt(${1:Hash statName}, ${2:Any p1}, ${3:Any p2}, ${4:int p3}, ${5:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSetPos()": {
	  "prefix": "StatSetPos",
	  "body": [
		"StatSetPos(${1:Hash statName}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"N_0x68f01422be1d838f()": {
	  "prefix": "N_0x68f01422be1d838f",
	  "body": "N_0x68f01422be1d838f",
	  "description": "OLD NAME, PLEASE USE StatSetProfileSetting INSTEAD!"
	},
	"StatSetProfileSetting()": {
	  "prefix": "StatSetProfileSetting",
	  "body": [
		"StatSetProfileSetting(${1:int profileSetting}, ${2:int value})"
	  ],
	  "description": "Namespace: STATS\nReturns: void\n\nDoes not take effect immediately, unfortunately.  \nprofileSetting seems to only be 936, 937 and 938 in scripts  \ngtaforums.com/topic/799843-stats-profile-settings/  \n\nOld name: N_0x68f01422be1d838f"
	},
	"StatSetString()": {
	  "prefix": "StatSetString",
	  "body": [
		"StatSetString(${1:Hash statName}, ${2:char* value}, ${3:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSetUserId()": {
	  "prefix": "StatSetUserId",
	  "body": [
		"StatSetUserId(${1:Hash statName}, ${2:char* value}, ${3:BOOL save})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"StatSlotIsLoaded()": {
	  "prefix": "StatSlotIsLoaded",
	  "body": [
		"StatSlotIsLoaded(${1:Any p0})"
	  ],
	  "description": "Namespace: STATS\nReturns: BOOL\n"
	},
	"BeginSrl()": {
	  "prefix": "BeginSrl",
	  "body": [
		"BeginSrl()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"ClearHdArea()": {
	  "prefix": "ClearHdArea",
	  "body": [
		"ClearHdArea()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"ClearFocus()": {
	  "prefix": "ClearFocus",
	  "body": [
		"ClearFocus()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"DestroyPlayerInPauseMenu()": {
	  "prefix": "DestroyPlayerInPauseMenu",
	  "body": [
		"DestroyPlayerInPauseMenu()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n\nHash collision  \n"
	},
	"DoesAnimDictExist()": {
	  "prefix": "DoesAnimDictExist",
	  "body": [
		"DoesAnimDictExist(${1:char* animDict})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"EndSrl()": {
	  "prefix": "EndSrl",
	  "body": [
		"EndSrl()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\nClear the current srl and stop rendering the area selected by PrefetchSrl and started with BeginSrl."
	},
	"N_0x219c7b8d53e429fd()": {
	  "prefix": "N_0x219c7b8d53e429fd",
	  "body": "N_0x219c7b8d53e429fd",
	  "description": "OLD NAME, PLEASE USE FormatFocusHeading INSTEAD!"
	},
	"FormatFocusHeading()": {
	  "prefix": "FormatFocusHeading",
	  "body": [
		"FormatFocusHeading(${1:float x}, ${2:float y}, ${3:float z}, ${4:float rad}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n\nOld name: N_0x219c7b8d53e429fd"
	},
	"GetIdealPlayerSwitchType()": {
	  "prefix": "GetIdealPlayerSwitchType",
	  "body": [
		"GetIdealPlayerSwitchType(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: int\n\nx1, y1, z1 -- Coords of your ped model  \nx2, y2, z2 -- Coords of the ped you want to switch to  \n"
	},
	"GetNumberOfStreamingRequests()": {
	  "prefix": "GetNumberOfStreamingRequests",
	  "body": [
		"GetNumberOfStreamingRequests()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: int\n"
	},
	"GetPlayerShortSwitchState()": {
	  "prefix": "GetPlayerShortSwitchState",
	  "body": [
		"GetPlayerShortSwitchState()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: int\n"
	},
	"GetPlayerSwitchState()": {
	  "prefix": "GetPlayerSwitchState",
	  "body": [
		"GetPlayerSwitchState()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: int\n"
	},
	"HasAnimDictLoaded()": {
	  "prefix": "HasAnimDictLoaded",
	  "body": [
		"HasAnimDictLoaded(${1:char* animDict})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"GetPlayerSwitchType()": {
	  "prefix": "GetPlayerSwitchType",
	  "body": [
		"GetPlayerSwitchType()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: int\n"
	},
	"HasClipSetLoaded()": {
	  "prefix": "HasClipSetLoaded",
	  "body": [
		"HasClipSetLoaded(${1:char* clipSet})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nAlias for HAS_ANIM_SET_LOADED.  \n"
	},
	"HasAnimSetLoaded()": {
	  "prefix": "HasAnimSetLoaded",
	  "body": [
		"HasAnimSetLoaded(${1:char* animSet})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nGets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.  \nAnimation set and clip set are synonymous.  \n"
	},
	"HasModelLoaded()": {
	  "prefix": "HasModelLoaded",
	  "body": [
		"HasModelLoaded(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nChecks if the specified model has loaded into memory.  \n"
	},
	"HasCollisionForModelLoaded()": {
	  "prefix": "HasCollisionForModelLoaded",
	  "body": [
		"HasCollisionForModelLoaded(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"HasPtfxAssetLoaded()": {
	  "prefix": "HasPtfxAssetLoaded",
	  "body": [
		"HasPtfxAssetLoaded()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"HasNamedPtfxAssetLoaded()": {
	  "prefix": "HasNamedPtfxAssetLoaded",
	  "body": [
		"HasNamedPtfxAssetLoaded(${1:char* assetName})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nassetName = For example \"core\"  \n"
	},
	"IsIplActive()": {
	  "prefix": "IsIplActive",
	  "body": [
		"IsIplActive(${1:char* iplName})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nList of all IPLs: pastebin.com/iNGLY32D  \n"
	},
	"IsModelAVehicle()": {
	  "prefix": "IsModelAVehicle",
	  "body": [
		"IsModelAVehicle(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nReturns whether the specified model represents a vehicle.  \n"
	},
	"IsEntityFocus()": {
	  "prefix": "IsEntityFocus",
	  "body": [
		"IsEntityFocus(${1:Entity entity})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"IsModelAPed()": {
	  "prefix": "IsModelAPed",
	  "body": [
		"IsModelAPed(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"IsModelValid()": {
	  "prefix": "IsModelValid",
	  "body": [
		"IsModelValid(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nReturns whether the specified model exists in the game.  \n"
	},
	"IsModelInCdimage()": {
	  "prefix": "IsModelInCdimage",
	  "body": [
		"IsModelInCdimage(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nCheck if model is in cdimage(rpf)  \n"
	},
	"IsNewLoadSceneActive()": {
	  "prefix": "IsNewLoadSceneActive",
	  "body": [
		"IsNewLoadSceneActive()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"N_0xd9d2cfff49fab35f()": {
	  "prefix": "N_0xd9d2cfff49fab35f",
	  "body": "N_0xd9d2cfff49fab35f",
	  "description": "OLD NAME, PLEASE USE IsPlayerSwitchInProgress INSTEAD!"
	},
	"IsPlayerSwitchInProgress()": {
	  "prefix": "IsPlayerSwitchInProgress",
	  "body": [
		"IsPlayerSwitchInProgress()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nReturns true if the player is currently switching, false otherwise.  \n(When the camera is in the sky moving from Trevor to Franklin for example)  \n\nOld name: N_0xd9d2cfff49fab35f"
	},
	"IsNetworkLoadingScene()": {
	  "prefix": "IsNetworkLoadingScene",
	  "body": [
		"IsNetworkLoadingScene()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"LoadAllObjectsNow()": {
	  "prefix": "LoadAllObjectsNow",
	  "body": [
		"LoadAllObjectsNow()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\n1  \n"
	},
	"IsNewLoadSceneLoaded()": {
	  "prefix": "IsNewLoadSceneLoaded",
	  "body": [
		"IsNewLoadSceneLoaded()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"N_0xb5a4db34fe89b88a()": {
	  "prefix": "N_0xb5a4db34fe89b88a",
	  "body": "N_0xb5a4db34fe89b88a",
	  "description": "OLD NAME, PLEASE USE LoadMissionCreatorData INSTEAD!"
	},
	"LoadMissionCreatorData()": {
	  "prefix": "LoadMissionCreatorData",
	  "body": [
		"LoadMissionCreatorData()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nLoads \"common:/data/missioncreatordata\" data and sets some values.  \n\nOld name: N_0xb5a4db34fe89b88a"
	},
	"IsSrlLoaded()": {
	  "prefix": "IsSrlLoaded",
	  "body": [
		"IsSrlLoaded()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\nReturns true when the srl from BeginSrl is loaded."
	},
	"N_0x03f1a106bda7dd3e()": {
	  "prefix": "N_0x03f1a106bda7dd3e",
	  "body": [
		"N_0x03f1a106bda7dd3e()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"LoadScene()": {
	  "prefix": "LoadScene",
	  "body": [
		"LoadScene(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x0811381ef5062fec()": {
	  "prefix": "N_0x0811381ef5062fec",
	  "body": [
		"N_0x0811381ef5062fec(${1:Entity p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x0bc3144deb678666()": {
	  "prefix": "N_0x0bc3144deb678666",
	  "body": [
		"N_0x0bc3144deb678666(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"N_0x07c313f94746702c()": {
	  "prefix": "N_0x07c313f94746702c",
	  "body": [
		"N_0x07c313f94746702c(${1:Any p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x0fde9dbfc0a6bc65()": {
	  "prefix": "N_0x0fde9dbfc0a6bc65",
	  "body": [
		"N_0x0fde9dbfc0a6bc65(${1:Any* p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nSET_PLAYERS_*  \n"
	},
	"N_0x0ad9710cee2f590f()": {
	  "prefix": "N_0x0ad9710cee2f590f",
	  "body": [
		"N_0x0ad9710cee2f590f(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x1e9057a74fd73e23()": {
	  "prefix": "N_0x1e9057a74fd73e23",
	  "body": [
		"N_0x1e9057a74fd73e23()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x0c15b0e443b2349d()": {
	  "prefix": "N_0x0c15b0e443b2349d",
	  "body": [
		"N_0x0c15b0e443b2349d()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x20c6c7e4eb082a7f()": {
	  "prefix": "N_0x20c6c7e4eb082a7f",
	  "body": [
		"N_0x20c6c7e4eb082a7f(${1:BOOL p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x1ee7d8df4425f053()": {
	  "prefix": "N_0x1ee7d8df4425f053",
	  "body": [
		"N_0x1ee7d8df4425f053(${1:Any p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x40aefd1a244741f2()": {
	  "prefix": "N_0x40aefd1a244741f2",
	  "body": [
		"N_0x40aefd1a244741f2(${1:BOOL p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x1f3f018bc3afa77c()": {
	  "prefix": "N_0x1f3f018bc3afa77c",
	  "body": [
		"N_0x1f3f018bc3afa77c(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:Any p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x43d1680c6d19a8e9()": {
	  "prefix": "N_0x43d1680c6d19a8e9",
	  "body": [
		"N_0x43d1680c6d19a8e9()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x3d3d8b3be5a83d35()": {
	  "prefix": "N_0x3d3d8b3be5a83d35",
	  "body": [
		"N_0x3d3d8b3be5a83d35()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x4e52e752c76e7e7a()": {
	  "prefix": "N_0x4e52e752c76e7e7a",
	  "body": [
		"N_0x4e52e752c76e7e7a(${1:Any p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n**This native does absolutely nothing, just a nullsub**"
	},
	"N_0x472397322e92a856()": {
	  "prefix": "N_0x472397322e92a856",
	  "body": [
		"N_0x472397322e92a856()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x5b48a06dd0e792a5()": {
	  "prefix": "N_0x5b48a06dd0e792a5",
	  "body": [
		"N_0x5b48a06dd0e792a5()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x5068f488ddb54dd8()": {
	  "prefix": "N_0x5068f488ddb54dd8",
	  "body": [
		"N_0x5068f488ddb54dd8()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x63eb2b972a218cac()": {
	  "prefix": "N_0x63eb2b972a218cac",
	  "body": [
		"N_0x63eb2b972a218cac()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x5f2013f8bc24ee69()": {
	  "prefix": "N_0x5f2013f8bc24ee69",
	  "body": [
		"N_0x5f2013f8bc24ee69(${1:int p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nSET_PLAYERS_*  \n"
	},
	"N_0x74de2e8739086740()": {
	  "prefix": "N_0x74de2e8739086740",
	  "body": [
		"N_0x74de2e8739086740()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x71e7b2e657449aad()": {
	  "prefix": "N_0x71e7b2e657449aad",
	  "body": [
		"N_0x71e7b2e657449aad()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x78c0d93253149435()": {
	  "prefix": "N_0x78c0d93253149435",
	  "body": [
		"N_0x78c0d93253149435()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x7d41e9d2d17c5b2d()": {
	  "prefix": "N_0x7d41e9d2d17c5b2d",
	  "body": [
		"N_0x7d41e9d2d17c5b2d(${1:Any p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x8e2a065abdae6994()": {
	  "prefix": "N_0x8e2a065abdae6994",
	  "body": [
		"N_0x8e2a065abdae6994()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0x933bbeeb8c61b5f4()": {
	  "prefix": "N_0x933bbeeb8c61b5f4",
	  "body": [
		"N_0x933bbeeb8c61b5f4()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0x95a7dabddbb78ae7()": {
	  "prefix": "N_0x95a7dabddbb78ae7",
	  "body": [
		"N_0x95a7dabddbb78ae7(${1:Any* p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xa76359fc80b2438e()": {
	  "prefix": "N_0xa76359fc80b2438e",
	  "body": [
		"N_0xa76359fc80b2438e(${1:float p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xad5fdf34b81bfe79()": {
	  "prefix": "N_0xad5fdf34b81bfe79",
	  "body": [
		"N_0xad5fdf34b81bfe79()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xaf12610c644a35c9()": {
	  "prefix": "N_0xaf12610c644a35c9",
	  "body": [
		"N_0xaf12610c644a35c9(${1:char* p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nPossible p0 values:  \n\"prologue\"  \n\"Prologue_Main\"  \n"
	},
	"N_0xbc9823ab80a3dcac()": {
	  "prefix": "N_0xbc9823ab80a3dcac",
	  "body": [
		"N_0xbc9823ab80a3dcac()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0xbd605b8e0e18b3bb()": {
	  "prefix": "N_0xbd605b8e0e18b3bb",
	  "body": [
		"N_0xbd605b8e0e18b3bb()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xbeb2d9a1d9a8f55a()": {
	  "prefix": "N_0xbeb2d9a1d9a8f55a",
	  "body": [
		"N_0xbeb2d9a1d9a8f55a(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xbed8ca5ff5e04113()": {
	  "prefix": "N_0xbed8ca5ff5e04113",
	  "body": [
		"N_0xbed8ca5ff5e04113(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xd4793dff3af2abcd()": {
	  "prefix": "N_0xd4793dff3af2abcd",
	  "body": [
		"N_0xd4793dff3af2abcd()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xdfa80cb25d0a19b3()": {
	  "prefix": "N_0xdfa80cb25d0a19b3",
	  "body": [
		"N_0xdfa80cb25d0a19b3()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0xef39ee20c537e98c()": {
	  "prefix": "N_0xef39ee20c537e98c",
	  "body": [
		"N_0xef39ee20c537e98c(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xf086ad9354fac3a3()": {
	  "prefix": "N_0xf086ad9354fac3a3",
	  "body": [
		"N_0xf086ad9354fac3a3(${1:Any p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xf4a0dadb70f57fa6()": {
	  "prefix": "N_0xf4a0dadb70f57fa6",
	  "body": [
		"N_0xf4a0dadb70f57fa6()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xf8155a7f03ddfc8e()": {
	  "prefix": "N_0xf8155a7f03ddfc8e",
	  "body": [
		"N_0xf8155a7f03ddfc8e(${1:Any p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"NetworkStopLoadScene()": {
	  "prefix": "NetworkStopLoadScene",
	  "body": [
		"NetworkStopLoadScene()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xfb199266061f820a()": {
	  "prefix": "N_0xfb199266061f820a",
	  "body": [
		"N_0xfb199266061f820a()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"NetworkUpdateLoadScene()": {
	  "prefix": "NetworkUpdateLoadScene",
	  "body": [
		"NetworkUpdateLoadScene()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"NewLoadSceneStart()": {
	  "prefix": "NewLoadSceneStart",
	  "body": [
		"NewLoadSceneStart(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:Any p7})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n"
	},
	"N_0xaccfb4acf53551b0()": {
	  "prefix": "N_0xaccfb4acf53551b0",
	  "body": "N_0xaccfb4acf53551b0",
	  "description": "OLD NAME, PLEASE USE NewLoadSceneStartSphere INSTEAD!"
	},
	"NewLoadSceneStartSphere()": {
	  "prefix": "NewLoadSceneStartSphere",
	  "body": [
		"NewLoadSceneStartSphere(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Any p4})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: BOOL\n\nif (!sub_8f12(\"START LOAD SCENE SAFE\")) {  \nif (CUTSCENE::GET_CUTSCENE_TIME() > 4178) {  \n    STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);  \n    sub_8e9e(\"START LOAD SCENE SAFE\", 1);  \n}  \n\t\t}  \n\t\t(Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)  \n\nOld name: N_0xaccfb4acf53551b0"
	},
	"NewLoadSceneStop()": {
	  "prefix": "NewLoadSceneStop",
	  "body": [
		"NewLoadSceneStop()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"PrefetchSrl()": {
	  "prefix": "PrefetchSrl",
	  "body": [
		"PrefetchSrl(${1:char* srl})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\nThis native is used to attribute the SRL that BeginSrl is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SetFocusArea because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.\nFor instance, GTA:O opening cutscene.\n\n<https://pastebin.com/2EeKVeLA> : a list of SRL found in srllist.meta\n<https://pastebin.com/zd9XYUWY> : here is the content of a SRL file opened with codewalker."
	},
	"RemoveAnimDict()": {
	  "prefix": "RemoveAnimDict",
	  "body": [
		"RemoveAnimDict(${1:char* animDict})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"RemoveAnimSet()": {
	  "prefix": "RemoveAnimSet",
	  "body": [
		"RemoveAnimSet(${1:char* animSet})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nUnloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.  \nAnimation set and clip set are synonymous.  \n"
	},
	"RemoveClipSet()": {
	  "prefix": "RemoveClipSet",
	  "body": [
		"RemoveClipSet(${1:char* clipSet})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nAlias for REMOVE_ANIM_SET.  \n"
	},
	"RemoveIpl()": {
	  "prefix": "RemoveIpl",
	  "body": [
		"RemoveIpl(${1:char* iplName})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nIPL list: pastebin.com/iNGLY32D  \n"
	},
	"RemovePtfxAsset()": {
	  "prefix": "RemovePtfxAsset",
	  "body": [
		"RemovePtfxAsset()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"RemoveNamedPtfxAsset()": {
	  "prefix": "RemoveNamedPtfxAsset",
	  "body": [
		"RemoveNamedPtfxAsset(${1:char* assetName})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nassetName = For example \"core\"  \nconsole hash: 0xC44762A1  \n"
	},
	"RequestAdditionalCollisionAtCoord()": {
	  "prefix": "RequestAdditionalCollisionAtCoord",
	  "body": [
		"RequestAdditionalCollisionAtCoord(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nMulleDK19: Alias of REQUEST_COLLISION_AT_COORD.  \n"
	},
	"RequestAnimDict()": {
	  "prefix": "RequestAnimDict",
	  "body": [
		"RequestAnimDict(${1:char* animDict})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"RequestClipSet()": {
	  "prefix": "RequestClipSet",
	  "body": [
		"RequestClipSet(${1:char* clipSet})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"RequestAnimSet()": {
	  "prefix": "RequestAnimSet",
	  "body": [
		"RequestAnimSet(${1:char* animSet})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nStarts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.  \n"
	},
	"RequestCollisionForModel()": {
	  "prefix": "RequestCollisionForModel",
	  "body": [
		"RequestCollisionForModel(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"RequestCollisionAtCoord()": {
	  "prefix": "RequestCollisionAtCoord",
	  "body": [
		"RequestCollisionAtCoord(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n"
	},
	"N_0xa0261aef7acfc51e()": {
	  "prefix": "N_0xa0261aef7acfc51e",
	  "body": "N_0xa0261aef7acfc51e",
	  "description": "OLD NAME, PLEASE USE RequestMenuPedModel INSTEAD!"
	},
	"RequestMenuPedModel()": {
	  "prefix": "RequestMenuPedModel",
	  "body": [
		"RequestMenuPedModel(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nstreaming::request_menu_ped_model(joaat(\"player_zero\"));  \niVar0 = ped::create_ped(25, joaat(\"player_zero\"), cam::_get_gameplay_cam_coords(), 0f, 0, false);  \nentity::freeze_entity_position(iVar0, true);  \nped::_0x4668d80430d6c299(iVar0);  \nui::give_ped_to_pause_menu(iVar0, 1);  \n\nOld name: N_0xa0261aef7acfc51e"
	},
	"N_0x8a7a40100edfec58()": {
	  "prefix": "N_0x8a7a40100edfec58",
	  "body": "N_0x8a7a40100edfec58",
	  "description": "OLD NAME, PLEASE USE RequestInteriorRoomByName INSTEAD!"
	},
	"RequestInteriorRoomByName()": {
	  "prefix": "RequestInteriorRoomByName",
	  "body": [
		"RequestInteriorRoomByName(${1:int interiorID}, ${2:char* roomName})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nREQUEST_*  \nSomething to do with interiors that have been loaded.  \nSTREAMING::_8A7A40100EDFEC58(l_13BC, \"V_FIB01_cur_elev\");  \nSTREAMING::_8A7A40100EDFEC58(l_13BC, \"limbo\");  \nSTREAMING::_8A7A40100EDFEC58(l_13BB, \"V_Office_gnd_lifts\");  \nSTREAMING::_8A7A40100EDFEC58(l_13BB, \"limbo\");  \nSTREAMING::_8A7A40100EDFEC58(l_13BC, \"v_fib01_jan_elev\");  \nSTREAMING::_8A7A40100EDFEC58(l_13BC, \"limbo\");  \n\nOld name: N_0x8a7a40100edfec58"
	},
	"RequestModel()": {
	  "prefix": "RequestModel",
	  "body": [
		"RequestModel(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nRequest a model to be loaded into memory  \nLooking it the disassembly, it seems like it actually returns the model if it's already loaded.  \n"
	},
	"RequestIpl()": {
	  "prefix": "RequestIpl",
	  "body": [
		"RequestIpl(${1:char* iplName})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nIPL list: pastebin.com/iNGLY32D  \n"
	},
	"RequestPtfxAsset()": {
	  "prefix": "RequestPtfxAsset",
	  "body": [
		"RequestPtfxAsset()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: Any\n\nmaps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty  \n"
	},
	"SetFocusArea()": {
	  "prefix": "SetFocusArea",
	  "body": [
		"SetFocusArea(${1:float x}, ${2:float y}, ${3:float z}, ${4:float offsetX}, ${5:float offsetY}, ${6:float offsetZ})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nOverride the area where the camera will render the terrain.  \np3, p4 and p5 are usually set to 0.0  \n"
	},
	"RequestNamedPtfxAsset()": {
	  "prefix": "RequestNamedPtfxAsset",
	  "body": [
		"RequestNamedPtfxAsset(${1:char* assetName})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nassetName = For example \"core\"   \nFrom the b678d decompiled scripts:  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"core_snow\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"fm_mission_controler\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"proj_xmas_firework\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_apartment_mp\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_biolab_heist\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_fireworks\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_parachute\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_indep_wheelsmoke\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_cig_plane\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_creator\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_mp_tankbattle\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_ornate_heist\");  \n STREAMING::REQUEST_NAMED_PTFX_ASSET(\"scr_prison_break_heist_station\");  \n"
	},
	"SetDitchPoliceModels()": {
	  "prefix": "SetDitchPoliceModels",
	  "body": [
		"SetDitchPoliceModels(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nThis is a NOP function. It does nothing at all.  \n"
	},
	"SetGamePausesForStreaming()": {
	  "prefix": "SetGamePausesForStreaming",
	  "body": [
		"SetGamePausesForStreaming(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"SetFocusEntity()": {
	  "prefix": "SetFocusEntity",
	  "body": [
		"SetFocusEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nIt seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.  \n"
	},
	"SetInteriorActive()": {
	  "prefix": "SetInteriorActive",
	  "body": [
		"SetInteriorActive(${1:int interiorID}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"SetModelAsNoLongerNeeded()": {
	  "prefix": "SetModelAsNoLongerNeeded",
	  "body": [
		"SetModelAsNoLongerNeeded(${1:Hash model})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nUnloads model from memory  \n"
	},
	"SetHdArea()": {
	  "prefix": "SetHdArea",
	  "body": [
		"SetHdArea(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nHarcoded limit for radius is 30.0f  \n"
	},
	"N_0xc208b673ce446b61()": {
	  "prefix": "N_0xc208b673ce446b61",
	  "body": "N_0xc208b673ce446b61",
	  "description": "OLD NAME, PLEASE USE SetPlayerSwitchOutro INSTEAD!"
	},
	"SetPlayerSwitchOutro()": {
	  "prefix": "SetPlayerSwitchOutro",
	  "body": [
		"SetPlayerSwitchOutro(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nOld name: N_0xc208b673ce446b61"
	},
	"SetPedPopulationBudget()": {
	  "prefix": "SetPedPopulationBudget",
	  "body": [
		"SetPedPopulationBudget(${1:int p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"SetReducePedModelBudget()": {
	  "prefix": "SetReducePedModelBudget",
	  "body": [
		"SetReducePedModelBudget(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"SetPlayerInvertedUp()": {
	  "prefix": "SetPlayerInvertedUp",
	  "body": [
		"SetPlayerInvertedUp()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: int\n\nHash collision  \n"
	},
	"SetSrlTime()": {
	  "prefix": "SetSrlTime",
	  "body": [
		"SetSrlTime(${1:float p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"SetReduceVehicleModelBudget()": {
	  "prefix": "SetReduceVehicleModelBudget",
	  "body": [
		"SetReduceVehicleModelBudget(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"SetVehiclePopulationBudget()": {
	  "prefix": "SetVehiclePopulationBudget",
	  "body": [
		"SetVehiclePopulationBudget(${1:int p0})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"SetStreaming()": {
	  "prefix": "SetStreaming",
	  "body": [
		"SetStreaming(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"StartPlayerSwitch()": {
	  "prefix": "StartPlayerSwitch",
	  "body": [
		"StartPlayerSwitch(${1:Ped from}, ${2:Ped to}, ${3:int flags}, ${4:int switchType})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\n// this enum comes directly from R* so don't edit this  \nenum ePlayerSwitchType  \n{  \n\tSWITCH_TYPE_AUTO,  \n\tSWITCH_TYPE_LONG,  \n\tSWITCH_TYPE_MEDIUM,  \n\tSWITCH_TYPE_SHORT  \n};  \nUse GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type. Or just auto, because it calls the same function in executable.  \n----------------------------------------------------  \nExamples from the decompiled scripts:  \nSTREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);  \nSTREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);  \nSTREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);  \nSTREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);  \nNote: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.  \nFlag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.  \nFlag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.  \n"
	},
	"N_0xcce26000e9a6fad7()": {
	  "prefix": "N_0xcce26000e9a6fad7",
	  "body": "N_0xcce26000e9a6fad7",
	  "description": "OLD NAME, PLEASE USE ShutdownCreatorBudget INSTEAD!"
	},
	"ShutdownCreatorBudget()": {
	  "prefix": "ShutdownCreatorBudget",
	  "body": [
		"ShutdownCreatorBudget()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\nOld name: N_0xcce26000e9a6fad7"
	},
	"N_0xd8295af639fd9cb8()": {
	  "prefix": "N_0xd8295af639fd9cb8",
	  "body": "N_0xd8295af639fd9cb8",
	  "description": "OLD NAME, PLEASE USE SwitchInPlayer INSTEAD!"
	},
	"SwitchInPlayer()": {
	  "prefix": "SwitchInPlayer",
	  "body": [
		"SwitchInPlayer(${1:Ped ped})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\nUse after using \\_SWITCH_OUT_PLAYER to swoop the camera back down to the player's ped.\nOld name: N_0xd8295af639fd9cb8"
	},
	"StopPlayerSwitch()": {
	  "prefix": "StopPlayerSwitch",
	  "body": [
		"StopPlayerSwitch()"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n"
	},
	"N_0xaab3200ed59016bc()": {
	  "prefix": "N_0xaab3200ed59016bc",
	  "body": "N_0xaab3200ed59016bc",
	  "description": "OLD NAME, PLEASE USE SwitchOutPlayer INSTEAD!"
	},
	"SwitchOutPlayer()": {
	  "prefix": "SwitchOutPlayer",
	  "body": [
		"SwitchOutPlayer(${1:Ped ped}, ${2:int flags}, ${3:int switchType})"
	  ],
	  "description": "Namespace: STREAMING\nReturns: void\n\ndoesn't act normally when used on mount chilliad\n\nflags:\n\n0: normal\n1: no transition\n255: switch IN\n\nswitchType: 0 - 3\n\n0: 1 step towards ped\n1: 3 steps out from ped\n2: 1 step out from ped\n3: 1 step towards ped\n\nOld name: N_0xaab3200ed59016bc"
	},
	"ApplyForceToEntity()": {
	  "prefix": "ApplyForceToEntity",
	  "body": [
		"ApplyForceToEntity(${1:Entity entity}, ${2:int forceType}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float offX}, ${7:float offY}, ${8:float offZ}, ${9:int boneIndex}, ${10:BOOL isDirectionRel}, ${11:BOOL ignoreUpVec}, ${12:BOOL isForceRel}, ${13:BOOL p12}, ${14:BOOL p13})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\nApplies a force to the specified entity.\n\n**List of force types (p1)**:\n\n\npublic enum ForceType\n{\n    MinForce = 0,\n    MaxForceRot = 1,\n    MinForce2 = 2,\n    MaxForceRot2 = 3,\n    ForceNoRot = 4,\n    ForceRotPlusForce = 5\n}\n\n\nResearch/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/)."
	},
	"AttachEntityToEntity()": {
	  "prefix": "AttachEntityToEntity",
	  "body": [
		"AttachEntityToEntity(${1:Entity entity1}, ${2:Entity entity2}, ${3:int boneIndex}, ${4:float xPos}, ${5:float yPos}, ${6:float zPos}, ${7:float xRot}, ${8:float yRot}, ${9:float zRot}, ${10:BOOL p9}, ${11:BOOL useSoftPinning}, ${12:BOOL collision}, ${13:BOOL isPed}, ${14:int vertexIndex}, ${15:BOOL fixedRot})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nAttaches entity1 to bone (boneIndex) of entity2.  \nboneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.  \nuseSoftPinning - when 2 entities with collision collide and form into a ball they will break the attachment of the entity that they were attached to. Or when an entity is attached far away and then the resets.  \ncollision - controls collision between the two entities (FALSE disables collision).  \nisPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)  \nvertexIndex - position of vertex  \nfixedRot - if false it ignores entity vector  \n"
	},
	"ApplyForceToEntityCenterOfMass()": {
	  "prefix": "ApplyForceToEntityCenterOfMass",
	  "body": [
		"ApplyForceToEntityCenterOfMass(${1:Entity entity}, ${2:int forceType}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL p5}, ${7:BOOL isDirectionRel}, ${8:BOOL isForceRel}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"ClearEntityLastDamageEntity()": {
	  "prefix": "ClearEntityLastDamageEntity",
	  "body": [
		"ClearEntityLastDamageEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Any\n"
	},
	"CreateForcedObject()": {
	  "prefix": "CreateForcedObject",
	  "body": [
		"CreateForcedObject(${1:float x}, ${2:float y}, ${3:float z}, ${4:Any p3}, ${5:Hash modelHash}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"AttachEntityToEntityPhysically()": {
	  "prefix": "AttachEntityToEntityPhysically",
	  "body": [
		"AttachEntityToEntityPhysically(${1:Entity entity1}, ${2:Entity entity2}, ${3:int boneIndex1}, ${4:int boneIndex2}, ${5:float xPos1}, ${6:float yPos1}, ${7:float zPos1}, ${8:float xPos2}, ${9:float yPos2}, ${10:float zPos2}, ${11:float xRot}, ${12:float yRot}, ${13:float zRot}, ${14:float breakForce}, ${15:BOOL fixedRot}, ${16:BOOL p15}, ${17:BOOL collision}, ${18:BOOL teleport}, ${19:int p18})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nbreakForce is the amount of force required to break the bond.  \nfixedRot - if false it ignores entity vector  \np15 - is 1 or 0 in scripts - unknoun what it does  \ncollision - controls collision between the two entities (FALSE disables collision).  \nteleport - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)  \np18 - is always 2 in scripts.  \n-------------------------  \nteleport is not exactly \"doNotTeleport\". What it actually does is the following:  \nif true, entities will be attached as if loosely tethered, up to the maximum offset position specified. Almost as if attached by an invisible rope.  \nif false, entities will be attached in a fixed position as specified in the offset position.  \nWhen p15 = true, it seems to force teleport to false.  \nIt also lets the Rotation params actually work.  \n"
	},
	"CreateModelHideExcludingScriptObjects()": {
	  "prefix": "CreateModelHideExcludingScriptObjects",
	  "body": [
		"CreateModelHideExcludingScriptObjects(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash model}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"CreateModelHide()": {
	  "prefix": "CreateModelHide",
	  "body": [
		"CreateModelHide(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash model}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\np5 = sets as true in scripts  \nSame as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.  \nNetwork players do not see changes done with this.  \n"
	},
	"DeleteEntity()": {
	  "prefix": "DeleteEntity",
	  "body": [
		"DeleteEntity(${1:Entity* entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nDeletes the specified entity, then sets the handle pointed to by the pointer to NULL.  \n"
	},
	"CreateModelSwap()": {
	  "prefix": "CreateModelSwap",
	  "body": [
		"CreateModelSwap(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash originalModel}, ${6:Hash newModel}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nOnly works with objects!  \nNetwork players do not see changes done with this.  \n"
	},
	"DoesEntityBelongToThisScript()": {
	  "prefix": "DoesEntityBelongToThisScript",
	  "body": [
		"DoesEntityBelongToThisScript(${1:Entity entity}, ${2:BOOL p2})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"DetachEntity()": {
	  "prefix": "DetachEntity",
	  "body": [
		"DetachEntity(${1:Entity entity}, ${2:BOOL p1}, ${3:BOOL collision})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\np1 and p2 have no effect   \nmaybe a quick disassembly will tell us what they do  \nthe statement below seems to be false. when I tried it with 2 vehicles:  \nif p2 is set to true, the both entities won't collide with the other until the distance between them is above 4 meters.  \n"
	},
	"DoesEntityHaveDrawable()": {
	  "prefix": "DoesEntityHaveDrawable",
	  "body": [
		"DoesEntityHaveDrawable(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"FindAnimEventPhase()": {
	  "prefix": "FindAnimEventPhase",
	  "body": [
		"FindAnimEventPhase(${1:char* animDictionary}, ${2:char* animName}, ${3:char* p2}, ${4:Any* p3}, ${5:Any* p4})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nIn the script \"player_scene_t_bbfight.c4\":  \n\"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/*16*/], v_9, &v_A, &v_B))\"  \n-- &l_16E (p0) is requested as an anim dictionary earlier in the script.  \n-- &l_19F[v_4/*16*/] (p1) is used in other natives in the script as the \"animation\" param.  \n-- v_9 (p2) is instantiated as \"victim_fall\"; I'm guessing that's another anim  \n--v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:   \n\"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))\"  \nBoth v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though  \n-alphazolam  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"DoesEntityHavePhysics()": {
	  "prefix": "DoesEntityHavePhysics",
	  "body": [
		"DoesEntityHavePhysics(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"FreezeEntityPosition()": {
	  "prefix": "FreezeEntityPosition",
	  "body": [
		"FreezeEntityPosition(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nNo, this should be called SET_ENTITY_KINEMATIC. It does more than just \"freeze\" it's position.  \n^Rockstar Devs named it like that, Now cry about it.  \n"
	},
	"ForceEntityAiAndAnimationUpdate()": {
	  "prefix": "ForceEntityAiAndAnimationUpdate",
	  "body": [
		"ForceEntityAiAndAnimationUpdate(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nBased on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.  \n"
	},
	"GetCollisionNormalOfLastHitForEntity()": {
	  "prefix": "GetCollisionNormalOfLastHitForEntity",
	  "body": [
		"GetCollisionNormalOfLastHitForEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n"
	},
	"GetAnimDuration()": {
	  "prefix": "GetAnimDuration",
	  "body": [
		"GetAnimDuration(${1:char* animDict}, ${2:char* animName})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nConsole Hash: 0x8B5E3E3D = GET_ANIM_DURATION  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"GetEntityAlpha()": {
	  "prefix": "GetEntityAlpha",
	  "body": [
		"GetEntityAlpha(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: int\n"
	},
	"GetEntityAnimCurrentTime()": {
	  "prefix": "GetEntityAnimCurrentTime",
	  "body": [
		"GetEntityAnimCurrentTime(${1:Entity entity}, ${2:char* animDict}, ${3:char* animName})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nReturns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.  \nExample:  \n0.000000 - mark the starting of animation.  \n0.500000 - mark the midpoint of the animation.  \n1.000000 - mark the end of animation.  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"GetEntityAnimTotalTime()": {
	  "prefix": "GetEntityAnimTotalTime",
	  "body": [
		"GetEntityAnimTotalTime(${1:Entity entity}, ${2:char* animDict}, ${3:char* animName})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nReturns a float value representing animation's total playtime in milliseconds.  \nExample:  \nGET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),\"amb@world_human_yoga@female@base\",\"base_b\")   \nreturn 20800.000000  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"GetEntityAttachedTo()": {
	  "prefix": "GetEntityAttachedTo",
	  "body": [
		"GetEntityAttachedTo(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Entity\n"
	},
	"GetEntityBoneIndexByName()": {
	  "prefix": "GetEntityBoneIndexByName",
	  "body": [
		"GetEntityBoneIndexByName(${1:Entity entity}, ${2:char* boneName})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: int\n\nReturns the index of the bone. If the bone was not found, -1 will be returned.   \nlist:  \npastebin.com/D7JMnX1g  \nBoneNames:  \n\tchassis,  \n\twindscreen,  \n\tseat_pside_r,  \n\tseat_dside_r,  \n\tbodyshell,  \n\tsuspension_lm,  \n\tsuspension_lr,  \n\tplatelight,  \n\tattach_female,  \n\tattach_male,  \n\tbonnet,  \n\tboot,  \n\tchassis_dummy,\t//Center of the dummy  \n\tchassis_Control,\t//Not found yet  \n\tdoor_dside_f,\t//Door left, front  \n\tdoor_dside_r,\t//Door left, back  \n\tdoor_pside_f,\t//Door right, front  \n\tdoor_pside_r,\t//Door right, back  \n\tGun_GripR,  \n\twindscreen_f,  \n\tplatelight,\t//Position where the light above the numberplate is located  \n\tVFX_Emitter,  \n\twindow_lf,\t//Window left, front  \n\twindow_lr,\t//Window left, back  \n\twindow_rf,\t//Window right, front  \n\twindow_rr,\t//Window right, back  \n\tengine,\t//Position of the engine  \n\tgun_ammo,  \n\tROPE_ATTATCH,\t//Not misspelled. In script \"finale_heist2b.c4\".  \n\twheel_lf,\t//Wheel left, front  \n\twheel_lr,\t//Wheel left, back  \n\twheel_rf,\t//Wheel right, front  \n\twheel_rr,\t//Wheel right, back  \n\texhaust,\t//Exhaust. shows only the position of the stock-exhaust  \n\toverheat,\t//A position on the engine(not exactly sure, how to name it)  \n\tmisc_e,\t//Not a car-bone.  \n\tseat_dside_f,\t//Driver-seat  \n\tseat_pside_f,\t//Seat next to driver  \n\tGun_Nuzzle,  \n\tseat_r  \nI doubt that the function is case-sensitive, since I found a \"Chassis\" and a \"chassis\". - Just tested: Definitely not case-sensitive.  \n"
	},
	"N_0xccf1e97befdae480()": {
	  "prefix": "N_0xccf1e97befdae480",
	  "body": "N_0xccf1e97befdae480",
	  "description": "OLD NAME, PLEASE USE GetEntityCollisonDisabled INSTEAD!"
	},
	"GetEntityCollisonDisabled()": {
	  "prefix": "GetEntityCollisonDisabled",
	  "body": [
		"GetEntityCollisonDisabled(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nconsole hash: 0xE8C0C629  \n\nOld name: N_0xccf1e97befdae480"
	},
	"GetEntityForwardVector()": {
	  "prefix": "GetEntityForwardVector",
	  "body": [
		"GetEntityForwardVector(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nGets the entity's forward vector.  \n"
	},
	"GetEntityForwardX()": {
	  "prefix": "GetEntityForwardX",
	  "body": [
		"GetEntityForwardX(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nGets the X-component of the entity's forward vector.  \n"
	},
	"GetEntityForwardY()": {
	  "prefix": "GetEntityForwardY",
	  "body": [
		"GetEntityForwardY(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nGets the Y-component of the entity's forward vector.  \n"
	},
	"GetEntityHeight()": {
	  "prefix": "GetEntityHeight",
	  "body": [
		"GetEntityHeight(${1:Entity entity}, ${2:float X}, ${3:float Y}, ${4:float Z}, ${5:BOOL atTop}, ${6:BOOL inWorldCoords})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n"
	},
	"GetEntityHeightAboveGround()": {
	  "prefix": "GetEntityHeightAboveGround",
	  "body": [
		"GetEntityHeightAboveGround(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nReturn height (z-dimension) above ground.   \nExample: The pilot in a titan plane is 1.844176 above ground.  \nHow can i convert it to meters?  \nEverything seems to be in meters, probably this too.  \n"
	},
	"GetEntityLodDist()": {
	  "prefix": "GetEntityLodDist",
	  "body": [
		"GetEntityLodDist(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: int\n\nReturns the LOD distance of an entity.  \n"
	},
	"GetEntityMatrix()": {
	  "prefix": "GetEntityMatrix",
	  "body": [
		"GetEntityMatrix(${1:Entity entity}, ${2:Vector3* rightVector}, ${3:Vector3* forwardVector}, ${4:Vector3* upVector}, ${5:Vector3* position})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0x846bf6291198a71e()": {
	  "prefix": "N_0x846bf6291198a71e",
	  "body": "N_0x846bf6291198a71e",
	  "description": "OLD NAME, PLEASE USE GetEntityPhysicsHeading INSTEAD!"
	},
	"GetEntityPhysicsHeading()": {
	  "prefix": "GetEntityPhysicsHeading",
	  "body": [
		"GetEntityPhysicsHeading(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nGets the heading of the entity physics in degrees, which tends to be more accurate than just \"GET_ENTITY_HEADING\". This can be clearly seen while, for example, ragdolling a ped/player.  \nNOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.  \n\nOld name: N_0x846bf6291198a71e"
	},
	"GetEntityPitch()": {
	  "prefix": "GetEntityPitch",
	  "body": [
		"GetEntityPitch(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n"
	},
	"GetEntityQuaternion()": {
	  "prefix": "GetEntityQuaternion",
	  "body": [
		"GetEntityQuaternion(${1:Entity entity}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* w})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nw is the correct parameter name!  \n"
	},
	"GetEntityRoll()": {
	  "prefix": "GetEntityRoll",
	  "body": [
		"GetEntityRoll(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nDisplays the current ROLL axis of the entity [-180.0000/180.0000+]  \n(Sideways Roll) such as a vehicle tipped on its side  \n"
	},
	"GetEntitySpeed()": {
	  "prefix": "GetEntitySpeed",
	  "body": [
		"GetEntitySpeed(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nresult is in meters per second  \n------------------------------------------------------------  \nSo would the conversion to mph and km/h, be along the lines of this.  \nfloat speed = GET_ENTITY_SPEED(veh);  \nfloat kmh = (speed * 3.6);  \nfloat mph = (speed * 2.236936);  \n"
	},
	"GetEntitySubmergedLevel()": {
	  "prefix": "GetEntitySubmergedLevel",
	  "body": [
		"GetEntitySubmergedLevel(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n\nGet how much of the entity is submerged.  1.0f is whole entity.  \n"
	},
	"GetEntitySpeedVector()": {
	  "prefix": "GetEntitySpeedVector",
	  "body": [
		"GetEntitySpeedVector(${1:Entity entity}, ${2:BOOL relative})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nRelative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).  \n"
	},
	"GetLastMaterialHitByEntity()": {
	  "prefix": "GetLastMaterialHitByEntity",
	  "body": [
		"GetLastMaterialHitByEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Hash\n"
	},
	"GetEntityUprightValue()": {
	  "prefix": "GetEntityUprightValue",
	  "body": [
		"GetEntityUprightValue(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: float\n"
	},
	"GetNearestPlayerToEntityOnTeam()": {
	  "prefix": "GetNearestPlayerToEntityOnTeam",
	  "body": [
		"GetNearestPlayerToEntityOnTeam(${1:Entity entity}, ${2:int team})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Player\n"
	},
	"GetNearestPlayerToEntity()": {
	  "prefix": "GetNearestPlayerToEntity",
	  "body": [
		"GetNearestPlayerToEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Player\n"
	},
	"GetOffsetFromEntityGivenWorldCoords()": {
	  "prefix": "GetOffsetFromEntityGivenWorldCoords",
	  "body": [
		"GetOffsetFromEntityGivenWorldCoords(${1:Entity entity}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nConverts world coords (posX - Z) to coords relative to the entity  \nExample:  \nposX = 50  \nposY = 1000  \nposZ = 60  \nEntity's coords are: x=30, y=1000, z=60.  \nAll three returned coords will then be in range of [-20,20] depending on rotation of the entity.  \n"
	},
	"GetObjectIndexFromEntityIndex()": {
	  "prefix": "GetObjectIndexFromEntityIndex",
	  "body": [
		"GetObjectIndexFromEntityIndex(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Object\n\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n"
	},
	"GetOffsetFromEntityInWorldCoords()": {
	  "prefix": "GetOffsetFromEntityInWorldCoords",
	  "body": [
		"GetOffsetFromEntityInWorldCoords(${1:Entity entity}, ${2:float offsetX}, ${3:float offsetY}, ${4:float offsetZ})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nOffset values are relative to the entity.  \nx = left/right  \ny = forward/backward  \nz = up/down  \n"
	},
	"GetPedIndexFromEntityIndex()": {
	  "prefix": "GetPedIndexFromEntityIndex",
	  "body": [
		"GetPedIndexFromEntityIndex(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Ped\n\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n"
	},
	"GetWorldPositionOfEntityBone()": {
	  "prefix": "GetWorldPositionOfEntityBone",
	  "body": [
		"GetWorldPositionOfEntityBone(${1:Entity entity}, ${2:int boneIndex})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nReturns the coordinates of an entity-bone.  \n"
	},
	"GetVehicleIndexFromEntityIndex()": {
	  "prefix": "GetVehicleIndexFromEntityIndex",
	  "body": [
		"GetVehicleIndexFromEntityIndex(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vehicle\n\nSimply returns whatever is passed to it (Regardless of whether the handle is valid or not).  \n"
	},
	"N_0xce6294a232d03786()": {
	  "prefix": "N_0xce6294a232d03786",
	  "body": "N_0xce6294a232d03786",
	  "description": "OLD NAME, PLEASE USE GetWorldRotationOfEntityBone INSTEAD!"
	},
	"GetWorldRotationOfEntityBone()": {
	  "prefix": "GetWorldRotationOfEntityBone",
	  "body": [
		"GetWorldRotationOfEntityBone(${1:Entity entity}, ${2:int boneIndex})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nOld name: N_0xce6294a232d03786"
	},
	"HasCollisionLoadedAroundEntity()": {
	  "prefix": "HasCollisionLoadedAroundEntity",
	  "body": [
		"HasCollisionLoadedAroundEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"N_0x46f8696933a63c9b()": {
	  "prefix": "N_0x46f8696933a63c9b",
	  "body": "N_0x46f8696933a63c9b",
	  "description": "OLD NAME, PLEASE USE GetWorldPositionOfEntityBone_2 INSTEAD!"
	},
	"GetWorldPositionOfEntityBone_2()": {
	  "prefix": "GetWorldPositionOfEntityBone_2",
	  "body": [
		"GetWorldPositionOfEntityBone_2(${1:Entity entity}, ${2:int boneIndex})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Vector3\n\nOld name: N_0x46f8696933a63c9b"
	},
	"HasAnimEventFired()": {
	  "prefix": "HasAnimEventFired",
	  "body": [
		"HasAnimEventFired(${1:Entity entity}, ${2:Hash actionHash})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nif (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"CreateObject\")))  \n"
	},
	"HasEntityBeenDamagedByAnyObject()": {
	  "prefix": "HasEntityBeenDamagedByAnyObject",
	  "body": [
		"HasEntityBeenDamagedByAnyObject(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"HasEntityBeenDamagedByAnyPed()": {
	  "prefix": "HasEntityBeenDamagedByAnyPed",
	  "body": [
		"HasEntityBeenDamagedByAnyPed(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"HasEntityAnimFinished()": {
	  "prefix": "HasEntityAnimFinished",
	  "body": [
		"HasEntityAnimFinished(${1:Entity entity}, ${2:char* animDict}, ${3:char* animName}, ${4:int p3})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nP3 is always 3 as far as i cant tell  \nAnimations List : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"HasEntityBeenDamagedByEntity()": {
	  "prefix": "HasEntityBeenDamagedByEntity",
	  "body": [
		"HasEntityBeenDamagedByEntity(${1:Entity entity1}, ${2:Entity entity2}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nEntity 1 = Victim  \nEntity 2 = Attacker  \np2 seems to always be 1  \n"
	},
	"HasEntityBeenDamagedByAnyVehicle()": {
	  "prefix": "HasEntityBeenDamagedByAnyVehicle",
	  "body": [
		"HasEntityBeenDamagedByAnyVehicle(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"HasEntityClearLosToEntityInFront()": {
	  "prefix": "HasEntityClearLosToEntityInFront",
	  "body": [
		"HasEntityClearLosToEntityInFront(${1:Entity entity1}, ${2:Entity entity2})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nHas the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.  \nThis is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops  \n"
	},
	"HasEntityClearLosToEntity()": {
	  "prefix": "HasEntityClearLosToEntity",
	  "body": [
		"HasEntityClearLosToEntity(${1:Entity entity1}, ${2:Entity entity2}, ${3:int traceType})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\ntraceType is always 17 in the scripts.  \nThere is other codes used for traceType:  \n19 - in jewelry_prep1a  \n126 - in am_hunt_the_beast  \n256 & 287 - in fm_mission_controller  \n"
	},
	"IsAnEntity()": {
	  "prefix": "IsAnEntity",
	  "body": [
		"IsAnEntity(${1:int handle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"HasEntityCollidedWithAnything()": {
	  "prefix": "HasEntityCollidedWithAnything",
	  "body": [
		"HasEntityCollidedWithAnything(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nCalled on tick.  \nTested with vehicles, returns true whenever the vehicle is touching any entity.  \nNote: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.  \n"
	},
	"IsEntityAPed()": {
	  "prefix": "IsEntityAPed",
	  "body": [
		"IsEntityAPed(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAMissionEntity()": {
	  "prefix": "IsEntityAMissionEntity",
	  "body": [
		"IsEntityAMissionEntity(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAVehicle()": {
	  "prefix": "IsEntityAVehicle",
	  "body": [
		"IsEntityAVehicle(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAnObject()": {
	  "prefix": "IsEntityAnObject",
	  "body": [
		"IsEntityAnObject(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAtCoord()": {
	  "prefix": "IsEntityAtCoord",
	  "body": [
		"IsEntityAtCoord(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float xSize}, ${6:float ySize}, ${7:float zSize}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:int p9})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nChecks if entity is within x/y/zSize distance of x/y/z.   \nLast three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0  \n"
	},
	"IsEntityAttached()": {
	  "prefix": "IsEntityAttached",
	  "body": [
		"IsEntityAttached(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAtEntity()": {
	  "prefix": "IsEntityAtEntity",
	  "body": [
		"IsEntityAtEntity(${1:Entity entity1}, ${2:Entity entity2}, ${3:float xSize}, ${4:float ySize}, ${5:float zSize}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:int p7})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nChecks if entity1 is within the box defined by x/y/zSize of entity2.  \nLast three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0  \n"
	},
	"IsEntityAttachedToAnyObject()": {
	  "prefix": "IsEntityAttachedToAnyObject",
	  "body": [
		"IsEntityAttachedToAnyObject(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAttachedToAnyVehicle()": {
	  "prefix": "IsEntityAttachedToAnyVehicle",
	  "body": [
		"IsEntityAttachedToAnyVehicle(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAttachedToAnyPed()": {
	  "prefix": "IsEntityAttachedToAnyPed",
	  "body": [
		"IsEntityAttachedToAnyPed(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityAttachedToEntity()": {
	  "prefix": "IsEntityAttachedToEntity",
	  "body": [
		"IsEntityAttachedToEntity(${1:Entity from}, ${2:Entity to})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityDead()": {
	  "prefix": "IsEntityDead",
	  "body": [
		"IsEntityDead(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityInAngledArea()": {
	  "prefix": "IsEntityInAngledArea",
	  "body": [
		"IsEntityInAngledArea(${1:Entity entity}, ${2:float originX}, ${3:float originY}, ${4:float originZ}, ${5:float edgeX}, ${6:float edgeY}, ${7:float edgeZ}, ${8:float angle}, ${9:BOOL p8}, ${10:BOOL p9}, ${11:Any p10})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nCreates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone  \nAngle is measured in degrees.  \nThese values are constant, most likely bogus:  \np8 = 0, p9 = 1, p10 = 0  \nThis method can also take two float<3> instead of 6 floats.  \n"
	},
	"IsEntityInAir()": {
	  "prefix": "IsEntityInAir",
	  "body": [
		"IsEntityInAir(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityInWater()": {
	  "prefix": "IsEntityInWater",
	  "body": [
		"IsEntityInWater(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityInArea()": {
	  "prefix": "IsEntityInArea",
	  "body": [
		"IsEntityInArea(${1:Entity entity}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:Any p9})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityOccluded()": {
	  "prefix": "IsEntityOccluded",
	  "body": [
		"IsEntityOccluded(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityInZone()": {
	  "prefix": "IsEntityInZone",
	  "body": [
		"IsEntityInZone(${1:Entity entity}, ${2:char* zone})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityPlayingAnim()": {
	  "prefix": "IsEntityPlayingAnim",
	  "body": [
		"IsEntityPlayingAnim(${1:Entity entity}, ${2:char* animDict}, ${3:char* animName}, ${4:int taskFlag})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nSee also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447  \nTaken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), \"creatures@shark@move\", \"attack_player\", 3)  \np4 is always 3 in the scripts.  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \ntaskFlag:  \n2 - Check synchronized scene  \n"
	},
	"IsEntityOnScreen()": {
	  "prefix": "IsEntityOnScreen",
	  "body": [
		"IsEntityOnScreen(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nReturns true if the entity is in between the minimum and maximum values for the 2d screen coords.   \nThis means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.   \nChipping  \n"
	},
	"IsEntityTouchingEntity()": {
	  "prefix": "IsEntityTouchingEntity",
	  "body": [
		"IsEntityTouchingEntity(${1:Entity entity}, ${2:Entity targetEntity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityTouchingModel()": {
	  "prefix": "IsEntityTouchingModel",
	  "body": [
		"IsEntityTouchingModel(${1:Entity entity}, ${2:Hash modelHash})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityStatic()": {
	  "prefix": "IsEntityStatic",
	  "body": [
		"IsEntityStatic(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nA static ped will not react to natives like \"APPLY_FORCE_TO_ENTITY\" or \"SET_ENTITY_VELOCITY\" and oftentimes will not react to task-natives like \"AI::TASK_COMBAT_PED\". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.  \n^ Attach a phCollider to the ped.  \n"
	},
	"IsEntityUpsidedown()": {
	  "prefix": "IsEntityUpsidedown",
	  "body": [
		"IsEntityUpsidedown(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"IsEntityUpright()": {
	  "prefix": "IsEntityUpright",
	  "body": [
		"IsEntityUpright(${1:Entity entity}, ${2:float angle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\n// add this to your CSS to view code with formatting intact.  \n// pre + hr + p { white-space: pre; } // -  \nbool isEntityUpright(Entity e, float angle) {  \n    bool bIsUpright; // bl@1  \n    CDynamicEntity* pEntity; // rdi@1  \n    bIsUpright = 0;  \n    pEntity = getEntityAddressIfPhysical(e);  \n    if (pEntity) {  \n        bIsUpright = 0;  \n        if (pEntity->Matrix.up.z >= cosf(angle * 0.017453292)) // radians(angle)  \n            bIsUpright = 1;  \n    }  \n    return bIsUpright;  \n}  \n"
	},
	"IsEntityVisible()": {
	  "prefix": "IsEntityVisible",
	  "body": [
		"IsEntityVisible(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"N_0x1a092bb0c3808b96()": {
	  "prefix": "N_0x1a092bb0c3808b96",
	  "body": [
		"N_0x1a092bb0c3808b96(${1:Entity entity}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nSET_ENTITY_*  \n"
	},
	"IsEntityVisibleToScript()": {
	  "prefix": "IsEntityVisibleToScript",
	  "body": [
		"IsEntityVisibleToScript(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"N_0x352e2b5cf420bf3b()": {
	  "prefix": "N_0x352e2b5cf420bf3b",
	  "body": [
		"N_0x352e2b5cf420bf3b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"IsEntityWaitingForWorldCollision()": {
	  "prefix": "IsEntityWaitingForWorldCollision",
	  "body": [
		"IsEntityWaitingForWorldCollision(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"N_0x490861b88f4fd846()": {
	  "prefix": "N_0x490861b88f4fd846",
	  "body": [
		"N_0x490861b88f4fd846(${1:Any p0})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0x2c2e3dc128f44309()": {
	  "prefix": "N_0x2c2e3dc128f44309",
	  "body": [
		"N_0x2c2e3dc128f44309(${1:Entity entity}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nSET_ENTITY_*  \n"
	},
	"N_0x5c48b75732c8456c()": {
	  "prefix": "N_0x5c48b75732c8456c",
	  "body": [
		"N_0x5c48b75732c8456c(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0x36f32de87082343e()": {
	  "prefix": "N_0x36f32de87082343e",
	  "body": [
		"N_0x36f32de87082343e(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0x6ce177d014502e8a()": {
	  "prefix": "N_0x6ce177d014502e8a",
	  "body": [
		"N_0x6ce177d014502e8a(${1:Any p0})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0x5c3b791d580e0bc2()": {
	  "prefix": "N_0x5c3b791d580e0bc2",
	  "body": [
		"N_0x5c3b791d580e0bc2(${1:Entity entity}, ${2:float p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nOnly called once in the scripts.  \nRelated to weapon objects.  \n"
	},
	"N_0xa80ae305e0a3044f()": {
	  "prefix": "N_0xa80ae305e0a3044f",
	  "body": [
		"N_0xa80ae305e0a3044f(${1:Entity entity}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\np1 always false.  \n"
	},
	"N_0x694e00132f2823ed()": {
	  "prefix": "N_0x694e00132f2823ed",
	  "body": [
		"N_0x694e00132f2823ed(${1:Entity entity}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nwhat does it do?  \n"
	},
	"N_0xb328dcc3a3aa401b()": {
	  "prefix": "N_0xb328dcc3a3aa401b",
	  "body": [
		"N_0xb328dcc3a3aa401b(${1:Any p0})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Any\n"
	},
	"N_0x78e8e3a640178255()": {
	  "prefix": "N_0x78e8e3a640178255",
	  "body": [
		"N_0x78e8e3a640178255(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nRelated to cutscene entities. Unsure about the use.  \n"
	},
	"N_0xc34bc448da29f5e9()": {
	  "prefix": "N_0xc34bc448da29f5e9",
	  "body": [
		"N_0xc34bc448da29f5e9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0xb17bc6453f6cf5ac()": {
	  "prefix": "N_0xb17bc6453f6cf5ac",
	  "body": [
		"N_0xb17bc6453f6cf5ac(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0xcea7c8e1b48ff68c()": {
	  "prefix": "N_0xcea7c8e1b48ff68c",
	  "body": [
		"N_0xcea7c8e1b48ff68c(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"N_0xd95cc5d2ab15a09f()": {
	  "prefix": "N_0xd95cc5d2ab15a09f",
	  "body": [
		"N_0xd95cc5d2ab15a09f(${1:Any p0})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Any\n"
	},
	"N_0xdc6f8601faf2e893()": {
	  "prefix": "N_0xdc6f8601faf2e893",
	  "body": [
		"N_0xdc6f8601faf2e893(${1:Entity entity}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nSET_ENTITY_*  \nx360 Hash: 0xA0466A69  \nOnly called within 1 script for x360. 'fm_mission_controller' and it used on an object.   \nRan after these 2 natives,  \nset_object_targettable(uParam0, 0);  \nset_entity_invincible(uParam0, 1);  \n"
	},
	"N_0xe12abe5e3a389a6c()": {
	  "prefix": "N_0xe12abe5e3a389a6c",
	  "body": [
		"N_0xe12abe5e3a389a6c(${1:Entity entity}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\np1 always false.  \n"
	},
	"PlayEntityAnim()": {
	  "prefix": "PlayEntityAnim",
	  "body": [
		"PlayEntityAnim(${1:Entity entity}, ${2:char* animName}, ${3:char* animDict}, ${4:float p3}, ${5:BOOL loop}, ${6:BOOL stayInAnim}, ${7:BOOL p6}, ${8:float delta}, ${9:Any bitset})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\ndelta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.  \nThe only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"N_0xfd1695c5d3b05439()": {
	  "prefix": "N_0xfd1695c5d3b05439",
	  "body": [
		"N_0xfd1695c5d3b05439(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"PlaySynchronizedEntityAnim()": {
	  "prefix": "PlaySynchronizedEntityAnim",
	  "body": [
		"PlaySynchronizedEntityAnim(${1:Entity entity}, ${2:int syncedScene}, ${3:char* animation}, ${4:char* propName}, ${5:float p4}, ${6:float p5}, ${7:Any p6}, ${8:float p7})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\np4 and p7 are usually 1000.0f.  \nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"PlaySynchronizedMapEntityAnim()": {
	  "prefix": "PlaySynchronizedMapEntityAnim",
	  "body": [
		"PlaySynchronizedMapEntityAnim(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:float p8}, ${10:float p9}, ${11:Any p10}, ${12:float p11})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"ProcessEntityAttachments()": {
	  "prefix": "ProcessEntityAttachments",
	  "body": [
		"ProcessEntityAttachments(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nCalled to update entity attachments.  \nWhen using ATTACH_ENTITY_TO_ENTITY and using bone '0' then you set the first entity invisible. The attachments will mess up, use bone '-1' to fix that issue  \n"
	},
	"RemoveForcedObject()": {
	  "prefix": "RemoveForcedObject",
	  "body": [
		"RemoveForcedObject(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"RemoveModelSwap()": {
	  "prefix": "RemoveModelSwap",
	  "body": [
		"RemoveModelSwap(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash originalModel}, ${6:Hash newModel}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"RemoveModelHide()": {
	  "prefix": "RemoveModelHide",
	  "body": [
		"RemoveModelHide(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityAlpha()": {
	  "prefix": "SetEntityAlpha",
	  "body": [
		"SetEntityAlpha(${1:Entity entity}, ${2:int alphaLevel}, ${3:int skin})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nskin - everything alpha except skin  \nSet entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).  \n"
	},
	"ResetEntityAlpha()": {
	  "prefix": "ResetEntityAlpha",
	  "body": [
		"ResetEntityAlpha(${1:Entity entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Any\n"
	},
	"SetEntityAnimCurrentTime()": {
	  "prefix": "SetEntityAnimCurrentTime",
	  "body": [
		"SetEntityAnimCurrentTime(${1:Entity entity}, ${2:char* animDictionary}, ${3:char* animName}, ${4:float time})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"SetEntityAlwaysPrerender()": {
	  "prefix": "SetEntityAlwaysPrerender",
	  "body": [
		"SetEntityAlwaysPrerender(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityAsMissionEntity()": {
	  "prefix": "SetEntityAsMissionEntity",
	  "body": [
		"SetEntityAsMissionEntity(${1:Entity entity}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nMakes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.  \np1 has no effect when either its on or off   \nmaybe a quick disassembly will tell us what it does  \np2 has no effect when either its on or off   \nmaybe a quick disassembly will tell us what it does  \n"
	},
	"SetEntityCanBeDamaged()": {
	  "prefix": "SetEntityCanBeDamaged",
	  "body": [
		"SetEntityCanBeDamaged(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityAnimSpeed()": {
	  "prefix": "SetEntityAnimSpeed",
	  "body": [
		"SetEntityAnimSpeed(${1:Entity entity}, ${2:char* animDictionary}, ${3:char* animName}, ${4:float speedMultiplier})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \n"
	},
	"SetEntityCanBeDamagedByRelationshipGroup()": {
	  "prefix": "SetEntityCanBeDamagedByRelationshipGroup",
	  "body": [
		"SetEntityCanBeDamagedByRelationshipGroup(${1:Entity entity}, ${2:BOOL bCanBeDamaged}, ${3:int relGroup})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityAsNoLongerNeeded()": {
	  "prefix": "SetEntityAsNoLongerNeeded",
	  "body": [
		"SetEntityAsNoLongerNeeded(${1:Entity* entity})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nMarks the specified entity (ped, vehicle or object) as no longer needed.  \nEntities marked as no longer needed, will be deleted as the engine sees fit.  \n"
	},
	"SetEntityCollision()": {
	  "prefix": "SetEntityCollision",
	  "body": [
		"SetEntityCollision(${1:Entity entity}, ${2:BOOL toggle}, ${3:BOOL keepPhysics})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityCanBeTargetedWithoutLos()": {
	  "prefix": "SetEntityCanBeTargetedWithoutLos",
	  "body": [
		"SetEntityCanBeTargetedWithoutLos(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nSets whether the entity can be targeted without being in line-of-sight.  \n"
	},
	"N_0x9ebc85ed0fffe51c()": {
	  "prefix": "N_0x9ebc85ed0fffe51c",
	  "body": "N_0x9ebc85ed0fffe51c",
	  "description": "OLD NAME, PLEASE USE SetEntityCollision_2 INSTEAD!"
	},
	"SetEntityCollision_2()": {
	  "prefix": "SetEntityCollision_2",
	  "body": [
		"SetEntityCollision_2(${1:Entity entity}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nconsole hash: 0xBD0D4831  \ninternally it calls the same function as 'SET_ENTITY_COLLISION'. but uses a hard coded parameter that only activates when p1 is set to true   \n=============================  \nWeirdly enough in the 3 scripts it's used in on PC,  \n- director_mode (2 hits)  \n- re_duel (2 hits)  \n- re_seaplane (1 hit)  \nMost of the time in the hits its actually used after the normal SET_ENTITY_COLLISION. Example from re_seaplane,  \nLocal_49[iParam0 /*6*/] = create_ped(26, iVar4, vVar0, fVar3, 1, true);  \nset_entity_collision(Local_49[iParam0 /*6*/], iVar42, 0);  \n_0x9EBC85ED0FFFE51C(Local_49[iParam0 /*6*/], !iVar66, 0); (_SET_ENTITY_COLLISION_2)  \niVar42 being true so the normal collision native is true, 0  \niVar66 being false so !false so it's true, 0  \nGonna ignore the 'vars' for the create_ped no point in defining them.  \n\nOld name: N_0x9ebc85ed0fffe51c"
	},
	"SetEntityCoords()": {
	  "prefix": "SetEntityCoords",
	  "body": [
		"SetEntityCoords(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:BOOL xAxis}, ${6:BOOL yAxis}, ${7:BOOL zAxis}, ${8:BOOL clearArea})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\np7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.   \nOften ends with 1, 0, 0, 1); in the scripts. It works.   \nAxis - Invert Axis Flags  \n"
	},
	"SetEntityCoordsNoOffset()": {
	  "prefix": "SetEntityCoordsNoOffset",
	  "body": [
		"SetEntityCoordsNoOffset(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:BOOL xAxis}, ${6:BOOL yAxis}, ${7:BOOL zAxis})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nAxis - Invert Axis Flags  \n"
	},
	"SetEntityDynamic()": {
	  "prefix": "SetEntityDynamic",
	  "body": [
		"SetEntityDynamic(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityCoords_2()": {
	  "prefix": "SetEntityCoords_2",
	  "body": [
		"SetEntityCoords_2(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:BOOL xAxis}, ${6:BOOL yAxis}, ${7:BOOL zAxis}, ${8:BOOL clearArea})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\ndoes the same as SET_ENTITY_COORDS.  \nConsole Hash: 0x749B282E  \n"
	},
	"SetEntityHeading()": {
	  "prefix": "SetEntityHeading",
	  "body": [
		"SetEntityHeading(${1:Entity entity}, ${2:float heading})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityHasGravity()": {
	  "prefix": "SetEntityHasGravity",
	  "body": [
		"SetEntityHasGravity(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityHealth()": {
	  "prefix": "SetEntityHealth",
	  "body": [
		"SetEntityHealth(${1:Entity entity}, ${2:int health})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nhealth >= 0  \n"
	},
	"SetEntityIsTargetPriority()": {
	  "prefix": "SetEntityIsTargetPriority",
	  "body": [
		"SetEntityIsTargetPriority(${1:Entity entity}, ${2:BOOL p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityInvincible()": {
	  "prefix": "SetEntityInvincible",
	  "body": [
		"SetEntityInvincible(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nSets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.  \nIf you use this for a ped and you want Ragdoll to stay enabled, then do:  \n*(DWORD *)(pedAddress + 0x188) |= (1 << 9);  \nUse this if you want to get the invincibility status:  \n\tbool IsPedInvincible(Ped ped)  \n\t{  \nauto addr = getScriptHandleBaseAddress(ped);\t  \nif (addr)  \n{  \n\tDWORD flag = *(DWORD *)(addr + 0x188);  \n\treturn ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);  \n}  \nreturn false;  \n\t}  \n"
	},
	"SetEntityLights()": {
	  "prefix": "SetEntityLights",
	  "body": [
		"SetEntityLights(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityLoadCollisionFlag()": {
	  "prefix": "SetEntityLoadCollisionFlag",
	  "body": [
		"SetEntityLoadCollisionFlag(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nCertainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.  \n"
	},
	"SetEntityLodDist()": {
	  "prefix": "SetEntityLodDist",
	  "body": [
		"SetEntityLodDist(${1:Entity entity}, ${2:int value})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nLOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).  \n"
	},
	"SetEntityMaxHealth()": {
	  "prefix": "SetEntityMaxHealth",
	  "body": [
		"SetEntityMaxHealth(${1:Entity entity}, ${2:int value})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nFor instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849  \n"
	},
	"SetEntityMotionBlur()": {
	  "prefix": "SetEntityMotionBlur",
	  "body": [
		"SetEntityMotionBlur(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityOnlyDamagedByPlayer()": {
	  "prefix": "SetEntityOnlyDamagedByPlayer",
	  "body": [
		"SetEntityOnlyDamagedByPlayer(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityMaxSpeed()": {
	  "prefix": "SetEntityMaxSpeed",
	  "body": [
		"SetEntityMaxSpeed(${1:Entity entity}, ${2:float speed})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityNoCollisionEntity()": {
	  "prefix": "SetEntityNoCollisionEntity",
	  "body": [
		"SetEntityNoCollisionEntity(${1:Entity entity1}, ${2:Entity entity2}, ${3:BOOL thisFrame})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nCalling this function disables collision between two entities.\nThe importance of the order for entity1 and entity2 is unclear.\nThe third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.\n"
	},
	"SetEntityProofs()": {
	  "prefix": "SetEntityProofs",
	  "body": [
		"SetEntityProofs(${1:Entity entity}, ${2:BOOL bulletProof}, ${3:BOOL fireProof}, ${4:BOOL explosionProof}, ${5:BOOL collisionProof}, ${6:BOOL meleeProof}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nEnable / disable each type of damage.  \n--------------  \np7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);  \n"
	},
	"SetEntityOnlyDamagedByRelationshipGroup()": {
	  "prefix": "SetEntityOnlyDamagedByRelationshipGroup",
	  "body": [
		"SetEntityOnlyDamagedByRelationshipGroup(${1:Entity entity}, ${2:BOOL p1}, ${3:Hash relationshipHash})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityQuaternion()": {
	  "prefix": "SetEntityQuaternion",
	  "body": [
		"SetEntityQuaternion(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float w})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nw is the correct parameter name!  \n"
	},
	"SetEntityRecordsCollisions()": {
	  "prefix": "SetEntityRecordsCollisions",
	  "body": [
		"SetEntityRecordsCollisions(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityRenderScorched()": {
	  "prefix": "SetEntityRenderScorched",
	  "body": [
		"SetEntityRenderScorched(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n"
	},
	"SetEntityRotation()": {
	  "prefix": "SetEntityRotation",
	  "body": [
		"SetEntityRotation(${1:Entity entity}, ${2:float pitch}, ${3:float roll}, ${4:float yaw}, ${5:int rotationOrder}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nrotationOrder refers to the order yaw pitch roll is applied  \nvalue ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.   \nUnsure what value corresponds to what rotation order, more testing will be needed for that.  \nFor the most part R* uses 1 or 2 as the order.  \np5 is usually set as true  \n"
	},
	"N_0x3910051ccecdb00c()": {
	  "prefix": "N_0x3910051ccecdb00c",
	  "body": "N_0x3910051ccecdb00c",
	  "description": "OLD NAME, PLEASE USE SetEntitySomething INSTEAD!"
	},
	"SetEntityRegister()": {
	  "prefix": "SetEntityRegister",
	  "body": "SetEntityRegister",
	  "description": "OLD NAME, PLEASE USE SetEntitySomething INSTEAD!"
	},
	"SetEntitySomething()": {
	  "prefix": "SetEntitySomething",
	  "body": [
		"SetEntitySomething(${1:Entity entity}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nwhat does this native do?  \nbool IsEntitySomething(Entity entity)  \n{  \n\tauto addr = getScriptHandleBaseAddress(entity);  \n\tprintf(\"addr: 0x%X \\n\", addr);  \n\tif (addr)  \n\t{  \nDWORD flag = *(DWORD *)(addr + 0x48D);  \nprintf(\"flag: 0x%X \\n\", flag);  \nreturn ((flag & (1 << 3)) != 0) || ((flag & (1 << 30)) != 0);  \n\t}  \n\treturn false;  \n}  \nwot ?  \n\nOld name: N_0x3910051ccecdb00c\nOld name: SetEntityRegister"
	},
	"SetEntityTrafficlightOverride()": {
	  "prefix": "SetEntityTrafficlightOverride",
	  "body": [
		"SetEntityTrafficlightOverride(${1:Entity entity}, ${2:int state})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nExample here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340  \n0 = green  \n1 = red  \n2 = yellow  \nchanging lights may not change the behavior of vehicles  \n"
	},
	"SetEntityVelocity()": {
	  "prefix": "SetEntityVelocity",
	  "body": [
		"SetEntityVelocity(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nNote that the third parameter(denoted as z) is \"up and down\" with positive ment.  \n"
	},
	"SetEntityVisible()": {
	  "prefix": "SetEntityVisible",
	  "body": [
		"SetEntityVisible(${1:Entity entity}, ${2:BOOL toggle}, ${3:BOOL unk})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nunk was always 0.  \n"
	},
	"SetObjectAsNoLongerNeeded()": {
	  "prefix": "SetObjectAsNoLongerNeeded",
	  "body": [
		"SetObjectAsNoLongerNeeded(${1:Object* object})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n"
	},
	"SetPedAsNoLongerNeeded()": {
	  "prefix": "SetPedAsNoLongerNeeded",
	  "body": [
		"SetPedAsNoLongerNeeded(${1:Ped* ped})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n"
	},
	"SetVehicleAsNoLongerNeeded()": {
	  "prefix": "SetVehicleAsNoLongerNeeded",
	  "body": [
		"SetVehicleAsNoLongerNeeded(${1:Vehicle* vehicle})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: void\n\nThis is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.  \n"
	},
	"StopEntityAnim()": {
	  "prefix": "StopEntityAnim",
	  "body": [
		"StopEntityAnim(${1:Entity entity}, ${2:char* animation}, ${3:char* animGroup}, ${4:float p3})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: Any\n\nAnimations list : www.los-santos-multiplayer.com/dev.airdancer?cxt=anim  \nRAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm  \n"
	},
	"StopSynchronizedEntityAnim()": {
	  "prefix": "StopSynchronizedEntityAnim",
	  "body": [
		"StopSynchronizedEntityAnim(${1:Entity entity}, ${2:float p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\np1 sync task id?  \n"
	},
	"StopSynchronizedMapEntityAnim()": {
	  "prefix": "StopSynchronizedMapEntityAnim",
	  "body": [
		"StopSynchronizedMapEntityAnim(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4}, ${6:float p5})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n"
	},
	"WouldEntityBeOccluded()": {
	  "prefix": "WouldEntityBeOccluded",
	  "body": [
		"WouldEntityBeOccluded(${1:Hash entityModelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: ENTITY\nReturns: BOOL\n\nFirst parameter was previously an Entity but after further research it is definitely a hash.  \n"
	},
	"GetUserLanguageId()": {
	  "prefix": "GetUserLanguageId",
	  "body": [
		"GetUserLanguageId()"
	  ],
	  "description": "Namespace: UNK\nReturns: int\n\nReturns the user's defined langauge as ID   \nenglish: 12  \nfrench = 7  \ngerman = 22  \nitalian = 21  \njapanese = 9  \nkorean = 17  \nportuguese = 16  \nspanish = 10  \nrussian = 25  \n"
	},
	"GetUiLanguageId()": {
	  "prefix": "GetUiLanguageId",
	  "body": "GetUiLanguageId",
	  "description": "OLD NAME, PLEASE USE GetCurrentLanguageId INSTEAD!"
	},
	"GetCurrentLanguageId()": {
	  "prefix": "GetCurrentLanguageId",
	  "body": [
		"GetCurrentLanguageId()"
	  ],
	  "description": "Namespace: UNK\nReturns: int\n\namerican = 0  \nfrench = 1   \ngerman = 2  \nitalian =3  \nspanish = 4  \nportuguese = 5  \npolish = 6  \nrussian = 7  \nkorean = 8  \nchinesetraditional = 9  \njapanese = 10  \nmexican = 11  \nchinesesimplified = 12\n\nOld name: GetUiLanguageId"
	},
	"N_0xfc309e94546fcdb5()": {
	  "prefix": "N_0xfc309e94546fcdb5",
	  "body": "N_0xfc309e94546fcdb5",
	  "description": "OLD NAME, PLEASE USE IsInLoadingScreen INSTEAD!"
	},
	"IsInLoadingScreen()": {
	  "prefix": "IsInLoadingScreen",
	  "body": [
		"IsInLoadingScreen(${1:BOOL p0})"
	  ],
	  "description": "Namespace: UNK\nReturns: void\n\nOnly occurrence was false, in maintransition.  \n\nOld name: N_0xfc309e94546fcdb5"
	},
	"N_0x8aa464d4e0f6accd()": {
	  "prefix": "N_0x8aa464d4e0f6accd",
	  "body": [
		"N_0x8aa464d4e0f6accd()"
	  ],
	  "description": "Namespace: UNK\nReturns: Any\n"
	},
	"N_0xc6dc823253fbb366()": {
	  "prefix": "N_0xc6dc823253fbb366",
	  "body": "N_0xc6dc823253fbb366",
	  "description": "OLD NAME, PLEASE USE IsUiLoadingMultiplayer INSTEAD!"
	},
	"IsUiLoadingMultiplayer()": {
	  "prefix": "IsUiLoadingMultiplayer",
	  "body": [
		"IsUiLoadingMultiplayer()"
	  ],
	  "description": "Namespace: UNK\nReturns: BOOL\n\nOld name: N_0xc6dc823253fbb366"
	},
	"GetBroadcastFinshedLosSound()": {
	  "prefix": "GetBroadcastFinshedLosSound",
	  "body": "GetBroadcastFinshedLosSound",
	  "description": "OLD NAME, PLEASE USE N_0xb0c56bd3d808d863 INSTEAD!"
	},
	"N_0xb0c56bd3d808d863()": {
	  "prefix": "N_0xb0c56bd3d808d863",
	  "body": [
		"N_0xb0c56bd3d808d863(${1:BOOL p0})"
	  ],
	  "description": "Namespace: UNK\nReturns: void\n\nOld name: GetBroadcastFinshedLosSound"
	},
	"N_0xc7e7181c09f33b69()": {
	  "prefix": "N_0xc7e7181c09f33b69",
	  "body": [
		"N_0xc7e7181c09f33b69(${1:BOOL p0})"
	  ],
	  "description": "Namespace: UNK\nReturns: void\n"
	},
	"N_0xef7d17bc6c85264c()": {
	  "prefix": "N_0xef7d17bc6c85264c",
	  "body": [
		"N_0xef7d17bc6c85264c()"
	  ],
	  "description": "Namespace: UNK\nReturns: BOOL\n"
	},
	"ReturnZero()": {
	  "prefix": "ReturnZero",
	  "body": "ReturnZero",
	  "description": "OLD NAME, PLEASE USE N_0xf2ca003f167e21d2 INSTEAD!"
	},
	"N_0xf2ca003f167e21d2()": {
	  "prefix": "N_0xf2ca003f167e21d2",
	  "body": [
		"N_0xf2ca003f167e21d2()"
	  ],
	  "description": "Namespace: UNK\nReturns: int\n\nMulleDK19: This function is hard-coded to always return 0.  \n\nOld name: ReturnZero"
	},
	"N_0xfa1e0e893d915215()": {
	  "prefix": "N_0xfa1e0e893d915215",
	  "body": [
		"N_0xfa1e0e893d915215(${1:BOOL p0})"
	  ],
	  "description": "Namespace: UNK\nReturns: void\n"
	},
	"N_0x2ce544c68fb812a0()": {
	  "prefix": "N_0x2ce544c68fb812a0",
	  "body": "N_0x2ce544c68fb812a0",
	  "description": "OLD NAME, PLEASE USE AddSpeedZoneForCoord INSTEAD!"
	},
	"AddSpeedZoneForCoord()": {
	  "prefix": "AddSpeedZoneForCoord",
	  "body": [
		"AddSpeedZoneForCoord(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:float speed}, ${6:BOOL p5})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nThis is used to add a speedzone on a position.  \nExample usage C#:  \nuint speedZone = Function.Call<uint>((Hash) 0x2CE544C68FB812A0, Game.PlayerPed.Position.X, Game.PlayerPed.Position.Y, Game.PlayerPed.Position.Z, 100.0f, 0.0f, false);  \n(Thanks to alexguirre for his help!)  \n==========================================  \nWhat is the point in adding a speed zone? Does it just generally affect the speed NPCs will drive? I can imagine running this on every section of the interstate setting it to 3 MPH rip.  \n\nOld name: N_0x2ce544c68fb812a0"
	},
	"AddVehicleStuckCheckWithWarp()": {
	  "prefix": "AddVehicleStuckCheckWithWarp",
	  "body": [
		"AddVehicleStuckCheckWithWarp(${1:Any p0}, ${2:float p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:Any p6})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"AddVehicleUpsidedownCheck()": {
	  "prefix": "AddVehicleUpsidedownCheck",
	  "body": [
		"AddVehicleUpsidedownCheck(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"AreAllVehicleWindowsIntact()": {
	  "prefix": "AreAllVehicleWindowsIntact",
	  "body": [
		"AreAllVehicleWindowsIntact(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nAppears to return false if any window is broken.  \n\nOld name: AreAllVehicleWindowsIntact"
	},
	"N_0x291e373d483e7ee7()": {
	  "prefix": "N_0x291e373d483e7ee7",
	  "body": "N_0x291e373d483e7ee7",
	  "description": "OLD NAME, PLEASE USE AnyPassengersRappeling INSTEAD!"
	},
	"AnyPassengersRappeling()": {
	  "prefix": "AnyPassengersRappeling",
	  "body": [
		"AnyPassengersRappeling(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nOld name: N_0x291e373d483e7ee7"
	},
	"IsAnyVehicleSeatEmpty()": {
	  "prefix": "IsAnyVehicleSeatEmpty",
	  "body": "IsAnyVehicleSeatEmpty",
	  "description": "OLD NAME, PLEASE USE AreAnyVehicleSeatsFree INSTEAD!"
	},
	"AreAnyVehicleSeatsFree()": {
	  "prefix": "AreAnyVehicleSeatsFree",
	  "body": [
		"AreAnyVehicleSeatsFree(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns false if every seat is occupied.  \n\nOld name: IsAnyVehicleSeatEmpty"
	},
	"N_0xd0917a423314bba8()": {
	  "prefix": "N_0xd0917a423314bba8",
	  "body": "N_0xd0917a423314bba8",
	  "description": "OLD NAME, PLEASE USE AreBombBayDoorsOpen INSTEAD!"
	},
	"GetAreBombBayDoorsOpen()": {
	  "prefix": "GetAreBombBayDoorsOpen",
	  "body": "GetAreBombBayDoorsOpen",
	  "description": "OLD NAME, PLEASE USE AreBombBayDoorsOpen INSTEAD!"
	},
	"AreBombBayDoorsOpen()": {
	  "prefix": "AreBombBayDoorsOpen",
	  "body": [
		"AreBombBayDoorsOpen(${1:Vehicle aircraft})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\nReturns true when the bomb bay doors of this plane are open. False if they're closed.\nOld name: N_0xd0917a423314bba8\nOld name: GetAreBombBayDoorsOpen"
	},
	"N_0x755d6d5267cbbd7e()": {
	  "prefix": "N_0x755d6d5267cbbd7e",
	  "body": "N_0x755d6d5267cbbd7e",
	  "description": "OLD NAME, PLEASE USE ArePropellersUndamaged INSTEAD!"
	},
	"ArePropellersUndamaged()": {
	  "prefix": "ArePropellersUndamaged",
	  "body": [
		"ArePropellersUndamaged(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nFound this in the decompiled scripts, I'd do more research before changing the name --  \nif (!ENTITY::IS_ENTITY_DEAD(l_1911)) {  \n    if (!VEHICLE::_755D6D5267CBBD7E(l_1911)) {  \n        sub_1ba80(\"TRAFFICKING AIR: FAILING - PROPELLERS ARE DAMAGED\");  \n        l_12CE = 9;  \n    }  \n}  \n\nOld name: N_0x755d6d5267cbbd7e"
	},
	"N_0x5991a01434ce9677()": {
	  "prefix": "N_0x5991a01434ce9677",
	  "body": "N_0x5991a01434ce9677",
	  "description": "OLD NAME, PLEASE USE AreVehicleWingsIntact INSTEAD!"
	},
	"AddAMarkerOverVehicle()": {
	  "prefix": "AddAMarkerOverVehicle",
	  "body": "AddAMarkerOverVehicle",
	  "description": "OLD NAME, PLEASE USE AreVehicleWingsIntact INSTEAD!"
	},
	"AreVehicleWingsIntact()": {
	  "prefix": "AreVehicleWingsIntact",
	  "body": [
		"AreVehicleWingsIntact(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nADD_A_MARKER_OVER_VEHICLE was a hash collision!!!  \nCan be used for planes only!  \n\nOld name: N_0x5991a01434ce9677\nOld name: AddAMarkerOverVehicle"
	},
	"AttachVehicleToCargobob()": {
	  "prefix": "AttachVehicleToCargobob",
	  "body": [
		"AttachVehicleToCargobob(${1:Vehicle vehicle}, ${2:Vehicle cargobob}, ${3:int p2}, ${4:float x}, ${5:float y}, ${6:float z})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"AttachVehicleToTowTruck()": {
	  "prefix": "AttachVehicleToTowTruck",
	  "body": [
		"AttachVehicleToTowTruck(${1:Vehicle towTruck}, ${2:Vehicle vehicle}, ${3:BOOL rear}, ${4:float hookOffsetX}, ${5:float hookOffsetY}, ${6:float hookOffsetZ})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nHookOffset defines where the hook is attached. leave at 0 for default attachment.  \nWhen using the tow truck online, this is not used (set a breakpoint and never called during tow truck attachment)  \n"
	},
	"AttachVehicleToTrailer()": {
	  "prefix": "AttachVehicleToTrailer",
	  "body": [
		"AttachVehicleToTrailer(${1:Vehicle vehicle}, ${2:Vehicle trailer}, ${3:float radius})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"CanShuffleSeat()": {
	  "prefix": "CanShuffleSeat",
	  "body": [
		"CanShuffleSeat(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"ClearVehicleCustomPrimaryColour()": {
	  "prefix": "ClearVehicleCustomPrimaryColour",
	  "body": [
		"ClearVehicleCustomPrimaryColour(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"CanVehicleParachuteBeActivated()": {
	  "prefix": "CanVehicleParachuteBeActivated",
	  "body": [
		"CanVehicleParachuteBeActivated(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"ClearVehicleCustomSecondaryColour()": {
	  "prefix": "ClearVehicleCustomSecondaryColour",
	  "body": [
		"ClearVehicleCustomSecondaryColour(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"SetVehicleLandingGear()": {
	  "prefix": "SetVehicleLandingGear",
	  "body": "SetVehicleLandingGear",
	  "description": "OLD NAME, PLEASE USE ControlLandingGear INSTEAD!"
	},
	"ControlLandingGear()": {
	  "prefix": "ControlLandingGear",
	  "body": [
		"ControlLandingGear(${1:Vehicle vehicle}, ${2:int state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nWorks for vehicles with a retractable landing gear  \nlanding gear states:  \n0: Deployed  \n1: Closing  \n2: Opening  \n3: Retracted  \n\nOld name: SetVehicleLandingGear"
	},
	"N_0x3556041742a0dc74()": {
	  "prefix": "N_0x3556041742a0dc74",
	  "body": "N_0x3556041742a0dc74",
	  "description": "OLD NAME, PLEASE USE CloseBombBayDoors INSTEAD!"
	},
	"CloseBombBayDoors()": {
	  "prefix": "CloseBombBayDoors",
	  "body": [
		"CloseBombBayDoors(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0x3556041742a0dc74"
	},
	"EnableCargobobHook()": {
	  "prefix": "EnableCargobobHook",
	  "body": "EnableCargobobHook",
	  "description": "OLD NAME, PLEASE USE CreatePickUpRopeForCargobob INSTEAD!"
	},
	"CreatePickUpRopeForCargobob()": {
	  "prefix": "CreatePickUpRopeForCargobob",
	  "body": [
		"CreatePickUpRopeForCargobob(${1:Vehicle cargobob}, ${2:int state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nDrops the Hook/Magnet on a cargobob  \nstate  \nenum eCargobobHook  \n{  \n\tCARGOBOB_HOOK = 0,  \n\tCARGOBOB_MAGNET = 1,  \n};  \n\nOld name: EnableCargobobHook"
	},
	"CreateMissionTrain()": {
	  "prefix": "CreateMissionTrain",
	  "body": [
		"CreateMissionTrain(${1:int variation}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL direction})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n\nTrain models HAVE TO be loaded (requested) before you use this.  \nFor variation 15 - request:  \nfreight  \nfreightcar  \nfreightgrain  \nfreightcont1  \nfreightcont2  \nfreighttrailer  \n"
	},
	"CreateScriptVehicleGenerator()": {
	  "prefix": "CreateScriptVehicleGenerator",
	  "body": [
		"CreateScriptVehicleGenerator(${1:float x}, ${2:float y}, ${3:float z}, ${4:float heading}, ${5:float p4}, ${6:float p5}, ${7:Hash modelHash}, ${8:int p7}, ${9:int p8}, ${10:int p9}, ${11:int p10}, ${12:BOOL p11}, ${13:BOOL p12}, ${14:BOOL p13}, ${15:BOOL p14}, ${16:BOOL p15}, ${17:int p16})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nCreates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.  \nParameters:  \na/w/s - Generator position  \nheading - Generator heading  \np4 - Unknown (always 5.0)  \np5 - Unknown (always 3.0)  \nmodelHash - Vehicle model hash  \np7/8/9/10 - Unknown (always -1)  \np11 - Unknown (usually TRUE, only one instance of FALSE)  \np12/13 - Unknown (always FALSE)  \np14 - Unknown (usally FALSE, only two instances of TRUE)  \np15 - Unknown (always TRUE)  \np16 - Unknown (always -1)  \nVector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);\tCREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY(\"adder\"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);  \n"
	},
	"CreateVehicle()": {
	  "prefix": "CreateVehicle",
	  "body": [
		"CreateVehicle(${1:Hash modelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:BOOL isNetwork}, ${7:BOOL thisScriptCheck})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n\nthisScriptCheck - can be destroyed if it belongs to the calling script.  \n"
	},
	"DeleteAllTrains()": {
	  "prefix": "DeleteAllTrains",
	  "body": [
		"DeleteAllTrains()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"DeleteMissionTrain()": {
	  "prefix": "DeleteMissionTrain",
	  "body": [
		"DeleteMissionTrain(${1:Vehicle* train})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"DeleteVehicle()": {
	  "prefix": "DeleteVehicle",
	  "body": [
		"DeleteVehicle(${1:Vehicle* vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nDeletes a vehicle.  \nThe vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);  \neg how to use:  \nSET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);  \nDELETE_VEHICLE(&vehicle);  \nDeletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.  \n"
	},
	"DeleteScriptVehicleGenerator()": {
	  "prefix": "DeleteScriptVehicleGenerator",
	  "body": [
		"DeleteScriptVehicleGenerator(${1:int vehicleGenerator})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"DetachVehicleFromAnyTowTruck()": {
	  "prefix": "DetachVehicleFromAnyTowTruck",
	  "body": [
		"DetachVehicleFromAnyTowTruck(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"DetachVehicleFromAnyCargobob()": {
	  "prefix": "DetachVehicleFromAnyCargobob",
	  "body": [
		"DetachVehicleFromAnyCargobob(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"DetachVehicleFromTowTruck()": {
	  "prefix": "DetachVehicleFromTowTruck",
	  "body": [
		"DetachVehicleFromTowTruck(${1:Vehicle towTruck}, ${2:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nFirst two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.  \n"
	},
	"DetachVehicleFromCargobob()": {
	  "prefix": "DetachVehicleFromCargobob",
	  "body": [
		"DetachVehicleFromCargobob(${1:Vehicle vehicle}, ${2:Vehicle cargobob})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"DetachVehicleWindscreen()": {
	  "prefix": "DetachVehicleWindscreen",
	  "body": [
		"DetachVehicleWindscreen(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nDetaches the vehicle's windscreen.  \nFor further information, see : gtaforums.com/topic/859570-glass/#entry1068894566  \n"
	},
	"DetachVehicleFromTrailer()": {
	  "prefix": "DetachVehicleFromTrailer",
	  "body": [
		"DetachVehicleFromTrailer(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nPublic Sub detatchTrailer(vh1 As Vehicle)  \nNative.Function.Call(Hash.DETACH_VEHICLE_FROM_TRAILER, vh1)  \n\t\t    End Sub  \n"
	},
	"DisableVehicleImpactExplosionActivation()": {
	  "prefix": "DisableVehicleImpactExplosionActivation",
	  "body": [
		"DisableVehicleImpactExplosionActivation(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nif set to true, prevents vehicle sirens from having sound, leaving only the lights.  \nHASH COLLISION !!! Please change to _SET_DISABLE_VEHICLE_SIREN_SOUND  \n-----  \nSET_VEHICLE_HAS_*  \n"
	},
	"DisablePlaneAileron()": {
	  "prefix": "DisablePlaneAileron",
	  "body": [
		"DisablePlaneAileron(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nhash collision??? - Don't think so. It fits alphabetically and it used with a plane in the scripts  \nAilerons are responsible for the rolling motion of a plane.  \n"
	},
	"DisableVehicleWeapon()": {
	  "prefix": "DisableVehicleWeapon",
	  "body": [
		"DisableVehicleWeapon(${1:BOOL disabled}, ${2:Hash weaponHash}, ${3:Vehicle vehicle}, ${4:Ped owner})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nhow does this work?  \n"
	},
	"N_0x83f813570ff519de()": {
	  "prefix": "N_0x83f813570ff519de",
	  "body": "N_0x83f813570ff519de",
	  "description": "OLD NAME, PLEASE USE DisableVehicleNeonLights INSTEAD!"
	},
	"DisableVehicleNeonLights()": {
	  "prefix": "DisableVehicleNeonLights",
	  "body": [
		"DisableVehicleNeonLights(${1:Vehicle vehicle}, ${2:BOOL disable})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0x83f813570ff519de"
	},
	"N_0xf796359a959df65d()": {
	  "prefix": "N_0xf796359a959df65d",
	  "body": "N_0xf796359a959df65d",
	  "description": "OLD NAME, PLEASE USE DisplayDistantVehicles INSTEAD!"
	},
	"DisplayDistantVehicles()": {
	  "prefix": "DisplayDistantVehicles",
	  "body": [
		"DisplayDistantVehicles(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nToggles to render distant vehicles. They may not be vehicles but images to look like vehicles.  \n\nOld name: N_0xf796359a959df65d"
	},
	"IsCargobobMagnetActive()": {
	  "prefix": "IsCargobobMagnetActive",
	  "body": "IsCargobobMagnetActive",
	  "description": "OLD NAME, PLEASE USE DoesCargobobHavePickupMagnet INSTEAD!"
	},
	"DoesCargobobHavePickupMagnet()": {
	  "prefix": "DoesCargobobHavePickupMagnet",
	  "body": [
		"DoesCargobobHavePickupMagnet(${1:Vehicle cargobob})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns true only when the magnet is active, will return false if the hook is active  \nconsole hash 0x4778CA0A  \n\nOld name: IsCargobobMagnetActive"
	},
	"IsCargobobHookActive()": {
	  "prefix": "IsCargobobHookActive",
	  "body": "IsCargobobHookActive",
	  "description": "OLD NAME, PLEASE USE DoesCargobobHavePickUpRope INSTEAD!"
	},
	"DoesCargobobHavePickUpRope()": {
	  "prefix": "DoesCargobobHavePickUpRope",
	  "body": [
		"DoesCargobobHavePickUpRope(${1:Vehicle cargobob})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns true only when the hook is active, will return false if the magnet is active  \n\nOld name: IsCargobobHookActive"
	},
	"DoesVehicleExistWithDecorator()": {
	  "prefix": "DoesVehicleExistWithDecorator",
	  "body": [
		"DoesVehicleExistWithDecorator(${1:char* decorator})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"DoesExtraExist()": {
	  "prefix": "DoesExtraExist",
	  "body": [
		"DoesExtraExist(${1:Vehicle vehicle}, ${2:int extraId})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nChecks via CVehicleModelInfo  \n"
	},
	"DoesScriptVehicleGeneratorExist()": {
	  "prefix": "DoesScriptVehicleGeneratorExist",
	  "body": [
		"DoesScriptVehicleGeneratorExist(${1:int v})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"DoesVehicleHaveRoof()": {
	  "prefix": "DoesVehicleHaveRoof",
	  "body": [
		"DoesVehicleHaveRoof(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"DoesVehicleHaveStuckVehicleCheck()": {
	  "prefix": "DoesVehicleHaveStuckVehicleCheck",
	  "body": [
		"DoesVehicleHaveStuckVehicleCheck(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nMaximum amount of vehicles with vehicle stuck check appears to be 16.  \n"
	},
	"DoesVehicleHaveDoor()": {
	  "prefix": "DoesVehicleHaveDoor",
	  "body": [
		"DoesVehicleHaveDoor(${1:Vehicle vehicle}, ${2:int doorIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0xe38cb9d7d39fdbcc()": {
	  "prefix": "N_0xe38cb9d7d39fdbcc",
	  "body": "N_0xe38cb9d7d39fdbcc",
	  "description": "OLD NAME, PLEASE USE EjectJb_7_0_0Roof INSTEAD!"
	},
	"EjectJb_7_0_0Roof()": {
	  "prefix": "EjectJb_7_0_0Roof",
	  "body": [
		"EjectJb_7_0_0Roof(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0xe38cb9d7d39fdbcc"
	},
	"DoesVehicleHaveWeapons()": {
	  "prefix": "DoesVehicleHaveWeapons",
	  "body": [
		"DoesVehicleHaveWeapons(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"ExplodeVehicleInCutscene()": {
	  "prefix": "ExplodeVehicleInCutscene",
	  "body": [
		"ExplodeVehicleInCutscene(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"ExplodeVehicle()": {
	  "prefix": "ExplodeVehicle",
	  "body": [
		"ExplodeVehicle(${1:Vehicle vehicle}, ${2:BOOL isAudible}, ${3:BOOL isInvisible})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nExplodes a selected vehicle.  \nVehicle vehicle = Vehicle you want to explode.  \nBOOL isAudible = If explosion makes a sound.  \nBOOL isInvisible = If the explosion is invisible or not.  \nFirst BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.  \n"
	},
	"N_0xea12bd130d7569a1()": {
	  "prefix": "N_0xea12bd130d7569a1",
	  "body": "N_0xea12bd130d7569a1",
	  "description": "OLD NAME, PLEASE USE GetAircraftBombCount INSTEAD!"
	},
	"GetAircraftBombCount()": {
	  "prefix": "GetAircraftBombCount",
	  "body": [
		"GetAircraftBombCount(${1:Vehicle aircraft})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\nGets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. \n\nIn decompiled scripts this is used to check if the vehicle has enough bombs before a bomb can be dropped (bombs are dropped by using [`_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_WITH_EXTRA_PARAMS`](#_0xBFE5756E7407064A)). \n\nUse [`_SET_AIRCRAFT_BOMB_COUNT`](#_0xF4B2ED59DEB5D774) to set the amount of bombs on that vehicle.\nOld name: N_0xea12bd130d7569a1"
	},
	"FixVehicleWindow()": {
	  "prefix": "FixVehicleWindow",
	  "body": [
		"FixVehicleWindow(${1:Vehicle vehicle}, ${2:int index})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xf846aa63df56b804()": {
	  "prefix": "N_0xf846aa63df56b804",
	  "body": "N_0xf846aa63df56b804",
	  "description": "OLD NAME, PLEASE USE GetAircraftCountermeasureCount INSTEAD!"
	},
	"GetAircraftCountermeasureCount()": {
	  "prefix": "GetAircraftCountermeasureCount",
	  "body": [
		"GetAircraftCountermeasureCount(${1:Vehicle aircraft})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\nSimilar to [`_GET_AIRCRAFT_BOMB_COUNT`](#_0xEA12BD130D7569A1), this gets the amount of countermeasures that are present on this vehicle.\n\nUse [`_SET_AIRCRAFT_COUNTERMEASURE_COUNT`](#_0x9BDA23BF666F0855) to set the current amount.\nOld name: N_0xf846aa63df56b804"
	},
	"N_0xcbdb9b923cacc92d()": {
	  "prefix": "N_0xcbdb9b923cacc92d",
	  "body": "N_0xcbdb9b923cacc92d",
	  "description": "OLD NAME, PLEASE USE GetCargobobHookPosition INSTEAD!"
	},
	"GetCargobobHookPosition()": {
	  "prefix": "GetCargobobHookPosition",
	  "body": [
		"GetCargobobHookPosition(${1:Vehicle cargobob})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vector3\n\nGets the position of the cargobob hook, in world coords.  \n\nOld name: N_0xcbdb9b923cacc92d"
	},
	"GetBoatAnchor()": {
	  "prefix": "GetBoatAnchor",
	  "body": [
		"GetBoatAnchor(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nConsole Hash: 0xE97A4F5E  \n"
	},
	"GetClosestVehicle()": {
	  "prefix": "GetClosestVehicle",
	  "body": [
		"GetClosestVehicle(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:int flags})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n\nExample usage  \nVEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)   \nx, y, z: Position to get closest vehicle to.  \nradius: Max radius to get a vehicle.  \nmodelHash: Limit to vehicles with this model. 0 for any.  \nflags: The bitwise flags altering the function's behaviour.  \nDoes not return police cars or helicopters.  \nIt seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason  \nOnly returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.   \nThese flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.  \nConverted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles  \nConversion of found flags to binary: pastebin.com/kghNFkRi  \nAt exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.   \nIt's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT  \n-------------------------------------------------------------------------  \nConclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h  \n"
	},
	"GetConvertibleRoofState()": {
	  "prefix": "GetConvertibleRoofState",
	  "body": [
		"GetConvertibleRoofState(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\n0 -> up  \n1 -> lowering down  \n2 -> down  \n3 -> raising up  \nenum RoofState  \n{  \n     ROOFSTATE_UP = 0;  \n     ROOFSTATE_LOWERING,  \n     ROOFSTATE_DOWN,  \n     ROOFSTATE_RAISING  \n};  \n"
	},
	"GetCurrentPlaybackForVehicle()": {
	  "prefix": "GetCurrentPlaybackForVehicle",
	  "body": [
		"GetCurrentPlaybackForVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"GetDisplayNameFromVehicleModel()": {
	  "prefix": "GetDisplayNameFromVehicleModel",
	  "body": [
		"GetDisplayNameFromVehicleModel(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: char*\n\nReturns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.  \n-----------------------------------------------------------------------------------------------------------------------------------------  \nWhile often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.  \n-----------------------------------------------------------------------------------------------------------------------------------------  \nReturns \"CARNOTFOUND\" if the hash doesn't match a vehicle hash.  \nUsing UI::_GET_LABEL_TEXT, you can get the localized name.  \nFor a full list, see here: pastebin.com/wvpyS4kS (pastebin.com/dA3TbkZw)  \n"
	},
	"GetEntityAttachedToTowTruck()": {
	  "prefix": "GetEntityAttachedToTowTruck",
	  "body": [
		"GetEntityAttachedToTowTruck(${1:Vehicle towTruck})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Entity\n"
	},
	"GetEntryPositionOfDoor()": {
	  "prefix": "GetEntryPositionOfDoor",
	  "body": [
		"GetEntryPositionOfDoor(${1:Vehicle vehicle}, ${2:int doorIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vector3\n"
	},
	"GetHasLowerableWheels()": {
	  "prefix": "GetHasLowerableWheels",
	  "body": [
		"GetHasLowerableWheels(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"GetHeliEngineHealth()": {
	  "prefix": "GetHeliEngineHealth",
	  "body": [
		"GetHeliEngineHealth(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nMax 1000.  \nAt -100 both helicopter rotors will stall.  \n"
	},
	"GetHeliMainRotorHealth()": {
	  "prefix": "GetHeliMainRotorHealth",
	  "body": [
		"GetHeliMainRotorHealth(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nMax 1000.  \nAt 0 the main rotor will stall.  \n"
	},
	"GetHeliTailRotorHealth()": {
	  "prefix": "GetHeliTailRotorHealth",
	  "body": [
		"GetHeliTailRotorHealth(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nMax 1000.  \nAt 0 the tail rotor will stall.  \n"
	},
	"IsHeadlightLBroken()": {
	  "prefix": "IsHeadlightLBroken",
	  "body": "IsHeadlightLBroken",
	  "description": "OLD NAME, PLEASE USE GetIsLeftVehicleHeadlightDamaged INSTEAD!"
	},
	"GetIsLeftVehicleHeadlightDamaged()": {
	  "prefix": "GetIsLeftVehicleHeadlightDamaged",
	  "body": [
		"GetIsLeftVehicleHeadlightDamaged(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nFrom the driver's perspective, is the left headlight broken.  \n\nOld name: IsHeadlightLBroken"
	},
	"IsHeadlightRBroken()": {
	  "prefix": "IsHeadlightRBroken",
	  "body": "IsHeadlightRBroken",
	  "description": "OLD NAME, PLEASE USE GetIsRightVehicleHeadlightDamaged INSTEAD!"
	},
	"GetIsRightVehicleHeadlightDamaged()": {
	  "prefix": "GetIsRightVehicleHeadlightDamaged",
	  "body": [
		"GetIsRightVehicleHeadlightDamaged(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nFrom the driver's perspective, is the right headlight broken.  \n\nOld name: IsHeadlightRBroken"
	},
	"IsVehicleEngineOn()": {
	  "prefix": "IsVehicleEngineOn",
	  "body": "IsVehicleEngineOn",
	  "description": "OLD NAME, PLEASE USE GetIsVehicleEngineRunning INSTEAD!"
	},
	"GetIsVehiclePrimaryColourCustom()": {
	  "prefix": "GetIsVehiclePrimaryColourCustom",
	  "body": [
		"GetIsVehiclePrimaryColourCustom(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"GetIsVehicleSecondaryColourCustom()": {
	  "prefix": "GetIsVehicleSecondaryColourCustom",
	  "body": [
		"GetIsVehicleSecondaryColourCustom(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nCheck if Vehicle Secondary is avaliable for customize  \n"
	},
	"GetVehicleLandingGear()": {
	  "prefix": "GetVehicleLandingGear",
	  "body": "GetVehicleLandingGear",
	  "description": "OLD NAME, PLEASE USE GetLandingGearState INSTEAD!"
	},
	"GetLandingGearState()": {
	  "prefix": "GetLandingGearState",
	  "body": [
		"GetLandingGearState(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nLanding gear states:  \n0: Deployed  \n1: Closing (Retracting)\n3: Opening (Deploying)\n4: Retracted  \n\n\nLanding gear state 2 is never used.\nOld name: GetVehicleLandingGear"
	},
	"N_0xb2d06faede65b577()": {
	  "prefix": "N_0xb2d06faede65b577",
	  "body": "N_0xb2d06faede65b577",
	  "description": "OLD NAME, PLEASE USE GetLastDrivenVehicle INSTEAD!"
	},
	"GetLastDrivenVehicle()": {
	  "prefix": "GetLastDrivenVehicle",
	  "body": [
		"GetLastDrivenVehicle()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n\nNot exactly sure on this one, but here's a snippet of code:  \nif (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0)) {  \n    v_2 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);  \n} else {   \n    v_2 = VEHICLE::_B2D06FAEDE65B577();  \n}  \n\nOld name: N_0xb2d06faede65b577"
	},
	"GetLastPedInVehicleSeat()": {
	  "prefix": "GetLastPedInVehicleSeat",
	  "body": [
		"GetLastPedInVehicleSeat(${1:Vehicle vehicle}, ${2:int seatIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Ped\n"
	},
	"GetLiveryName()": {
	  "prefix": "GetLiveryName",
	  "body": [
		"GetLiveryName(${1:Vehicle vehicle}, ${2:int liveryIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: char*\n\nSecond Param = LiveryIndex  \nexample   \nint count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);  \nfor (int i = 0; i < count; i++)    \n\t{  \nchar* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);  \n\t}  \nthis example will work fine to fetch all names   \nfor example for Sanchez we get   \nSANC_LV1  \nSANC_LV2  \nSANC_LV3  \nSANC_LV4  \nSANC_LV5  \nUse _GET_LABEL_TEXT, to get the localized livery name.  \n-----------  \nNOTE: You may need to set the vehicle's modKit to 0 by using this function: SET_VEHICLE_MOD_KIT() before getting the name, otherwise this native may return NULL.  \ndev-c.com/nativedb/func/info/1f2aa07f00b3217a  \n"
	},
	"GetModSlotName()": {
	  "prefix": "GetModSlotName",
	  "body": [
		"GetModSlotName(${1:Vehicle vehicle}, ${2:int modType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: char*\n\nReturns the name for the type of vehicle mod(Armour, engine etc)  \n-----------  \nfor some reason this native seems unreliable: sometimes returns NULL, and when retval != NULL the string can be empty  \n"
	},
	"GetModTextLabel()": {
	  "prefix": "GetModTextLabel",
	  "body": [
		"GetModTextLabel(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modValue})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: char*\n\nReturns the text label of a mod type for a given vehicle  \nUse _GET_LABEL_TEXT to get the part name in the game's language  \n"
	},
	"GetNumModColors()": {
	  "prefix": "GetNumModColors",
	  "body": [
		"GetNumModColors(${1:int p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetNumModKits()": {
	  "prefix": "GetNumModKits",
	  "body": [
		"GetNumModKits(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetNumVehicleWindowTints()": {
	  "prefix": "GetNumVehicleWindowTints",
	  "body": [
		"GetNumVehicleWindowTints()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetNumVehicleMods()": {
	  "prefix": "GetNumVehicleMods",
	  "body": [
		"GetNumVehicleMods(${1:Vehicle vehicle}, ${2:int modType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nReturns how many possible mods a vehicle has for a given mod type  \n"
	},
	"GetNumberOfVehicleColours()": {
	  "prefix": "GetNumberOfVehicleColours",
	  "body": [
		"GetNumberOfVehicleColours(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nActually number of color combinations  \n"
	},
	"GetNumberOfVehicleDoors()": {
	  "prefix": "GetNumberOfVehicleDoors",
	  "body": [
		"GetNumberOfVehicleDoors(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"GetNumberOfVehicleNumberPlates()": {
	  "prefix": "GetNumberOfVehicleNumberPlates",
	  "body": [
		"GetNumberOfVehicleNumberPlates()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nReturns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.  \n"
	},
	"GetPedInVehicleSeat()": {
	  "prefix": "GetPedInVehicleSeat",
	  "body": [
		"GetPedInVehicleSeat(${1:Vehicle vehicle}, ${2:int index})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Ped\n\nindexes:\n-1 = Driver\n0 = Front Right Passenger\n1 = Back Left Passenger\n2 = Back Right Passenger\n3 = Further Back Left Passenger (vehicles > 4 seats)\n4 = Further Back Right Passenger (vehicles > 4 seats)\n\nCan use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) to help get max index\n"
	},
	"GetPositionInRecording()": {
	  "prefix": "GetPositionInRecording",
	  "body": [
		"GetPositionInRecording(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"N_0x218297bf0cfd853b()": {
	  "prefix": "N_0x218297bf0cfd853b",
	  "body": "N_0x218297bf0cfd853b",
	  "description": "OLD NAME, PLEASE USE GetPedUsingVehicleDoor INSTEAD!"
	},
	"GetPedUsingVehicleDoor()": {
	  "prefix": "GetPedUsingVehicleDoor",
	  "body": [
		"GetPedUsingVehicleDoor(${1:Vehicle vehicle}, ${2:int doorIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Ped\n\nQuick disassembly and test seems to indicate that this native gets the Ped currently using the specified door.  \n\nOld name: N_0x218297bf0cfd853b"
	},
	"GetPositionOfVehicleRecordingAtTime()": {
	  "prefix": "GetPositionOfVehicleRecordingAtTime",
	  "body": [
		"GetPositionOfVehicleRecordingAtTime(${1:int p0}, ${2:float p1}, ${3:char* p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vector3\n\np1 is some kind of tolerance  \n"
	},
	"GetRandomVehicleBackBumperInSphere()": {
	  "prefix": "GetRandomVehicleBackBumperInSphere",
	  "body": [
		"GetRandomVehicleBackBumperInSphere(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:int p4}, ${6:int p5}, ${7:int p6})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n"
	},
	"GetRandomVehicleInSphere()": {
	  "prefix": "GetRandomVehicleInSphere",
	  "body": [
		"GetRandomVehicleInSphere(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:int flags})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n\nGets a random vehicle in a sphere at the specified position, of the specified radius.  \nx: The X-component of the position of the sphere.  \ny: The Y-component of the position of the sphere.  \nz: The Z-component of the position of the sphere.  \nradius: The radius of the sphere. Max is 9999.9004.  \nmodelHash: The vehicle model to limit the selection to. Pass 0 for any model.  \nflags: The bitwise flags that modifies the behaviour of this function.  \n"
	},
	"GetRandomVehicleFrontBumperInSphere()": {
	  "prefix": "GetRandomVehicleFrontBumperInSphere",
	  "body": [
		"GetRandomVehicleFrontBumperInSphere(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:int p4}, ${6:int p5}, ${7:int p6})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n"
	},
	"GetRotationOfVehicleRecordingAtTime()": {
	  "prefix": "GetRotationOfVehicleRecordingAtTime",
	  "body": [
		"GetRotationOfVehicleRecordingAtTime(${1:Any p0}, ${2:float p1}, ${3:Any* p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetRandomVehicleModelInMemory()": {
	  "prefix": "GetRandomVehicleModelInMemory",
	  "body": [
		"GetRandomVehicleModelInMemory(${1:BOOL p0}, ${2:Hash* modelHash}, ${3:int* p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nNot present in the retail version! It's just a nullsub.  \np0 always true (except in one case)  \np1 a random vehicle hash loaded in memory  \np2 0 if success, -1 if failed  \n"
	},
	"GetTotalDurationOfVehicleRecording()": {
	  "prefix": "GetTotalDurationOfVehicleRecording",
	  "body": [
		"GetTotalDurationOfVehicleRecording(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"GetVehicleAcceleration()": {
	  "prefix": "GetVehicleAcceleration",
	  "body": [
		"GetVehicleAcceleration(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nstatic - max acceleration  \n"
	},
	"GetTimePositionInRecording()": {
	  "prefix": "GetTimePositionInRecording",
	  "body": [
		"GetTimePositionInRecording(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"GetVehicleAttachedToCargobob()": {
	  "prefix": "GetVehicleAttachedToCargobob",
	  "body": [
		"GetVehicleAttachedToCargobob(${1:Vehicle cargobob})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n\nReturns attached vehicle (Vehicle in parameter must be cargobob)  \n"
	},
	"GetTotalDurationOfVehicleRecordingId()": {
	  "prefix": "GetTotalDurationOfVehicleRecordingId",
	  "body": [
		"GetTotalDurationOfVehicleRecordingId(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"N_0x375e7fc44f21c8ab()": {
	  "prefix": "N_0x375e7fc44f21c8ab",
	  "body": "N_0x375e7fc44f21c8ab",
	  "description": "OLD NAME, PLEASE USE GetVehicleAttachedToEntity INSTEAD!"
	},
	"GetVehicleAttachedToEntity()": {
	  "prefix": "GetVehicleAttachedToEntity",
	  "body": [
		"GetVehicleAttachedToEntity(${1:Vehicle object})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vehicle\n\nGet the vehicle attached to the object/entity? May also just convert it to a vehicle, but I'm not sure.  \n\nOld name: N_0x375e7fc44f21c8ab"
	},
	"GetTrainCarriage()": {
	  "prefix": "GetTrainCarriage",
	  "body": [
		"GetTrainCarriage(${1:Vehicle train}, ${2:int trailerNumber})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Entity\n\nCorrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.  \n"
	},
	"GetVehicleClass()": {
	  "prefix": "GetVehicleClass",
	  "body": [
		"GetVehicleClass(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nReturns an int  \nVehicle Classes:  \n0: Compacts  \n1: Sedans  \n2: SUVs  \n3: Coupes  \n4: Muscle  \n5: Sports Classics  \n6: Sports  \n7: Super  \n8: Motorcycles  \n9: Off-road  \n10: Industrial  \n11: Utility  \n12: Vans  \n13: Cycles  \n14: Boats  \n15: Helicopters  \n16: Planes  \n17: Service  \n18: Emergency  \n19: Military  \n20: Commercial  \n21: Trains  \nchar buffer[128];  \nstd::sprintf(buffer, \"VEH_CLASS_%i\", VEHICLE::GET_VEHICLE_CLASS(vehicle));  \nchar* className = UI::_GET_LABEL_TEXT(buffer);  \n"
	},
	"GetVehicleClassFromName()": {
	  "prefix": "GetVehicleClassFromName",
	  "body": [
		"GetVehicleClassFromName(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nFor a full enum, see here : pastebin.com/i2GGAjY0  \nchar buffer[128];  \nstd::sprintf(buffer, \"VEH_CLASS_%i\", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));  \nchar* className = UI::_GET_LABEL_TEXT(buffer);  \n"
	},
	"GetVehicleBodyHealth_2()": {
	  "prefix": "GetVehicleBodyHealth_2",
	  "body": [
		"GetVehicleBodyHealth_2(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\n0 min 100 max  \nstarts at 100  \nSeams to have health zones  \nFront of vehicle when damaged goes from 100-50 and stops at 50.  \nRear can be damaged from 100-0  \nOnly tested with two cars.  \nany idea how this differs from the first one?  \n--  \nMay return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)  \nexample:  \nv_F = ENTITY::GET_ENTITY_MODEL(v_3);  \nif (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {  \n    if (VEHICLE::_GET_VEHICLE_BODY_HEALTH_2(v_3) <= 1.0) {  \n        NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);  \n    }  \n}  \n"
	},
	"GetVehicleClassMaxAcceleration()": {
	  "prefix": "GetVehicleClassMaxAcceleration",
	  "body": [
		"GetVehicleClassMaxAcceleration(${1:int vehicleClass})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"GetVehicleCauseOfDestruction()": {
	  "prefix": "GetVehicleCauseOfDestruction",
	  "body": [
		"GetVehicleCauseOfDestruction(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Hash\n\niVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);  \nif (iVar3 == joaat(\"weapon_stickybomb\"))  \n{  \n     func_171(726);  \n     iLocal_260 = 1;  \n}  \n"
	},
	"N_0x00c09f246abedd82()": {
	  "prefix": "N_0x00c09f246abedd82",
	  "body": "N_0x00c09f246abedd82",
	  "description": "OLD NAME, PLEASE USE GetVehicleClassMaxSpeed INSTEAD!"
	},
	"GetVehicleClassMaxSpeed()": {
	  "prefix": "GetVehicleClassMaxSpeed",
	  "body": [
		"GetVehicleClassMaxSpeed(${1:int vehicleClass})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nGET_VEHICLE_CLASS_MAX_*  \n\nOld name: N_0x00c09f246abedd82"
	},
	"GetVehicleClassMaxAgility()": {
	  "prefix": "GetVehicleClassMaxAgility",
	  "body": [
		"GetVehicleClassMaxAgility(${1:int vehicleClass})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"GetVehicleClassMaxTraction()": {
	  "prefix": "GetVehicleClassMaxTraction",
	  "body": [
		"GetVehicleClassMaxTraction(${1:int vehicleClass})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"GetVehicleClassMaxBraking()": {
	  "prefix": "GetVehicleClassMaxBraking",
	  "body": [
		"GetVehicleClassMaxBraking(${1:int vehicleClass})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"GetVehicleColourCombination()": {
	  "prefix": "GetVehicleColourCombination",
	  "body": [
		"GetVehicleColourCombination(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetVehicleColor()": {
	  "prefix": "GetVehicleColor",
	  "body": [
		"GetVehicleColor(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nWhat's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.  \n"
	},
	"GetVehicleColours()": {
	  "prefix": "GetVehicleColours",
	  "body": [
		"GetVehicleColours(${1:Vehicle vehicle}, ${2:int* colorPrimary}, ${3:int* colorSecondary})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"GetVehicleCustomPrimaryColour()": {
	  "prefix": "GetVehicleCustomPrimaryColour",
	  "body": [
		"GetVehicleCustomPrimaryColour(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"GetVehicleDashboardColour()": {
	  "prefix": "GetVehicleDashboardColour",
	  "body": [
		"GetVehicleDashboardColour(${1:Vehicle vehicle}, ${2:int* color})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"GetVehicleCustomSecondaryColour()": {
	  "prefix": "GetVehicleCustomSecondaryColour",
	  "body": [
		"GetVehicleCustomSecondaryColour(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"GetVehicleDirtLevel()": {
	  "prefix": "GetVehicleDirtLevel",
	  "body": [
		"GetVehicleDirtLevel(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nDirt level 0..15  \n"
	},
	"GetVehicleDeformationAtPos()": {
	  "prefix": "GetVehicleDeformationAtPos",
	  "body": [
		"GetVehicleDeformationAtPos(${1:Vehicle vehicle}, ${2:float offsetX}, ${3:float offsetY}, ${4:float offsetZ})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vector3\n\nThe only example I can find of this function in the scripts, is this:  \nstruct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);  \n-----------------------------------------------------------------------------------------------------------------------------------------  \nPC scripts:  \nv_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);  \n"
	},
	"GetVehicleDoorAngleRatio()": {
	  "prefix": "GetVehicleDoorAngleRatio",
	  "body": [
		"GetVehicleDoorAngleRatio(${1:Vehicle vehicle}, ${2:int door})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nexample in vb:  \nPublic Shared Function Get_Vehicle_Door_Angle(Vehicle As Vehicle, Door As VehicleDoor) As Single  \n    Return Native.Function.Call(Of Single)(Hash.GET_VEHICLE_DOOR_ANGLE_RATIO, Vehicle.Handle, Door)  \nEnd Function  \n\t\tI'm Not MentaL  \n"
	},
	"GetVehicleExtraColours()": {
	  "prefix": "GetVehicleExtraColours",
	  "body": [
		"GetVehicleExtraColours(${1:Vehicle vehicle}, ${2:int* pearlescentColor}, ${3:int* wheelColor})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"GetVehiclePaintFade()": {
	  "prefix": "GetVehiclePaintFade",
	  "body": "GetVehiclePaintFade",
	  "description": "OLD NAME, PLEASE USE GetVehicleEnveffScale INSTEAD!"
	},
	"GetVehicleEnveffScale()": {
	  "prefix": "GetVehicleEnveffScale",
	  "body": [
		"GetVehicleEnveffScale(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nformerly known as _GET_VEHICLE_PAINT_FADE  \nThe result is a value from 0-1, where 0 is fresh paint.  \n-----------------------------------------------------------------------  \nThe actual value isn't stored as a float but as an unsigned char (BYTE).  \n\nOld name: GetVehiclePaintFade"
	},
	"N_0x3dff319a831e0cdb()": {
	  "prefix": "N_0x3dff319a831e0cdb",
	  "body": "N_0x3dff319a831e0cdb",
	  "description": "OLD NAME, PLEASE USE GetVehicleHeadlightsColour INSTEAD!"
	},
	"N_0x50634e348c8d44ef()": {
	  "prefix": "N_0x50634e348c8d44ef",
	  "body": "N_0x50634e348c8d44ef",
	  "description": "OLD NAME, PLEASE USE GetVehicleHasKers INSTEAD!"
	},
	"HasVehicleKersBoost()": {
	  "prefix": "HasVehicleKersBoost",
	  "body": "HasVehicleKersBoost",
	  "description": "OLD NAME, PLEASE USE GetVehicleHasKers INSTEAD!"
	},
	"GetVehicleHasKers()": {
	  "prefix": "GetVehicleHasKers",
	  "body": [
		"GetVehicleHasKers(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nOld name: N_0x50634e348c8d44ef\nOld name: HasVehicleKersBoost"
	},
	"GetVehicleInteriorColour()": {
	  "prefix": "GetVehicleInteriorColour",
	  "body": [
		"GetVehicleInteriorColour(${1:Vehicle vehicle}, ${2:int* color})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xda62027c8bdb326e()": {
	  "prefix": "N_0xda62027c8bdb326e",
	  "body": "N_0xda62027c8bdb326e",
	  "description": "OLD NAME, PLEASE USE GetVehicleHoverModePercentage INSTEAD!"
	},
	"GetPlaneHoverModePercentage()": {
	  "prefix": "GetPlaneHoverModePercentage",
	  "body": "GetPlaneHoverModePercentage",
	  "description": "OLD NAME, PLEASE USE GetVehicleHoverModePercentage INSTEAD!"
	},
	"GetVehicleHoverModePercentage()": {
	  "prefix": "GetVehicleHoverModePercentage",
	  "body": [
		"GetVehicleHoverModePercentage(${1:Vehicle aircraft})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\nA float indicating the percentage of the hover mode. 1.0 = in VTOL mode, 0.0 = in normal flying mode.\nOld name: N_0xda62027c8bdb326e\nOld name: GetPlaneHoverModePercentage"
	},
	"GetVehicleLayoutHash()": {
	  "prefix": "GetVehicleLayoutHash",
	  "body": [
		"GetVehicleLayoutHash(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Hash\n"
	},
	"GetVehicleLiveryCount()": {
	  "prefix": "GetVehicleLiveryCount",
	  "body": [
		"GetVehicleLiveryCount(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nReturns -1 if the vehicle has no livery  \n"
	},
	"GetVehicleMaxBraking()": {
	  "prefix": "GetVehicleMaxBraking",
	  "body": [
		"GetVehicleMaxBraking(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"GetVehicleLivery()": {
	  "prefix": "GetVehicleLivery",
	  "body": [
		"GetVehicleLivery(${1:Vehicle trailers2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\n-1 = no livery  \n"
	},
	"N_0x53af99baa671ca47()": {
	  "prefix": "N_0x53af99baa671ca47",
	  "body": "N_0x53af99baa671ca47",
	  "description": "OLD NAME, PLEASE USE GetVehicleMaxSpeed INSTEAD!"
	},
	"GetVehicleMaxSpeed()": {
	  "prefix": "GetVehicleMaxSpeed",
	  "body": [
		"GetVehicleMaxSpeed(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nOld name: N_0x53af99baa671ca47"
	},
	"GetVehicleMaxNumberOfPassengers()": {
	  "prefix": "GetVehicleMaxNumberOfPassengers",
	  "body": [
		"GetVehicleMaxNumberOfPassengers(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetVehicleMod()": {
	  "prefix": "GetVehicleMod",
	  "body": [
		"GetVehicleMod(${1:Vehicle vehicle}, ${2:int modType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nIn b944, there are 50 (0 - 49) mod types.  \nReturns -1 if the vehicle mod is stock  \n"
	},
	"GetVehicleMaxTraction()": {
	  "prefix": "GetVehicleMaxTraction",
	  "body": [
		"GetVehicleMaxTraction(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"N_0xb45085b721efd38c()": {
	  "prefix": "N_0xb45085b721efd38c",
	  "body": "N_0xb45085b721efd38c",
	  "description": "OLD NAME, PLEASE USE GetVehicleModColor_1Name INSTEAD!"
	},
	"GetVehicleModColor_1Name()": {
	  "prefix": "GetVehicleModColor_1Name",
	  "body": [
		"GetVehicleModColor_1Name(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: char*\n\nreturns a string which is the codename of the vehicle's currently selected primary color  \np1 is always 0  \n\nOld name: N_0xb45085b721efd38c"
	},
	"GetVehicleModColor_1()": {
	  "prefix": "GetVehicleModColor_1",
	  "body": [
		"GetVehicleModColor_1(${1:Vehicle vehicle}, ${2:int* paintType}, ${3:int* color}, ${4:int* pearlescentColor})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\np3 seems to be the pearlescent highlight color.  \nSeems redondant with void GET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int *pearlescentColor, int *wheelColor)  \n"
	},
	"GetVehicleModColor_2()": {
	  "prefix": "GetVehicleModColor_2",
	  "body": [
		"GetVehicleModColor_2(${1:Vehicle vehicle}, ${2:int* paintType}, ${3:int* color})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x4967a516ed23a5a1()": {
	  "prefix": "N_0x4967a516ed23a5a1",
	  "body": "N_0x4967a516ed23a5a1",
	  "description": "OLD NAME, PLEASE USE GetVehicleModColor_2Name INSTEAD!"
	},
	"GetVehicleModColor_2Name()": {
	  "prefix": "GetVehicleModColor_2Name",
	  "body": [
		"GetVehicleModColor_2Name(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: char*\n\nreturns a string which is the codename of the vehicle's currently selected secondary color  \n\nOld name: N_0x4967a516ed23a5a1"
	},
	"GetVehicleModKit()": {
	  "prefix": "GetVehicleModKit",
	  "body": [
		"GetVehicleModKit(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"N_0x4593cf82aa179706()": {
	  "prefix": "N_0x4593cf82aa179706",
	  "body": "N_0x4593cf82aa179706",
	  "description": "OLD NAME, PLEASE USE GetVehicleModData INSTEAD!"
	},
	"GetVehicleModData()": {
	  "prefix": "GetVehicleModData",
	  "body": [
		"GetVehicleModData(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n\nCan be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF  \n\nOld name: N_0x4593cf82aa179706"
	},
	"GetVehicleModModifierValue()": {
	  "prefix": "GetVehicleModModifierValue",
	  "body": [
		"GetVehicleModModifierValue(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n"
	},
	"GetVehicleModKitType()": {
	  "prefix": "GetVehicleModKitType",
	  "body": [
		"GetVehicleModKitType(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetVehicleModelAcceleration()": {
	  "prefix": "GetVehicleModelAcceleration",
	  "body": [
		"GetVehicleModelAcceleration(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nReturns the acceleration of the specified model.  \nFor a full list, see here: pastebin.com/GaN6vT4R  \n"
	},
	"GetVehicleModVariation()": {
	  "prefix": "GetVehicleModVariation",
	  "body": [
		"GetVehicleModVariation(${1:Vehicle vehicle}, ${2:int modType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns true if the wheels are custom wheels  \n"
	},
	"N_0xbfba3ba79cff7ebf()": {
	  "prefix": "N_0xbfba3ba79cff7ebf",
	  "body": "N_0xbfba3ba79cff7ebf",
	  "description": "OLD NAME, PLEASE USE GetVehicleModelHandBrake INSTEAD!"
	},
	"GetVehicleModelHandBrake()": {
	  "prefix": "GetVehicleModelHandBrake",
	  "body": [
		"GetVehicleModelHandBrake(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nGET_VEHICLE_MODEL_MAX_*  \nmax braking if air vehicle, else max braking + 0.1  \n-------------------  \nFor a full list, see here: pastebin.com/Cb9L1Cn0  \n\nOld name: N_0xbfba3ba79cff7ebf"
	},
	"GetVehicleModelMaxBraking()": {
	  "prefix": "GetVehicleModelMaxBraking",
	  "body": [
		"GetVehicleModelMaxBraking(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nReturns max braking of the specified vehicle model.  \nFor a full list, see here: pastebin.com/3N8DVbpG  \n"
	},
	"N_0x53409b5163d5b846()": {
	  "prefix": "N_0x53409b5163d5b846",
	  "body": "N_0x53409b5163d5b846",
	  "description": "OLD NAME, PLEASE USE GetVehicleModelDownForce INSTEAD!"
	},
	"GetVehicleModelDownForce()": {
	  "prefix": "GetVehicleModelDownForce",
	  "body": [
		"GetVehicleModelDownForce(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nGET_VEHICLE_MODEL_*  \n9.8 * thrust if air vehicle, else 0.38 + drive force?  \nFor a full list, see here: pastebin.com/bJQeDqNd  \n\nOld name: N_0x53409b5163d5b846"
	},
	"GetVehicleModelMaxSpeed()": {
	  "prefix": "GetVehicleModelMaxSpeed",
	  "body": [
		"GetVehicleModelMaxSpeed(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nReturns max speed (without mods) of the specified vehicle model in m/s.  \nFor a full list, see here: pastebin.com/AUuHHK06  \nGET_VEHICLE_MODEL_*  \n"
	},
	"N_0xc6ad107ddc9054cc()": {
	  "prefix": "N_0xc6ad107ddc9054cc",
	  "body": "N_0xc6ad107ddc9054cc",
	  "description": "OLD NAME, PLEASE USE GetVehicleModelMaxKnots INSTEAD!"
	},
	"GetVehicleModelMaxKnots()": {
	  "prefix": "GetVehicleModelMaxKnots",
	  "body": [
		"GetVehicleModelMaxKnots(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nGET_VEHICLE_MODEL_*  \nFunction pertains only to aviation vehicles.  \nFor a full list, see here: pastebin.com/JwuGNp2K  \n\nOld name: N_0xc6ad107ddc9054cc"
	},
	"N_0x5aa3f878a178c4fc()": {
	  "prefix": "N_0x5aa3f878a178c4fc",
	  "body": "N_0x5aa3f878a178c4fc",
	  "description": "OLD NAME, PLEASE USE GetVehicleModelMoveResistance INSTEAD!"
	},
	"GetVehicleModelMoveResistance()": {
	  "prefix": "GetVehicleModelMoveResistance",
	  "body": [
		"GetVehicleModelMoveResistance(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nGET_VEHICLE_MODEL_*  \ncalled if the vehicle is a boat -- returns vecMoveResistanceX?  \nFor a full list, see here: pastebin.com/Pyb2RhZ9  \n\nOld name: N_0x5aa3f878a178c4fc"
	},
	"GetVehicleNeonLightsColour()": {
	  "prefix": "GetVehicleNeonLightsColour",
	  "body": [
		"GetVehicleNeonLightsColour(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nGets the color of the neon lights of the specified vehicle.  \nSee _SET_VEHICLE_NEON_LIGHTS_COLOUR (0x8E0A582209A62695) for more information  \n"
	},
	"GetVehicleModelMaxTraction()": {
	  "prefix": "GetVehicleModelMaxTraction",
	  "body": [
		"GetVehicleModelMaxTraction(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nReturns max traction of the specified vehicle model.  \nFor a full list, see here: pastebin.com/ERnntVjK  \n"
	},
	"GetVehicleModelMaxNumberOfPassengers()": {
	  "prefix": "GetVehicleModelMaxNumberOfPassengers",
	  "body": "GetVehicleModelMaxNumberOfPassengers",
	  "description": "OLD NAME, PLEASE USE GetVehicleModelNumberOfSeats INSTEAD!"
	},
	"GetVehicleModelNumberOfSeats()": {
	  "prefix": "GetVehicleModelNumberOfSeats",
	  "body": [
		"GetVehicleModelNumberOfSeats(${1:Hash modelHash})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nReturns max number of passengers (including the driver) for the specified vehicle model.  \nFor a full list, see here: pastebin.com/MdETCS1j  \n\nOld name: GetVehicleModelMaxNumberOfPassengers"
	},
	"GetVehicleNumberPlateText()": {
	  "prefix": "GetVehicleNumberPlateText",
	  "body": [
		"GetVehicleNumberPlateText(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: char*\n\nReturns the license plate text from a vehicle.  8 chars maximum.  \n"
	},
	"GetVehicleNumberOfPassengers()": {
	  "prefix": "GetVehicleNumberOfPassengers",
	  "body": [
		"GetVehicleNumberOfPassengers(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nGets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver  \n"
	},
	"GetVehicleNumberPlateTextIndex()": {
	  "prefix": "GetVehicleNumberPlateTextIndex",
	  "body": [
		"GetVehicleNumberPlateTextIndex(${1:Vehicle elegy})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nReturns the PlateType of a vehicle  \nBlue_on_White_1 = 3,  \nBlue_on_White_2 = 0,  \nBlue_on_White_3 = 4,  \nYellow_on_Blue = 2,  \nYellow_on_Black = 1,  \nNorth_Yankton = 5,  \n"
	},
	"GetVehiclePlateType()": {
	  "prefix": "GetVehiclePlateType",
	  "body": [
		"GetVehiclePlateType(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"N_0x60190048c0764a26()": {
	  "prefix": "N_0x60190048c0764a26",
	  "body": "N_0x60190048c0764a26",
	  "description": "OLD NAME, PLEASE USE GetVehicleRoofLivery INSTEAD!"
	},
	"GetVehicleRoofLivery()": {
	  "prefix": "GetVehicleRoofLivery",
	  "body": [
		"GetVehicleRoofLivery(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\nReturns index of the current vehicle's rooftop livery.\nA getter for [\\_SET_VEHICLE_ROOF_LIVERY](#_0xA6D3A8750DC73270).\nOld name: N_0x60190048c0764a26"
	},
	"GetVehicleOwner()": {
	  "prefix": "GetVehicleOwner",
	  "body": [
		"GetVehicleOwner(${1:Vehicle vehicle}, ${2:Entity* entity})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nThe resulting entity can be a Vehicle or Ped.  \nThe native is stored between GET_VEHICLE_LIVERY_COUNT and GET_VEHICLE_MAX_BRAKING so the actual name is either GET_VEHICLE_L* or GET_VEHICLE_M*  \n=========================  \non a side note watching changes in memory this will only store your ped's entityPoolAddress if it's your personal vehicle. So seems to be related to personal vehicles or atleast a specific decor of it maybe.  \n"
	},
	"GetVehicleSuspensionHeight()": {
	  "prefix": "GetVehicleSuspensionHeight",
	  "body": [
		"GetVehicleSuspensionHeight(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nGets the height of the vehicle's suspension.  \nThe higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.  \n0.000 is the stock suspension.  \n0.008 is Ultra Suspension.  \n"
	},
	"GetVehicleTyreSmokeColor()": {
	  "prefix": "GetVehicleTyreSmokeColor",
	  "body": [
		"GetVehicleTyreSmokeColor(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"GetVehicleRecordingId()": {
	  "prefix": "GetVehicleRecordingId",
	  "body": [
		"GetVehicleRecordingId(${1:int p0}, ${2:char* p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"N_0x5ecb40269053c0d4()": {
	  "prefix": "N_0x5ecb40269053c0d4",
	  "body": "N_0x5ecb40269053c0d4",
	  "description": "OLD NAME, PLEASE USE GetVehicleRoofLiveryCount INSTEAD!"
	},
	"GetVehicleRoofLiveryCount()": {
	  "prefix": "GetVehicleRoofLiveryCount",
	  "body": [
		"GetVehicleRoofLiveryCount(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\nReturns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available.\nOld name: N_0x5ecb40269053c0d4"
	},
	"GetVehicleTyresCanBurst()": {
	  "prefix": "GetVehicleTyresCanBurst",
	  "body": [
		"GetVehicleTyresCanBurst(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"GetVehicleTrailerVehicle()": {
	  "prefix": "GetVehicleTrailerVehicle",
	  "body": [
		"GetVehicleTrailerVehicle(${1:Vehicle vehicle}, ${2:Vehicle* trailer})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nGets the trailer of a vehicle and puts it into the trailer parameter.  \n"
	},
	"GetVehicleWindowTint()": {
	  "prefix": "GetVehicleWindowTint",
	  "body": [
		"GetVehicleWindowTint(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"GetVehicleWheelType()": {
	  "prefix": "GetVehicleWheelType",
	  "body": [
		"GetVehicleWheelType(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nReturns an int  \nWheel Types:  \n0: Sport  \n1: Muscle  \n2: Lowrider  \n3: SUV  \n4: Offroad  \n5: Tuner  \n6: Bike Wheels  \n7: High End  \nTested in Los Santos Customs  \n"
	},
	"HasVehicleAssetLoaded()": {
	  "prefix": "HasVehicleAssetLoaded",
	  "body": [
		"HasVehicleAssetLoaded(${1:int vehicleAsset})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"HasVehicleJumpingAbility()": {
	  "prefix": "HasVehicleJumpingAbility",
	  "body": [
		"HasVehicleJumpingAbility(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"HasPreloadModsFinished()": {
	  "prefix": "HasPreloadModsFinished",
	  "body": [
		"HasPreloadModsFinished(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"HasVehicleRocketBoost()": {
	  "prefix": "HasVehicleRocketBoost",
	  "body": [
		"HasVehicleRocketBoost(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"HasVehicleParachute()": {
	  "prefix": "HasVehicleParachute",
	  "body": [
		"HasVehicleParachute(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsBigVehicle()": {
	  "prefix": "IsBigVehicle",
	  "body": [
		"IsBigVehicle(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"HasVehicleRecordingBeenLoaded()": {
	  "prefix": "HasVehicleRecordingBeenLoaded",
	  "body": [
		"HasVehicleRecordingBeenLoaded(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsHeliPartBroken()": {
	  "prefix": "IsHeliPartBroken",
	  "body": [
		"IsHeliPartBroken(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsPlaybackGoingOnForVehicle()": {
	  "prefix": "IsPlaybackGoingOnForVehicle",
	  "body": [
		"IsPlaybackGoingOnForVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsAnyVehicleNearPoint()": {
	  "prefix": "IsAnyVehicleNearPoint",
	  "body": [
		"IsAnyVehicleNearPoint(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsTaxiLightOn()": {
	  "prefix": "IsTaxiLightOn",
	  "body": [
		"IsTaxiLightOn(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsCopVehicleInArea_3d()": {
	  "prefix": "IsCopVehicleInArea_3d",
	  "body": [
		"IsCopVehicleInArea_3d(${1:float x1}, ${2:float x2}, ${3:float y1}, ${4:float y2}, ${5:float z1}, ${6:float z2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nUsage:  \npublic bool isCopInRange(Vector3 Location, float Range)  \n        {  \n            return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);  \n        }  \n"
	},
	"IsThisModelABicycle()": {
	  "prefix": "IsThisModelABicycle",
	  "body": [
		"IsThisModelABicycle(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsPlaybackUsingAiGoingOnForVehicle()": {
	  "prefix": "IsPlaybackUsingAiGoingOnForVehicle",
	  "body": [
		"IsPlaybackUsingAiGoingOnForVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsThisModelACar()": {
	  "prefix": "IsThisModelACar",
	  "body": [
		"IsThisModelACar(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nTo check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)  \n"
	},
	"IsThisModelASubmersible()": {
	  "prefix": "IsThisModelASubmersible",
	  "body": "IsThisModelASubmersible",
	  "description": "OLD NAME, PLEASE USE IsThisModelAJetski INSTEAD!"
	},
	"IsThisModelAnEmergencyBoat()": {
	  "prefix": "IsThisModelAnEmergencyBoat",
	  "body": "IsThisModelAnEmergencyBoat",
	  "description": "OLD NAME, PLEASE USE IsThisModelAJetski INSTEAD!"
	},
	"IsThisModelAJetski()": {
	  "prefix": "IsThisModelAJetski",
	  "body": [
		"IsThisModelAJetski(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nChecks if model is a boat, then checks for FLAG_IS_JETSKI.  \n@whoever named this _IS_THIS_MODEL_AN_EMERGENCY_BOAT: please do some tests before naming natives, thanks.  \n\nOld name: IsThisModelASubmersible\nOld name: IsThisModelAnEmergencyBoat"
	},
	"IsThisModelABike()": {
	  "prefix": "IsThisModelABike",
	  "body": [
		"IsThisModelABike(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns true if the model is motorcycle or bycicle.  \n"
	},
	"IsThisModelAQuadbike()": {
	  "prefix": "IsThisModelAQuadbike",
	  "body": [
		"IsThisModelAQuadbike(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsThisModelABoat()": {
	  "prefix": "IsThisModelABoat",
	  "body": [
		"IsThisModelABoat(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsThisModelATrain()": {
	  "prefix": "IsThisModelATrain",
	  "body": [
		"IsThisModelATrain(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsThisModelAHeli()": {
	  "prefix": "IsThisModelAHeli",
	  "body": [
		"IsThisModelAHeli(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsToggleModOn()": {
	  "prefix": "IsToggleModOn",
	  "body": [
		"IsToggleModOn(${1:Vehicle vehicle}, ${2:int modType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsThisModelAPlane()": {
	  "prefix": "IsThisModelAPlane",
	  "body": [
		"IsThisModelAPlane(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleAlarmActivated()": {
	  "prefix": "IsVehicleAlarmActivated",
	  "body": [
		"IsVehicleAlarmActivated(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleAttachedToTowTruck()": {
	  "prefix": "IsVehicleAttachedToTowTruck",
	  "body": [
		"IsVehicleAttachedToTowTruck(${1:Vehicle towTruck}, ${2:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nScripts verify that towTruck is the first parameter, not the second.  \n"
	},
	"IsThisModelAnAmphibiousCar()": {
	  "prefix": "IsThisModelAnAmphibiousCar",
	  "body": [
		"IsThisModelAnAmphibiousCar(${1:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleAttachedToTrailer()": {
	  "prefix": "IsVehicleAttachedToTrailer",
	  "body": [
		"IsVehicleAttachedToTrailer(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nPublic Function isVehicleAttachedToTrailer(vh As Vehicle) As Boolean  \nReturn Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ATTACHED_TO_TRAILER, vh)  \n\t\t    End Function  \n"
	},
	"IsVehicleDamaged()": {
	  "prefix": "IsVehicleDamaged",
	  "body": [
		"IsVehicleDamaged(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nAppears to return true if the vehicle has any damage, including cosmetically.  \n"
	},
	"IsVehicleAConvertible()": {
	  "prefix": "IsVehicleAConvertible",
	  "body": [
		"IsVehicleAConvertible(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\np1 is false almost always.  \nHowever, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF  \n"
	},
	"IsVehicleDoorFullyOpen()": {
	  "prefix": "IsVehicleDoorFullyOpen",
	  "body": [
		"IsVehicleDoorFullyOpen(${1:Vehicle vehicle}, ${2:int doorIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\ndoorIndex:\n0 = Front Left Door  \n1 = Front Right Door  \n2 = Back Left Door  \n3 = Back Right Door  \n4 = Hood  \n5 = Trunk  \n6 = Trunk2"
	},
	"IsVehicleAttachedToCargobob()": {
	  "prefix": "IsVehicleAttachedToCargobob",
	  "body": [
		"IsVehicleAttachedToCargobob(${1:Vehicle cargobob}, ${2:Vehicle vehicleAttached})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0xec69adf931aae0c3()": {
	  "prefix": "N_0xec69adf931aae0c3",
	  "body": "N_0xec69adf931aae0c3",
	  "description": "OLD NAME, PLEASE USE IsVehicleEngineOnFire INSTEAD!"
	},
	"IsVehicleEngineOnFire()": {
	  "prefix": "IsVehicleEngineOnFire",
	  "body": [
		"IsVehicleEngineOnFire(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\nOnly ever used once in decompiled scripts: **am_pi_menu**:\nReturns true if the engine is on fire, or if the vehicle engine health is &lt; 0 and it **has been** on fire.\n\nIt sometimes doesn't return true when the vehicle engine has been on fire, and has since been fixed. I'm not really sure what the exact conditions are.\n\nThis usually returns true even if there are no visible flames yet (engine health > 0). However if you monitor engine health you'll see that it starts decreasing as soon as this returns true.\n\n\nif (((ENTITY::DOES_ENTITY_EXIST(Global_1281959) && !ENTITY::IS_ENTITY_DEAD(Global_1281959, 0)) && func_1545(Global_1281959)) && !func_205(PLAYER::PLAYER_ID()))\n{\n    if (VEHICLE::GET_VEHICLE_ENGINE_HEALTH(Global_1281959) > 0f && VEHICLE::GET_IS_VEHICLE_ENGINE_RUNNING(Global_1281959))\n    {\n        bVar0 = true;\n    }\n    else\n    {\n        bVar0 = false;\n    }\n    if (VEHICLE::_0xEC69ADF931AAE0C3(Global_1281959)) // _IS_VEHICLE_ENGINE_ON_FIRE\n    {\n        bVar0 = false;\n    }\n}\n\nOld name: N_0xec69adf931aae0c3"
	},
	"IsVehicleBumperBrokenOff()": {
	  "prefix": "IsVehicleBumperBrokenOff",
	  "body": [
		"IsVehicleBumperBrokenOff(${1:Vehicle vehicle}, ${2:BOOL front})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleExtraTurnedOn()": {
	  "prefix": "IsVehicleExtraTurnedOn",
	  "body": [
		"IsVehicleExtraTurnedOn(${1:Vehicle vehicle}, ${2:int extraId})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleDoorDamaged()": {
	  "prefix": "IsVehicleDoorDamaged",
	  "body": [
		"IsVehicleDoorDamaged(${1:Vehicle veh}, ${2:int doorID})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\ndoorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.  \n"
	},
	"IsVehicleDriveable()": {
	  "prefix": "IsVehicleDriveable",
	  "body": [
		"IsVehicleDriveable(${1:Vehicle vehicle}, ${2:BOOL isOnFireCheck})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\np1 is always 0 in the scripts.  \np1 = check if vehicle is on fire  \n"
	},
	"IsVehicleInBurnout()": {
	  "prefix": "IsVehicleInBurnout",
	  "body": [
		"IsVehicleInBurnout(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns whether the specified vehicle is currently in a burnout.  \nvb.net  \nPublic Function isVehicleInBurnout(vh As Vehicle) As Boolean  \n        Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)  \n    End Function  \n"
	},
	"N_0x9a83f5f9963775ef()": {
	  "prefix": "N_0x9a83f5f9963775ef",
	  "body": "N_0x9a83f5f9963775ef",
	  "description": "OLD NAME, PLEASE USE IsVehicleModLoadDone INSTEAD!"
	},
	"IsVehicleModLoadDone()": {
	  "prefix": "IsVehicleModLoadDone",
	  "body": [
		"IsVehicleModLoadDone(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nReturns whether or not the vehicle has a CVehicleStreamRequestGfx that's trying to load mods.  \nTrue if it isn't loading mods, false if it is.  \n\nOld name: N_0x9a83f5f9963775ef"
	},
	"IsVehicleNeonLightEnabled()": {
	  "prefix": "IsVehicleNeonLightEnabled",
	  "body": [
		"IsVehicleNeonLightEnabled(${1:Vehicle vehicle}, ${2:int index})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nindices:  \n0 = Left  \n1 = Right  \n2 = Front  \n3 = Back  \n"
	},
	"IsVehicleHighDetail()": {
	  "prefix": "IsVehicleHighDetail",
	  "body": [
		"IsVehicleHighDetail(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleInGarageArea()": {
	  "prefix": "IsVehicleInGarageArea",
	  "body": [
		"IsVehicleInGarageArea(${1:char* garageName}, ${2:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\ngarageName example \"Michael - Beverly Hills\"  \nFor a full list, see here: pastebin.com/73VfwsmS  \n"
	},
	"IsVehicleRocketBoostActive()": {
	  "prefix": "IsVehicleRocketBoostActive",
	  "body": [
		"IsVehicleRocketBoostActive(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleModel()": {
	  "prefix": "IsVehicleModel",
	  "body": [
		"IsVehicleModel(${1:Vehicle vehicle}, ${2:Hash model})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleSearchlightOn()": {
	  "prefix": "IsVehicleSearchlightOn",
	  "body": [
		"IsVehicleSearchlightOn(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nPossibly: Returns whether the searchlight (found on police vehicles) is toggled on.  \n"
	},
	"N_0x8d474c8faeff6cde()": {
	  "prefix": "N_0x8d474c8faeff6cde",
	  "body": "N_0x8d474c8faeff6cde",
	  "description": "OLD NAME, PLEASE USE IsVehicleShopResprayAllowed INSTEAD!"
	},
	"IsVehicleShopResprayAllowed()": {
	  "prefix": "IsVehicleShopResprayAllowed",
	  "body": [
		"IsVehicleShopResprayAllowed(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nChecks for FLAG_NO_RESPRAY  \n\nOld name: N_0x8d474c8faeff6cde"
	},
	"IsVehicleOnAllWheels()": {
	  "prefix": "IsVehicleOnAllWheels",
	  "body": [
		"IsVehicleOnAllWheels(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nPublic Function isVehicleOnAllWheels(vh As Vehicle) As Boolean  \nReturn Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)  \n\t\t    End Function  \n"
	},
	"IsVehicleSeatFree()": {
	  "prefix": "IsVehicleSeatFree",
	  "body": [
		"IsVehicleSeatFree(${1:Vehicle vehicle}, ${2:int seatIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nHas an additional BOOL parameter since version [???].  \nCheck if a vehicle seat is free.  \n-1 being the driver seat.  \nUse GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.  \n"
	},
	"IsVehicleStolen()": {
	  "prefix": "IsVehicleStolen",
	  "body": [
		"IsVehicleStolen(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0xb5cc40fbcb586380()": {
	  "prefix": "N_0xb5cc40fbcb586380",
	  "body": "N_0xb5cc40fbcb586380",
	  "description": "OLD NAME, PLEASE USE IsVehicleSirenSoundOn INSTEAD!"
	},
	"IsVehicleSirenSoundOn()": {
	  "prefix": "IsVehicleSirenSoundOn",
	  "body": [
		"IsVehicleSirenSoundOn(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nOld name: N_0xb5cc40fbcb586380"
	},
	"IsVehicleStoppedAtTrafficLights()": {
	  "prefix": "IsVehicleStoppedAtTrafficLights",
	  "body": [
		"IsVehicleStoppedAtTrafficLights(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nis this for red lights only?  more testing required.  \n"
	},
	"IsVehicleStuckTimerUp()": {
	  "prefix": "IsVehicleStuckTimerUp",
	  "body": [
		"IsVehicleStuckTimerUp(${1:Vehicle vehicle}, ${2:int p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\np1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.  \n"
	},
	"IsVehicleStopped()": {
	  "prefix": "IsVehicleStopped",
	  "body": [
		"IsVehicleStopped(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nMulleDK19: Returns true if the vehicle's speed is equal to, or less than 0.02 meters per second, or 0.05 meters per second, if the vehicle's handbrake is engaged.  \n"
	},
	"IsVehicleWindowIntact()": {
	  "prefix": "IsVehicleWindowIntact",
	  "body": [
		"IsVehicleWindowIntact(${1:Vehicle vehicle}, ${2:int windowIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"IsVehicleStuckOnRoof()": {
	  "prefix": "IsVehicleStuckOnRoof",
	  "body": [
		"IsVehicleStuckOnRoof(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"JitterVehicle()": {
	  "prefix": "JitterVehicle",
	  "body": [
		"JitterVehicle(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:float yaw}, ${4:float pitch}, ${5:float roll})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nWhen I called this with what the script was doing, which was -190f for yaw pitch and roll, all my car did was jitter a little. I also tried 0 and 190f. I altered the p1 variable between TRUE and FALSE and didn't see a difference.  \nThis might have something to do with the physbox of the vehicle, but I'm not sure.  \n"
	},
	"LowerConvertibleRoof()": {
	  "prefix": "LowerConvertibleRoof",
	  "body": [
		"LowerConvertibleRoof(${1:Vehicle vehicle}, ${2:BOOL instantlyLower})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"IsVehicleVisible()": {
	  "prefix": "IsVehicleVisible",
	  "body": [
		"IsVehicleVisible(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nmust be called after TRACK_VEHICLE_VISIBILITY   \nit's not instant so probabilly must pass an 'update' to see correct result.  \n"
	},
	"N_0x0581730ab9380412()": {
	  "prefix": "N_0x0581730ab9380412",
	  "body": [
		"N_0x0581730ab9380412(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x06582aff74894c75()": {
	  "prefix": "N_0x06582aff74894c75",
	  "body": [
		"N_0x06582aff74894c75(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x02398b627547189c()": {
	  "prefix": "N_0x02398b627547189c",
	  "body": [
		"N_0x02398b627547189c(${1:Vehicle p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x065d03a9d6b2c6b5()": {
	  "prefix": "N_0x065d03a9d6b2c6b5",
	  "body": [
		"N_0x065d03a9d6b2c6b5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x0419b167ee128f33()": {
	  "prefix": "N_0x0419b167ee128f33",
	  "body": [
		"N_0x0419b167ee128f33(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x063ae2b2cc273588()": {
	  "prefix": "N_0x063ae2b2cc273588",
	  "body": [
		"N_0x063ae2b2cc273588(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x0a6a279f3aa4fd70()": {
	  "prefix": "N_0x0a6a279f3aa4fd70",
	  "body": [
		"N_0x0a6a279f3aa4fd70(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x0cdda42f9e360ca6()": {
	  "prefix": "N_0x0cdda42f9e360ca6",
	  "body": [
		"N_0x0cdda42f9e360ca6(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x0a436b8643716d14()": {
	  "prefix": "N_0x0a436b8643716d14",
	  "body": [
		"N_0x0a436b8643716d14()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x0f3b4d4e43177236()": {
	  "prefix": "N_0x0f3b4d4e43177236",
	  "body": [
		"N_0x0f3b4d4e43177236(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x0ad9e8f87ff7c16f()": {
	  "prefix": "N_0x0ad9e8f87ff7c16f",
	  "body": [
		"N_0x0ad9e8f87ff7c16f(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x10655fab9915623d()": {
	  "prefix": "N_0x10655fab9915623d",
	  "body": [
		"N_0x10655fab9915623d(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x0d5f65a8f4ebdab5()": {
	  "prefix": "N_0x0d5f65a8f4ebdab5",
	  "body": [
		"N_0x0d5f65a8f4ebdab5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1093408b4b9d1146()": {
	  "prefix": "N_0x1093408b4b9d1146",
	  "body": [
		"N_0x1093408b4b9d1146(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1087bc8ec540daeb()": {
	  "prefix": "N_0x1087bc8ec540daeb",
	  "body": [
		"N_0x1087bc8ec540daeb(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1312ddd8385aee4e()": {
	  "prefix": "N_0x1312ddd8385aee4e",
	  "body": [
		"N_0x1312ddd8385aee4e(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x182f266c2d9e2beb()": {
	  "prefix": "N_0x182f266c2d9e2beb",
	  "body": [
		"N_0x182f266c2d9e2beb(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1201e8a3290a3b98()": {
	  "prefix": "N_0x1201e8a3290a3b98",
	  "body": [
		"N_0x1201e8a3290a3b98(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x16b5e274bde402f8()": {
	  "prefix": "N_0x16b5e274bde402f8",
	  "body": [
		"N_0x16b5e274bde402f8(${1:Vehicle vehicle}, ${2:Vehicle trailer}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float p11})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nonly documented to be continued...  \n"
	},
	"N_0x1a78ad3d8240536f()": {
	  "prefix": "N_0x1a78ad3d8240536f",
	  "body": [
		"N_0x1a78ad3d8240536f(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x192547247864dfdd()": {
	  "prefix": "N_0x192547247864dfdd",
	  "body": [
		"N_0x192547247864dfdd(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1aa8a837d2169d94()": {
	  "prefix": "N_0x1aa8a837d2169d94",
	  "body": [
		"N_0x1aa8a837d2169d94(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1bbac99c0bc53656()": {
	  "prefix": "N_0x1bbac99c0bc53656",
	  "body": [
		"N_0x1bbac99c0bc53656(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1b212b26dd3c04df()": {
	  "prefix": "N_0x1b212b26dd3c04df",
	  "body": [
		"N_0x1b212b26dd3c04df(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1dda078d12879eee()": {
	  "prefix": "N_0x1dda078d12879eee",
	  "body": [
		"N_0x1dda078d12879eee(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1d97d1e3a70a649f()": {
	  "prefix": "N_0x1d97d1e3a70a649f",
	  "body": [
		"N_0x1d97d1e3a70a649f(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nRelated to Hao races.  \n"
	},
	"N_0x1f2e4e06dea8992b()": {
	  "prefix": "N_0x1f2e4e06dea8992b",
	  "body": [
		"N_0x1f2e4e06dea8992b(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1da0da9cb3f0c8bf()": {
	  "prefix": "N_0x1da0da9cb3f0c8bf",
	  "body": [
		"N_0x1da0da9cb3f0c8bf(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x1f9fb66f3a3842d2()": {
	  "prefix": "N_0x1f9fb66f3a3842d2",
	  "body": [
		"N_0x1f9fb66f3a3842d2(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x21115bcd6e44656a()": {
	  "prefix": "N_0x21115bcd6e44656a",
	  "body": [
		"N_0x21115bcd6e44656a(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x1f34b0626c594380()": {
	  "prefix": "N_0x1f34b0626c594380",
	  "body": [
		"N_0x1f34b0626c594380(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x206bc5dc9d1ac70a()": {
	  "prefix": "N_0x206bc5dc9d1ac70a",
	  "body": [
		"N_0x206bc5dc9d1ac70a(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x22fecb546c276a30()": {
	  "prefix": "N_0x22fecb546c276a30",
	  "body": [
		"N_0x22fecb546c276a30(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\nProbably GET_VEHICLE_SOMETHING"
	},
	"N_0x2467a2d807d37ca3()": {
	  "prefix": "N_0x2467a2d807d37ca3",
	  "body": [
		"N_0x2467a2d807d37ca3(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x21973bbf8d17edfa()": {
	  "prefix": "N_0x21973bbf8d17edfa",
	  "body": [
		"N_0x21973bbf8d17edfa(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOnly called once inside main_persitant with the parameters, 0  \n"
	},
	"N_0x25367de49d64cf16()": {
	  "prefix": "N_0x25367de49d64cf16",
	  "body": [
		"N_0x25367de49d64cf16(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x2311dd7159f00582()": {
	  "prefix": "N_0x2311dd7159f00582",
	  "body": [
		"N_0x2311dd7159f00582(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x26d99d5a82fd18e8()": {
	  "prefix": "N_0x26d99d5a82fd18e8",
	  "body": [
		"N_0x26d99d5a82fd18e8(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x27b926779deb502d()": {
	  "prefix": "N_0x27b926779deb502d",
	  "body": [
		"N_0x27b926779deb502d(${1:Vehicle vehicle}, ${2:BOOL frontBumper})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nIS_VEHICLE_BUMPER_HANGING_OFF  \nNot sure what the actual name is but this checks if the bumper of a vehicle is hanging off. It will return true if it is hanging, false if it falls off and false if it is not hanging off.  \n"
	},
	"N_0x279d50de5652d935()": {
	  "prefix": "N_0x279d50de5652d935",
	  "body": [
		"N_0x279d50de5652d935(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x2a86a0475b6a1434()": {
	  "prefix": "N_0x2a86a0475b6a1434",
	  "body": [
		"N_0x2a86a0475b6a1434(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x28b18377eb6e25f6()": {
	  "prefix": "N_0x28b18377eb6e25f6",
	  "body": [
		"N_0x28b18377eb6e25f6(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x2a8f319b392e7b3f()": {
	  "prefix": "N_0x2a8f319b392e7b3f",
	  "body": [
		"N_0x2a8f319b392e7b3f(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nVEHICLE::_2A8F319B392E7B3F(vehicle, 0.5);  \n"
	},
	"N_0x2c1d8b3b19e517cc()": {
	  "prefix": "N_0x2c1d8b3b19e517cc",
	  "body": [
		"N_0x2c1d8b3b19e517cc(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x2b6747faa9db9d6b()": {
	  "prefix": "N_0x2b6747faa9db9d6b",
	  "body": [
		"N_0x2b6747faa9db9d6b(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x2c8cbfe1ea5fc631()": {
	  "prefix": "N_0x2c8cbfe1ea5fc631",
	  "body": [
		"N_0x2c8cbfe1ea5fc631(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x2c4a1590abf43e8b()": {
	  "prefix": "N_0x2c4a1590abf43e8b",
	  "body": [
		"N_0x2c4a1590abf43e8b(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x2fa2494b47fdd009()": {
	  "prefix": "N_0x2fa2494b47fdd009",
	  "body": [
		"N_0x2fa2494b47fdd009(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x32caedf24a583345()": {
	  "prefix": "N_0x32caedf24a583345",
	  "body": [
		"N_0x32caedf24a583345(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x33506883545ac0df()": {
	  "prefix": "N_0x33506883545ac0df",
	  "body": [
		"N_0x33506883545ac0df(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x3441cad2f2231923()": {
	  "prefix": "N_0x3441cad2f2231923",
	  "body": [
		"N_0x3441cad2f2231923(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x35bb21de06784373()": {
	  "prefix": "N_0x35bb21de06784373",
	  "body": [
		"N_0x35bb21de06784373(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x35e0654f4bad7971()": {
	  "prefix": "N_0x35e0654f4bad7971",
	  "body": [
		"N_0x35e0654f4bad7971(${1:BOOL p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x36492c2f0d134c56()": {
	  "prefix": "N_0x36492c2f0d134c56",
	  "body": [
		"N_0x36492c2f0d134c56(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n\nReturns a float value related to slipstream.  \n"
	},
	"N_0x374706271354cb18()": {
	  "prefix": "N_0x374706271354cb18",
	  "body": [
		"N_0x374706271354cb18(${1:Vehicle vehicle}, ${2:Entity p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x3b458ddb57038f08()": {
	  "prefix": "N_0x3b458ddb57038f08",
	  "body": [
		"N_0x3b458ddb57038f08(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x3de51e9c80b116cf()": {
	  "prefix": "N_0x3de51e9c80b116cf",
	  "body": [
		"N_0x3de51e9c80b116cf(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x41290b40fa63e6da()": {
	  "prefix": "N_0x41290b40fa63e6da",
	  "body": [
		"N_0x41290b40fa63e6da(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x4056ea1105f5abd7()": {
	  "prefix": "N_0x4056ea1105f5abd7",
	  "body": [
		"N_0x4056ea1105f5abd7(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x428baccdf5e26ead()": {
	  "prefix": "N_0x428baccdf5e26ead",
	  "body": [
		"N_0x428baccdf5e26ead(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nif (!ENTITY::DOES_ENTITY_BELONG_TO_THIS_SCRIPT(g_10A5A._f8B[a_0/*1*/], 1)) {  \nsub_20af7(\"No longer needed: Vehicle owned by other script\");  \nif ((((a_0 == 24) && (!sub_3a04(g_10A5A._f8B[a_0/*1*/]))) && (!sub_39c9(g_10A5A._f8B[a_0/*1*/]))) && (ENTITY::GET_ENTITY_MODEL(g_10A5A._f8B[a_0/*1*/]) != ${monster})) {  \n    VEHICLE::_428BACCDF5E26EAD(g_10A5A._f8B[a_0/*1*/], 1);  \n}  \ng_10A5A._f8B[a_0/*1*/] = 0;  \ng_10A5A[a_0/*1*/] = 1;  \nsub_20ada(a_0);  \nreturn ;  \n\t\t}  \n"
	},
	"N_0x428ad3e26c8d9eb0()": {
	  "prefix": "N_0x428ad3e26c8d9eb0",
	  "body": [
		"N_0x428ad3e26c8d9eb0(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x4419966c9936071a()": {
	  "prefix": "N_0x4419966c9936071a",
	  "body": [
		"N_0x4419966c9936071a(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x42a4beb35d372407()": {
	  "prefix": "N_0x42a4beb35d372407",
	  "body": [
		"N_0x42a4beb35d372407(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n\nLOD related  \n"
	},
	"N_0x44cd1f493db2a0a6()": {
	  "prefix": "N_0x44cd1f493db2a0a6",
	  "body": [
		"N_0x44cd1f493db2a0a6(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x48adc8a773564670()": {
	  "prefix": "N_0x48adc8a773564670",
	  "body": [
		"N_0x48adc8a773564670()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x45a561a9421ab6ad()": {
	  "prefix": "N_0x45a561a9421ab6ad",
	  "body": [
		"N_0x45a561a9421ab6ad(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x48c633e94a8142a7()": {
	  "prefix": "N_0x48c633e94a8142a7",
	  "body": [
		"N_0x48c633e94a8142a7(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x4d9d109f63fee1d4()": {
	  "prefix": "N_0x4d9d109f63fee1d4",
	  "body": [
		"N_0x4d9d109f63fee1d4(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x4c815eb175086f84()": {
	  "prefix": "N_0x4c815eb175086f84",
	  "body": [
		"N_0x4c815eb175086f84(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x4e20d2a627011e8e()": {
	  "prefix": "N_0x4e20d2a627011e8e",
	  "body": [
		"N_0x4e20d2a627011e8e(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x4e417c547182c84d()": {
	  "prefix": "N_0x4e417c547182c84d",
	  "body": [
		"N_0x4e417c547182c84d(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x500873a45724c863()": {
	  "prefix": "N_0x500873a45724c863",
	  "body": [
		"N_0x500873a45724c863(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nconsole hash: 0x004926A3  \n"
	},
	"N_0x4e74e62e0a97e901()": {
	  "prefix": "N_0x4e74e62e0a97e901",
	  "body": [
		"N_0x4e74e62e0a97e901(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x51bb2d88d31a914b()": {
	  "prefix": "N_0x51bb2d88d31a914b",
	  "body": [
		"N_0x51bb2d88d31a914b(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x5335be58c083e74e()": {
	  "prefix": "N_0x5335be58c083e74e",
	  "body": [
		"N_0x5335be58c083e74e(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x51db102f4a3ba5e0()": {
	  "prefix": "N_0x51db102f4a3ba5e0",
	  "body": [
		"N_0x51db102f4a3ba5e0(${1:BOOL p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x544996c0081abdeb()": {
	  "prefix": "N_0x544996c0081abdeb",
	  "body": [
		"N_0x544996c0081abdeb(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x54b0f614960f4a5f()": {
	  "prefix": "N_0x54b0f614960f4a5f",
	  "body": [
		"N_0x54b0f614960f4a5f(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x56b94c6d7127dfba()": {
	  "prefix": "N_0x56b94c6d7127dfba",
	  "body": [
		"N_0x56b94c6d7127dfba(${1:Any p0}, ${2:float p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x563b65a643ed072e()": {
	  "prefix": "N_0x563b65a643ed072e",
	  "body": [
		"N_0x563b65a643ed072e(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x571feb383f629926()": {
	  "prefix": "N_0x571feb383f629926",
	  "body": [
		"N_0x571feb383f629926(${1:Vehicle cargobob}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nconsoel hash 0xAEB29F98  \n"
	},
	"N_0x56eb5e94318d3fb6()": {
	  "prefix": "N_0x56eb5e94318d3fb6",
	  "body": [
		"N_0x56eb5e94318d3fb6(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nconsole hash = 0x30F43FE3  \n"
	},
	"N_0x5873c14a52d74236()": {
	  "prefix": "N_0x5873c14a52d74236",
	  "body": [
		"N_0x5873c14a52d74236(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x5845066d8a1ea7f7()": {
	  "prefix": "N_0x5845066d8a1ea7f7",
	  "body": [
		"N_0x5845066d8a1ea7f7(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:Any p4})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x5b91b229243351a8()": {
	  "prefix": "N_0x5b91b229243351a8",
	  "body": [
		"N_0x5b91b229243351a8(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x5ba68a0840d546ac()": {
	  "prefix": "N_0x5ba68a0840d546ac",
	  "body": [
		"N_0x5ba68a0840d546ac(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x5ee5632f47ae9695()": {
	  "prefix": "N_0x5ee5632f47ae9695",
	  "body": [
		"N_0x5ee5632f47ae9695(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x634148744f385576()": {
	  "prefix": "N_0x634148744f385576",
	  "body": [
		"N_0x634148744f385576(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0x5e569ec46ec21cae()": {
	  "prefix": "N_0x5e569ec46ec21cae",
	  "body": [
		"N_0x5e569ec46ec21cae(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x62ca17b74c435651()": {
	  "prefix": "N_0x62ca17b74c435651",
	  "body": [
		"N_0x62ca17b74c435651(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0x6501129c9e0ffa05()": {
	  "prefix": "N_0x6501129c9e0ffa05",
	  "body": [
		"N_0x6501129c9e0ffa05(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x6636c535f6cc2725()": {
	  "prefix": "N_0x6636c535f6cc2725",
	  "body": [
		"N_0x6636c535f6cc2725(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: float\n\nSomething related to vehicle lean? (References CVehicleLeanHelper)  \n"
	},
	"N_0x639431e895b9aa57()": {
	  "prefix": "N_0x639431e895b9aa57",
	  "body": [
		"N_0x639431e895b9aa57(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0x66979acf5102fd2f()": {
	  "prefix": "N_0x66979acf5102fd2f",
	  "body": [
		"N_0x66979acf5102fd2f(${1:Vehicle cargobob}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x65b080555ea48149()": {
	  "prefix": "N_0x65b080555ea48149",
	  "body": [
		"N_0x65b080555ea48149(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x66e3aaface2d1eb8()": {
	  "prefix": "N_0x66e3aaface2d1eb8",
	  "body": [
		"N_0x66e3aaface2d1eb8(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x6a98c2ecf57fa5d4()": {
	  "prefix": "N_0x6a98c2ecf57fa5d4",
	  "body": [
		"N_0x6a98c2ecf57fa5d4(${1:Vehicle vehicle}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x685d5561680d088b()": {
	  "prefix": "N_0x685d5561680d088b",
	  "body": [
		"N_0x685d5561680d088b(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x6adaabd3068c5235()": {
	  "prefix": "N_0x6adaabd3068c5235",
	  "body": [
		"N_0x6adaabd3068c5235()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x6d8eac07506291fb()": {
	  "prefix": "N_0x6d8eac07506291fb",
	  "body": [
		"N_0x6d8eac07506291fb(${1:Vehicle cargobob}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nConsole Hash: 0x60E29B78  \n"
	},
	"N_0x6d6af961b72728ae()": {
	  "prefix": "N_0x6d6af961b72728ae",
	  "body": [
		"N_0x6d6af961b72728ae(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x6eaaefc76acc311f()": {
	  "prefix": "N_0x6eaaefc76acc311f",
	  "body": [
		"N_0x6eaaefc76acc311f(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x6ebfb22d646ffc18()": {
	  "prefix": "N_0x6ebfb22d646ffc18",
	  "body": [
		"N_0x6ebfb22d646ffc18(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nsfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:   \nCVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)  \n{  \n    CVehicle *result; // rax@1  \n    result = EntityAsCVehicle(a1);  \n    if ( result )  \n    {  \n        result->field_886 &= 0xEFu;  \n        result->field_886 |= 16 * (a2 & 1);  \n    }  \n    return result;  \n}  \n"
	},
	"N_0x72beccf4b829522e()": {
	  "prefix": "N_0x72beccf4b829522e",
	  "body": [
		"N_0x72beccf4b829522e(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x725012a415dba050()": {
	  "prefix": "N_0x725012a415dba050",
	  "body": [
		"N_0x725012a415dba050(${1:Any p0}, ${2:Any* p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\nLast named native above this one is `TRACK_VEHICLE_VISIBILITY` and first named native below is `UNCUFF_PED`. \nUnknown what it does, couldn't find good examples in the decompiled scripts."
	},
	"N_0x737e398138550fff()": {
	  "prefix": "N_0x737e398138550fff",
	  "body": [
		"N_0x737e398138550fff(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x73561d4425a021a2()": {
	  "prefix": "N_0x73561d4425a021a2",
	  "body": [
		"N_0x73561d4425a021a2(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x756ae6e962168a04()": {
	  "prefix": "N_0x756ae6e962168a04",
	  "body": [
		"N_0x756ae6e962168a04(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x76d26a22750e849e()": {
	  "prefix": "N_0x76d26a22750e849e",
	  "body": [
		"N_0x76d26a22750e849e(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x796a877e459b99ea()": {
	  "prefix": "N_0x796a877e459b99ea",
	  "body": [
		"N_0x796a877e459b99ea(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x78ceee41f49f421f()": {
	  "prefix": "N_0x78ceee41f49f421f",
	  "body": [
		"N_0x78ceee41f49f421f(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x79df7e806202ce01()": {
	  "prefix": "N_0x79df7e806202ce01",
	  "body": [
		"N_0x79df7e806202ce01(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x7c0043fdff6436bc()": {
	  "prefix": "N_0x7c0043fdff6436bc",
	  "body": [
		"N_0x7c0043fdff6436bc(${1:Vehicle x})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x7bbe7ff626a591fe()": {
	  "prefix": "N_0x7bbe7ff626a591fe",
	  "body": [
		"N_0x7bbe7ff626a591fe(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x7c06330bfdda182e()": {
	  "prefix": "N_0x7c06330bfdda182e",
	  "body": [
		"N_0x7c06330bfdda182e(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x80e3357fdef45c21()": {
	  "prefix": "N_0x80e3357fdef45c21",
	  "body": [
		"N_0x80e3357fdef45c21(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x7d6f9a3ef26136a0()": {
	  "prefix": "N_0x7d6f9a3ef26136a0",
	  "body": [
		"N_0x7d6f9a3ef26136a0(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nwhat does this native do?  \nHere's some pseudocode of the internal setter function:  \n__int64 __fastcall sub_140CD86B4(signed int vehicle, char a2, char a3)  \n{  \n  char v3; // di@1  \n  char v4; // bl@1  \n  __int64 result; // rax@1  \n  __int16 v6; // cx@3  \n  v3 = a3;  \n  v4 = a2;  \n  result = GetVehicleAddress(vehicle);  \n  if ( result )  \n  {  \n    if ( v3 || (v6 = *(_WORD *)(result + 0xDA), (v6 & 0xFu) - 6 <= 1) )  \n    {  \n      *(_BYTE *)(result + 0x89B) &= 0xDFu;  \n      *(_BYTE *)(result + 0x89B) |= 32 * (v4 & 1);  \n    }  \n  }  \n  return result;  \n}  \nNow it's time for you to find out :P  \n"
	},
	"N_0x84ea99c62cb3ef0c()": {
	  "prefix": "N_0x84ea99c62cb3ef0c",
	  "body": [
		"N_0x84ea99c62cb3ef0c(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x8181ce2f25cb9bb7()": {
	  "prefix": "N_0x8181ce2f25cb9bb7",
	  "body": [
		"N_0x8181ce2f25cb9bb7(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x8533cafde1f0f336()": {
	  "prefix": "N_0x8533cafde1f0f336",
	  "body": [
		"N_0x8533cafde1f0f336(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x86b4b6212cb8b627()": {
	  "prefix": "N_0x86b4b6212cb8b627",
	  "body": [
		"N_0x86b4b6212cb8b627(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x878c75c09fbdb942()": {
	  "prefix": "N_0x878c75c09fbdb942",
	  "body": [
		"N_0x878c75c09fbdb942()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x88bc673ca9e0ae99()": {
	  "prefix": "N_0x88bc673ca9e0ae99",
	  "body": [
		"N_0x88bc673ca9e0ae99(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x870b8b7a766615c8()": {
	  "prefix": "N_0x870b8b7a766615c8",
	  "body": [
		"N_0x870b8b7a766615c8(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x89d630cf5ea96d23()": {
	  "prefix": "N_0x89d630cf5ea96d23",
	  "body": [
		"N_0x89d630cf5ea96d23(${1:Vehicle vehicle}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0x8aa9180de2fedd45()": {
	  "prefix": "N_0x8aa9180de2fedd45",
	  "body": [
		"N_0x8aa9180de2fedd45(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x8f719973e1445ba2()": {
	  "prefix": "N_0x8f719973e1445ba2",
	  "body": [
		"N_0x8f719973e1445ba2(${1:Vehicle vehicle}, ${2:Vehicle p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nNo observed effect.  \n"
	},
	"N_0x8ea86df356801c7d()": {
	  "prefix": "N_0x8ea86df356801c7d",
	  "body": [
		"N_0x8ea86df356801c7d(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x91a0bd635321f145()": {
	  "prefix": "N_0x91a0bd635321f145",
	  "body": [
		"N_0x91a0bd635321f145(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x9007a2f21dc108d4()": {
	  "prefix": "N_0x9007a2f21dc108d4",
	  "body": [
		"N_0x9007a2f21dc108d4(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x92523b76657a517d()": {
	  "prefix": "N_0x92523b76657a517d",
	  "body": [
		"N_0x92523b76657a517d(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n"
	},
	"N_0x91d6dd290888cbab()": {
	  "prefix": "N_0x91d6dd290888cbab",
	  "body": [
		"N_0x91d6dd290888cbab()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0x95cf53b3d687f9fa()": {
	  "prefix": "N_0x95cf53b3d687f9fa",
	  "body": [
		"N_0x95cf53b3d687f9fa(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nin the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.  \n"
	},
	"N_0x9737a37136f07e75()": {
	  "prefix": "N_0x9737a37136f07e75",
	  "body": [
		"N_0x9737a37136f07e75(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSET_VEHICLE_DOORS_LOCKED_FOR_*  \n"
	},
	"N_0x99ad4cccb128cbc9()": {
	  "prefix": "N_0x99ad4cccb128cbc9",
	  "body": [
		"N_0x99ad4cccb128cbc9(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x99093f60746708ca()": {
	  "prefix": "N_0x99093f60746708ca",
	  "body": [
		"N_0x99093f60746708ca(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x9a75585fb2e54fad()": {
	  "prefix": "N_0x9a75585fb2e54fad",
	  "body": [
		"N_0x9a75585fb2e54fad(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nExample gotten from chinese2.c4  \nVEHICLE::_9A75585FB2E54FAD(2004.4471435546875, 3076.806640625, 46.60689926147461, 10.0);  \n"
	},
	"N_0x9becd4b9fef3f8a6()": {
	  "prefix": "N_0x9becd4b9fef3f8a6",
	  "body": [
		"N_0x9becd4b9fef3f8a6(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x99cad8e7afdb60fa()": {
	  "prefix": "N_0x99cad8e7afdb60fa",
	  "body": [
		"N_0x99cad8e7afdb60fa(${1:Vehicle vehicle}, ${2:float p1}, ${3:float p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x9bddc73cc6a115d4()": {
	  "prefix": "N_0x9bddc73cc6a115d4",
	  "body": [
		"N_0x9bddc73cc6a115d4(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nConsole Hash: 0x50CDB295  \n"
	},
	"N_0x9f3f689b814f2599()": {
	  "prefix": "N_0x9f3f689b814f2599",
	  "body": [
		"N_0x9f3f689b814f2599(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xa01bc64dd4bfbbac()": {
	  "prefix": "N_0xa01bc64dd4bfbbac",
	  "body": [
		"N_0xa01bc64dd4bfbbac(${1:Vehicle vehicle}, ${2:int p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x9d30687c57baa0bb()": {
	  "prefix": "N_0x9d30687c57baa0bb",
	  "body": [
		"N_0x9d30687c57baa0bb(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xa17bad153b51547e()": {
	  "prefix": "N_0xa17bad153b51547e",
	  "body": [
		"N_0xa17bad153b51547e(${1:Vehicle cargobob}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xa1dd82f3ccf9a01e()": {
	  "prefix": "N_0xa1dd82f3ccf9a01e",
	  "body": [
		"N_0xa1dd82f3ccf9a01e(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xa247f9ef01d8082e()": {
	  "prefix": "N_0xa247f9ef01d8082e",
	  "body": [
		"N_0xa247f9ef01d8082e(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xa1a9fc1c76a6730d()": {
	  "prefix": "N_0xa1a9fc1c76a6730d",
	  "body": [
		"N_0xa1a9fc1c76a6730d(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xa7dcdf4ded40a8f4()": {
	  "prefix": "N_0xa7dcdf4ded40a8f4",
	  "body": [
		"N_0xa7dcdf4ded40a8f4(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xab04325045427aae()": {
	  "prefix": "N_0xab04325045427aae",
	  "body": [
		"N_0xab04325045427aae(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xa4822f1cf23f4810()": {
	  "prefix": "N_0xa4822f1cf23f4810",
	  "body": [
		"N_0xa4822f1cf23f4810(${1:Vector3* outVec}, ${2:Any p1}, ${3:Vector3* outVec1}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0xae3fee8709b39dcb()": {
	  "prefix": "N_0xae3fee8709b39dcb",
	  "body": [
		"N_0xae3fee8709b39dcb(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0xaa3f739abddcf21f()": {
	  "prefix": "N_0xaa3f739abddcf21f",
	  "body": [
		"N_0xaa3f739abddcf21f()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xab31ef4de6800ce9()": {
	  "prefix": "N_0xab31ef4de6800ce9",
	  "body": [
		"N_0xab31ef4de6800ce9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xaf60e6a2936f982a()": {
	  "prefix": "N_0xaf60e6a2936f982a",
	  "body": [
		"N_0xaf60e6a2936f982a(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xb088e9a47ae6edd5()": {
	  "prefix": "N_0xb088e9a47ae6edd5",
	  "body": [
		"N_0xb088e9a47ae6edd5(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xaf03011701811146()": {
	  "prefix": "N_0xaf03011701811146",
	  "body": [
		"N_0xaf03011701811146(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xb09d25e77c33eb3f()": {
	  "prefix": "N_0xb09d25e77c33eb3f",
	  "body": [
		"N_0xb09d25e77c33eb3f(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xb055a34527cb8fd7()": {
	  "prefix": "N_0xb055a34527cb8fd7",
	  "body": [
		"N_0xb055a34527cb8fd7(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xb28b1fe5bfadd7f5()": {
	  "prefix": "N_0xb28b1fe5bfadd7f5",
	  "body": [
		"N_0xb28b1fe5bfadd7f5(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nNo observed effect.  \n"
	},
	"N_0xb0ad1238a709b1a2()": {
	  "prefix": "N_0xb0ad1238a709b1a2",
	  "body": [
		"N_0xb0ad1238a709b1a2(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xb2e0c0d6922d31f2()": {
	  "prefix": "N_0xb2e0c0d6922d31f2",
	  "body": [
		"N_0xb2e0c0d6922d31f2(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xb264c4d2f2b0a78b()": {
	  "prefix": "N_0xb264c4d2f2b0a78b",
	  "body": [
		"N_0xb264c4d2f2b0a78b(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nThis native doesn't seem to do anything, might be a debug-only native.  \nConfirmed, it is a debug native.  \n"
	},
	"N_0xbb2333bb87ddd87f()": {
	  "prefix": "N_0xbb2333bb87ddd87f",
	  "body": [
		"N_0xbb2333bb87ddd87f(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xb9562064627ff9db()": {
	  "prefix": "N_0xb9562064627ff9db",
	  "body": [
		"N_0xb9562064627ff9db(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xbc3cca5844452b06()": {
	  "prefix": "N_0xbc3cca5844452b06",
	  "body": [
		"N_0xbc3cca5844452b06(${1:float p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xba91d045575699ad()": {
	  "prefix": "N_0xba91d045575699ad",
	  "body": [
		"N_0xba91d045575699ad(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xbd32e46aa95c1dd2()": {
	  "prefix": "N_0xbd32e46aa95c1dd2",
	  "body": [
		"N_0xbd32e46aa95c1dd2(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xbe5c1255a1830ff5()": {
	  "prefix": "N_0xbe5c1255a1830ff5",
	  "body": [
		"N_0xbe5c1255a1830ff5(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xc0ed6438e6d39ba8()": {
	  "prefix": "N_0xc0ed6438e6d39ba8",
	  "body": [
		"N_0xc0ed6438e6d39ba8(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xc24075310a8b9cd1()": {
	  "prefix": "N_0xc24075310a8b9cd1",
	  "body": [
		"N_0xc24075310a8b9cd1(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xc1f981a6f74f0c23()": {
	  "prefix": "N_0xc1f981a6f74f0c23",
	  "body": [
		"N_0xc1f981a6f74f0c23(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nsame call as VEHICLE::_0x0F3B4D4E43177236  \n"
	},
	"N_0xc361aa040d6637a8()": {
	  "prefix": "N_0xc361aa040d6637a8",
	  "body": [
		"N_0xc361aa040d6637a8(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xc45c27ef50f36adc()": {
	  "prefix": "N_0xc45c27ef50f36adc",
	  "body": [
		"N_0xc45c27ef50f36adc(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xc4b3347bd68bd609()": {
	  "prefix": "N_0xc4b3347bd68bd609",
	  "body": [
		"N_0xc4b3347bd68bd609(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xc50ce861b55eab8b()": {
	  "prefix": "N_0xc50ce861b55eab8b",
	  "body": [
		"N_0xc50ce861b55eab8b(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xca4ac3eaae46ec7b()": {
	  "prefix": "N_0xca4ac3eaae46ec7b",
	  "body": [
		"N_0xca4ac3eaae46ec7b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xcac66558b944da67()": {
	  "prefix": "N_0xcac66558b944da67",
	  "body": [
		"N_0xcac66558b944da67(${1:char* vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nrerere  \n"
	},
	"N_0xcda42c4bb9bde779()": {
	  "prefix": "N_0xcda42c4bb9bde779",
	  "body": [
		"N_0xcda42c4bb9bde779(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nProbably SET_VEHICLE_SOMETHING"
	},
	"N_0xcf1182f682f65307()": {
	  "prefix": "N_0xcf1182f682f65307",
	  "body": [
		"N_0xcf1182f682f65307(${1:Any p0}, ${2:Player p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xcfd778e7904c255e()": {
	  "prefix": "N_0xcfd778e7904c255e",
	  "body": [
		"N_0xcfd778e7904c255e(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nwhat does this do?  \n"
	},
	"N_0xcf9159024555488c()": {
	  "prefix": "N_0xcf9159024555488c",
	  "body": [
		"N_0xcf9159024555488c(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xd3301660a57c9272()": {
	  "prefix": "N_0xd3301660a57c9272",
	  "body": [
		"N_0xd3301660a57c9272(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xd3e51c0ab8c26eee()": {
	  "prefix": "N_0xd3e51c0ab8c26eee",
	  "body": [
		"N_0xd3e51c0ab8c26eee(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xd4c4642cb7f50b5d()": {
	  "prefix": "N_0xd4c4642cb7f50b5d",
	  "body": [
		"N_0xd4c4642cb7f50b5d(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nOnly used like this:  \nif (VEHICLE::_D4C4642CB7F50B5D(ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(v_3))) {                                                        sub_157e9c(g_40001._f1868, 0);  \n}  \n"
	},
	"N_0xd4196117af7bb974()": {
	  "prefix": "N_0xd4196117af7bb974",
	  "body": [
		"N_0xd4196117af7bb974(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xd565f438137f0e10()": {
	  "prefix": "N_0xd565f438137f0e10",
	  "body": [
		"N_0xd565f438137f0e10(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xdbc631f109350b8c()": {
	  "prefix": "N_0xdbc631f109350b8c",
	  "body": [
		"N_0xdbc631f109350b8c(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nRelated to locking the vehicle or something similar.  \nIn the decompiled scripts, its always called after  \nVEHICLE::_SET_EXCLUSIVE_DRIVER(a_0, 0, 0);  \nVEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a_0, 1);  \nVEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a_0, PLAYER::PLAYER_ID(), 0);  \n"
	},
	"N_0xdba3c090e3d74690()": {
	  "prefix": "N_0xdba3c090e3d74690",
	  "body": [
		"N_0xdba3c090e3d74690(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nREQUEST_VEHICLE_*  \n"
	},
	"N_0xdce97bdf8a0eabc8()": {
	  "prefix": "N_0xdce97bdf8a0eabc8",
	  "body": [
		"N_0xdce97bdf8a0eabc8()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xdf7e3eeb29642c38()": {
	  "prefix": "N_0xdf7e3eeb29642c38",
	  "body": [
		"N_0xdf7e3eeb29642c38(${1:Vehicle vehicle}, ${2:Vector3* out1}, ${3:Vector3* out2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOutputs 2 Vector3's.  \nScripts check if out2.x - out1.x > someshit.x  \nCould be suspension related, as in max suspension height and min suspension height, considering the natives location.  \n"
	},
	"N_0xdffcef48e511db48()": {
	  "prefix": "N_0xdffcef48e511db48",
	  "body": [
		"N_0xdffcef48e511db48(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe16142b94664defd()": {
	  "prefix": "N_0xe16142b94664defd",
	  "body": [
		"N_0xe16142b94664defd(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe01903c47c7ac89e()": {
	  "prefix": "N_0xe01903c47c7ac89e",
	  "body": [
		"N_0xe01903c47c7ac89e()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe2f53f172b45ede1()": {
	  "prefix": "N_0xe2f53f172b45ede1",
	  "body": [
		"N_0xe2f53f172b45ede1()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe05dd0e9707003a3()": {
	  "prefix": "N_0xe05dd0e9707003a3",
	  "body": [
		"N_0xe05dd0e9707003a3(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe30524e1871f481d()": {
	  "prefix": "N_0xe30524e1871f481d",
	  "body": [
		"N_0xe30524e1871f481d(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nREMOTE_VEHICLE_*  \n"
	},
	"N_0xe301bd63e9e13cf0()": {
	  "prefix": "N_0xe301bd63e9e13cf0",
	  "body": [
		"N_0xe301bd63e9e13cf0(${1:Vehicle vehicle}, ${2:Vehicle cargobob})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe3ebaae484798530()": {
	  "prefix": "N_0xe3ebaae484798530",
	  "body": [
		"N_0xe3ebaae484798530(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nNo observed effect.  \n"
	},
	"N_0xe33ffa906ce74880()": {
	  "prefix": "N_0xe33ffa906ce74880",
	  "body": [
		"N_0xe33ffa906ce74880(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nIS_*  \n"
	},
	"N_0xe44a982368a4af23()": {
	  "prefix": "N_0xe44a982368a4af23",
	  "body": [
		"N_0xe44a982368a4af23(${1:Vehicle vehicle}, ${2:Vehicle vehicle2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe6b0e8cfc3633bf0()": {
	  "prefix": "N_0xe6b0e8cfc3633bf0",
	  "body": [
		"N_0xe6b0e8cfc3633bf0(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nGET_VEHICLE_*  \n"
	},
	"N_0xe4e2fd323574965c()": {
	  "prefix": "N_0xe4e2fd323574965c",
	  "body": [
		"N_0xe4e2fd323574965c(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe6c0c80b8c867537()": {
	  "prefix": "N_0xe6c0c80b8c867537",
	  "body": [
		"N_0xe6c0c80b8c867537(${1:BOOL p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe5810ac70602f2f5()": {
	  "prefix": "N_0xe5810ac70602f2f5",
	  "body": [
		"N_0xe5810ac70602f2f5(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe851e480b814d4ba()": {
	  "prefix": "N_0xe851e480b814d4ba",
	  "body": [
		"N_0xe851e480b814d4ba(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe6f13851780394da()": {
	  "prefix": "N_0xe6f13851780394da",
	  "body": [
		"N_0xe6f13851780394da(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xed8286f71a819baa()": {
	  "prefix": "N_0xed8286f71a819baa",
	  "body": [
		"N_0xed8286f71a819baa(${1:Vehicle cargobob}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xe842a9398079bd82()": {
	  "prefix": "N_0xe842a9398079bd82",
	  "body": [
		"N_0xe842a9398079bd82(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nVehicle must be a boat.  \n"
	},
	"N_0xedbc8405b3895cc9()": {
	  "prefix": "N_0xedbc8405b3895cc9",
	  "body": [
		"N_0xedbc8405b3895cc9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xed5ede9e676643c9()": {
	  "prefix": "N_0xed5ede9e676643c9",
	  "body": [
		"N_0xed5ede9e676643c9(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xefc13b1ce30d755d()": {
	  "prefix": "N_0xefc13b1ce30d755d",
	  "body": [
		"N_0xefc13b1ce30d755d(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xeebfc7a7efdc35b4()": {
	  "prefix": "N_0xeebfc7a7efdc35b4",
	  "body": [
		"N_0xeebfc7a7efdc35b4(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: int\n\nSome kind of flags.  \n"
	},
	"N_0xf0e4ba16d1db546c()": {
	  "prefix": "N_0xf0e4ba16d1db546c",
	  "body": [
		"N_0xf0e4ba16d1db546c(${1:Vehicle vehicle}, ${2:int p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nAdds some kind of shadow to the vehicle.  \n"
	},
	"N_0xf25e02cb9c5818f8()": {
	  "prefix": "N_0xf25e02cb9c5818f8",
	  "body": [
		"N_0xf25e02cb9c5818f8()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xf051d9bfb6ba39c0()": {
	  "prefix": "N_0xf051d9bfb6ba39c0",
	  "body": [
		"N_0xf051d9bfb6ba39c0(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xf0f2103efaf8cba7()": {
	  "prefix": "N_0xf0f2103efaf8cba7",
	  "body": [
		"N_0xf0f2103efaf8cba7(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Vector3\n"
	},
	"N_0xf488c566413b4232()": {
	  "prefix": "N_0xf488c566413b4232",
	  "body": [
		"N_0xf488c566413b4232(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xf7f203e31f96f6a1()": {
	  "prefix": "N_0xf7f203e31f96f6a1",
	  "body": [
		"N_0xf7f203e31f96f6a1(${1:Vehicle vehicle}, ${2:BOOL flag})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nIS_S*  \n"
	},
	"N_0xf3b0e0aed097a3f5()": {
	  "prefix": "N_0xf3b0e0aed097a3f5",
	  "body": [
		"N_0xf3b0e0aed097a3f5(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xf87d9f2301f7d206()": {
	  "prefix": "N_0xf87d9f2301f7d206",
	  "body": [
		"N_0xf87d9f2301f7d206(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nRemove the weird shadow applied by [0xF0E4BA16D1DB546C](#_0xF0E4BA16D1DB546C)."
	},
	"N_0xf78f94d60248c737()": {
	  "prefix": "N_0xf78f94d60248c737",
	  "body": [
		"N_0xf78f94d60248c737(${1:Any p0}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n"
	},
	"N_0xfe205f38aaa58e5b()": {
	  "prefix": "N_0xfe205f38aaa58e5b",
	  "body": [
		"N_0xfe205f38aaa58e5b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xfaf2a78061fd9ef4()": {
	  "prefix": "N_0xfaf2a78061fd9ef4",
	  "body": [
		"N_0xfaf2a78061fd9ef4(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"PausePlaybackRecordedVehicle()": {
	  "prefix": "PausePlaybackRecordedVehicle",
	  "body": [
		"PausePlaybackRecordedVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"OpenVehicleBombBay()": {
	  "prefix": "OpenVehicleBombBay",
	  "body": "OpenVehicleBombBay",
	  "description": "OLD NAME, PLEASE USE OpenBombBayDoors INSTEAD!"
	},
	"OpenBombBayDoors()": {
	  "prefix": "OpenBombBayDoors",
	  "body": [
		"OpenBombBayDoors(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: OpenVehicleBombBay"
	},
	"RaiseConvertibleRoof()": {
	  "prefix": "RaiseConvertibleRoof",
	  "body": [
		"RaiseConvertibleRoof(${1:Vehicle vehicle}, ${2:BOOL instantlyRaise})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"PreloadVehicleMod()": {
	  "prefix": "PreloadVehicleMod",
	  "body": [
		"PreloadVehicleMod(${1:Any p0}, ${2:int modType}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"ReleasePreloadMods()": {
	  "prefix": "ReleasePreloadMods",
	  "body": [
		"ReleasePreloadMods(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RaiseLowerableWheels()": {
	  "prefix": "RaiseLowerableWheels",
	  "body": [
		"RaiseLowerableWheels(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RetractCargobobHook()": {
	  "prefix": "RetractCargobobHook",
	  "body": "RetractCargobobHook",
	  "description": "OLD NAME, PLEASE USE RemovePickUpRopeForCargobob INSTEAD!"
	},
	"RemovePickUpRopeForCargobob()": {
	  "prefix": "RemovePickUpRopeForCargobob",
	  "body": [
		"RemovePickUpRopeForCargobob(${1:Vehicle cargobob})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nRetracts the hook on the cargobob.  \nNote: after you retract it the natives for dropping the hook no longer work  \n\nOld name: RetractCargobobHook"
	},
	"N_0x1033371fc8e842a7()": {
	  "prefix": "N_0x1033371fc8e842a7",
	  "body": "N_0x1033371fc8e842a7",
	  "description": "OLD NAME, PLEASE USE RemoveSpeedZone INSTEAD!"
	},
	"RemoveSpeedZone()": {
	  "prefix": "RemoveSpeedZone",
	  "body": [
		"RemoveSpeedZone(${1:int speedzone})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nUsed to remove a speedzone.  \nThis is the speed zone native.  \nExample usage C#:  \nuint speedZone = Function.Call<uint>((Hash) 0x2CE544C68FB812A0, Game.PlayerPed.Position.X, Game.PlayerPed.Position.Y, Game.PlayerPed.Position.Z, 100.0f, 0.0f, false);  \nbool speedZoneClosed = Function.Call<bool>((Hash) 0x1033371FC8E842A7, speedZone);  \n(Thanks to alexguirre for his help!)  \n\nOld name: N_0x1033371fc8e842a7"
	},
	"RemoveVehicleHighDetailModel()": {
	  "prefix": "RemoveVehicleHighDetailModel",
	  "body": [
		"RemoveVehicleHighDetailModel(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RemoveVehicleMod()": {
	  "prefix": "RemoveVehicleMod",
	  "body": [
		"RemoveVehicleMod(${1:Vehicle vehicle}, ${2:int modType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RemoveVehicleAsset()": {
	  "prefix": "RemoveVehicleAsset",
	  "body": [
		"RemoveVehicleAsset(${1:int vehicleAsset})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RemoveVehicleRecording()": {
	  "prefix": "RemoveVehicleRecording",
	  "body": [
		"RemoveVehicleRecording(${1:Any p0}, ${2:Any* p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RemoveVehicleUpsidedownCheck()": {
	  "prefix": "RemoveVehicleUpsidedownCheck",
	  "body": [
		"RemoveVehicleUpsidedownCheck(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RemoveVehicleWindow()": {
	  "prefix": "RemoveVehicleWindow",
	  "body": [
		"RemoveVehicleWindow(${1:Vehicle vehicle}, ${2:int windowIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nwindowIndex:  \n0 = Front Right Window  \n1 = Front Left Window  \n2 = Back Right Window  \n3 = Back Left Window  \n"
	},
	"RemoveVehicleStuckCheck()": {
	  "prefix": "RemoveVehicleStuckCheck",
	  "body": [
		"RemoveVehicleStuckCheck(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RequestVehicleAsset()": {
	  "prefix": "RequestVehicleAsset",
	  "body": [
		"RequestVehicleAsset(${1:Hash vehicleHash}, ${2:int vehicleAsset})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nREQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);  \nvehicle found that have asset's:  \ncargobob3  \nsubmersible  \nblazer  \n"
	},
	"RemoveVehiclesFromGeneratorsInArea()": {
	  "prefix": "RemoveVehiclesFromGeneratorsInArea",
	  "body": [
		"RemoveVehiclesFromGeneratorsInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:Any unk})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xef49cf0270307cbe()": {
	  "prefix": "N_0xef49cf0270307cbe",
	  "body": "N_0xef49cf0270307cbe",
	  "description": "OLD NAME, PLEASE USE RequestVehiclePhoneExplosion INSTEAD!"
	},
	"RequestVehiclePhoneExplosion()": {
	  "prefix": "RequestVehiclePhoneExplosion",
	  "body": [
		"RequestVehiclePhoneExplosion()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nused for the remote vehicle explode thing with phones  \n\nOld name: N_0xef49cf0270307cbe"
	},
	"RequestVehicleHighDetailModel()": {
	  "prefix": "RequestVehicleHighDetailModel",
	  "body": [
		"RequestVehicleHighDetailModel(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"ResetVehicleStuckTimer()": {
	  "prefix": "ResetVehicleStuckTimer",
	  "body": [
		"ResetVehicleStuckTimer(${1:Vehicle vehicle}, ${2:int nullAttributes})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nThe inner function has a switch on the second parameter. It's the stuck timer index.  \nHere's some pseudo code I wrote for the inner function:  \nvoid __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)  \n{  \n\tswitch (timerIndex)  \n\t{  \n\tcase 0:  \nunknownClassInVehicle->FirstStuckTimer = (WORD)0u;  \n\tcase 1:  \nunknownClassInVehicle->SecondStuckTimer = (WORD)0u;  \n\tcase 2:  \nunknownClassInVehicle->ThirdStuckTimer = (WORD)0u;  \n\tcase 3:  \nunknownClassInVehicle->FourthStuckTimer = (WORD)0u;  \n\tcase 4:  \nunknownClassInVehicle->FirstStuckTimer = (WORD)0u;  \nunknownClassInVehicle->SecondStuckTimer = (WORD)0u;  \nunknownClassInVehicle->ThirdStuckTimer = (WORD)0u;  \nunknownClassInVehicle->FourthStuckTimer = (WORD)0u;  \nbreak;  \n\t};  \n}  \n"
	},
	"RollDownWindow()": {
	  "prefix": "RollDownWindow",
	  "body": [
		"RollDownWindow(${1:Vehicle vehicle}, ${2:int windowIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n\nwindowIndex:  \n0 = Front Right Window  \n1 = Front Left Window  \n2 = Back Right Window  \n3 = Back Left Window  \n"
	},
	"RequestVehicleRecording()": {
	  "prefix": "RequestVehicleRecording",
	  "body": [
		"RequestVehicleRecording(${1:int i}, ${2:char* name})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nIn script files, seen as REQUEST_VEHICLE_RECORDING(1, \"FBIs1UBER\");  \n"
	},
	"RollUpWindow()": {
	  "prefix": "RollUpWindow",
	  "body": [
		"RollUpWindow(${1:Vehicle vehicle}, ${2:int windowIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n\n0 = Front Right Window  \n1 = Front Left Window  \n2 = Back Right Window  \n3 = Back Left Window  \n"
	},
	"ResetVehicleWheels()": {
	  "prefix": "ResetVehicleWheels",
	  "body": [
		"ResetVehicleWheels(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetAllLowPriorityVehicleGeneratorsActive()": {
	  "prefix": "SetAllLowPriorityVehicleGeneratorsActive",
	  "body": [
		"SetAllLowPriorityVehicleGeneratorsActive(${1:BOOL active})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"RollDownWindows()": {
	  "prefix": "RollDownWindows",
	  "body": [
		"RollDownWindows(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nRoll down all the windows of the vehicle passed through the first parameter.  \n"
	},
	"SetAllVehicleGeneratorsActive()": {
	  "prefix": "SetAllVehicleGeneratorsActive",
	  "body": [
		"SetAllVehicleGeneratorsActive()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xf4b2ed59deb5d774()": {
	  "prefix": "N_0xf4b2ed59deb5d774",
	  "body": "N_0xf4b2ed59deb5d774",
	  "description": "OLD NAME, PLEASE USE SetAircraftBombCount INSTEAD!"
	},
	"SetVehicleBombs()": {
	  "prefix": "SetVehicleBombs",
	  "body": "SetVehicleBombs",
	  "description": "OLD NAME, PLEASE USE SetAircraftBombCount INSTEAD!"
	},
	"SetAircraftBombCount()": {
	  "prefix": "SetAircraftBombCount",
	  "body": [
		"SetAircraftBombCount(${1:Vehicle aircraft}, ${2:int bombCount})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nSets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. \n\nIn decompiled scripts this is used to deduct from or add to the count whenever bombs are dropped or purchased/restocked. \n\nUse [`_GET_AIRCRAFT_BOMB_COUNT`](#_0xEA12BD130D7569A1) to get the amount of bombs on that vehicle.\nOld name: N_0xf4b2ed59deb5d774\nOld name: SetVehicleBombs"
	},
	"SetAllVehicleGeneratorsActiveInArea()": {
	  "prefix": "SetAllVehicleGeneratorsActiveInArea",
	  "body": [
		"SetAllVehicleGeneratorsActiveInArea(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL p6}, ${8:BOOL p7})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x9bda23bf666f0855()": {
	  "prefix": "N_0x9bda23bf666f0855",
	  "body": "N_0x9bda23bf666f0855",
	  "description": "OLD NAME, PLEASE USE SetAircraftCountermeasureCount INSTEAD!"
	},
	"SetAircraftCountermeasureCount()": {
	  "prefix": "SetAircraftCountermeasureCount",
	  "body": [
		"SetAircraftCountermeasureCount(${1:Vehicle aircraft}, ${2:int count})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nSimilar to [`_SET_AIRCRAFT_BOMB_COUNT`](#_0xF4B2ED59DEB5D774), this sets the amount of countermeasures that are present on this vehicle.\n\nUse [`_GET_AIRCRAFT_COUNTERMEASURE_COUNT`](#_0xF846AA63DF56B804) to get the current amount.\nOld name: N_0x9bda23bf666f0855"
	},
	"SetBikeLeanAngle()": {
	  "prefix": "SetBikeLeanAngle",
	  "body": [
		"SetBikeLeanAngle(${1:Vehicle vehicle}, ${2:float x}, ${3:float y})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOnly works on bikes, both X and Y work in the -1 - 1 range.  \nX forces the bike to turn left or right (-1, 1)  \nY forces the bike to lean to the left or to the right (-1, 1)  \nExample with X -1/Y 1  \nhttp://i.imgur.com/TgIuAPJ.jpg  \n"
	},
	"SetAllVehiclesSpawn()": {
	  "prefix": "SetAllVehiclesSpawn",
	  "body": [
		"SetAllVehiclesSpawn(${1:Vehicle p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n\nMost likely a hash collision  \n"
	},
	"SetBoatAnchor()": {
	  "prefix": "SetBoatAnchor",
	  "body": [
		"SetBoatAnchor(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x90b6da738a9a25da()": {
	  "prefix": "N_0x90b6da738a9a25da",
	  "body": "N_0x90b6da738a9a25da",
	  "description": "OLD NAME, PLEASE USE SetAmbientVehicleRangeMultiplierThisFrame INSTEAD!"
	},
	"SetSomeVehicleDensityMultiplierThisFrame()": {
	  "prefix": "SetSomeVehicleDensityMultiplierThisFrame",
	  "body": "SetSomeVehicleDensityMultiplierThisFrame",
	  "description": "OLD NAME, PLEASE USE SetAmbientVehicleRangeMultiplierThisFrame INSTEAD!"
	},
	"SetAmbientVehicleRangeMultiplierThisFrame()": {
	  "prefix": "SetAmbientVehicleRangeMultiplierThisFrame",
	  "body": [
		"SetAmbientVehicleRangeMultiplierThisFrame(${1:float range})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nSets the ambient vehicle spawn range.\nFor example, if you set the range to 0.1, the ambient cars will spawn close to your player.\n\nThis native needs to be called every frame.\nOld name: N_0x90b6da738a9a25da\nOld name: SetSomeVehicleDensityMultiplierThisFrame"
	},
	"SetCanResprayVehicle()": {
	  "prefix": "SetCanResprayVehicle",
	  "body": [
		"SetCanResprayVehicle(${1:Vehicle vehicle}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nHardcoded to not work in multiplayer.  \n"
	},
	"N_0xfc40cbf7b90ca77c()": {
	  "prefix": "N_0xfc40cbf7b90ca77c",
	  "body": "N_0xfc40cbf7b90ca77c",
	  "description": "OLD NAME, PLEASE USE SetCarBootOpen INSTEAD!"
	},
	"SetCarBootOpen()": {
	  "prefix": "SetCarBootOpen",
	  "body": [
		"SetCarBootOpen(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nOpens the trunk of the vehicle. Initially used in Max Payne 3, that's why we know the name.\nOld name: N_0xfc40cbf7b90ca77c"
	},
	"N_0x84fd40f56075e816()": {
	  "prefix": "N_0x84fd40f56075e816",
	  "body": "N_0x84fd40f56075e816",
	  "description": "OLD NAME, PLEASE USE SetCarHighSpeedBumpSeverityMultiplier INSTEAD!"
	},
	"SetCarHighSpeedBumpSeverityMultiplier()": {
	  "prefix": "SetCarHighSpeedBumpSeverityMultiplier",
	  "body": [
		"SetCarHighSpeedBumpSeverityMultiplier(${1:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSomething to do with \"high speed bump severity\"?  \nif (!sub_87a46(\"SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER\")) {  \n    VEHICLE::_84FD40F56075E816(0.0);  \n    sub_8795b(\"SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER\", 1);  \n}  \n\nOld name: N_0x84fd40f56075e816"
	},
	"N_0x877c1eaeac531023()": {
	  "prefix": "N_0x877c1eaeac531023",
	  "body": "N_0x877c1eaeac531023",
	  "description": "OLD NAME, PLEASE USE SetCargobobHookPosition INSTEAD!"
	},
	"SetCargobobHookPosition()": {
	  "prefix": "SetCargobobHookPosition",
	  "body": [
		"SetCargobobHookPosition(${1:Vehicle cargobob}, ${2:float xOffset}, ${3:float yOffset}, ${4:int state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nFor now, I changed the last one from bool to int.  \nAccording to scripts specifically 'fm_mission_controller' this last parameter is 'false/0' when its called after the create rope native above is called for the magnet and 'true/1' after the create rope native above is called for the hook.  \n\nOld name: N_0x877c1eaeac531023"
	},
	"CargobobMagnetGrabVehicle()": {
	  "prefix": "CargobobMagnetGrabVehicle",
	  "body": "CargobobMagnetGrabVehicle",
	  "description": "OLD NAME, PLEASE USE SetCargobobPickupMagnetActive INSTEAD!"
	},
	"SetCargobobPickupMagnetActive()": {
	  "prefix": "SetCargobobPickupMagnetActive",
	  "body": [
		"SetCargobobPickupMagnetActive(${1:Vehicle cargobob}, ${2:BOOL isActive})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nConsole Hash: 0xF57066DA  \nWon't attract or magnetize to any helicopters or planes of course, but that's common sense.  \n\nOld name: CargobobMagnetGrabVehicle"
	},
	"N_0xbcbfcd9d1dac19e2()": {
	  "prefix": "N_0xbcbfcd9d1dac19e2",
	  "body": "N_0xbcbfcd9d1dac19e2",
	  "description": "OLD NAME, PLEASE USE SetCargobobPickupMagnetStrength INSTEAD!"
	},
	"SetCargobobPickupMagnetStrength()": {
	  "prefix": "SetCargobobPickupMagnetStrength",
	  "body": [
		"SetCargobobPickupMagnetStrength(${1:Vehicle cargobob}, ${2:float strength})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nconsole hash 0xCC3CF97D  \n\nOld name: N_0xbcbfcd9d1dac19e2"
	},
	"N_0x30d779de7c4f6dd3()": {
	  "prefix": "N_0x30d779de7c4f6dd3",
	  "body": "N_0x30d779de7c4f6dd3",
	  "description": "OLD NAME, PLEASE USE SetDesiredVerticalFlightPhase INSTEAD!"
	},
	"SetDesiredVerticalFlightPhase()": {
	  "prefix": "SetDesiredVerticalFlightPhase",
	  "body": [
		"SetDesiredVerticalFlightPhase(${1:Vehicle vehicle}, ${2:float angleRatio})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nMulleDK19: This starts moving the VTOL engines towards the specified angle ratio (0f-1f).  \n\nOld name: N_0x30d779de7c4f6dd3"
	},
	"SetConvertibleRoof()": {
	  "prefix": "SetConvertibleRoof",
	  "body": [
		"SetConvertibleRoof(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x465bf26ab9684352()": {
	  "prefix": "N_0x465bf26ab9684352",
	  "body": "N_0x465bf26ab9684352",
	  "description": "OLD NAME, PLEASE USE SetDisableVehiclePetrolTankFires INSTEAD!"
	},
	"SetDisableVehiclePetrolTankFires()": {
	  "prefix": "SetDisableVehiclePetrolTankFires",
	  "body": [
		"SetDisableVehiclePetrolTankFires(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0x465bf26ab9684352"
	},
	"SetDisableVehiclePetrolTankDamage()": {
	  "prefix": "SetDisableVehiclePetrolTankDamage",
	  "body": [
		"SetDisableVehiclePetrolTankDamage(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x97ce68cb032583f0()": {
	  "prefix": "N_0x97ce68cb032583f0",
	  "body": "N_0x97ce68cb032583f0",
	  "description": "OLD NAME, PLEASE USE SetForceHdVehicle INSTEAD!"
	},
	"SetForceHdVehicle()": {
	  "prefix": "SetForceHdVehicle",
	  "body": [
		"SetForceHdVehicle(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0x97ce68cb032583f0"
	},
	"SetFarDrawVehicles()": {
	  "prefix": "SetFarDrawVehicles",
	  "body": [
		"SetFarDrawVehicles(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x37ebbf3117bd6a25()": {
	  "prefix": "N_0x37ebbf3117bd6a25",
	  "body": "N_0x37ebbf3117bd6a25",
	  "description": "OLD NAME, PLEASE USE SetForkliftForkHeight INSTEAD!"
	},
	"SetForkliftForkHeight()": {
	  "prefix": "SetForkliftForkHeight",
	  "body": [
		"SetForkliftForkHeight(${1:Vehicle vehicle}, ${2:float height})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets some values in a vehicle gadget (tow arm, digger arm, etc.). Don't know which one though.  \nI've tested on the towtruck 1 & 2, Dock Lift (Crate Arm), Dozer, and such have no effect. However when used on a Forklift it sets the height of the forks. 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol  \n\nOld name: N_0x37ebbf3117bd6a25"
	},
	"SetGarbageTrucks()": {
	  "prefix": "SetGarbageTrucks",
	  "body": [
		"SetGarbageTrucks(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"SetHeliBladesFullSpeed()": {
	  "prefix": "SetHeliBladesFullSpeed",
	  "body": [
		"SetHeliBladesFullSpeed(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nEquivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);  \nthis native works on planes to?  \n"
	},
	"SetHeliBladesSpeed()": {
	  "prefix": "SetHeliBladesSpeed",
	  "body": [
		"SetHeliBladesSpeed(${1:Vehicle vehicle}, ${2:float speed})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets the speed of the helicopter blades in percentage of the full speed.  \nvehicleHandle: The helicopter.  \nspeed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.  \n"
	},
	"SetHelicopterRollPitchYawMult()": {
	  "prefix": "SetHelicopterRollPitchYawMult",
	  "body": [
		"SetHelicopterRollPitchYawMult(${1:Vehicle helicopter}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nvalue between 0.0 and 1.0  \n"
	},
	"N_0xacfb2463cc22bed2()": {
	  "prefix": "N_0xacfb2463cc22bed2",
	  "body": "N_0xacfb2463cc22bed2",
	  "description": "OLD NAME, PLEASE USE SetLastDrivenVehicle INSTEAD!"
	},
	"SetLastDrivenVehicle()": {
	  "prefix": "SetLastDrivenVehicle",
	  "body": [
		"SetLastDrivenVehicle(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0xacfb2463cc22bed2"
	},
	"SetMissionTrainAsNoLongerNeeded()": {
	  "prefix": "SetMissionTrainAsNoLongerNeeded",
	  "body": [
		"SetMissionTrainAsNoLongerNeeded(${1:Vehicle* train}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\np1 is always 0  \n"
	},
	"SetMissionTrainCoords()": {
	  "prefix": "SetMissionTrainCoords",
	  "body": [
		"SetMissionTrainCoords(${1:Vehicle train}, ${2:float x}, ${3:float y}, ${4:float z})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetParkedVehicleDensityMultiplierThisFrame()": {
	  "prefix": "SetParkedVehicleDensityMultiplierThisFrame",
	  "body": [
		"SetParkedVehicleDensityMultiplierThisFrame(${1:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetNumberOfParkedVehicles()": {
	  "prefix": "SetNumberOfParkedVehicles",
	  "body": [
		"SetNumberOfParkedVehicles(${1:int value})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"SetPedTargettableVehicleDestroy()": {
	  "prefix": "SetPedTargettableVehicleDestroy",
	  "body": [
		"SetPedTargettableVehicleDestroy(${1:Vehicle vehicle}, ${2:int doorIndex}, ${3:int destroyType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nHash collision!!!  \nSET_VEHICLE_I*  \ndestroyType is 1 for opens on damage, 2 for breaks on damage.  \n"
	},
	"SetPedEnabledBikeRingtone()": {
	  "prefix": "SetPedEnabledBikeRingtone",
	  "body": [
		"SetPedEnabledBikeRingtone(${1:Vehicle vehicle}, ${2:Entity entity})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nThis is a hash collision...  \n_IS_VEHICLE_NEAR_ENTITY  \n"
	},
	"N_0xb893215d8d4c015b()": {
	  "prefix": "N_0xb893215d8d4c015b",
	  "body": "N_0xb893215d8d4c015b",
	  "description": "OLD NAME, PLEASE USE SetPlaneMinHeightAboveTerrain INSTEAD!"
	},
	"SetPlaneMinHeightAboveGround()": {
	  "prefix": "SetPlaneMinHeightAboveGround",
	  "body": "SetPlaneMinHeightAboveGround",
	  "description": "OLD NAME, PLEASE USE SetPlaneMinHeightAboveTerrain INSTEAD!"
	},
	"SetPlaneMinHeightAboveTerrain()": {
	  "prefix": "SetPlaneMinHeightAboveTerrain",
	  "body": [
		"SetPlaneMinHeightAboveTerrain(${1:Vehicle plane}, ${2:int height})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0xb893215d8d4c015b\nOld name: SetPlaneMinHeightAboveGround"
	},
	"N_0xad2d28a1afdff131()": {
	  "prefix": "N_0xad2d28a1afdff131",
	  "body": "N_0xad2d28a1afdff131",
	  "description": "OLD NAME, PLEASE USE SetPlaneTurbulenceMultiplier INSTEAD!"
	},
	"SetPlaneTurbulenceMultiplier()": {
	  "prefix": "SetPlaneTurbulenceMultiplier",
	  "body": [
		"SetPlaneTurbulenceMultiplier(${1:Vehicle vehicle}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nThis native sets the turbulence multiplier. It only works for planes.\n0.0 = no turbulence at all.\n1.0 = heavy turbulence.\n\nWorks by just calling it once, does not need to be called every tick.\nOld name: N_0xad2d28a1afdff131"
	},
	"SetPlaybackToUseAi()": {
	  "prefix": "SetPlaybackToUseAi",
	  "body": [
		"SetPlaybackToUseAi(${1:Vehicle vehicle}, ${2:int flag})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetPlaybackSpeed()": {
	  "prefix": "SetPlaybackSpeed",
	  "body": [
		"SetPlaybackSpeed(${1:Vehicle vehicle}, ${2:float speed})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetPlaybackToUseAiTryToRevertBackLater()": {
	  "prefix": "SetPlaybackToUseAiTryToRevertBackLater",
	  "body": [
		"SetPlaybackToUseAiTryToRevertBackLater(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetPlayersLastVehicle()": {
	  "prefix": "SetPlayersLastVehicle",
	  "body": [
		"SetPlayersLastVehicle(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"SetRampVehicleReceivesRampDamage()": {
	  "prefix": "SetRampVehicleReceivesRampDamage",
	  "body": [
		"SetRampVehicleReceivesRampDamage(${1:Vehicle vehicle}, ${2:BOOL receivesDamage})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetRandomBoats()": {
	  "prefix": "SetRandomBoats",
	  "body": [
		"SetRandomBoats(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"SetRandomVehicleDensityMultiplierThisFrame()": {
	  "prefix": "SetRandomVehicleDensityMultiplierThisFrame",
	  "body": [
		"SetRandomVehicleDensityMultiplierThisFrame(${1:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetRandomTrains()": {
	  "prefix": "SetRandomTrains",
	  "body": [
		"SetRandomTrains(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetScriptVehicleGenerator()": {
	  "prefix": "SetScriptVehicleGenerator",
	  "body": [
		"SetScriptVehicleGenerator(${1:int vehicleGenerator}, ${2:BOOL enabled})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOnly called once in the decompiled scripts. Presumably activates the specified generator.  \n"
	},
	"SetRenderTrainAsDerailed()": {
	  "prefix": "SetRenderTrainAsDerailed",
	  "body": [
		"SetRenderTrainAsDerailed(${1:Vehicle train}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nmakes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)  \n"
	},
	"SetTaxiLights()": {
	  "prefix": "SetTaxiLights",
	  "body": [
		"SetTaxiLights(${1:Vehicle vehicle}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nThis is not tested - it's just an assumption.  \nDoesn't seem to work.  I'll try with an int instead. --JT  \nRead the scripts, im dumpass.   \nDoesn't work at all, wether with an bool neither an int  \n                            if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {  \n                                VEHICLE::SET_TAXI_LIGHTS(l_115, 1);  \n                            }  \n"
	},
	"N_0xd4b8e3d1917bc86b()": {
	  "prefix": "N_0xd4b8e3d1917bc86b",
	  "body": "N_0xd4b8e3d1917bc86b",
	  "description": "OLD NAME, PLEASE USE SetSomethingMultiplierThisFrame INSTEAD!"
	},
	"SetSomethingMultiplierThisFrame()": {
	  "prefix": "SetSomethingMultiplierThisFrame",
	  "body": [
		"SetSomethingMultiplierThisFrame(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSET_*_MULTIPLIER_THIS_FRAME  \n\nOld name: N_0xd4b8e3d1917bc86b"
	},
	"SetTrainCruiseSpeed()": {
	  "prefix": "SetTrainCruiseSpeed",
	  "body": [
		"SetTrainCruiseSpeed(${1:Vehicle train}, ${2:float speed})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0xf06a16ca55d138d8()": {
	  "prefix": "N_0xf06a16ca55d138d8",
	  "body": "N_0xf06a16ca55d138d8",
	  "description": "OLD NAME, PLEASE USE SetUseHigherVehicleJumpForce INSTEAD!"
	},
	"SetUseHigherVehicleJumpForce()": {
	  "prefix": "SetUseHigherVehicleJumpForce",
	  "body": [
		"SetUseHigherVehicleJumpForce(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nAllows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).\nOld name: N_0xf06a16ca55d138d8"
	},
	"SetTowTruckCraneRaised()": {
	  "prefix": "SetTowTruckCraneRaised",
	  "body": "SetTowTruckCraneRaised",
	  "description": "OLD NAME, PLEASE USE SetTowTruckCraneHeight INSTEAD!"
	},
	"SetTowTruckCraneHeight()": {
	  "prefix": "SetTowTruckCraneHeight",
	  "body": [
		"SetTowTruckCraneHeight(${1:Vehicle towTruck}, ${2:float height})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.  \n\nOld name: SetTowTruckCraneRaised"
	},
	"SetVehicleAllowNoPassengersLockon()": {
	  "prefix": "SetVehicleAllowNoPassengersLockon",
	  "body": [
		"SetVehicleAllowNoPassengersLockon(${1:Vehicle veh}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nMakes the vehicle accept no passengers.  \n"
	},
	"SetTrainSpeed()": {
	  "prefix": "SetTrainSpeed",
	  "body": [
		"SetTrainSpeed(${1:Vehicle train}, ${2:float speed})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"SetVehicleAutomaticallyAttaches()": {
	  "prefix": "SetVehicleAutomaticallyAttaches",
	  "body": [
		"SetVehicleAutomaticallyAttaches(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n\nPlease change to void.  \n"
	},
	"SetVehicleAlarm()": {
	  "prefix": "SetVehicleAlarm",
	  "body": [
		"SetVehicleAlarm(${1:Vehicle vehicle}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xf8ebccc96adb9fb7()": {
	  "prefix": "N_0xf8ebccc96adb9fb7",
	  "body": "N_0xf8ebccc96adb9fb7",
	  "description": "OLD NAME, PLEASE USE SetVehicleBulldozerArmPosition INSTEAD!"
	},
	"SetVehicleBulldozerArmPosition()": {
	  "prefix": "SetVehicleBulldozerArmPosition",
	  "body": [
		"SetVehicleBulldozerArmPosition(${1:Vehicle vehicle}, ${2:float position}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nSets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).\nOld name: N_0xf8ebccc96adb9fb7"
	},
	"SetVehicleBodyHealth()": {
	  "prefix": "SetVehicleBodyHealth",
	  "body": [
		"SetVehicleBodyHealth(${1:Vehicle vehicle}, ${2:float value})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\np2 often set to 1000.0 in the decompiled scripts.  \n"
	},
	"SetVehicleBurnout()": {
	  "prefix": "SetVehicleBurnout",
	  "body": [
		"SetVehicleBurnout(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOn accelerating, spins the driven wheels with the others braked, so you don't go anywhere.  \n"
	},
	"SetVehicleBrakeLights()": {
	  "prefix": "SetVehicleBrakeLights",
	  "body": [
		"SetVehicleBrakeLights(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleCanBeTargetted()": {
	  "prefix": "SetVehicleCanBeTargetted",
	  "body": [
		"SetVehicleCanBeTargetted(${1:Vehicle vehicle}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nThis has not yet been tested - it's just an assumption of what the types could be.  \n"
	},
	"N_0x300504b23bd3b711()": {
	  "prefix": "N_0x300504b23bd3b711",
	  "body": "N_0x300504b23bd3b711",
	  "description": "OLD NAME, PLEASE USE SetVehicleCanBeUsedByFleeingPeds INSTEAD!"
	},
	"SetVehicleCanBeUsedByFleeingPeds()": {
	  "prefix": "SetVehicleCanBeUsedByFleeingPeds",
	  "body": [
		"SetVehicleCanBeUsedByFleeingPeds(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0x300504b23bd3b711"
	},
	"SetVehicleCanBreak()": {
	  "prefix": "SetVehicleCanBreak",
	  "body": [
		"SetVehicleCanBreak(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleColourCombination()": {
	  "prefix": "SetVehicleColourCombination",
	  "body": [
		"SetVehicleColourCombination(${1:Vehicle vehicle}, ${2:int colorCombination})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nSets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).\n\nRange of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)"
	},
	"SetVehicleCanBeVisiblyDamaged()": {
	  "prefix": "SetVehicleCanBeVisiblyDamaged",
	  "body": [
		"SetVehicleCanBeVisiblyDamaged(${1:Vehicle vehicle}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"GetVehicleDeformationGetTree()": {
	  "prefix": "GetVehicleDeformationGetTree",
	  "body": "GetVehicleDeformationGetTree",
	  "description": "OLD NAME, PLEASE USE SetVehicleCeilingHeight INSTEAD!"
	},
	"SetVehicleCeilingHeight()": {
	  "prefix": "SetVehicleCeilingHeight",
	  "body": [
		"SetVehicleCeilingHeight(${1:Vehicle vehicle}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nPreviously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)  \nfrom Decrypted Scripts I found  \nVEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2/*2*/], 420.0);  \n\nOld name: GetVehicleDeformationGetTree"
	},
	"SetVehicleCustomPrimaryColour()": {
	  "prefix": "SetVehicleCustomPrimaryColour",
	  "body": [
		"SetVehicleCustomPrimaryColour(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n"
	},
	"SetVehicleDamage()": {
	  "prefix": "SetVehicleDamage",
	  "body": [
		"SetVehicleDamage(${1:Vehicle vehicle}, ${2:float xOffset}, ${3:float yOffset}, ${4:float zOffset}, ${5:float damage}, ${6:float radius}, ${7:BOOL p6})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nApply damage to vehicle at a location. Location is relative to vehicle model (not world).  \nRadius of effect damage applied in a sphere at impact location  \n"
	},
	"SetVehicleColours()": {
	  "prefix": "SetVehicleColours",
	  "body": [
		"SetVehicleColours(${1:Vehicle vehicle}, ${2:int colorPrimary}, ${3:int colorSecondary})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\ncolorPrimary & colorSecondary are the paint index for the vehicle.  \nFor a list of valid paint indexes, view: pastebin.com/pwHci0xK  \n-------------------------------------------------------------------------  \nUse this to get the number of color indices: pastebin.com/RQEeqTSM  \nNote: minimum color index is 0, maximum color index is (numColorIndices - 1)  \n"
	},
	"SetVehicleDashboardColour()": {
	  "prefix": "SetVehicleDashboardColour",
	  "body": [
		"SetVehicleDashboardColour(${1:Vehicle vehicle}, ${2:int color})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleCustomSecondaryColour()": {
	  "prefix": "SetVehicleCustomSecondaryColour",
	  "body": [
		"SetVehicleCustomSecondaryColour(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\np1, p2, p3 are RGB values for color (255,0,0 for Red, ect)  \n"
	},
	"SetVehicleDeformationFixed()": {
	  "prefix": "SetVehicleDeformationFixed",
	  "body": [
		"SetVehicleDeformationFixed(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nThis fixes the deformation of a vehicle but the vehicle health doesn't improve  \n"
	},
	"SetVehicleDensityMultiplierThisFrame()": {
	  "prefix": "SetVehicleDensityMultiplierThisFrame",
	  "body": [
		"SetVehicleDensityMultiplierThisFrame(${1:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n**Usage:**\n\n-   Use this native inside a looped function.\n-   Values:\n    -   `0.0` = no vehicles on streets\n    -   `1.0` = normal vehicles on streets\n\n`1.0` Seems to be the maximum."
	},
	"SetVehicleDirtLevel()": {
	  "prefix": "SetVehicleDirtLevel",
	  "body": [
		"SetVehicleDirtLevel(${1:Vehicle vehicle}, ${2:float dirtLevel})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nYou can't use values greater than 15.0  \nYou can see why here: pastebin.com/Wbn34fGD  \nAlso, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.  \n"
	},
	"SetVehicleDoorBroken()": {
	  "prefix": "SetVehicleDoorBroken",
	  "body": [
		"SetVehicleDoorBroken(${1:Vehicle vehicle}, ${2:int doorIndex}, ${3:BOOL deleteDoor})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\ndoorIndex:  \n0 = Front Right Door  \n1 = Front Left Door  \n2 = Back Right Door  \n3 = Back Left Door  \n4 = Hood  \n5 = Trunk  \nChanged last paramater from CreateDoorObject To NoDoorOnTheFloor because when on false, the door object is created,and not created when on true...the former parameter name was counter intuitive...(by Calderon)  \n"
	},
	"SetVehicleDoorBreakable()": {
	  "prefix": "SetVehicleDoorBreakable",
	  "body": "SetVehicleDoorBreakable",
	  "description": "OLD NAME, PLEASE USE SetVehicleDoorCanBreak INSTEAD!"
	},
	"SetVehicleDoorCanBreak()": {
	  "prefix": "SetVehicleDoorCanBreak",
	  "body": [
		"SetVehicleDoorCanBreak(${1:Vehicle vehicle}, ${2:int doorIndex}, ${3:BOOL isBreakable})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nKeeps Vehicle Doors/Hood/Trunk from breaking off  \n\nOld name: SetVehicleDoorBreakable"
	},
	"SetVehicleDoorControl()": {
	  "prefix": "SetVehicleDoorControl",
	  "body": [
		"SetVehicleDoorControl(${1:Vehicle vehicle}, ${2:int doorIndex}, ${3:int speed}, ${4:float angle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\ndoorIndex:  \n0 = Front Left Door (driver door)  \n1 = Front Right Door  \n2 = Back Left Door  \n3 = Back Right Door  \n4 = Hood  \n5 = Trunk  \n6 = Trunk2  \np2:  \nmostly use 0 and 1, very rare using 3 and 5  \np3:  \nIt seems it is an angle  \nExample in VB:   \n    Public Shared Sub Set_Vehicle_Door_Angle(Vehicle As Vehicle, Door As VehicleDoor, Angle As Single)  \n        Native.Function.Call(Hash.SET_VEHICLE_DOOR_CONTROL, Vehicle.Handle, Door, 1, Angle)  \n    End Sub  \nI'm Not MentaL  \nsfink: p2 is speed, 5 is fast, 1 is slow 3 is medium  \n"
	},
	"SetVehicleDoorLatched()": {
	  "prefix": "SetVehicleDoorLatched",
	  "body": [
		"SetVehicleDoorLatched(${1:Vehicle vehicle}, ${2:int doorIndex}, ${3:BOOL forceClose}, ${4:BOOL lock}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nWhen lock is false other entities can overwrite it.  \n"
	},
	"SetVehicleDoorShut()": {
	  "prefix": "SetVehicleDoorShut",
	  "body": [
		"SetVehicleDoorShut(${1:Vehicle vehicle}, ${2:int doorIndex}, ${3:BOOL closeInstantly})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\ndoorIndex:  \n0 = Front Left Door  \n1 = Front Right Door  \n2 = Back Left Door  \n3 = Back Right Door  \n4 = Hood  \n5 = Trunk  \n6 = Trunk2  \n"
	},
	"SetVehicleDoorOpen()": {
	  "prefix": "SetVehicleDoorOpen",
	  "body": [
		"SetVehicleDoorOpen(${1:Vehicle vehicle}, ${2:int doorIndex}, ${3:BOOL loose}, ${4:BOOL openInstantly})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\ndoorIndex:  \n0 = Front Left Door  \n1 = Front Right Door  \n2 = Back Left Door  \n3 = Back Right Door  \n4 = Hood  \n5 = Trunk  \n6 = Back  \n7 = Back2  \n"
	},
	"SetVehicleDoorsLocked()": {
	  "prefix": "SetVehicleDoorsLocked",
	  "body": [
		"SetVehicleDoorsLocked(${1:Vehicle vehicle}, ${2:int doorLockStatus})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\n1   \n2 - CARLOCK_LOCKED (locked)  \n3   \n4 - CARLOCK_LOCKED_PLAYER_INSIDE (can get in, can't leave)  \n(maybe, these are leftovers from GTA:VC)  \n5   \n6   \n7   \n(source: GTA VC miss2 leak, matching constants for 0/2/4, testing)  \nThey use 10 in am_mp_property_int, don't know what it does atm.  \n"
	},
	"SetVehicleDoorsLockedForAllPlayers()": {
	  "prefix": "SetVehicleDoorsLockedForAllPlayers",
	  "body": [
		"SetVehicleDoorsLockedForAllPlayers(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nAfter some analysis, I've decided that these are what the parameters are.  \nWe can see this being used in R* scripts such as \"am_mp_property_int.ysc.c4\":  \nl_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);  \n...  \nVEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);  \n"
	},
	"SetVehicleDoorsLockedForPlayer()": {
	  "prefix": "SetVehicleDoorsLockedForPlayer",
	  "body": [
		"SetVehicleDoorsLockedForPlayer(${1:Vehicle vehicle}, ${2:Player player}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleDoorsShut()": {
	  "prefix": "SetVehicleDoorsShut",
	  "body": [
		"SetVehicleDoorsShut(${1:Vehicle vehicle}, ${2:BOOL closeInstantly})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nCloses all doors of a vehicle:  \n"
	},
	"SetVehicleDoorsLockedForTeam()": {
	  "prefix": "SetVehicleDoorsLockedForTeam",
	  "body": [
		"SetVehicleDoorsLockedForTeam(${1:Vehicle vehicle}, ${2:int team}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x068f64f2470f9656()": {
	  "prefix": "N_0x068f64f2470f9656",
	  "body": "N_0x068f64f2470f9656",
	  "description": "OLD NAME, PLEASE USE SetVehicleDropsMoneyWhenBlownUp INSTEAD!"
	},
	"SetVehicleCreatesMoneyPickupsWhenExploded()": {
	  "prefix": "SetVehicleCreatesMoneyPickupsWhenExploded",
	  "body": "SetVehicleCreatesMoneyPickupsWhenExploded",
	  "description": "OLD NAME, PLEASE USE SetVehicleDropsMoneyWhenBlownUp INSTEAD!"
	},
	"SetVehicleDropsMoneyWhenBlownUp()": {
	  "prefix": "SetVehicleDropsMoneyWhenBlownUp",
	  "body": [
		"SetVehicleDropsMoneyWhenBlownUp(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nMoney pickups are created around cars when they explodes. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seems to give the same amount of money.  \nyoutu.be/3arlUxzHl5Y   \ni.imgur.com/WrNpYFs.jpg  \nFrom the scripts:  \nVEHICLE::_068F64F2470F9656(l_36, 0);  \nFound a \"correct\" name for this :P  \n_dead_vehicle_pickups_dies_when_set_exploded_destroy_it_drops_on_money  \nSET_VEHICLE_D* or SET_VEHICLE_E*  \n\nOld name: N_0x068f64f2470f9656\nOld name: SetVehicleCreatesMoneyPickupsWhenExploded"
	},
	"SetVehicleEngineOn()": {
	  "prefix": "SetVehicleEngineOn",
	  "body": [
		"SetVehicleEngineOn(${1:Vehicle vehicle}, ${2:BOOL value}, ${3:BOOL instantly}, ${4:BOOL otherwise})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nStarts or stops the engine on the specified vehicle.  \nvehicle: The vehicle to start or stop the engine on.  \nvalue: true to turn the vehicle on; false to turn it off.  \ninstantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.  \n--------------------------------------  \nfrom what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?  \n--------------------------------------  \nAnd what's with BOOL otherwise, what does it do???  \n"
	},
	"SetVehicleEngineCanDegrade()": {
	  "prefix": "SetVehicleEngineCanDegrade",
	  "body": [
		"SetVehicleEngineCanDegrade(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleEngineHealth()": {
	  "prefix": "SetVehicleEngineHealth",
	  "body": [
		"SetVehicleEngineHealth(${1:Vehicle vehicle}, ${2:float health})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\n1000 is max health  \nBegins leaking gas at around 650 health  \n-999.90002441406 appears to be minimum health, although nothing special occurs <- false statement  \n-------------------------  \nMinimum: -4000  \nMaximum: 1000  \n-4000: Engine is destroyed  \n0 and below: Engine catches fire and health rapidly declines  \n300: Engine is smoking and losing functionality  \n1000: Engine is perfect  \n"
	},
	"SetVehicleEngineTorqueMultiplier()": {
	  "prefix": "SetVehicleEngineTorqueMultiplier",
	  "body": [
		"SetVehicleEngineTorqueMultiplier(${1:Vehicle vehicle}, ${2:float value})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\n<1.0 - Decreased torque  \n=1.0 - Default torque  \n>1.0 - Increased torque  \nNegative values will cause the vehicle to go backwards instead of forwards while accelerating.  \nvalue - is between 0.2 and 1.8 in the decompiled scripts.   \nThis needs to be called every frame to take effect.  \n"
	},
	"SetVehiclePaintFade()": {
	  "prefix": "SetVehiclePaintFade",
	  "body": "SetVehiclePaintFade",
	  "description": "OLD NAME, PLEASE USE SetVehicleEnveffScale INSTEAD!"
	},
	"SetVehicleEnveffScale()": {
	  "prefix": "SetVehicleEnveffScale",
	  "body": [
		"SetVehicleEnveffScale(${1:Vehicle vehicle}, ${2:float fade})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nformerly known as _SET_VEHICLE_PAINT_FADE  \nThe parameter fade is a value from 0-1, where 0 is fresh paint.  \n------------------------------------------------------------------------------------  \nThe actual value isn't stored as a float but as an unsigned char (BYTE). More info here: pastebin.com/r0h6EM5s  \n--------------  \nSeparate Person: I didn't want to be rude and remove it, but whom ever posted that pastebin above please remove it as the paste says it has been removed.  \n\nOld name: SetVehiclePaintFade"
	},
	"SetVehicleEnginePowerMultiplier()": {
	  "prefix": "SetVehicleEnginePowerMultiplier",
	  "body": [
		"SetVehicleEnginePowerMultiplier(${1:Vehicle vehicle}, ${2:float value})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nVehicle power multiplier.  \nDoes not have to be looped each frame. Can be set once.  \nValues lower than 1f don't work.  \nNote: If the value is set with GET_RANDOM_FLOAT_IN_RANGE, the vehicle will have an absurdly high ammount of power, and will become almost undrivable for the player or NPCs. The range doesn't seem to matter.  \nAn high value like 10000000000f will visually remove the wheels that apply the power (front wheels for FWD, rear wheels for RWD), but the power multiplier will still apply, and the wheels still work.  \n------  \nvalue is a percentage bump which affects directly the parameter known as fInitialDriveForce in handling.meta. For example:  \nVEHICLE::_SET_VEHICLE_ENGINE_POWER_MULTIPLIER(myVehicle, 30.0)  \nwill have this effect: DriveForce *= 1.3  \n"
	},
	"N_0xb5c51b5502e85e83()": {
	  "prefix": "N_0xb5c51b5502e85e83",
	  "body": "N_0xb5c51b5502e85e83",
	  "description": "OLD NAME, PLEASE USE SetVehicleExclusiveDriver_2 INSTEAD!"
	},
	"SetVehicleExclusiveDriver_2()": {
	  "prefix": "SetVehicleExclusiveDriver_2",
	  "body": [
		"SetVehicleExclusiveDriver_2(${1:Vehicle vehicle}, ${2:Ped ped}, ${3:int p2})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: N_0xb5c51b5502e85e83"
	},
	"N_0x41062318f23ed854()": {
	  "prefix": "N_0x41062318f23ed854",
	  "body": "N_0x41062318f23ed854",
	  "description": "OLD NAME, PLEASE USE SetVehicleExclusiveDriver INSTEAD!"
	},
	"SetVehicleExclusiveDriver()": {
	  "prefix": "SetVehicleExclusiveDriver",
	  "body": [
		"SetVehicleExclusiveDriver(${1:Vehicle vehicle}, ${2:Ped ped})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSeems according to TU27 X360 Scripts, this has 3 arguments as well.  \nSET_VEHICLE_EXCLUSIVE_DRIVER(vehicle, 0, 0); in freemode.c  \nIn case 5 of a switch case, is the only time it shows Arg2 being PLAYER_PED_ID(), otherwise it's 0. Arg3 always seems to be 0.  \n\nOld name: N_0x41062318f23ed854"
	},
	"SetVehicleExtra()": {
	  "prefix": "SetVehicleExtra",
	  "body": [
		"SetVehicleExtra(${1:Vehicle vehicle}, ${2:int extraId}, ${3:BOOL disable})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nNote: only some vehicle have extras  \nextra ids are from 1 - 9 depending on the vehicle  \n-------------------------------------------------  \n^ not sure if outdated or simply wrong. Max extra ID for b944 is 14  \n-------------------------------------------------  \np2 is not a on/off toggle. mostly 0 means on and 1 means off.  \nnot sure if it really should be a BOOL.  \n-------------------------------------------------  \nConfirmed p2 does not work as a bool. Changed to int. [0=on, 1=off]  \n"
	},
	"SetVehicleExplodesOnHighExplosionDamage()": {
	  "prefix": "SetVehicleExplodesOnHighExplosionDamage",
	  "body": [
		"SetVehicleExplodesOnHighExplosionDamage(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.  \n"
	},
	"SetVehicleFixed()": {
	  "prefix": "SetVehicleFixed",
	  "body": [
		"SetVehicleFixed(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleExtraColours()": {
	  "prefix": "SetVehicleExtraColours",
	  "body": [
		"SetVehicleExtraColours(${1:Vehicle vehicle}, ${2:int pearlescentColor}, ${3:int wheelColor})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nThey use the same color indexs as SET_VEHICLE_COLOURS.  \n"
	},
	"SetVehicleForwardSpeed()": {
	  "prefix": "SetVehicleForwardSpeed",
	  "body": [
		"SetVehicleForwardSpeed(${1:Vehicle vehicle}, ${2:float speed})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.  \nSpeed is in meters per second  \nYou can convert meters/s to mph here:  \nhttp://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm  \n"
	},
	"SetVehicleFrictionOverride()": {
	  "prefix": "SetVehicleFrictionOverride",
	  "body": [
		"SetVehicleFrictionOverride(${1:Vehicle vehicle}, ${2:float friction})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSeems to be related to the metal parts, not tyres (like i was expecting lol)  \nMust be called every tick.  \n"
	},
	"SetVehicleFullbeam()": {
	  "prefix": "SetVehicleFullbeam",
	  "body": [
		"SetVehicleFullbeam(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nIt switch to highbeam when p1 is set to true.  \n"
	},
	"SetVehicleGravity()": {
	  "prefix": "SetVehicleGravity",
	  "body": [
		"SetVehicleGravity(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x260be8f09e326a20()": {
	  "prefix": "N_0x260be8f09e326a20",
	  "body": "N_0x260be8f09e326a20",
	  "description": "OLD NAME, PLEASE USE SetVehicleHalt INSTEAD!"
	},
	"SetVehicleHalt()": {
	  "prefix": "SetVehicleHalt",
	  "body": [
		"SetVehicleHalt(${1:Vehicle vehicle}, ${2:float distance}, ${3:int killEngine}, ${4:BOOL unknown})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nThis native makes the vehicle stop immediately, as happens when we enter a MP garage.  \n. distance defines how far it will travel until stopping. Garage doors use 3.0.  \n. If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.  \n\nOld name: N_0x260be8f09e326a20"
	},
	"SetVehicleHandbrake()": {
	  "prefix": "SetVehicleHandbrake",
	  "body": [
		"SetVehicleHandbrake(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleHasBeenOwnedByPlayer()": {
	  "prefix": "SetVehicleHasBeenOwnedByPlayer",
	  "body": [
		"SetVehicleHasBeenOwnedByPlayer(${1:Vehicle vehicle}, ${2:BOOL owned})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleHasStrongAxles()": {
	  "prefix": "SetVehicleHasStrongAxles",
	  "body": [
		"SetVehicleHasStrongAxles(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nif true, axles won't bend.  \n"
	},
	"N_0xe41033b25d003a07()": {
	  "prefix": "N_0xe41033b25d003a07",
	  "body": "N_0xe41033b25d003a07",
	  "description": "OLD NAME, PLEASE USE SetVehicleHeadlightsColour INSTEAD!"
	},
	"SetVehicleHeadlightsColour()": {
	  "prefix": "SetVehicleHeadlightsColour",
	  "body": [
		"SetVehicleHeadlightsColour(${1:Vehicle vehicle}, ${2:int color})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\ncolor is the paint index for the vehicle.\nPaint index goes from 0 to 12.\nBe aware that it only works on xenon lights.\n\nYou can find the list of colors and ids here: [\\_GET_VEHICLE_HEADLIGHTS_COLOUR](#_0x3DFF319A831E0CDB)\nOld name: N_0xe41033b25d003a07"
	},
	"SetVehicleInteriorColour()": {
	  "prefix": "SetVehicleInteriorColour",
	  "body": [
		"SetVehicleInteriorColour(${1:Vehicle vehicle}, ${2:int color})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0x99c82f8a139f3e4e()": {
	  "prefix": "N_0x99c82f8a139f3e4e",
	  "body": "N_0x99c82f8a139f3e4e",
	  "description": "OLD NAME, PLEASE USE SetVehicleHudSpecialAbilityBarActive INSTEAD!"
	},
	"SetVehicleHudSpecialAbilityBarActive()": {
	  "prefix": "SetVehicleHudSpecialAbilityBarActive",
	  "body": [
		"SetVehicleHudSpecialAbilityBarActive(${1:Vehicle vehicle}, ${2:BOOL active})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nconsole hash: 0x71CDD52F  \n\nOld name: N_0x99c82f8a139f3e4e"
	},
	"SetVehicleInteriorlight()": {
	  "prefix": "SetVehicleInteriorlight",
	  "body": [
		"SetVehicleInteriorlight(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleIndicatorLights()": {
	  "prefix": "SetVehicleIndicatorLights",
	  "body": [
		"SetVehicleIndicatorLights(${1:Vehicle vehicle}, ${2:int turnSignal}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets the turn signal enabled for a vehicle.  \nSet turnSignal to 1 for left light, 0 for right light.  \n"
	},
	"SetVehicleIsStolen()": {
	  "prefix": "SetVehicleIsStolen",
	  "body": [
		"SetVehicleIsStolen(${1:Vehicle vehicle}, ${2:BOOL isStolen})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"SetVehicleIsConsideredByPlayer()": {
	  "prefix": "SetVehicleIsConsideredByPlayer",
	  "body": [
		"SetVehicleIsConsideredByPlayer(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSetting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.  \n"
	},
	"N_0xb8fbc8b1330ca9b4()": {
	  "prefix": "N_0xb8fbc8b1330ca9b4",
	  "body": "N_0xb8fbc8b1330ca9b4",
	  "description": "OLD NAME, PLEASE USE SetVehicleJetEngineOn INSTEAD!"
	},
	"SetVehicleJetEngineOn()": {
	  "prefix": "SetVehicleJetEngineOn",
	  "body": [
		"SetVehicleJetEngineOn(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nVEHICLE::SET_VEHICLE_ENGINE_ON is not enough to start jet engines when not inside the vehicle. But with this native set to true it works: youtu.be/OK0ps2fDpxs   \ni.imgur.com/7XA14pX.png  \nCertain planes got jet engines.  \nvoid VEHICLE::_SET_VEHICLE_JET_ENGINE_ON(scrNativeCallContext *args)  \n{  \n  bool bOn; // bl@1  \n  CVehicle *pVehicle; // rax@1  \n  scrNativeCallContextArgStruct *pArgs; // rax@1  \n  pArgs = args->pArgs;  \n  bOn = pArgs->a2.INT32 != 0;  \n  pVehicle = getEntityAddressIfVehicle(pArgs->a1.INT32);  \n  if ( pVehicle )  \n  {  \n    pVehicle->bitmapBulletProofTires &= 0xFBu;  \n    pVehicle->bitmapBulletProofTires |= 4 * bOn;  \n  }  \n} // sfink  \n\nOld name: N_0xb8fbc8b1330ca9b4"
	},
	"SetVehicleIsWanted()": {
	  "prefix": "SetVehicleIsWanted",
	  "body": [
		"SetVehicleIsWanted(${1:Vehicle vehicle}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets the wanted state of this vehicle.  \n"
	},
	"SetVehicleLights()": {
	  "prefix": "SetVehicleLights",
	  "body": [
		"SetVehicleLights(${1:Vehicle vehicle}, ${2:int state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nset's if the vehicle has lights or not.  \nnot an on off toggle.  \np1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams  \np1 = 1 ;vehicle doesn't have lights, always off  \np1 = 2 ;vehicle has always on lights  \np1 = 3 ;or even larger like 4,5,... normal lights like =1  \nnote1: when using =2 on day it's lowbeam,highbeam  \nbut at night it's lowbeam,lowbeam,highbeam  \nnote2: when using =0 it's affected by day or night for highbeams don't exist in daytime.  \n"
	},
	"SetVehicleLightMultiplier()": {
	  "prefix": "SetVehicleLightMultiplier",
	  "body": [
		"SetVehicleLightMultiplier(${1:Vehicle vehicle}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nmultiplier = brightness of head lights.  \nthis value isn't capped afaik.  \nmultiplier = 0.0 no lights  \nmultiplier = 1.0 default game value  \n"
	},
	"SetVehicleLivery()": {
	  "prefix": "SetVehicleLivery",
	  "body": [
		"SetVehicleLivery(${1:Vehicle vehicle}, ${2:int liveryIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nNote: Only seems to work on Emergency Vehicles  \n"
	},
	"N_0xbaa045b4e42f3c06()": {
	  "prefix": "N_0xbaa045b4e42f3c06",
	  "body": "N_0xbaa045b4e42f3c06",
	  "description": "OLD NAME, PLEASE USE SetVehicleMaxSpeed INSTEAD!"
	},
	"SetVehicleMaxSpeed()": {
	  "prefix": "SetVehicleMaxSpeed",
	  "body": [
		"SetVehicleMaxSpeed(${1:Vehicle vehicle}, ${2:float speed})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nThis native sets a maximum speed for a vehicle.\nOld name: N_0xbaa045b4e42f3c06"
	},
	"N_0x1fd09e7390a74d54()": {
	  "prefix": "N_0x1fd09e7390a74d54",
	  "body": "N_0x1fd09e7390a74d54",
	  "description": "OLD NAME, PLEASE USE SetVehicleLightsMode INSTEAD!"
	},
	"SetVehicleLightsMode()": {
	  "prefix": "SetVehicleLightsMode",
	  "body": [
		"SetVehicleLightsMode(${1:Vehicle vehicle}, ${2:int p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\np1 can be either 0, 1 or 2.  \nDetermines how vehicle lights behave when toggled.  \n0 = Default (Lights can be toggled between off, normal and high beams)  \n1 = Lights Disabled (Lights are fully disabled, cannot be toggled)  \n2 = Always On (Lights can be toggled between normal and high beams)  \n\nOld name: N_0x1fd09e7390a74d54"
	},
	"SetVehicleLodMultiplier()": {
	  "prefix": "SetVehicleLodMultiplier",
	  "body": [
		"SetVehicleLodMultiplier(${1:Vehicle vehicle}, ${2:float multiplier})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleModColor_2()": {
	  "prefix": "SetVehicleModColor_2",
	  "body": [
		"SetVehicleModColor_2(${1:Vehicle vehicle}, ${2:int paintType}, ${3:int color})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nChanges the secondary paint type and color  \npaintType:  \n0: Normal  \n1: Metallic  \n2: Pearl  \n3: Matte  \n4: Metal  \n5: Chrome  \ncolor: number of the color  \n"
	},
	"SetVehicleMod()": {
	  "prefix": "SetVehicleMod",
	  "body": [
		"SetVehicleMod(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex}, ${4:BOOL customTires})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nIn b944, there are 50 (0 - 49) mod types.  \nSets the vehicle mod.  \nThe vehicle must have a mod kit first.  \nAny out of range ModIndex is stock.  \n#Mod Type  \nSpoilers   \nFront Bumper   \nRear Bumper   \nSide Skirt   \nExhaust   \nFrame   \nGrille   \nHood   \nFender   \nRight Fender   \nRoof   \nEngine   \nBrakes   \nTransmission   \nHorns - 14 (modIndex from 0 to 51)  \nSuspension   \nArmor   \nFront Wheels   \nBack Wheels - 24 //only for motocycles  \nPlate holders   \nTrim Design   \nOrnaments   \nDial Design   \nSteering Wheel   \nShifter Leavers   \nPlaques   \nHydraulics   \nLivery   \nENUMS: pastebin.com/QzEAn02v  \n"
	},
	"SetVehicleModelIsSuppressed()": {
	  "prefix": "SetVehicleModelIsSuppressed",
	  "body": [
		"SetVehicleModelIsSuppressed(${1:Hash model}, ${2:BOOL suppressed})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nseems to make the vehicle stop spawning naturally in traffic. Here's an essential example:  \nVEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY(\"taco\"), true);  \ngod I hate taco vans  \nConfirmed to work? Needs to be looped? Can not get it to work.  \n"
	},
	"SetVehicleModColor_1()": {
	  "prefix": "SetVehicleModColor_1",
	  "body": [
		"SetVehicleModColor_1(${1:Vehicle vehicle}, ${2:int paintType}, ${3:int color}, ${4:int p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\npaintType:  \n0: Normal  \n1: Metallic  \n2: Pearl  \n3: Matte  \n4: Metal  \n5: Chrome  \ncolor: number of the color.  \np3 seems to always be 0.  \n"
	},
	"SetVehicleNameDebug()": {
	  "prefix": "SetVehicleNameDebug",
	  "body": [
		"SetVehicleNameDebug(${1:Vehicle vehicle}, ${2:char* name})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nNOTE: Debugging functions are not present in the retail version of the game.  \n"
	},
	"SetVehicleModKit()": {
	  "prefix": "SetVehicleModKit",
	  "body": [
		"SetVehicleModKit(${1:Vehicle vehicle}, ${2:int modKit})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSet modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.  \n---------  \nSetting the modKit to 0 also seems to load some livery related vehicle information. For example, using GET_LIVERY_NAME() will return NULL if you haven't set the modKit to 0 in advance. As soon as you set it to 0, GET_LIVERY_NAME() will work properly.  \n"
	},
	"SetVehicleNeedsToBeHotwired()": {
	  "prefix": "SetVehicleNeedsToBeHotwired",
	  "body": [
		"SetVehicleNeedsToBeHotwired(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleNeonLightEnabled()": {
	  "prefix": "SetVehicleNeonLightEnabled",
	  "body": [
		"SetVehicleNeonLightEnabled(${1:Vehicle vehicle}, ${2:int index}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets the neon lights of the specified vehicle on/off.  \nIndices:  \n0 = Left  \n1 = Right  \n2 = Front  \n3 = Back  \n"
	},
	"SetVehicleNeonLightsColour()": {
	  "prefix": "SetVehicleNeonLightsColour",
	  "body": [
		"SetVehicleNeonLightsColour(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nSets the color of the neon lights on the specified vehicle.\n\nRGB values and colour names taken from the decompiled scripts:\n\n| Colour        |  R  |  G  |  B  |\n| ------------- | :-: | :-: | :-: |\n| White         | 222 | 222 | 255 |\n| Blue          |  2  |  21 | 255 |\n| Electric Blue |  3  |  83 | 255 |\n| Mint Green    |  0  | 255 | 140 |\n| Lime Green    |  94 | 255 |  1  |\n| Yellow        | 255 | 255 |  0  |\n| Golden Shower | 255 | 150 |  0  |\n| Orange        | 255 |  62 |  0  |\n| Red           | 255 |  1  |  1  |\n| Pony Pink     | 255 |  50 | 100 |\n| Hot Pink      | 255 |  5  | 190 |\n| Purple        |  35 |  1  | 255 |\n| Blacklight    |  15 |  3  | 255 |"
	},
	"SetVehicleNumberPlateText()": {
	  "prefix": "SetVehicleNumberPlateText",
	  "body": [
		"SetVehicleNumberPlateText(${1:Vehicle vehicle}, ${2:char* plateText})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets a vehicle's license plate text.  8 chars maximum.  \nExample:  \nPed playerPed = PLAYER::PLAYER_PED_ID();  \nVehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);  \nchar *plateText = \"KING\";  \nVEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);  \n"
	},
	"SetVehicleNumberPlateTextIndex()": {
	  "prefix": "SetVehicleNumberPlateTextIndex",
	  "body": [
		"SetVehicleNumberPlateTextIndex(${1:Vehicle vehicle}, ${2:int plateIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nPlates:  \nBlue/White   \nYellow/black   \nYellow/Blue   \nBlue/White2   \nBlue/White3   \nYankton  \n"
	},
	"SetVehicleOnGroundProperly()": {
	  "prefix": "SetVehicleOnGroundProperly",
	  "body": [
		"SetVehicleOnGroundProperly(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nSets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.  \nsfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.  \n"
	},
	"SetVehicleOutOfControl()": {
	  "prefix": "SetVehicleOutOfControl",
	  "body": [
		"SetVehicleOutOfControl(${1:Vehicle vehicle}, ${2:BOOL killDriver}, ${3:BOOL explodeOnImpact})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nTested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.  \n"
	},
	"SetVehicleParachuteActive()": {
	  "prefix": "SetVehicleParachuteActive",
	  "body": [
		"SetVehicleParachuteActive(${1:Vehicle vehicle}, ${2:BOOL active})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehiclePetrolTankHealth()": {
	  "prefix": "SetVehiclePetrolTankHealth",
	  "body": [
		"SetVehiclePetrolTankHealth(${1:Vehicle vehicle}, ${2:float health})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\n1000 is max health  \nBegins leaking gas at around 650 health  \n"
	},
	"SetVehicleProvidesCover()": {
	  "prefix": "SetVehicleProvidesCover",
	  "body": [
		"SetVehicleProvidesCover(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleReduceGrip()": {
	  "prefix": "SetVehicleReduceGrip",
	  "body": [
		"SetVehicleReduceGrip(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nReduces grip significantly so it's hard to go anywhere.  \n"
	},
	"SetVehicleRocketBoostActive()": {
	  "prefix": "SetVehicleRocketBoostActive",
	  "body": [
		"SetVehicleRocketBoostActive(${1:Vehicle vehicle}, ${2:BOOL active})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleRocketBoostPercentage()": {
	  "prefix": "SetVehicleRocketBoostPercentage",
	  "body": [
		"SetVehicleRocketBoostPercentage(${1:Vehicle vehicle}, ${2:float percentage})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleRocketBoostRefillTime()": {
	  "prefix": "SetVehicleRocketBoostRefillTime",
	  "body": [
		"SetVehicleRocketBoostRefillTime(${1:Vehicle vehicle}, ${2:float time})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SetVehicleRudderBroken()": {
	  "prefix": "SetVehicleRudderBroken",
	  "body": [
		"SetVehicleRudderBroken(${1:Vehicle vehicle}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"N_0xa6d3a8750dc73270()": {
	  "prefix": "N_0xa6d3a8750dc73270",
	  "body": "N_0xa6d3a8750dc73270",
	  "description": "OLD NAME, PLEASE USE SetVehicleRoofLivery INSTEAD!"
	},
	"SetVehicleRoofLivery()": {
	  "prefix": "SetVehicleRoofLivery",
	  "body": [
		"SetVehicleRoofLivery(${1:Vehicle vehicle}, ${2:int livery})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nUsed to set the tornado custom (convertible) rooftop livery.\n\nLivery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.\n\nMight work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom.\nOld name: N_0xa6d3a8750dc73270"
	},
	"SetVehicleShootAtTarget()": {
	  "prefix": "SetVehicleShootAtTarget",
	  "body": [
		"SetVehicleShootAtTarget(${1:Ped driver}, ${2:Entity entity}, ${3:float xTarget}, ${4:float yTarget}, ${5:float zTarget})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nCommands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:  \nWEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY(\"VEHICLE_WEAPON_PLANE_ROCKET\"));VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);  \n"
	},
	"SetVehicleSearchlight()": {
	  "prefix": "SetVehicleSearchlight",
	  "body": [
		"SetVehicleSearchlight(${1:Vehicle heli}, ${2:BOOL toggle}, ${3:BOOL canBeUsedByAI})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOnly works during nighttime.  \nAnd only if there is a driver in heli.  \n"
	},
	"SetVehicleSiren()": {
	  "prefix": "SetVehicleSiren",
	  "body": [
		"SetVehicleSiren(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nActivate siren on vehicle (Only works if the vehicle has a siren).  \n"
	},
	"N_0x9d44fcce98450843()": {
	  "prefix": "N_0x9d44fcce98450843",
	  "body": "N_0x9d44fcce98450843",
	  "description": "OLD NAME, PLEASE USE SetVehicleSilent INSTEAD!"
	},
	"SetVehicleSilent()": {
	  "prefix": "SetVehicleSilent",
	  "body": [
		"SetVehicleSilent(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nIf set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.  \n\nOld name: N_0x9d44fcce98450843"
	},
	"SetVehicleSteerBias()": {
	  "prefix": "SetVehicleSteerBias",
	  "body": [
		"SetVehicleSteerBias(${1:Vehicle vehicle}, ${2:float value})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nLocks the vehicle's steering to the desired angle, explained below.  \nRequires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.  \nSteer bias:  \n-1.0 = full right  \n0.0 = centered steering  \n1.0 = full left  \n"
	},
	"N_0x1cf38d529d7441d9()": {
	  "prefix": "N_0x1cf38d529d7441d9",
	  "body": "N_0x1cf38d529d7441d9",
	  "description": "OLD NAME, PLEASE USE SetVehicleSt INSTEAD!"
	},
	"SetVehicleSt()": {
	  "prefix": "SetVehicleSt",
	  "body": [
		"SetVehicleSt(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nHas something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.  \n============================================  \nMay be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.  \nBtw, func_1333 ends up calling this func which uses this native,  \nvoid func_1338(int iParam0)//Position   \n{  \n\tENTITY::FREEZE_ENTITY_POSITION(iParam0, true);  \n\tENTITY::SET_ENTITY_COLLISION(iParam0, false, 0);  \n\tENTITY::SET_ENTITY_INVINCIBLE(iParam0, true);  \n\tVEHICLE::_0xDF594D8D(iParam0, true);  \n}  \n\nOld name: N_0x1cf38d529d7441d9"
	},
	"SetVehicleTimedExplosion()": {
	  "prefix": "SetVehicleTimedExplosion",
	  "body": [
		"SetVehicleTimedExplosion(${1:Vehicle vehicle}, ${2:Ped ped}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nVEHICLE::SET_VEHICLE_TIMED_EXPLOSION(v_3, PLAYER::GET_PLAYER_PED(v_5), 1);  \n"
	},
	"SetVehicleStrong()": {
	  "prefix": "SetVehicleStrong",
	  "body": [
		"SetVehicleStrong(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nIf set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives  \n"
	},
	"SetVehicleTyreBurst()": {
	  "prefix": "SetVehicleTyreBurst",
	  "body": [
		"SetVehicleTyreBurst(${1:Vehicle vehicle}, ${2:int index}, ${3:BOOL onRim}, ${4:float p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\n\"To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)  \nto burst all tyres type it 8 times where p1 = 0 to 7.  \np3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n"
	},
	"N_0x438b3d7ca026fe91()": {
	  "prefix": "N_0x438b3d7ca026fe91",
	  "body": "N_0x438b3d7ca026fe91",
	  "description": "OLD NAME, PLEASE USE SetVehicleTransformState INSTEAD!"
	},
	"SetVehicleTransformState()": {
	  "prefix": "SetVehicleTransformState",
	  "body": [
		"SetVehicleTransformState(${1:Vehicle vehicle}, ${2:float state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nAccording to decompiled scripts this should work with the `deluxo` and `oppressor2` vehicles.\nI've only seen this work for `deluxo` though, can't figure out what it's supposed to do on `oppressor2`.\n\nFor the deluxo:\n\n-   Set `state` to `0.0`: Fully transform to a 'road' vehicle (non-hover mode).\n-   Set `state` to `1.0`: Fully transform to a 'flying' vehicle (hover mode).\n\nIf you set it to something like 0.5, then something [weird happens](https://streamable.com/p6wmr), you end up in some 50% hover mode, 50% not hover mode.\n\nThis doesn't need to be called every tick, just once and the vehicle will transform to that state at the usual transform speed. It'll just stop transforming when it reaches the state you provided.\n\nOnce this native is used then players will just be able to hit the vehicle transform key to toggle the transformation cycle; it won't block users from using the key.\nOld name: N_0x438b3d7ca026fe91"
	},
	"SetVehicleTyreSmokeColor()": {
	  "prefix": "SetVehicleTyreSmokeColor",
	  "body": [
		"SetVehicleTyreSmokeColor(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSets the tire smoke's color of this vehicle.  \nvehicle: The vehicle that is the target of this method.  \nr: The red level in the RGB color code.  \ng: The green level in the RGB color code.  \nb: The blue level in the RGB color code.  \nNote:  \nsetting r,g,b to 0 will give the car independance day tyre smoke  \n"
	},
	"SetVehicleTyreFixed()": {
	  "prefix": "SetVehicleTyreFixed",
	  "body": [
		"SetVehicleTyreFixed(${1:Vehicle vehicle}, ${2:int tyreIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\ntyreIndex = 0 to 4 on normal vehicles  \n'0 = wheel_lf / bike, plane or jet front  \n'1 = wheel_rf  \n'2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left  \n'3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right  \n'4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left  \n'5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right  \n'45 = 6 wheels trailer mid wheel left  \n'47 = 6 wheels trailer mid wheel right  \n"
	},
	"SetVehicleUndriveable()": {
	  "prefix": "SetVehicleUndriveable",
	  "body": [
		"SetVehicleUndriveable(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nPlayer won't be able to drive the car or enter it, unless you task him to get into any other seat than the driver one.  \n"
	},
	"SetVehicleTyresCanBurst()": {
	  "prefix": "SetVehicleTyresCanBurst",
	  "body": [
		"SetVehicleTyresCanBurst(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nAllows you to toggle bulletproof tires.  \n"
	},
	"SetVehicleMaxStrTrap()": {
	  "prefix": "SetVehicleMaxStrTrap",
	  "body": "SetVehicleMaxStrTrap",
	  "description": "OLD NAME, PLEASE USE SetVehicleWheelsCanBreakOffWhenBlowUp INSTEAD!"
	},
	"SetVehicleWheelsCanBreakOffWhenBlowUp()": {
	  "prefix": "SetVehicleWheelsCanBreakOffWhenBlowUp",
	  "body": [
		"SetVehicleWheelsCanBreakOffWhenBlowUp(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nOld name: SetVehicleMaxStrTrap"
	},
	"SetVehicleWheelType()": {
	  "prefix": "SetVehicleWheelType",
	  "body": [
		"SetVehicleWheelType(${1:Vehicle vehicle}, ${2:int WheelType})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\n0: Sport  \n1: Muscle  \n2: Lowrider  \n3: SUV  \n4: Offroad  \n5: Tuner  \n6: Bike Wheels  \n7: High End  \n"
	},
	"SetVehicleWindowTint()": {
	  "prefix": "SetVehicleWindowTint",
	  "body": [
		"SetVehicleWindowTint(${1:Vehicle vehicle}, ${2:int tint})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nenum WindowTints  \n{  \n\tWINDOWTINT_NONE,  \n\tWINDOWTINT_PURE_BLACK,  \n\tWINDOWTINT_DARKSMOKE,  \n\tWINDOWTINT_LIGHTSMOKE,  \n\tWINDOWTINT_STOCK,  \n\tWINDOWTINT_LIMO,  \n\tWINDOWTINT_GREEN  \n};  \n"
	},
	"SetVehicleWheelsCanBreak()": {
	  "prefix": "SetVehicleWheelsCanBreak",
	  "body": [
		"SetVehicleWheelsCanBreak(${1:Vehicle vehicle}, ${2:BOOL enabled})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"N_0x9aa47fff660cb932()": {
	  "prefix": "N_0x9aa47fff660cb932",
	  "body": "N_0x9aa47fff660cb932",
	  "description": "OLD NAME, PLEASE USE SetVerticalFlightPhase INSTEAD!"
	},
	"SetVerticalFlightPhase()": {
	  "prefix": "SetVerticalFlightPhase",
	  "body": [
		"SetVerticalFlightPhase(${1:Vehicle vehicle}, ${2:float angle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nMulleDK19: This immediately sets the VTOL engines at the specified angle ratio (0f-1f).  \n\nOld name: N_0x9aa47fff660cb932"
	},
	"SkipToEndAndStopPlaybackRecordedVehicle()": {
	  "prefix": "SkipToEndAndStopPlaybackRecordedVehicle",
	  "body": [
		"SkipToEndAndStopPlaybackRecordedVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SkipTimeInPlaybackRecordedVehicle()": {
	  "prefix": "SkipTimeInPlaybackRecordedVehicle",
	  "body": [
		"SkipTimeInPlaybackRecordedVehicle(${1:Any p0}, ${2:float p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"StartPlaybackRecordedVehicle()": {
	  "prefix": "StartPlaybackRecordedVehicle",
	  "body": [
		"StartPlaybackRecordedVehicle(${1:Vehicle vehicle}, ${2:int p1}, ${3:char* playback}, ${4:BOOL p3})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SmashVehicleWindow()": {
	  "prefix": "SmashVehicleWindow",
	  "body": [
		"SmashVehicleWindow(${1:Vehicle vehicle}, ${2:int index})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"StartPlaybackRecordedVehicleWithFlags()": {
	  "prefix": "StartPlaybackRecordedVehicleWithFlags",
	  "body": [
		"StartPlaybackRecordedVehicleWithFlags(${1:Vehicle vehicle}, ${2:Any p1}, ${3:char* playback}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"StartPlaybackRecordedVehicleUsingAi()": {
	  "prefix": "StartPlaybackRecordedVehicleUsingAi",
	  "body": [
		"StartPlaybackRecordedVehicleUsingAi(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:float p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"StartVehicleHorn()": {
	  "prefix": "StartVehicleHorn",
	  "body": [
		"StartVehicleHorn(${1:Vehicle vehicle}, ${2:int duration}, ${3:Hash mode}, ${4:BOOL forever})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nSounds the horn for the specified vehicle.  \nvehicle: The vehicle to activate the horn for.  \nmode: The hash of \"NORMAL\" or \"HELDDOWN\". Can be 0.  \nduration: The duration to sound the horn, in milliseconds.  \nNote: If a player is in the vehicle, it will only sound briefly.  \n"
	},
	"StartVehicleAlarm()": {
	  "prefix": "StartVehicleAlarm",
	  "body": [
		"StartVehicleAlarm(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"StopAllGarageActivity()": {
	  "prefix": "StopAllGarageActivity",
	  "body": [
		"StopAllGarageActivity()"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"SteerUnlockBias()": {
	  "prefix": "SteerUnlockBias",
	  "body": [
		"SteerUnlockBias(${1:Vehicle vehicle}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nHash collision!!!  \nSET_VEHICLE_IS_*  \np1 (toggle) was always 1 (true) except in one case in the b678 scripts.  \n"
	},
	"SwitchTrainTrack()": {
	  "prefix": "SwitchTrainTrack",
	  "body": [
		"SwitchTrainTrack(${1:int intersectionId}, ${2:BOOL state})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: Any\n"
	},
	"StopPlaybackRecordedVehicle()": {
	  "prefix": "StopPlaybackRecordedVehicle",
	  "body": [
		"StopPlaybackRecordedVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"TrackVehicleVisibility()": {
	  "prefix": "TrackVehicleVisibility",
	  "body": [
		"TrackVehicleVisibility(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nin script hook .net   \nVehicle v = ...;  \nFunction.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);  \n"
	},
	"ToggleVehicleMod()": {
	  "prefix": "ToggleVehicleMod",
	  "body": [
		"ToggleVehicleMod(${1:Vehicle vehicle}, ${2:int modType}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nToggles:  \nUNK17   \nTurbo   \nUNK19   \nTire Smoke   \nUNK21   \nXenon Headlights  \n"
	},
	"N_0xbe4c854ffdb6eebe()": {
	  "prefix": "N_0xbe4c854ffdb6eebe",
	  "body": "N_0xbe4c854ffdb6eebe",
	  "description": "OLD NAME, PLEASE USE TransformStormbergToWaterVehicle INSTEAD!"
	},
	"TransformStormbergToWaterVehicle()": {
	  "prefix": "TransformStormbergToWaterVehicle",
	  "body": [
		"TransformStormbergToWaterVehicle(${1:Vehicle vehicle}, ${2:BOOL instantly})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nTransforms the `stormberg` to it's \"water vehicle\" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.\nOld name: N_0xbe4c854ffdb6eebe"
	},
	"N_0x2a69ffd1b42bff9e()": {
	  "prefix": "N_0x2a69ffd1b42bff9e",
	  "body": "N_0x2a69ffd1b42bff9e",
	  "description": "OLD NAME, PLEASE USE TransformStormbergToRoadVehicle INSTEAD!"
	},
	"TransformStormbergToRoadVehicle()": {
	  "prefix": "TransformStormbergToRoadVehicle",
	  "body": [
		"TransformStormbergToRoadVehicle(${1:Vehicle vehicle}, ${2:BOOL instantly})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\nTransforms the `stormberg` to it's \"road vehicle\" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.\nOld name: N_0x2a69ffd1b42bff9e"
	},
	"N_0x4198ab0022b15f87()": {
	  "prefix": "N_0x4198ab0022b15f87",
	  "body": "N_0x4198ab0022b15f87",
	  "description": "OLD NAME, PLEASE USE VehicleHasLandingGear INSTEAD!"
	},
	"VehicleHasLandingGear()": {
	  "prefix": "VehicleHasLandingGear",
	  "body": [
		"VehicleHasLandingGear(${1:Vehicle vehicle})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nVehicle has landing gear?  \n\nOld name: N_0x4198ab0022b15f87"
	},
	"UnpausePlaybackRecordedVehicle()": {
	  "prefix": "UnpausePlaybackRecordedVehicle",
	  "body": [
		"UnpausePlaybackRecordedVehicle(${1:Any p0})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n"
	},
	"VehicleSetCustomParachuteTexture()": {
	  "prefix": "VehicleSetCustomParachuteTexture",
	  "body": [
		"VehicleSetCustomParachuteTexture(${1:Vehicle vehicle}, ${2:int colorIndex})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\ncolorIndex = 0  \n"
	},
	"VehicleSetCustomParachuteModel()": {
	  "prefix": "VehicleSetCustomParachuteModel",
	  "body": [
		"VehicleSetCustomParachuteModel(${1:Vehicle vehicle}, ${2:Hash parachuteModel})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: void\n\nparachuteModel = 230075693  \n"
	},
	"WasCounterActivated()": {
	  "prefix": "WasCounterActivated",
	  "body": [
		"WasCounterActivated(${1:Vehicle vehicle}, ${2:Any p1})"
	  ],
	  "description": "Namespace: VEHICLE\nReturns: BOOL\n\nHash collision  \n"
	},
	"N_0x2b2a2cc86778b619()": {
	  "prefix": "N_0x2b2a2cc86778b619",
	  "body": "N_0x2b2a2cc86778b619",
	  "description": "OLD NAME, PLEASE USE GetCurrentIntensity INSTEAD!"
	},
	"GetWavesIntensity()": {
	  "prefix": "GetWavesIntensity",
	  "body": "GetWavesIntensity",
	  "description": "OLD NAME, PLEASE USE GetCurrentIntensity INSTEAD!"
	},
	"GetCurrentIntensity()": {
	  "prefix": "GetCurrentIntensity",
	  "body": [
		"GetCurrentIntensity()"
	  ],
	  "description": "Namespace: WATER\nReturns: float\n\nGets the aggressiveness factor of the ocean waves.  \n\nOld name: N_0x2b2a2cc86778b619\nOld name: GetWavesIntensity"
	},
	"N_0xfdbf4cdbc07e1706()": {
	  "prefix": "N_0xfdbf4cdbc07e1706",
	  "body": "N_0xfdbf4cdbc07e1706",
	  "description": "OLD NAME, PLEASE USE AddCurrentRise INSTEAD!"
	},
	"AddCurrentRise()": {
	  "prefix": "AddCurrentRise",
	  "body": [
		"AddCurrentRise(${1:float xLow}, ${2:float yLow}, ${3:float xHigh}, ${4:float yHigh}, ${5:float height})"
	  ],
	  "description": "Namespace: WATER\nReturns: int\n\nOld name: N_0xfdbf4cdbc07e1706"
	},
	"GetWaterHeightNoWaves()": {
	  "prefix": "GetWaterHeightNoWaves",
	  "body": [
		"GetWaterHeightNoWaves(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* height})"
	  ],
	  "description": "Namespace: WATER\nReturns: BOOL\n"
	},
	"GetWaterHeight()": {
	  "prefix": "GetWaterHeight",
	  "body": [
		"GetWaterHeight(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* height})"
	  ],
	  "description": "Namespace: WATER\nReturns: BOOL\n\nThis function set height to the value of z-axis of the water surface.  \nThis function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)  \nnote: seems to return true when you are in water  \n"
	},
	"N_0x547237aa71ab44de()": {
	  "prefix": "N_0x547237aa71ab44de",
	  "body": [
		"N_0x547237aa71ab44de(${1:Any p0})"
	  ],
	  "description": "Namespace: WATER\nReturns: void\n"
	},
	"ModifyWater()": {
	  "prefix": "ModifyWater",
	  "body": [
		"ModifyWater(${1:float x}, ${2:float y}, ${3:float radius}, ${4:float height})"
	  ],
	  "description": "Namespace: WATER\nReturns: void\n\nSets the water height for a given position and radius.  \n"
	},
	"N_0x5e5e99285ae812db()": {
	  "prefix": "N_0x5e5e99285ae812db",
	  "body": "N_0x5e5e99285ae812db",
	  "description": "OLD NAME, PLEASE USE ResetCurrentIntensity INSTEAD!"
	},
	"ResetWavesIntensity()": {
	  "prefix": "ResetWavesIntensity",
	  "body": "ResetWavesIntensity",
	  "description": "OLD NAME, PLEASE USE ResetCurrentIntensity INSTEAD!"
	},
	"ResetCurrentIntensity()": {
	  "prefix": "ResetCurrentIntensity",
	  "body": [
		"ResetCurrentIntensity()"
	  ],
	  "description": "Namespace: WATER\nReturns: void\n\nSets the waves intensity back to original (1.0 in most cases). \n\nOld name: N_0x5e5e99285ae812db\nOld name: ResetWavesIntensity"
	},
	"N_0xb1252e3e59a82aaf()": {
	  "prefix": "N_0xb1252e3e59a82aaf",
	  "body": "N_0xb1252e3e59a82aaf",
	  "description": "OLD NAME, PLEASE USE RemoveCurrentRise INSTEAD!"
	},
	"RemoveCurrentRise()": {
	  "prefix": "RemoveCurrentRise",
	  "body": [
		"RemoveCurrentRise(${1:int p0})"
	  ],
	  "description": "Namespace: WATER\nReturns: void\n\np0 is the handle returned from _0xFDBF4CDBC07E1706  \n\nOld name: N_0xb1252e3e59a82aaf"
	},
	"TestProbeAgainstAllWater()": {
	  "prefix": "TestProbeAgainstAllWater",
	  "body": [
		"TestProbeAgainstAllWater(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
	  ],
	  "description": "Namespace: WATER\nReturns: BOOL\n"
	},
	"N_0xb96b00e976be977f()": {
	  "prefix": "N_0xb96b00e976be977f",
	  "body": "N_0xb96b00e976be977f",
	  "description": "OLD NAME, PLEASE USE SetCurrentIntensity INSTEAD!"
	},
	"SetWavesIntensity()": {
	  "prefix": "SetWavesIntensity",
	  "body": "SetWavesIntensity",
	  "description": "OLD NAME, PLEASE USE SetCurrentIntensity INSTEAD!"
	},
	"SetCurrentIntensity()": {
	  "prefix": "SetCurrentIntensity",
	  "body": [
		"SetCurrentIntensity(${1:float intensity})"
	  ],
	  "description": "Namespace: WATER\nReturns: void\n\nSets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.  \nWorks only ~200 meters around the player.  \n\nOld name: N_0xb96b00e976be977f\nOld name: SetWavesIntensity"
	},
	"TestVerticalProbeAgainstAllWater()": {
	  "prefix": "TestVerticalProbeAgainstAllWater",
	  "body": [
		"TestVerticalProbeAgainstAllWater(${1:float x}, ${2:float y}, ${3:float z}, ${4:Any p3}, ${5:float* height})"
	  ],
	  "description": "Namespace: WATER\nReturns: BOOL\n\nI guess p3 is shape test flags?  \n"
	},
	"TestProbeAgainstWater()": {
	  "prefix": "TestProbeAgainstWater",
	  "body": [
		"TestProbeAgainstWater(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:Vector3* result})"
	  ],
	  "description": "Namespace: WATER\nReturns: BOOL\n"
	},
	"CanUseWeaponOnParachute()": {
	  "prefix": "CanUseWeaponOnParachute",
	  "body": [
		"CanUseWeaponOnParachute(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nthis returns if you can use the weapon while using a parachute  \n"
	},
	"AddAmmoToPed()": {
	  "prefix": "AddAmmoToPed",
	  "body": [
		"AddAmmoToPed(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammo})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"ClearPedLastWeaponDamage()": {
	  "prefix": "ClearPedLastWeaponDamage",
	  "body": [
		"ClearPedLastWeaponDamage(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"ClearEntityLastWeaponDamage()": {
	  "prefix": "ClearEntityLastWeaponDamage",
	  "body": [
		"ClearEntityLastWeaponDamage(${1:Entity entity})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"DoesWeaponTakeWeaponComponent()": {
	  "prefix": "DoesWeaponTakeWeaponComponent",
	  "body": [
		"DoesWeaponTakeWeaponComponent(${1:Hash weaponHash}, ${2:Hash componentHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"CreateWeaponObject()": {
	  "prefix": "CreateWeaponObject",
	  "body": [
		"CreateWeaponObject(${1:Hash weaponHash}, ${2:int ammoCount}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL showWorldModel}, ${7:float heading}, ${8:Any p7})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Object\n\nNow has 8 params.  \n"
	},
	"ExplodeProjectiles()": {
	  "prefix": "ExplodeProjectiles",
	  "body": [
		"ExplodeProjectiles(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nWEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);  \n"
	},
	"EnableLaserSightRendering()": {
	  "prefix": "EnableLaserSightRendering",
	  "body": [
		"EnableLaserSightRendering(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nEnables laser sight on any weapon.  \nIt doesn't work. Neither on tick nor OnKeyDown  \n"
	},
	"GetAmmoInClip()": {
	  "prefix": "GetAmmoInClip",
	  "body": [
		"GetAmmoInClip(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int* ammo})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"GetAmmoInPedWeapon()": {
	  "prefix": "GetAmmoInPedWeapon",
	  "body": [
		"GetAmmoInPedWeapon(${1:Ped ped}, ${2:Hash weaponhash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n\nWEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)  \nFrom decompiled scripts  \nReturns total ammo in weapon  \nGTALua Example :  \nnatives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)  \n"
	},
	"GetBestPedWeapon()": {
	  "prefix": "GetBestPedWeapon",
	  "body": [
		"GetBestPedWeapon(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n\np1 is always 0 in the scripts.  \n"
	},
	"GetCurrentPedVehicleWeapon()": {
	  "prefix": "GetCurrentPedVehicleWeapon",
	  "body": [
		"GetCurrentPedVehicleWeapon(${1:Ped ped}, ${2:Hash* weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nExample in VB  \nPublic Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer  \n    Dim arg As New OutputArgument()  \n    Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)  \n    Return arg.GetResult(Of Integer)()  \nEnd Function  \n\t\tUsage:  \n\t\tIf GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something  \n\t\tNote: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET  \n"
	},
	"GetCurrentPedWeaponEntityIndex()": {
	  "prefix": "GetCurrentPedWeaponEntityIndex",
	  "body": [
		"GetCurrentPedWeaponEntityIndex(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Entity\n"
	},
	"GetCurrentPedWeapon()": {
	  "prefix": "GetCurrentPedWeapon",
	  "body": [
		"GetCurrentPedWeapon(${1:Ped ped}, ${2:Hash* weaponHash}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nThe return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.  \np2 seems to be 1 most of the time.  \np2 is not implemented  \ndisassembly said that?  \n------  \nyes on disassembly p2 it seems not implemented i just have:  \nbool __fastcall sub_7FF6C56CE684(__int64 a1, _DWORD *a2)  \nFound At: 7ff6c56ce684  \n"
	},
	"GetIsPedGadgetEquipped()": {
	  "prefix": "GetIsPedGadgetEquipped",
	  "body": [
		"GetIsPedGadgetEquipped(${1:Ped ped}, ${2:Hash gadgetHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\ngadgetHash - was always 0xFBAB5776 (\"GADGET_PARACHUTE\").  \n"
	},
	"N_0x840f03e9041e2c9c()": {
	  "prefix": "N_0x840f03e9041e2c9c",
	  "body": "N_0x840f03e9041e2c9c",
	  "description": "OLD NAME, PLEASE USE GetLockonRangeOfCurrentPedWeapon INSTEAD!"
	},
	"GetLockonRangeOfCurrentPedWeapon()": {
	  "prefix": "GetLockonRangeOfCurrentPedWeapon",
	  "body": [
		"GetLockonRangeOfCurrentPedWeapon(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: float\n\nOld name: N_0x840f03e9041e2c9c"
	},
	"GetMaxAmmoInClip()": {
	  "prefix": "GetMaxAmmoInClip",
	  "body": [
		"GetMaxAmmoInClip(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n\np2 is mostly 1 in the scripts.  \n"
	},
	"GetMaxAmmo()": {
	  "prefix": "GetMaxAmmo",
	  "body": [
		"GetMaxAmmo(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int* ammo})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"GetPedAmmoByType()": {
	  "prefix": "GetPedAmmoByType",
	  "body": [
		"GetPedAmmoByType(${1:Ped ped}, ${2:Any ammoType})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n"
	},
	"GetMaxRangeOfCurrentPedWeapon()": {
	  "prefix": "GetMaxRangeOfCurrentPedWeapon",
	  "body": [
		"GetMaxRangeOfCurrentPedWeapon(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: float\n"
	},
	"GetPedAmmoTypeFromWeapon_2()": {
	  "prefix": "GetPedAmmoTypeFromWeapon_2",
	  "body": [
		"GetPedAmmoTypeFromWeapon_2(${1:Ped ped}, ${2:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n"
	},
	"GetPedWeaponTintIndex()": {
	  "prefix": "GetPedWeaponTintIndex",
	  "body": [
		"GetPedWeaponTintIndex(${1:Ped ped}, ${2:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n"
	},
	"GetPedAmmoType()": {
	  "prefix": "GetPedAmmoType",
	  "body": "GetPedAmmoType",
	  "description": "OLD NAME, PLEASE USE GetPedAmmoTypeFromWeapon INSTEAD!"
	},
	"GetPedAmmoTypeFromWeapon()": {
	  "prefix": "GetPedAmmoTypeFromWeapon",
	  "body": [
		"GetPedAmmoTypeFromWeapon(${1:Ped ped}, ${2:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n\nReturns an ammo type hash, which is defined in AmmoInfo.  \n\nOld name: GetPedAmmoType"
	},
	"GetSelectedPedWeapon()": {
	  "prefix": "GetSelectedPedWeapon",
	  "body": [
		"GetSelectedPedWeapon(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n\nReturns the hash of the weapon.   \nvar num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);  \nsub_27D3(num7);  \nswitch (num7)  \n{  \n    case 0x24B17070:  \n\t\tAlso see WEAPON::GET_CURRENT_PED_WEAPON. Difference?  \n\t\t-------------------------------------------------------------------------  \n\t\tThe difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash  \n"
	},
	"GetPedLastWeaponImpactCoord()": {
	  "prefix": "GetPedLastWeaponImpactCoord",
	  "body": [
		"GetPedLastWeaponImpactCoord(${1:Ped ped}, ${2:Vector3* coords})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nPass ped. Pass address of Vector3.  \nThe coord will be put into the Vector3.  \nThe return will determine whether there was a coord found or not.  \n"
	},
	"GetWeaponComponentHudStats()": {
	  "prefix": "GetWeaponComponentHudStats",
	  "body": [
		"GetWeaponComponentHudStats(${1:Hash componentHash}, ${2:int* outData})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"GetPedWeapontypeInSlot()": {
	  "prefix": "GetPedWeapontypeInSlot",
	  "body": [
		"GetPedWeapontypeInSlot(${1:Ped ped}, ${2:Hash weaponSlot})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n"
	},
	"GetWeaponClipSize()": {
	  "prefix": "GetWeaponClipSize",
	  "body": [
		"GetWeaponClipSize(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n\n// Returns the size of the default weapon component clip.  \nUse it like this:  \nchar cClipSize[32];  \nHash cur;  \nif (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))  \n{  \n    if (WEAPON::IS_WEAPON_VALID(cur))  \n    {  \n        int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);  \n        sprintf_s(cClipSize, \"ClipSize: %.d\", iClipSize);  \n        vDrawString(cClipSize, 0.5f, 0.5f);  \n    }  \n}  \n"
	},
	"N_0x3133b907d8b32053()": {
	  "prefix": "N_0x3133b907d8b32053",
	  "body": "N_0x3133b907d8b32053",
	  "description": "OLD NAME, PLEASE USE GetWeaponDamage INSTEAD!"
	},
	"GetWeaponDamage()": {
	  "prefix": "GetWeaponDamage",
	  "body": [
		"GetWeaponDamage(${1:Hash weaponHash}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: float\nThis native does not return damages of weapons from the melee and explosive group.\nOld name: N_0x3133b907d8b32053"
	},
	"GetWeaponComponentTypeModel()": {
	  "prefix": "GetWeaponComponentTypeModel",
	  "body": [
		"GetWeaponComponentTypeModel(${1:Hash componentHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n"
	},
	"GetWeaponHudStats()": {
	  "prefix": "GetWeaponHudStats",
	  "body": [
		"GetWeaponHudStats(${1:Hash weaponHash}, ${2:Any* outData})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\n// members should be aligned to 8 bytes by default but it's best to use alignas here, just to be sure  \nstruct WeaponHudStatsData  \n{  \n\talignas(8) uint8_t hudDamage; // 0x0000  \n\talignas(8) uint8_t hudSpeed; // 0x0008  \n\talignas(8) uint8_t hudCapacity; // 0x0010  \n\talignas(8) uint8_t hudAccuracy; // 0x0018  \n\talignas(8) uint8_t hudRange; // 0x0020  \n};  \nUsage:  \nWeaponHudStatsData data;  \nif (GET_WEAPON_HUD_STATS(weaponHash, (Any*)&data))  \n{  \n    // uint8_t damagePercentage = data.hudDamage etc...  \n}  \n"
	},
	"GetWeaponObjectFromPed()": {
	  "prefix": "GetWeaponObjectFromPed",
	  "body": [
		"GetWeaponObjectFromPed(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Object\n\nDrops the current weapon and returns the object  \nUnknown behavior when unarmed.  \n"
	},
	"GetWeaponDamageType()": {
	  "prefix": "GetWeaponDamageType",
	  "body": [
		"GetWeaponDamageType(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n\n0=unknown (or incorrect weaponHash)  \n1= no damage (flare,snowball, petrolcan)  \n2=melee  \n3=bullet  \n4=force ragdoll fall  \n5=explosive (RPG, Railgun, grenade)  \n6=fire(molotov)  \n8=fall(WEAPON_HELI_CRASH)  \n10=electric  \n11=barbed wire  \n12=extinguisher  \n13=gas  \n14=water cannon(WEAPON_HIT_BY_WATER_CANNON)  \n"
	},
	"GetWeaponObjectTintIndex()": {
	  "prefix": "GetWeaponObjectTintIndex",
	  "body": [
		"GetWeaponObjectTintIndex(${1:Object weapon})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n"
	},
	"GetWeapontypeGroup()": {
	  "prefix": "GetWeapontypeGroup",
	  "body": [
		"GetWeapontypeGroup(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n"
	},
	"GetWeaponTintCount()": {
	  "prefix": "GetWeaponTintCount",
	  "body": [
		"GetWeaponTintCount(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\n"
	},
	"GetWeapontypeModel()": {
	  "prefix": "GetWeapontypeModel",
	  "body": [
		"GetWeapontypeModel(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n\nReturns the model of any weapon.  \nCan also take an ammo hash?  \nsub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));  \n"
	},
	"GetWeapontypeSlot()": {
	  "prefix": "GetWeapontypeSlot",
	  "body": [
		"GetWeapontypeSlot(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Hash\n"
	},
	"GiveDelayedWeaponToPed()": {
	  "prefix": "GiveDelayedWeaponToPed",
	  "body": [
		"GiveDelayedWeaponToPed(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammoCount}, ${4:BOOL equipNow})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nGives a weapon to PED with a delay, example:  \nWEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY(\"WEAPON_PISTOL\"), 1000, false)  \n----------------------------------------------------------------------------------------------------------------------------------------  \nTranslation table:  \npastebin.com/a39K8Nz8  \n"
	},
	"GiveWeaponComponentToPed()": {
	  "prefix": "GiveWeaponComponentToPed",
	  "body": [
		"GiveWeaponComponentToPed(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"GiveWeaponComponentToWeaponObject()": {
	  "prefix": "GiveWeaponComponentToWeaponObject",
	  "body": [
		"GiveWeaponComponentToWeaponObject(${1:Object weaponObject}, ${2:Hash addonHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\naddonHash:  \n(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)  \n^ Wrong.  \nAddonHash is NOT a model hash, it's the weapon component hash.  \n${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}  \n"
	},
	"GiveWeaponToPed()": {
	  "prefix": "GiveWeaponToPed",
	  "body": [
		"GiveWeaponToPed(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammoCount}, ${4:BOOL isHidden}, ${5:BOOL equipNow})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nisHidden - ????  \nAll weapon names (add to the list if something is missing), use GAMEPLAY::GET_HASH_KEY((char *)weaponNames[i]) to get get the hash:  \nstatic LPCSTR weaponNames[] = {  \n\t\"WEAPON_KNIFE\", \"WEAPON_NIGHTSTICK\", \"WEAPON_HAMMER\", \"WEAPON_BAT\", \"WEAPON_GOLFCLUB\",  \n\t\"WEAPON_CROWBAR\", \"WEAPON_PISTOL\", \"WEAPON_COMBATPISTOL\", \"WEAPON_APPISTOL\", \"WEAPON_PISTOL50\",  \n\t\"WEAPON_MICROSMG\", \"WEAPON_SMG\", \"WEAPON_ASSAULTSMG\", \"WEAPON_ASSAULTRIFLE\",  \n\t\"WEAPON_CARBINERIFLE\", \"WEAPON_ADVANCEDRIFLE\", \"WEAPON_MG\", \"WEAPON_COMBATMG\", \"WEAPON_PUMPSHOTGUN\",  \n\t\"WEAPON_SAWNOFFSHOTGUN\", \"WEAPON_ASSAULTSHOTGUN\", \"WEAPON_BULLPUPSHOTGUN\", \"WEAPON_STUNGUN\", \"WEAPON_SNIPERRIFLE\",  \n\t\"WEAPON_HEAVYSNIPER\", \"WEAPON_GRENADELAUNCHER\", \"WEAPON_GRENADELAUNCHER_SMOKE\", \"WEAPON_RPG\", \"WEAPON_MINIGUN\",  \n\t\"WEAPON_GRENADE\", \"WEAPON_STICKYBOMB\", \"WEAPON_SMOKEGRENADE\", \"WEAPON_BZGAS\", \"WEAPON_MOLOTOV\",  \n\t\"WEAPON_FIREEXTINGUISHER\", \"WEAPON_PETROLCAN\", \"WEAPON_FLARE\", \"WEAPON_SNSPISTOL\", \"WEAPON_SPECIALCARBINE\",  \n\t\"WEAPON_HEAVYPISTOL\", \"WEAPON_BULLPUPRIFLE\", \"WEAPON_HOMINGLAUNCHER\", \"WEAPON_PROXMINE\", \"WEAPON_SNOWBALL\",  \n\t\"WEAPON_VINTAGEPISTOL\", \"WEAPON_DAGGER\", \"WEAPON_FIREWORK\", \"WEAPON_MUSKET\", \"WEAPON_MARKSMANRIFLE\",  \n\t\"WEAPON_HEAVYSHOTGUN\", \"WEAPON_GUSENBERG\", \"WEAPON_HATCHET\", \"WEAPON_RAILGUN\", \"WEAPON_COMBATPDW\",  \n\t\"WEAPON_KNUCKLE\", \"WEAPON_MARKSMANPISTOL\", \"WEAPON_FLASHLIGHT\", \"WEAPON_MACHETE\", \"WEAPON_MACHINEPISTOL\",  \n\t\"WEAPON_SWITCHBLADE\", \"WEAPON_REVOLVER\", \"WEAPON_COMPACTRIFLE\", \"WEAPON_DBSHOTGUN\", \"WEAPON_FLAREGUN\",  \n\t\"WEAPON_AUTOSHOTGUN\", \"WEAPON_BATTLEAXE\", \"WEAPON_COMPACTLAUNCHER\", \"WEAPON_MINISMG\", \"WEAPON_PIPEBOMB\",  \n\t\"WEAPON_POOLCUE\", \"WEAPON_SWEEPER\", \"WEAPON_WRENCH\"  \n};  \n----------------------------------------------------------------------------------------------------------------------------------------  \nTranslation table:  \npastebin.com/a39K8Nz8  \n"
	},
	"GiveWeaponObjectToPed()": {
	  "prefix": "GiveWeaponObjectToPed",
	  "body": [
		"GiveWeaponObjectToPed(${1:Object weaponObject}, ${2:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"HasPedBeenDamagedByWeapon()": {
	  "prefix": "HasPedBeenDamagedByWeapon",
	  "body": [
		"HasPedBeenDamagedByWeapon(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int weaponType})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nIt determines what weapons caused damage:  \nIf you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0  \nIf you want to define any melee weapon, second parameter=0, third parameter=1.  \nIf you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.  \n"
	},
	"HasEntityBeenDamagedByWeapon()": {
	  "prefix": "HasEntityBeenDamagedByWeapon",
	  "body": [
		"HasEntityBeenDamagedByWeapon(${1:Entity entity}, ${2:Hash weaponHash}, ${3:int weaponType})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nIt determines what weapons caused damage:  \nIf youu want to define only a specific weapon, second parameter=weapon hash code, third parameter=0  \nIf you want to define any melee weapon, second parameter=0, third parameter=1.  \nIf you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.  \n"
	},
	"HasPedGotWeapon()": {
	  "prefix": "HasPedGotWeapon",
	  "body": [
		"HasPedGotWeapon(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\np2 should be FALSE, otherwise it seems to always return FALSE  \nBool does not check if the weapon is current equipped, unfortunately.  \n"
	},
	"HasPedGotWeaponComponent()": {
	  "prefix": "HasPedGotWeaponComponent",
	  "body": [
		"HasPedGotWeaponComponent(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"HasVehicleGotProjectileAttached()": {
	  "prefix": "HasVehicleGotProjectileAttached",
	  "body": [
		"HasVehicleGotProjectileAttached(${1:Ped driver}, ${2:Vehicle vehicle}, ${3:Hash weaponHash}, ${4:Any p3})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nThird Parameter = unsure, but pretty sure it is weapon hash  \n--> get_hash_key(\"weapon_stickybomb\")  \nFourth Parameter = unsure, almost always -1  \n"
	},
	"HasWeaponAssetLoaded()": {
	  "prefix": "HasWeaponAssetLoaded",
	  "body": [
		"HasWeaponAssetLoaded(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"HasWeaponGotWeaponComponent()": {
	  "prefix": "HasWeaponGotWeaponComponent",
	  "body": [
		"HasWeaponGotWeaponComponent(${1:Object weapon}, ${2:Hash addonHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"HidePedWeaponForScriptedCutscene()": {
	  "prefix": "HidePedWeaponForScriptedCutscene",
	  "body": [
		"HidePedWeaponForScriptedCutscene(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nHides the players weapon during a cutscene.  \n"
	},
	"IsPedArmed()": {
	  "prefix": "IsPedArmed",
	  "body": [
		"IsPedArmed(${1:Ped ped}, ${2:int p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\np1 is anywhere from 4 to 7 in the scripts. Might be a weapon wheel group?  \n^It's kinda like that.   \n7 returns true if you are equipped with any weapon except your fists.  \n6 returns true if you are equipped with any weapon except melee weapons.  \n5 returns true if you are equipped with any weapon except the Explosives weapon group.  \n4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.  \n3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).  \n2 returns true only if you are equipped with any weapon from the Explosives weapon group.  \n1 returns true only if you are equipped with any Melee weapon.  \n0 never returns true.  \nNote: When I say \"Explosives weapon group\", it does not include the Jerry can and Fire Extinguisher.  \n"
	},
	"IsPedCurrentWeaponSilenced()": {
	  "prefix": "IsPedCurrentWeaponSilenced",
	  "body": [
		"IsPedCurrentWeaponSilenced(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nThis native returns a true or false value.  \nPed ped = The ped whose weapon you want to check.  \n"
	},
	"IsPedWeaponReadyToShoot()": {
	  "prefix": "IsPedWeaponReadyToShoot",
	  "body": [
		"IsPedWeaponReadyToShoot(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nProbably checks whether the ped has finished reloading or not and if the current weapon is not being switched to another.  \n"
	},
	"IsPedWeaponComponentActive()": {
	  "prefix": "IsPedWeaponComponentActive",
	  "body": [
		"IsPedWeaponComponentActive(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"IsWeaponValid()": {
	  "prefix": "IsWeaponValid",
	  "body": [
		"IsWeaponValid(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"MakePedReload()": {
	  "prefix": "MakePedReload",
	  "body": [
		"MakePedReload(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\nForces a ped to reload **only** if they are able to; if they have a full magazine, they will not reload."
	},
	"N_0x0abf535877897560()": {
	  "prefix": "N_0x0abf535877897560",
	  "body": [
		"N_0x0abf535877897560(${1:Any p0})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0x1e45b34adebee48e()": {
	  "prefix": "N_0x1e45b34adebee48e",
	  "body": [
		"N_0x1e45b34adebee48e()"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x44f1012b69313374()": {
	  "prefix": "N_0x44f1012b69313374",
	  "body": [
		"N_0x44f1012b69313374(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x2472622ce1f2d45f()": {
	  "prefix": "N_0x2472622ce1f2d45f",
	  "body": [
		"N_0x2472622ce1f2d45f(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x4757f00bc6323cfe()": {
	  "prefix": "N_0x4757f00bc6323cfe",
	  "body": [
		"N_0x4757f00bc6323cfe(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x4d1cb8dc40208a17()": {
	  "prefix": "N_0x4d1cb8dc40208a17",
	  "body": [
		"N_0x4d1cb8dc40208a17(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0x5da825a85d0ea6e6()": {
	  "prefix": "N_0x5da825a85d0ea6e6",
	  "body": [
		"N_0x5da825a85d0ea6e6(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x585847c5e4e11709()": {
	  "prefix": "N_0x585847c5e4e11709",
	  "body": [
		"N_0x585847c5e4e11709(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0x6558ac7c17bfef58()": {
	  "prefix": "N_0x6558ac7c17bfef58",
	  "body": [
		"N_0x6558ac7c17bfef58(${1:Any p0})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0x68f8be6af5cdf8a6()": {
	  "prefix": "N_0x68f8be6af5cdf8a6",
	  "body": [
		"N_0x68f8be6af5cdf8a6(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x91ef34584710be99()": {
	  "prefix": "N_0x91ef34584710be99",
	  "body": [
		"N_0x91ef34584710be99(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:int p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: int\nBoth coordinates are from objects in the decompiled scripts.\n\nNative related to [\\_0xECDC202B25E5CF48](#_0xECDC202B25E5CF48) p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts."
	},
	"N_0x977ca98939e82e4b()": {
	  "prefix": "N_0x977ca98939e82e4b",
	  "body": [
		"N_0x977ca98939e82e4b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x9fe5633880ecd8ed()": {
	  "prefix": "N_0x9fe5633880ecd8ed",
	  "body": [
		"N_0x9fe5633880ecd8ed(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0x9da58cdbf6bdbc08()": {
	  "prefix": "N_0x9da58cdbf6bdbc08",
	  "body": [
		"N_0x9da58cdbf6bdbc08(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0xa2c9ac24b4061285()": {
	  "prefix": "N_0xa2c9ac24b4061285",
	  "body": [
		"N_0xa2c9ac24b4061285(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0xb3ea4feabf41464b()": {
	  "prefix": "N_0xb3ea4feabf41464b",
	  "body": [
		"N_0xb3ea4feabf41464b(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0xb4c8d77c80c0421e()": {
	  "prefix": "N_0xb4c8d77c80c0421e",
	  "body": [
		"N_0xb4c8d77c80c0421e(${1:Ped ped}, ${2:float p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Entity\n\nOnly used once in the scripts  \nweapon::_0xB4C8D77C80C0421E(Local_888[3 /*33*/], -1082130432);  \nThe code following this relates to manually triggering an RPG rocket (creating the object, the particle fx and sound)  \n"
	},
	"N_0xcd79a550999d7d4f()": {
	  "prefix": "N_0xcd79a550999d7d4f",
	  "body": [
		"N_0xcd79a550999d7d4f(${1:Any p0})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0xe4dcec7fd5b739a5()": {
	  "prefix": "N_0xe4dcec7fd5b739a5",
	  "body": [
		"N_0xe4dcec7fd5b739a5(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0xdab963831dbfd3f4()": {
	  "prefix": "N_0xdab963831dbfd3f4",
	  "body": [
		"N_0xdab963831dbfd3f4(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0xecdc202b25e5cf48()": {
	  "prefix": "N_0xecdc202b25e5cf48",
	  "body": [
		"N_0xecdc202b25e5cf48(${1:Player player}, ${2:Any p1}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"N_0xf0a60040be558f2d()": {
	  "prefix": "N_0xf0a60040be558f2d",
	  "body": [
		"N_0xf0a60040be558f2d(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"N_0xe620fd3512a04f18()": {
	  "prefix": "N_0xe620fd3512a04f18",
	  "body": [
		"N_0xe620fd3512a04f18(${1:float p0})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"PedSkipNextReloading()": {
	  "prefix": "PedSkipNextReloading",
	  "body": [
		"PedSkipNextReloading(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\n[23.03.2017 19:08] by ins1de :  \n\"_IS_PED_RELOADING\" is totally a wrong name...  \nThis native actually disables the reloading animation and script for the specified ped. Native renamed.  \n\nOld name: IsPedReloading"
	},
	"RemoveAllProjectilesOfType()": {
	  "prefix": "RemoveAllProjectilesOfType",
	  "body": [
		"RemoveAllProjectilesOfType(${1:Hash weaponHash}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\np1 seems always to be 0  \n"
	},
	"RemoveWeaponAsset()": {
	  "prefix": "RemoveWeaponAsset",
	  "body": [
		"RemoveWeaponAsset(${1:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"RemoveAllPedWeapons()": {
	  "prefix": "RemoveAllPedWeapons",
	  "body": [
		"RemoveAllPedWeapons(${1:Ped ped}, ${2:BOOL p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nsetting the last params to false it does that same so I would suggest its not a toggle  \n"
	},
	"RemoveWeaponComponentFromWeaponObject()": {
	  "prefix": "RemoveWeaponComponentFromWeaponObject",
	  "body": [
		"RemoveWeaponComponentFromWeaponObject(${1:Any p0}, ${2:Any p1})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"RemoveWeaponComponentFromPed()": {
	  "prefix": "RemoveWeaponComponentFromPed",
	  "body": [
		"RemoveWeaponComponentFromPed(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"RemoveWeaponFromPed()": {
	  "prefix": "RemoveWeaponFromPed",
	  "body": [
		"RemoveWeaponFromPed(${1:Ped ped}, ${2:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nThis native removes a specified weapon from your selected ped.  \nWeapon Hashes: pastebin.com/0wwDZgkF  \nExample:  \nC#:  \nFunction.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);  \nC++:  \nWEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);  \nThe code above removes the knife from the player.  \n"
	},
	"RequestWeaponHighDetailModel()": {
	  "prefix": "RequestWeaponHighDetailModel",
	  "body": [
		"RequestWeaponHighDetailModel(${1:Entity weaponObject})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"RequestWeaponAsset()": {
	  "prefix": "RequestWeaponAsset",
	  "body": [
		"RequestWeaponAsset(${1:Hash weaponHash}, ${2:int p1}, ${3:int p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nNearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.  \nREQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);  \n"
	},
	"SetAmmoInClip()": {
	  "prefix": "SetAmmoInClip",
	  "body": [
		"SetAmmoInClip(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammo})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"N_0xeff296097ff1e509()": {
	  "prefix": "N_0xeff296097ff1e509",
	  "body": "N_0xeff296097ff1e509",
	  "description": "OLD NAME, PLEASE USE SetCanPedEquipAllWeapons INSTEAD!"
	},
	"SetCanPedEquipAllWeapons()": {
	  "prefix": "SetCanPedEquipAllWeapons",
	  "body": [
		"SetCanPedEquipAllWeapons(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\nDoes the same as [`_SET_CAN_PED_SELECT_WEAPON`](https://runtime.fivem.net/doc/natives/#_0xB4771B9AAF4E68E4) except for all weapons.\nOld name: N_0xeff296097ff1e509"
	},
	"N_0xb4771b9aaf4e68e4()": {
	  "prefix": "N_0xb4771b9aaf4e68e4",
	  "body": "N_0xb4771b9aaf4e68e4",
	  "description": "OLD NAME, PLEASE USE SetCanPedSelectWeapon INSTEAD!"
	},
	"SetCanPedSelectWeapon()": {
	  "prefix": "SetCanPedSelectWeapon",
	  "body": [
		"SetCanPedSelectWeapon(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL toggle})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\nFor the player ped this will also gray out the weapon in the weapon wheel.\nOld name: N_0xb4771b9aaf4e68e4"
	},
	"SetCurrentPedWeapon()": {
	  "prefix": "SetCurrentPedWeapon",
	  "body": [
		"SetCurrentPedWeapon(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL equipNow})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetCurrentPedVehicleWeapon()": {
	  "prefix": "SetCurrentPedVehicleWeapon",
	  "body": [
		"SetCurrentPedVehicleWeapon(${1:Ped ped}, ${2:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n"
	},
	"SetPedAmmo()": {
	  "prefix": "SetPedAmmo",
	  "body": [
		"SetPedAmmo(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammo})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetFlashLightFadeDistance()": {
	  "prefix": "SetFlashLightFadeDistance",
	  "body": [
		"SetFlashLightFadeDistance(${1:float distance})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: Any\n"
	},
	"SetPedAmmoToDrop()": {
	  "prefix": "SetPedAmmoToDrop",
	  "body": [
		"SetPedAmmoToDrop(${1:Any ammoType}, ${2:int ammo})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetPedAmmoByType()": {
	  "prefix": "SetPedAmmoByType",
	  "body": [
		"SetPedAmmoByType(${1:Ped ped}, ${2:Any ammoType}, ${3:int ammo})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetPedChanceOfFiringBlanks()": {
	  "prefix": "SetPedChanceOfFiringBlanks",
	  "body": [
		"SetPedChanceOfFiringBlanks(${1:Ped ped}, ${2:float xBias}, ${3:float yBias})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetPedCurrentWeaponVisible()": {
	  "prefix": "SetPedCurrentWeaponVisible",
	  "body": [
		"SetPedCurrentWeaponVisible(${1:Ped ped}, ${2:BOOL visible}, ${3:BOOL deselectWeapon}, ${4:BOOL p3}, ${5:BOOL p4})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nHas 5 parameters since latest patches.  \n"
	},
	"SetPedDropsWeapon()": {
	  "prefix": "SetPedDropsWeapon",
	  "body": [
		"SetPedDropsWeapon(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetPedDropsInventoryWeapon()": {
	  "prefix": "SetPedDropsInventoryWeapon",
	  "body": [
		"SetPedDropsInventoryWeapon(${1:Ped ped}, ${2:Hash weaponHash}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:int ammoCount})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\n[16/06/2017 by ins1de] :  \nDrops the weapon object from selected peds and turns it into a pickup.  \nOffset defines the next position of the weapon, ammo count is the stored ammo in the pickup (if ammoCount == 0, pickup won't be created)  \nDefault offset values (freemode.c):  \nif (is_ped_walking(player_ped_id()))  \n        {  \n            vVar1 = {0.6f, 4.7f, -0.1f};  \n        }  \n        else if (is_ped_sprinting(player_ped_id()))  \n        {  \n            vVar1 = {0.6f, 5.7f, -0.1f};  \n        }  \n        else if (is_ped_running(player_ped_id()))  \n        {  \n            vVar1 = {0.6f, 4.7f, -0.1f};  \n        }  \n        else  \n        {  \n            vVar1 = {0.4f, 4.7f, -0.1f};  \n        }  \n"
	},
	"SetPedDropsWeaponsWhenDead()": {
	  "prefix": "SetPedDropsWeaponsWhenDead",
	  "body": [
		"SetPedDropsWeaponsWhenDead(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetPedInfiniteAmmo()": {
	  "prefix": "SetPedInfiniteAmmo",
	  "body": [
		"SetPedInfiniteAmmo(${1:Ped ped}, ${2:BOOL toggle}, ${3:Hash weaponHash})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetPedGadget()": {
	  "prefix": "SetPedGadget",
	  "body": [
		"SetPedGadget(${1:Ped ped}, ${2:Hash gadgetHash}, ${3:BOOL p2})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\np1/gadgetHash was always 0xFBAB5776 (\"GADGET_PARACHUTE\").  \np2 is always true.  \n"
	},
	"SetPedInfiniteAmmoClip()": {
	  "prefix": "SetPedInfiniteAmmoClip",
	  "body": [
		"SetPedInfiniteAmmoClip(${1:Ped ped}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"SetWeaponAnimationOverride()": {
	  "prefix": "SetWeaponAnimationOverride",
	  "body": [
		"SetWeaponAnimationOverride(${1:Ped ped}, ${2:Hash animStyle})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\nChanges the selected ped aiming animation style.   \nNote : You must use GET_HASH_KEY!  \nStrings to use with GET_HASH_KEY :  \n\t\"Ballistic\",  \n\t\"Default\",  \n\t\"Fat\",  \n\t\"Female\",  \n\t\"FirstPerson\",  \n\t\"FirstPersonAiming\",  \n\t\"FirstPersonFranklin\",  \n\t\"FirstPersonFranklinAiming\",  \n\t\"FirstPersonFranklinRNG\",  \n\t\"FirstPersonFranklinScope\",  \n\t\"FirstPersonMPFemale\",  \n\t\"FirstPersonMichael\",  \n\t\"FirstPersonMichaelAiming\",  \n\t\"FirstPersonMichaelRNG\",  \n\t\"FirstPersonMichaelScope\",  \n\t\"FirstPersonRNG\",  \n\t\"FirstPersonScope\",  \n\t\"FirstPersonTrevor\",  \n\t\"FirstPersonTrevorAiming\",  \n\t\"FirstPersonTrevorRNG\",  \n\t\"FirstPersonTrevorScope\",  \n\t\"Franklin\",  \n\t\"Gang\",  \n\t\"Gang1H\",  \n\t\"GangFemale\",  \n\t\"Hillbilly\",  \n\t\"MP_F_Freemode\",  \n\t\"Michael\",  \n\t\"SuperFat\",  \n\t\"Trevor\"  \n"
	},
	"SetWeaponSmokegrenadeAssigned()": {
	  "prefix": "SetWeaponSmokegrenadeAssigned",
	  "body": [
		"SetWeaponSmokegrenadeAssigned(${1:Ped ped})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: BOOL\n\nHash collision, real name is: IS_FLASH_LIGHT_ON  \n"
	},
	"SetPedWeaponTintIndex()": {
	  "prefix": "SetPedWeaponTintIndex",
	  "body": [
		"SetPedWeaponTintIndex(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int tintIndex})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n\ntintIndex can be the following:  \n1   \n2   \n3   \n4   \n5   \n6   \n7  \n"
	},
	"SetWeaponObjectTintIndex()": {
	  "prefix": "SetWeaponObjectTintIndex",
	  "body": [
		"SetWeaponObjectTintIndex(${1:Object weapon}, ${2:int tintIndex})"
	  ],
	  "description": "Namespace: WEAPON\nReturns: void\n"
	},
	"GetHashOfMapAreaAtCoords()": {
	  "prefix": "GetHashOfMapAreaAtCoords",
	  "body": [
		"GetHashOfMapAreaAtCoords(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: ZONE\nReturns: Hash\n\nReturns a hash representing which part of the map the given coords are located.  \nPossible return values:  \n(Hash of) city -> -289320599  \n(Hash of) countryside -> 2072609373  \nC# Example :  \nPed player = Game.Player.Character;  \nHash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);  \n"
	},
	"GetNameOfZone()": {
	  "prefix": "GetNameOfZone",
	  "body": [
		"GetNameOfZone(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: ZONE\nReturns: char*\n\nAIRP = Los Santos International Airport  \nALAMO = Alamo Sea  \nALTA = Alta  \nARMYB = Fort Zancudo  \nBANHAMC = Banham Canyon Dr  \nBANNING = Banning  \nBEACH = Vespucci Beach  \nBHAMCA = Banham Canyon  \nBRADP = Braddock Pass  \nBRADT = Braddock Tunnel  \nBURTON = Burton  \nCALAFB = Calafia Bridge  \nCANNY = Raton Canyon  \nCCREAK = Cassidy Creek  \nCHAMH = Chamberlain Hills  \nCHIL = Vinewood Hills  \nCHU = Chumash  \nCMSW = Chiliad Mountain State Wilderness  \nCYPRE = Cypress Flats  \nDAVIS = Davis  \nDELBE = Del Perro Beach  \nDELPE = Del Perro  \nDELSOL = La Puerta  \nDESRT = Grand Senora Desert  \nDOWNT = Downtown  \nDTVINE = Downtown Vinewood  \nEAST_V = East Vinewood  \nEBURO = El Burro Heights  \nELGORL = El Gordo Lighthouse  \nELYSIAN = Elysian Island  \nGALFISH = Galilee  \nGOLF = GWC and Golfing Society  \nGRAPES = Grapeseed  \nGREATC = Great Chaparral  \nHARMO = Harmony  \nHAWICK = Hawick  \nHORS = Vinewood Racetrack  \nHUMLAB = Humane Labs and Research  \nJAIL = Bolingbroke Penitentiary  \nKOREAT = Little Seoul  \nLACT = Land Act Reservoir  \nLAGO = Lago Zancudo  \nLDAM = Land Act Dam  \nLEGSQU = Legion Square  \nLMESA = La Mesa  \nLOSPUER = La Puerta  \nMIRR = Mirror Park  \nMORN = Morningwood  \nMOVIE = Richards Majestic  \nMTCHIL = Mount Chiliad  \nMTGORDO = Mount Gordo  \nMTJOSE = Mount Josiah  \nMURRI = Murrieta Heights  \nNCHU = North Chumash  \nNOOSE = N.O.O.S.E  \nOCEANA = Pacific Ocean  \nPALCOV = Paleto Cove  \nPALETO = Paleto Bay  \nPALFOR = Paleto Forest  \nPALHIGH = Palomino Highlands  \nPALMPOW = Palmer-Taylor Power Station  \nPBLUFF = Pacific Bluffs  \nPBOX = Pillbox Hill  \nPROCOB = Procopio Beach  \nRANCHO = Rancho  \nRGLEN = Richman Glen  \nRICHM = Richman  \nROCKF = Rockford Hills  \nRTRAK = Redwood Lights Track  \nSANAND = San Andreas  \nSANCHIA = San Chianski Mountain Range  \nSANDY = Sandy Shores  \nSKID = Mission Row  \nSLAB = Stab City  \nSTAD = Maze Bank Arena  \nSTRAW = Strawberry  \nTATAMO = Tataviam Mountains  \nTERMINA = Terminal  \nTEXTI = Textile City  \nTONGVAH = Tongva Hills  \nTONGVAV = Tongva Valley  \nVCANA = Vespucci Canals  \nVESP = Vespucci  \nVINE = Vinewood  \nWINDF = Ron Alternates Wind Farm  \nWVINE = West Vinewood  \nZANCUDO = Zancudo River  \nZP_ORT = Port of South Los Santos  \nZQ_UAR = Davis Quartz  \n"
	},
	"ClearPopscheduleOverrideVehicleModel()": {
	  "prefix": "ClearPopscheduleOverrideVehicleModel",
	  "body": [
		"ClearPopscheduleOverrideVehicleModel(${1:int scheduleId})"
	  ],
	  "description": "Namespace: ZONE\nReturns: void\n\nOnly used once in the decompiled scripts. Seems to be related to scripted vehicle generators.  \nModified example from \"am_imp_exp.c4\", line 6418:  \n/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));  \netc.  \n*/  \nSTREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);  \nZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);  \n"
	},
	"GetZoneFromNameId()": {
	  "prefix": "GetZoneFromNameId",
	  "body": [
		"GetZoneFromNameId(${1:char* zoneName})"
	  ],
	  "description": "Namespace: ZONE\nReturns: int\n\n'zoneName' corresponds to an entry in 'popzone.ipl'.  \nAIRP = Los Santos International Airport  \nALAMO = Alamo Sea  \nALTA = Alta  \nARMYB = Fort Zancudo  \nBANHAMC = Banham Canyon Dr  \nBANNING = Banning  \nBEACH = Vespucci Beach  \nBHAMCA = Banham Canyon  \nBRADP = Braddock Pass  \nBRADT = Braddock Tunnel  \nBURTON = Burton  \nCALAFB = Calafia Bridge  \nCANNY = Raton Canyon  \nCCREAK = Cassidy Creek  \nCHAMH = Chamberlain Hills  \nCHIL = Vinewood Hills  \nCHU = Chumash  \nCMSW = Chiliad Mountain State Wilderness  \nCYPRE = Cypress Flats  \nDAVIS = Davis  \nDELBE = Del Perro Beach  \nDELPE = Del Perro  \nDELSOL = La Puerta  \nDESRT = Grand Senora Desert  \nDOWNT = Downtown  \nDTVINE = Downtown Vinewood  \nEAST_V = East Vinewood  \nEBURO = El Burro Heights  \nELGORL = El Gordo Lighthouse  \nELYSIAN = Elysian Island  \nGALFISH = Galilee  \nGOLF = GWC and Golfing Society  \nGRAPES = Grapeseed  \nGREATC = Great Chaparral  \nHARMO = Harmony  \nHAWICK = Hawick  \nHORS = Vinewood Racetrack  \nHUMLAB = Humane Labs and Research  \nJAIL = Bolingbroke Penitentiary  \nKOREAT = Little Seoul  \nLACT = Land Act Reservoir  \nLAGO = Lago Zancudo  \nLDAM = Land Act Dam  \nLEGSQU = Legion Square  \nLMESA = La Mesa  \nLOSPUER = La Puerta  \nMIRR = Mirror Park  \nMORN = Morningwood  \nMOVIE = Richards Majestic  \nMTCHIL = Mount Chiliad  \nMTGORDO = Mount Gordo  \nMTJOSE = Mount Josiah  \nMURRI = Murrieta Heights  \nNCHU = North Chumash  \nNOOSE = N.O.O.S.E  \nOCEANA = Pacific Ocean  \nPALCOV = Paleto Cove  \nPALETO = Paleto Bay  \nPALFOR = Paleto Forest  \nPALHIGH = Palomino Highlands  \nPALMPOW = Palmer-Taylor Power Station  \nPBLUFF = Pacific Bluffs  \nPBOX = Pillbox Hill  \nPROCOB = Procopio Beach  \nRANCHO = Rancho  \nRGLEN = Richman Glen  \nRICHM = Richman  \nROCKF = Rockford Hills  \nRTRAK = Redwood Lights Track  \nSANAND = San Andreas  \nSANCHIA = San Chianski Mountain Range  \nSANDY = Sandy Shores  \nSKID = Mission Row  \nSLAB = Stab City  \nSTAD = Maze Bank Arena  \nSTRAW = Strawberry  \nTATAMO = Tataviam Mountains  \nTERMINA = Terminal  \nTEXTI = Textile City  \nTONGVAH = Tongva Hills  \nTONGVAV = Tongva Valley  \nVCANA = Vespucci Canals  \nVESP = Vespucci  \nVINE = Vinewood  \nWINDF = Ron Alternates Wind Farm  \nWVINE = West Vinewood  \nZANCUDO = Zancudo River  \nZP_ORT = Port of South Los Santos  \nZQ_UAR = Davis Quartz  \n"
	},
	"GetZoneAtCoords()": {
	  "prefix": "GetZoneAtCoords",
	  "body": [
		"GetZoneAtCoords(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: ZONE\nReturns: int\n"
	},
	"GetZoneScumminess()": {
	  "prefix": "GetZoneScumminess",
	  "body": [
		"GetZoneScumminess(${1:int zoneId})"
	  ],
	  "description": "Namespace: ZONE\nReturns: int\n\ncellphone range 1- 5 used for signal bar in iFruit phone  \n"
	},
	"SetZoneEnabled()": {
	  "prefix": "SetZoneEnabled",
	  "body": [
		"SetZoneEnabled(${1:int zoneId}, ${2:BOOL toggle})"
	  ],
	  "description": "Namespace: ZONE\nReturns: void\n"
	},
	"GetZonePopschedule()": {
	  "prefix": "GetZonePopschedule",
	  "body": [
		"GetZonePopschedule(${1:int zoneId})"
	  ],
	  "description": "Namespace: ZONE\nReturns: int\n"
	},
	"OverridePopscheduleVehicleModel()": {
	  "prefix": "OverridePopscheduleVehicleModel",
	  "body": [
		"OverridePopscheduleVehicleModel(${1:int scheduleId}, ${2:Hash vehicleHash})"
	  ],
	  "description": "Namespace: ZONE\nReturns: void\n\nOnly used once in the decompiled scripts. Seems to be related to scripted vehicle generators.  \nModified example from \"am_imp_exp.c4\", line 6406:  \n/* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));  \netc.  \n*/  \nZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);  \nSTREAMING::REQUEST_MODEL(vehicleHash);  \n"
	},
	"AddToClockTime()": {
	  "prefix": "AddToClockTime",
	  "body": [
		"AddToClockTime(${1:int hours}, ${2:int minutes}, ${3:int seconds})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n"
	},
	"GetClockDayOfMonth()": {
	  "prefix": "GetClockDayOfMonth",
	  "body": [
		"GetClockDayOfMonth()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\n"
	},
	"GetClockDayOfWeek()": {
	  "prefix": "GetClockDayOfWeek",
	  "body": [
		"GetClockDayOfWeek()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\n\nGets the current day of the week.  \n0: Sunday  \n1: Monday  \n2: Tuesday  \n3: Wednesday  \n4: Thursday  \n5: Friday  \n6: Saturday  \n"
	},
	"AdvanceClockTimeTo()": {
	  "prefix": "AdvanceClockTimeTo",
	  "body": [
		"AdvanceClockTimeTo(${1:int hour}, ${2:int minute}, ${3:int second})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n"
	},
	"GetClockMonth()": {
	  "prefix": "GetClockMonth",
	  "body": [
		"GetClockMonth()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\n"
	},
	"GetClockHours()": {
	  "prefix": "GetClockHours",
	  "body": [
		"GetClockHours()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\n\nGets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)  \n"
	},
	"GetClockSeconds()": {
	  "prefix": "GetClockSeconds",
	  "body": [
		"GetClockSeconds()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\n\nGets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.  \n"
	},
	"GetClockMinutes()": {
	  "prefix": "GetClockMinutes",
	  "body": [
		"GetClockMinutes()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\n\nGets the current ingame clock minute.  \n"
	},
	"GetClockYear()": {
	  "prefix": "GetClockYear",
	  "body": [
		"GetClockYear()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\n"
	},
	"GetLocalTime()": {
	  "prefix": "GetLocalTime",
	  "body": [
		"GetLocalTime(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n\nGets local system time as year, month, day, hour, minute and second.  \nExample usage:  \nint year;  \nint month;  \nint day;  \nint hour;  \nint minute;  \nint second;  \nor use std::tm struct  \nTIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);  \n"
	},
	"GetMillisecondsPerGameMinute()": {
	  "prefix": "GetMillisecondsPerGameMinute",
	  "body": [
		"GetMillisecondsPerGameMinute()"
	  ],
	  "description": "Namespace: CLOCK\nReturns: int\nReturns how many real ms are equal to one game minute.\nA getter for [`SetMillisecondsPerGameMinute`](#_0x36CA2554)."
	},
	"GetPosixTime()": {
	  "prefix": "GetPosixTime",
	  "body": [
		"GetPosixTime(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n\nGets system time as year, month, day, hour, minute and second.  \nExample usage:  \n\tint year;  \n\tint month;  \n\tint day;  \n\tint hour;  \n\tint minute;  \n\tint second;  \n\tTIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);  \n"
	},
	"GetUtcTime()": {
	  "prefix": "GetUtcTime",
	  "body": [
		"GetUtcTime(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n\nconsole hash: 0xC589CD7D = GET_UTC_TIME  \ngets current UTC time  \n\nOld name: GetLocalTime"
	},
	"PauseClock()": {
	  "prefix": "PauseClock",
	  "body": [
		"PauseClock(${1:BOOL toggle})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n"
	},
	"SetClockTime()": {
	  "prefix": "SetClockTime",
	  "body": [
		"SetClockTime(${1:int hour}, ${2:int minute}, ${3:int second})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n\nSET_CLOCK_TIME(12, 34, 56);  \n"
	},
	"SetClockDate()": {
	  "prefix": "SetClockDate",
	  "body": [
		"SetClockDate(${1:int day}, ${2:int month}, ${3:int year})"
	  ],
	  "description": "Namespace: CLOCK\nReturns: void\n"
	},
	"Ceil()": {
	  "prefix": "Ceil",
	  "body": [
		"Ceil(${1:float value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n\nI'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down  \n"
	},
	"Cos()": {
	  "prefix": "Cos",
	  "body": [
		"Cos(${1:float value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n"
	},
	"Floor()": {
	  "prefix": "Floor",
	  "body": [
		"Floor(${1:float value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n"
	},
	"N_0x42b65deef2edf2a1()": {
	  "prefix": "N_0x42b65deef2edf2a1",
	  "body": [
		"N_0x42b65deef2edf2a1(${1:Any p0})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: void\n"
	},
	"Pow()": {
	  "prefix": "Pow",
	  "body": [
		"Pow(${1:float base}, ${2:float exponent})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n"
	},
	"Round()": {
	  "prefix": "Round",
	  "body": [
		"Round(${1:float value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n"
	},
	"Settimera()": {
	  "prefix": "Settimera",
	  "body": [
		"Settimera(${1:int value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: void\n"
	},
	"Settimerb()": {
	  "prefix": "Settimerb",
	  "body": [
		"Settimerb(${1:int value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: void\n"
	},
	"ShiftLeft()": {
	  "prefix": "ShiftLeft",
	  "body": [
		"ShiftLeft(${1:int value}, ${2:int bitShift})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n"
	},
	"ShiftRight()": {
	  "prefix": "ShiftRight",
	  "body": [
		"ShiftRight(${1:int value}, ${2:int bitShift})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n"
	},
	"Sin()": {
	  "prefix": "Sin",
	  "body": [
		"Sin(${1:float value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n"
	},
	"Sqrt()": {
	  "prefix": "Sqrt",
	  "body": [
		"Sqrt(${1:float value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n"
	},
	"StartNewScript()": {
	  "prefix": "StartNewScript",
	  "body": [
		"StartNewScript(${1:char* scriptName}, ${2:int stackSize})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n\nExamples:  \ng_384A = SYSTEM::START_NEW_SCRIPT(\"cellphone_flashhand\", 1424);  \nl_10D = SYSTEM::START_NEW_SCRIPT(\"taxiService\", 1828);  \nSYSTEM::START_NEW_SCRIPT(\"AM_MP_YACHT\", 5000);  \nSYSTEM::START_NEW_SCRIPT(\"emergencycall\", 512);  \nSYSTEM::START_NEW_SCRIPT(\"emergencycall\", 512);   \nSYSTEM::START_NEW_SCRIPT(\"FM_maintain_cloud_header_data\", 1424);  \nSYSTEM::START_NEW_SCRIPT(\"FM_Mission_Controller\", 31000);  \nSYSTEM::START_NEW_SCRIPT(\"tennis_family\", 3650);  \nSYSTEM::START_NEW_SCRIPT(\"Celebrations\", 3650);  \n\t\tDecompiled examples of usage when starting a script:  \n   SCRIPT::REQUEST_SCRIPT(a_0);  \n   if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {  \n       SYSTEM::START_NEW_SCRIPT(a_0, v_3);  \n       SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);  \n       return 1;  \n   }  \n\t\tor:  \n   v_2 = \"MrsPhilips2\";  \n   SCRIPT::REQUEST_SCRIPT(v_2);  \n   while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {  \n   SCRIPT::REQUEST_SCRIPT(v_2);  \n   SYSTEM::WAIT(0);  \n   }  \n   sub_8792(36);  \n   SYSTEM::START_NEW_SCRIPT(v_2, 17000);  \n   SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);  \n\t\tAll native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi  \n"
	},
	"StartNewScriptWithArgs()": {
	  "prefix": "StartNewScriptWithArgs",
	  "body": [
		"StartNewScriptWithArgs(${1:char* scriptName}, ${2:Any* args}, ${3:int argCount}, ${4:int stackSize})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n\nreturn : script thread id, 0 if failed  \nPass pointer to struct of args in p1, size of struct goes into p2  \n"
	},
	"StartNewStreamedScript()": {
	  "prefix": "StartNewStreamedScript",
	  "body": "StartNewStreamedScript",
	  "description": "OLD NAME, PLEASE USE StartNewScriptWithNameHash INSTEAD!"
	},
	"StartNewScriptWithNameHash()": {
	  "prefix": "StartNewScriptWithNameHash",
	  "body": [
		"StartNewScriptWithNameHash(${1:Hash scriptHash}, ${2:int stackSize})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n\nOld name: StartNewStreamedScript"
	},
	"StartNewStreamedScriptWithArgs()": {
	  "prefix": "StartNewStreamedScriptWithArgs",
	  "body": "StartNewStreamedScriptWithArgs",
	  "description": "OLD NAME, PLEASE USE StartNewScriptWithNameHashAndArgs INSTEAD!"
	},
	"StartNewScriptWithNameHashAndArgs()": {
	  "prefix": "StartNewScriptWithNameHashAndArgs",
	  "body": [
		"StartNewScriptWithNameHashAndArgs(${1:Hash scriptHash}, ${2:Any* args}, ${3:int argCount}, ${4:int stackSize})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n\nOld name: StartNewStreamedScriptWithArgs"
	},
	"Timerb()": {
	  "prefix": "Timerb",
	  "body": [
		"Timerb()"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n"
	},
	"Timera()": {
	  "prefix": "Timera",
	  "body": [
		"Timera()"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: int\n\nCounts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).  \n"
	},
	"Timestep()": {
	  "prefix": "Timestep",
	  "body": [
		"Timestep()"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n\nGets the current frame time.  \n"
	},
	"Vdist()": {
	  "prefix": "Vdist",
	  "body": [
		"Vdist(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n\nCalculates distance between vectors.  \n"
	},
	"ToFloat()": {
	  "prefix": "ToFloat",
	  "body": [
		"ToFloat(${1:int value})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n"
	},
	"Vdist_2()": {
	  "prefix": "Vdist_2",
	  "body": [
		"Vdist_2(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n\nCalculates distance between vectors but does not perform Sqrt operations. (Its way faster)  \n"
	},
	"Vmag_2()": {
	  "prefix": "Vmag_2",
	  "body": [
		"Vmag_2(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n\nCalculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)  \n"
	},
	"Wait()": {
	  "prefix": "Wait",
	  "body": [
		"Wait(${1:int* ms})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: void\n\nPauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use   \nstatic void WAIT(DWORD time);  \n\t\tfound in main.h   \n\t\t--------------------------------------------------------------------  \n\t\tIt does not actually seem to wait the amount of milliseconds stated like the normal WAIT() command does, but it does seem to make task sequences work more smoothly  \n\t\tSystem native hashes do not change on gameupdate  \n"
	},
	"Vmag()": {
	  "prefix": "Vmag",
	  "body": [
		"Vmag(${1:float x}, ${2:float y}, ${3:float z})"
	  ],
	  "description": "Namespace: SYSTEM\nReturns: float\n\nCalculates the magnitude of a vector.  \n"
	}
  }