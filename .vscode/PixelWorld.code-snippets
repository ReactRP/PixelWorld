{
    "manifestSetup": {
		"prefix": "manifestSetup",
		"body": [
			"fx_version 'bodacious'",
			"games {'gta5'} -- 'gta5' for GTAv / 'rdr3' for Red Dead 2, 'gta5','rdr3' for both",
			"",
			"description 'PixelWorld [Script Full Name]'",
			"name 'PixelWorld: [resourcefoldername]'",
			"author 'PixelWorldRP [Author]'",
			"version 'v1.0.0'",
			"url 'https://www.pixelworldrp.com'",
			"",
			"server_scripts {",
				"\t'@pw_mysql/lib/MySQL.lua', -- Required for MySQL Support",
				"\t'config/main.lua',",
				"\t'server/main.lua',",
			"}",
			"",
			"client_scripts {",
				"\t'config/main.lua',",
				"\t'client/main.lua',",
			"}",
			"",
			"-- ui_page 'nui/index.html' -- Only Required if implementing a NUI",
			"",
			"-- files { -- Any NUI Files also need to be loaded here.",
				"\t-- 'file1.gif',",
				"\t-- 'file2.lua',",
			"--}",
			"",
			"dependencies {",
				"\t'pw_mysql',",
				"\t'pw_notify',",
				"\t'pw_progbar',",
				"\t'pw_core'",
			"}"
		]
	},
	"ServerSetup": {
		"prefix": "ServerSetup",
		"body": [
			"PW = nil",
			"",
			"TriggerEvent('pw:loadFramework', function(framework)",
				"\tPW = framework",
			"end)";
		]
	},
	"ServerCacheLoaded": {
		"prefix": "ServerCacheLoaded",
		"body": [
			"AddEventHandler('pw:databaseCachesLoaded', function(caches)",
				"",
				"\t--######################################################################################################################################################",
				"\t--[[", 
				"\t\tDelete all the following that you do not need, if you dont need any of them, you can remove them all, and create your own starup method here",
				"\t\tThis function will be called when two conditions are met, MySQL has been loaded and is ready, and the framework has loaded all required caches,",
				"\t\tIt will also only load once all API Keys and Server Keys have been validated with our API Server.",
				"\t\tThis will also get triggered when ever a administrator runs the 'reloadcache' command in chat.",
				"\t]]--",
				"\t--######################################################################################################################################################",
				"",
				"\titemStore = caches.itemStore -- The Servers Item Database",
				"\tcharacters = caches.characters -- The Servers Characters Database (Not Functions)",
				"\tusers = caches.users -- The Servers Users Database (Not functions)",
				"\tweapons = caches.weapons -- The Servers Weapons Cache Database",
				"\tvehicles = caches.vehicles -- The Servers Vehicles Database",
				"\tproperties = caches.properties -- The Servers Properties (Owned + Unowned) database",
				"\tmotels = caches.motels -- The Servers Motels Database",
				"\tentities = caches.entities -- The Server Inventory Entity Slots Database",
				"\tshopItemSets = caches.shopItemSets -- The Servers Shop Inventory Selling Sets Database",
				"\tgangs = caches.gangs -- Loads the Gangs Database",
			"end)",
		]
	},
	"ClientSetup": {
		"prefix": "ClientSetup",
		"body": [
			"PW = nil",
			"characterLoaded, GLOBAL_PED, GLOBAL_COORDS, playerData = false, nil, nil, nil",
			"",
			"Citizen.CreateThread(function()",
				"\twhile PW == nil do",
					"\t\tTriggerEvent('pw:loadFramework', function(framework) PW = framework end)",
					"\t\tCitizen.Wait(1)",
				"\tend",
			"end)",
			"",
			"RegisterNetEvent('pw:characterLoaded')",
			"AddEventHandler('pw:characterLoaded', function(unload, ready, data)",
				"\tif not unload then",
					"\t\tif ready then",
						"\t\t\tGLOBAL_PED = PlayerPedId()",
						"\t\t\tGLOBAL_COORDS = GetEntityCoords(GLOBAL_PED)",
						"\t\t\tcharacterLoaded = true",
					"\t\telse",
					"\t\t\tplayerData = data",
					"\t\tend",
				"\telse",
				"\t\tplayerData = nil",
				"\t\tcharacterLoaded = false",
				"\tend",
			"end)",
			"",
			"Citizen.CreateThread(function()",
				"\twhile true do",
					"\tCitizen.Wait(500)",
					"\t\tif characterLoaded then",
					"\t\t\tlocal playerPed = PlayerPedId()",
					"\t\t\tif playerPed ~= GLOBAL_PED then",
					"\t\t\t\tGLOBAL_PED = playerPed",
					"\t\t\tend",
					"\t\tend",
					"\tend",
			"end)",
			"",
			"Citizen.CreateThread(function()",
				"\twhile true do",
					"\t\tCitizen.Wait(200)",
					"\t\tif characterLoaded then",
						"\t\t\tGLOBAL_COORDS = GetEntityCoords(GLOBAL_PED)",
					"\t\tend",
				"\tend",
			"end)",
		]
	},
	"HTMLStart": {
		"prefix": "HTMLStart",
		"body": [
			"<!doctype html>",
			"<html lang=\"en\">",
			"\t<head>",
				"\t\t<!-- Required meta tags -->",
				"\t\t<meta charset=\"utf-8\">",
				"\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">",
			"",
				"\t\t<!-- Bootstrap CSS -->",
				"\t\t<link rel=\"stylesheet\" href=\"https://assets.reactrp.com/bootstrap/css/bootstrap.min.css\" >",
				"\t\t<link rel=\"stylesheet\" href=\"https://assets.reactrp.com/fonts/css/all.min.css\">",
				"\t\t<link rel=\"stylesheet\" href=\"${1:internalStyleSheet}\">",
			"",
				"\t\t<title>${2:title}</title>",
				"\t</head>",
				"\t<body>",
			"",
			"${4:ContentStartHere}",
			"",
				"<!-- Optional JavaScript -->",
				"<!-- jQuery first, then Popper.js, then Bootstrap JS -->",
				"\t\t<script src=\"https://assets.reactrp.com/jquery/jquery-3.4.1.min.js\"></script>",
				"\t\t<script src=\"https://assets.reactrp.com/popper/popper.min.js\"></script>",
				"\t\t<script src=\"https://assets.reactrp.com/bootstrap/js/bootstrap.min.js\"></script>",
				"\t\t<script src=\"${3:InternalJSFile}\"></script>",
			"\t</body>",
			"</html>",
		]
	},
	"sendAlert": {
		"prefix": "SendAlert",
		"body": "exports.pw_notify:SendAlert('${1:Alert}', '${2:Message}', ${3:msec})"
	},
	"svsendAlert": {
		"prefix": "svSendAlert",
		"body": "TriggerClientEvent('pw:notification:SendAlert', _src, { type = '${1:Alert}', text = '${2:Message}', length = ${3:msec} })"
	},
	"progressBar": {
		"prefix": "progressBar",
		"body": ["TriggerEvent('pw:progressbar:progress',",
		"\t{",
		"\t\tname = 'accessing_atm',",
		"\t\tduration = ${1:MSEC},",
		"\t\tlabel = '${2:LABEL}',",
		"\t\tuseWhileDead = false,",
		"\t\tcanCancel = false,",
		"\t\tcontrolDisables = {",
		"\t\t\tdisableMovement = false,",
		"\t\t\tdisableCarMovement = false,",
		"\t\t\tdisableMouse = false,",
		"\t\t\tdisableCombat = false,",
		"\t\t},",
		"\t},",
		"\tfunction(status)",
		"\t\tif not status then",
		"\t\t\t${3:SUCCESSACTION}",
		"\t\telse",
		"\t\t\t${4:CANCELLEDACTION}",
		"\t\tend",
		"\tend)",],
	},
	"updateJob": {
		"prefix": "updateJob",
		"body": [
			"RegisterNetEvent('pw:updateJob')",
			"AddEventHandler('pw:updateJob', function(data)",
				"\tif playerData ~= nil then",
					"\t\tplayerData.job = data",
				"\tend",
			"end)"
		]
	},
	"updateGang": {
		"prefix": "updateGang",
		"body": [
			"RegisterNetEvent('pw:setGang')",
			"AddEventHandler('pw:setGang', function(data)",
				"\tif playerData ~= nil then",
					"\t\tplayerData.gang = data",
				"\tend",
			"end)"
		]
	},
	"toggleDuty": {
		"prefix": "toggleDuty",
		"body": [
			"RegisterNetEvent('pw:toggleDuty')",
			"AddEventHandler('pw:toggleDuty', function(toggle)",
				"\tif playerData then",
					"\t\tplayerData.job.duty = toggle",
				"\tend",
			"end)"
		]
	},
	"sourceChar": {
		"prefix": "sourceChar",
		"body": "_char = exports['pw_core']:getCharacter(${1:source})"
	},
	"startPersistent": {
		"prefix": "startPersistent",
		"body": "exports.pw_notify:PersistentAlert('start', '${1:id}', '${2:notificationType}', '${3:Message}', {${4:styling}})"
	},
	"endPersistent": {
		"prefix": "endPersistent",
		"body": "exports.pw_notify:PersistentAlert('end', '${1:id}')"
	},
	"justAllowPTTon": {
		"prefix": "justAllowPTTon",
		"body": "TriggerEvent('pw_voip:client:onlyAllowPTTOn')"
	},
	"justAllowPTToff": {
		"prefix": "justAllowPTToff",
		"body": "TriggerEvent('pw_voip:client:onlyAllowPTTOff')"
	},
	"addChatCommand": {
		"prefix": "addChatCommand",
		"body": [
			"exports.pw_chat:AddChatCommand('${1:command}', function(source, args, rawCommand)",
				"\t",
			"end, {",
				"\thelp = '${2:description}',",
				"\tparams = {",
					"\t\t{",
						"\t\t\tname = '${3:param1}',",
						"\t\t\thelp = '${4:param1_description}',",
					"\t\t},",
					"\t\t{",
						"\t\t\tname = '${5:param2}',",
						"\t\t\thelp = '${6:param2_description}',",
					"\t\t}",
				"\t}",
			"}, -1, { '${7:whitelistedjob}' })",
		]
	},
	"addAdminChatCommand": {
		"prefix": "addAdminChatCommand",
		"body": [
			"exports.pw_chat:AddAdminChatCommand('${1:command}', function(source, args, rawCommand)",
				"\t",
			"end, {",
				"\thelp = '${2:description}',",
				"\tparams = {",
					"\t\t{",
						"\t\t\tname = '${3:param1}',",
						"\t\t\thelp = '${4:param1_description}',",
					"\t\t},",
					"\t\t{",
						"\t\t\tname = '${5:param2}',",
						"\t\t\thelp = '${6:param2_description}',",
					"\t\t}",
				"\t}",
			"}, -1)",
		]
	},
	"generateMenu": {
		"prefix": "generateMenu",
		"body": [
			"local menu = {}",
			"",
			"",
			"",
			"TriggerEvent('pw_interact:generateMenu', menu, '${1:title}')"
		]
	},
	"generateForm": {
		"prefix": "generateForm",
		"body": [
			"local form = {}",
			"",
			"TriggerEvent('pw_interact:generateForm', '${1:event}', '${2:eventTrigger}', form, '${3:title}', {}, false, '350px', { { ['trigger'] = '${4:closeEvent}', ['method'] = '${5:closeEventTrigger}' } } )"
		]
	},
	"insertMenu": {
		"prefix": "insertMenu",
		"body": "table.insert(menu, { ['label'] = '${1:label}', ['action'] = '${2:event}', ['value'] = ${3:value}, ['triggertype'] = '${4:trigger}', ['color'] = '${5:color}' })"
	},
	"formWritting": {
		"prefix": "formWritting",
		"body": "table.insert(form, { ['type'] = 'writting', ['align'] = '${1:align}', ['value'] = '${3:text}' })"
	},
	"formText": {
		"prefix": "formText",
		"body": "table.insert(form, { ['type'] = 'text', ['label'] = '${1:text}', ['name'] = '${2:objectName}' })"
	},
	"formNumber": {
		"prefix": "formNumber",
		"body": "table.insert(form, { ['type'] = 'number', ['label'] = '${1:text}', ['name'] = '${2:objectName}' })"
	},
	"formRange": {
		"prefix": "formRange",
		"body": "table.insert(form, { ['type'] = 'range', ['label'] = '${1:text}', ['default'] = ${2:defaultValue}, ['min'] = ${3:minValue}, ['max'] = ${3:maxValue}, ['suffix'] = '${4:suffix}', ['name'] = '${5:objectName}' })"
	},
	"formCheckbox": {
		"prefix": "formCheckbox",
		"body": "table.insert(form, { ['type'] = 'checkbox', ['label'] = '${1:text}', ['name'] = '${2:objectName}', ['value'] = ${3:checkboxValue} })"
	},
	"formHr": {
		"prefix": "formHr",
		"body": "table.insert(form, { ['type'] = 'hr' })"
	},
	"formYesNo": {
		"prefix": "formYesNo",
		"body": "table.insert(form, { ['type'] = 'yesno', ['success'] = '${1:yesText}', ['reject'] = '${2:noText}' })"
	},
	"formHidden": {
		"prefix": "formHidden",
		"body": "table.insert(form, { ['type'] = 'hidden', ['name'] = '${1:objectName}', ['value'] = ${2:singleValue}, ['data'] = ${3:dataTable} })"
	},
}